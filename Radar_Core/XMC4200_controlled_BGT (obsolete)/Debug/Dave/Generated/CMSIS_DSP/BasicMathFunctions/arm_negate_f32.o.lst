   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_negate_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_negate_f32,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_negate_f32
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_negate_f32:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * Title:		arm_negate_f32.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * Description:	Negates floating-point vectors.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * POSSIBILITY OF SUCH DAMAGE.  
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** * ---------------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**        
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @ingroup groupMath        
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**        
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @defgroup negate Vector Negate        
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *        
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * Negates the elements of a vector.        
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *        
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * <pre>        
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *     pDst[n] = -pSrc[n],   0 <= n < blockSize.        
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * </pre>        
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  *
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * The functions support in-place computation allowing the source and
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * destination pointers to reference the same memory buffer.
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**        
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @addtogroup negate        
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @{        
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /**        
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @brief  Negates the elements of a floating-point vector.        
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @param[in]  *pSrc points to the input vector        
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @param[out]  *pDst points to the output vector        
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @param[in]  blockSize number of samples in the vector        
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  * @return none.        
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****  */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** void arm_negate_f32(
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   float32_t * pSrc,
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   float32_t * pDst,
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   uint32_t blockSize)
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** {
  27              	 .loc 1 78 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 8BB0     	 sub sp,sp,#44
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 48
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 B960     	 str r1,[r7,#8]
  44 000a 7A60     	 str r2,[r7,#4]
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   float32_t in1, in2, in3, in4;                  /* temporary variables */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /*loop Unrolling */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize >> 2u;
  45              	 .loc 1 88 0
  46 000c 7B68     	 ldr r3,[r7,#4]
  47 000e 9B08     	 lsrs r3,r3,#2
  48 0010 7B62     	 str r3,[r7,#36]
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   while(blkCnt > 0u)
  49              	 .loc 1 92 0
  50 0012 33E0     	 b .L2
  51              	.L3:
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* read inputs from source */
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in1 = *pSrc;
  52              	 .loc 1 95 0
  53 0014 FB68     	 ldr r3,[r7,#12]
  54 0016 1B68     	 ldr r3,[r3]
  55 0018 3B62     	 str r3,[r7,#32]
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in2 = *(pSrc + 1);
  56              	 .loc 1 96 0
  57 001a FB68     	 ldr r3,[r7,#12]
  58 001c 5B68     	 ldr r3,[r3,#4]
  59 001e FB61     	 str r3,[r7,#28]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in3 = *(pSrc + 2);
  60              	 .loc 1 97 0
  61 0020 FB68     	 ldr r3,[r7,#12]
  62 0022 9B68     	 ldr r3,[r3,#8]
  63 0024 BB61     	 str r3,[r7,#24]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in4 = *(pSrc + 3);
  64              	 .loc 1 98 0
  65 0026 FB68     	 ldr r3,[r7,#12]
  66 0028 DB68     	 ldr r3,[r3,#12]
  67 002a 7B61     	 str r3,[r7,#20]
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* negate the input */
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in1 = -in1;
  68              	 .loc 1 101 0
  69 002c 3B6A     	 ldr r3,[r7,#32]
  70 002e 83F00043 	 eor r3,r3,#-2147483648
  71 0032 3B62     	 str r3,[r7,#32]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in2 = -in2;
  72              	 .loc 1 102 0
  73 0034 FB69     	 ldr r3,[r7,#28]
  74 0036 83F00043 	 eor r3,r3,#-2147483648
  75 003a FB61     	 str r3,[r7,#28]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in3 = -in3;
  76              	 .loc 1 103 0
  77 003c BB69     	 ldr r3,[r7,#24]
  78 003e 83F00043 	 eor r3,r3,#-2147483648
  79 0042 BB61     	 str r3,[r7,#24]
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     in4 = -in4;
  80              	 .loc 1 104 0
  81 0044 7B69     	 ldr r3,[r7,#20]
  82 0046 83F00043 	 eor r3,r3,#-2147483648
  83 004a 7B61     	 str r3,[r7,#20]
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* store the result to destination */
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *pDst = in1;
  84              	 .loc 1 107 0
  85 004c BB68     	 ldr r3,[r7,#8]
  86 004e 3A6A     	 ldr r2,[r7,#32]
  87 0050 1A60     	 str r2,[r3]
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *(pDst + 1) = in2;
  88              	 .loc 1 108 0
  89 0052 BB68     	 ldr r3,[r7,#8]
  90 0054 0433     	 adds r3,r3,#4
  91 0056 FA69     	 ldr r2,[r7,#28]
  92 0058 1A60     	 str r2,[r3]
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *(pDst + 2) = in3;
  93              	 .loc 1 109 0
  94 005a BB68     	 ldr r3,[r7,#8]
  95 005c 0833     	 adds r3,r3,#8
  96 005e BA69     	 ldr r2,[r7,#24]
  97 0060 1A60     	 str r2,[r3]
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *(pDst + 3) = in4;
  98              	 .loc 1 110 0
  99 0062 BB68     	 ldr r3,[r7,#8]
 100 0064 0C33     	 adds r3,r3,#12
 101 0066 7A69     	 ldr r2,[r7,#20]
 102 0068 1A60     	 str r2,[r3]
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* update pointers to process next samples */
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     pSrc += 4u;
 103              	 .loc 1 113 0
 104 006a FB68     	 ldr r3,[r7,#12]
 105 006c 1033     	 adds r3,r3,#16
 106 006e FB60     	 str r3,[r7,#12]
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     pDst += 4u;
 107              	 .loc 1 114 0
 108 0070 BB68     	 ldr r3,[r7,#8]
 109 0072 1033     	 adds r3,r3,#16
 110 0074 BB60     	 str r3,[r7,#8]
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* Decrement the loop counter */
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     blkCnt--;
 111              	 .loc 1 117 0
 112 0076 7B6A     	 ldr r3,[r7,#36]
 113 0078 013B     	 subs r3,r3,#1
 114 007a 7B62     	 str r3,[r7,#36]
 115              	.L2:
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
 116              	 .loc 1 92 0
 117 007c 7B6A     	 ldr r3,[r7,#36]
 118 007e 002B     	 cmp r3,#0
 119 0080 C8D1     	 bne .L3
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   }
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****    ** No loop unrolling is used. */
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize % 0x4u;
 120              	 .loc 1 122 0
 121 0082 7B68     	 ldr r3,[r7,#4]
 122 0084 03F00303 	 and r3,r3,#3
 123 0088 7B62     	 str r3,[r7,#36]
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #else
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* Run the below code for Cortex-M0 */
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   /* Initialize blkCnt with number of samples */
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   blkCnt = blockSize;
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   while(blkCnt > 0u)
 124              	 .loc 1 133 0
 125 008a 0CE0     	 b .L4
 126              	.L5:
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* C = -A */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* Negate and then store the results in the destination buffer. */
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     *pDst++ = -*pSrc++;
 127              	 .loc 1 137 0
 128 008c BB68     	 ldr r3,[r7,#8]
 129 008e 1A1D     	 adds r2,r3,#4
 130 0090 BA60     	 str r2,[r7,#8]
 131 0092 FA68     	 ldr r2,[r7,#12]
 132 0094 111D     	 adds r1,r2,#4
 133 0096 F960     	 str r1,[r7,#12]
 134 0098 1268     	 ldr r2,[r2]
 135 009a 82F00042 	 eor r2,r2,#-2147483648
 136 009e 1A60     	 str r2,[r3]
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     /* Decrement the loop counter */
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****     blkCnt--;
 137              	 .loc 1 140 0
 138 00a0 7B6A     	 ldr r3,[r7,#36]
 139 00a2 013B     	 subs r3,r3,#1
 140 00a4 7B62     	 str r3,[r7,#36]
 141              	.L4:
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   {
 142              	 .loc 1 133 0
 143 00a6 7B6A     	 ldr r3,[r7,#36]
 144 00a8 002B     	 cmp r3,#0
 145 00aa EFD1     	 bne .L5
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c ****   }
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_negate_f32.c **** }
 146              	 .loc 1 142 0
 147 00ac 2C37     	 adds r7,r7,#44
 148              	.LCFI3:
 149              	 .cfi_def_cfa_offset 4
 150 00ae BD46     	 mov sp,r7
 151              	.LCFI4:
 152              	 .cfi_def_cfa_register 13
 153              	 
 154 00b0 5DF8047B 	 ldr r7,[sp],#4
 155              	.LCFI5:
 156              	 .cfi_restore 7
 157              	 .cfi_def_cfa_offset 0
 158 00b4 7047     	 bx lr
 159              	 .cfi_endproc
 160              	.LFE139:
 162 00b6 00BF     	 .text
 163              	.Letext0:
 164              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 165              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 166              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_negate_f32.c
    {standard input}:19     .text.arm_negate_f32:00000000 $t
    {standard input}:24     .text.arm_negate_f32:00000000 arm_negate_f32
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
