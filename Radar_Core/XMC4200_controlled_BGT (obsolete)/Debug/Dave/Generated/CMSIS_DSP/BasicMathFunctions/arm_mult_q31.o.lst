   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_mult_q31.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_mult_q31,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_mult_q31
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_mult_q31:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * Title:	    arm_mult_q31.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * Description:	Q31 vector multiplication.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * POSSIBILITY OF SUCH DAMAGE. 
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @ingroup groupMath    
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @addtogroup BasicMult    
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @brief Q31 vector multiplication.    
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @param[in]       *pSrcA points to the first input vector    
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @param[in]       *pSrcB points to the second input vector    
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @param[out]      *pDst points to the output vector    
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @param[in]       blockSize number of samples in each vector    
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * @return none.    
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  *    
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * <b>Scaling and Overflow Behavior:</b>    
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * \par    
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * The function uses saturating arithmetic.    
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  * Results outside of the allowable Q31 range[0x80000000 0x7FFFFFFF] will be saturated.    
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****  */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** void arm_mult_q31(
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   q31_t * pSrcA,
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   q31_t * pSrcB,
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   q31_t * pDst,
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   uint32_t blockSize)
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** {
  27              	 .loc 1 71 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 28
  35              	 .cfi_offset 4,-28
  36              	 .cfi_offset 5,-24
  37              	 .cfi_offset 7,-20
  38              	 .cfi_offset 8,-16
  39              	 .cfi_offset 9,-12
  40              	 .cfi_offset 10,-8
  41              	 .cfi_offset 11,-4
  42 0004 A3B0     	 sub sp,sp,#140
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 168
  45 0006 00AF     	 add r7,sp,#0
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 7
  48 0008 7862     	 str r0,[r7,#36]
  49 000a 3962     	 str r1,[r7,#32]
  50 000c FA61     	 str r2,[r7,#28]
  51 000e BB61     	 str r3,[r7,#24]
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   uint32_t blkCnt;                               /* loop counters */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** #ifndef ARM_MATH_CM0_FAMILY
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   q31_t inA1, inA2, inA3, inA4;                  /* temporary input variables */
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   q31_t inB1, inB2, inB3, inB4;                  /* temporary input variables */
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   q31_t out1, out2, out3, out4;                  /* temporary output variables */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   /* loop Unrolling */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize >> 2u;
  52              	 .loc 1 82 0
  53 0010 BB69     	 ldr r3,[r7,#24]
  54 0012 9B08     	 lsrs r3,r3,#2
  55 0014 C7F88430 	 str r3,[r7,#132]
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   while(blkCnt > 0u)
  56              	 .loc 1 86 0
  57 0018 C1E0     	 b .L2
  58              	.L3:
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   {
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* Multiply the inputs and then store the results in the destination buffer. */
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inA1 = *pSrcA++;
  59              	 .loc 1 90 0
  60 001a 7B6A     	 ldr r3,[r7,#36]
  61 001c 1A1D     	 adds r2,r3,#4
  62 001e 7A62     	 str r2,[r7,#36]
  63 0020 1B68     	 ldr r3,[r3]
  64 0022 C7F88030 	 str r3,[r7,#128]
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inA2 = *pSrcA++;
  65              	 .loc 1 91 0
  66 0026 7B6A     	 ldr r3,[r7,#36]
  67 0028 1A1D     	 adds r2,r3,#4
  68 002a 7A62     	 str r2,[r7,#36]
  69 002c 1B68     	 ldr r3,[r3]
  70 002e FB67     	 str r3,[r7,#124]
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inA3 = *pSrcA++;
  71              	 .loc 1 92 0
  72 0030 7B6A     	 ldr r3,[r7,#36]
  73 0032 1A1D     	 adds r2,r3,#4
  74 0034 7A62     	 str r2,[r7,#36]
  75 0036 1B68     	 ldr r3,[r3]
  76 0038 BB67     	 str r3,[r7,#120]
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inA4 = *pSrcA++;
  77              	 .loc 1 93 0
  78 003a 7B6A     	 ldr r3,[r7,#36]
  79 003c 1A1D     	 adds r2,r3,#4
  80 003e 7A62     	 str r2,[r7,#36]
  81 0040 1B68     	 ldr r3,[r3]
  82 0042 7B67     	 str r3,[r7,#116]
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inB1 = *pSrcB++;
  83              	 .loc 1 94 0
  84 0044 3B6A     	 ldr r3,[r7,#32]
  85 0046 1A1D     	 adds r2,r3,#4
  86 0048 3A62     	 str r2,[r7,#32]
  87 004a 1B68     	 ldr r3,[r3]
  88 004c 3B67     	 str r3,[r7,#112]
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inB2 = *pSrcB++;
  89              	 .loc 1 95 0
  90 004e 3B6A     	 ldr r3,[r7,#32]
  91 0050 1A1D     	 adds r2,r3,#4
  92 0052 3A62     	 str r2,[r7,#32]
  93 0054 1B68     	 ldr r3,[r3]
  94 0056 FB66     	 str r3,[r7,#108]
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inB3 = *pSrcB++;
  95              	 .loc 1 96 0
  96 0058 3B6A     	 ldr r3,[r7,#32]
  97 005a 1A1D     	 adds r2,r3,#4
  98 005c 3A62     	 str r2,[r7,#32]
  99 005e 1B68     	 ldr r3,[r3]
 100 0060 BB66     	 str r3,[r7,#104]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inB4 = *pSrcB++;
 101              	 .loc 1 97 0
 102 0062 3B6A     	 ldr r3,[r7,#32]
 103 0064 1A1D     	 adds r2,r3,#4
 104 0066 3A62     	 str r2,[r7,#32]
 105 0068 1B68     	 ldr r3,[r3]
 106 006a 7B66     	 str r3,[r7,#100]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out1 = ((q63_t) inA1 * inB1) >> 32;
 107              	 .loc 1 99 0
 108 006c D7F88030 	 ldr r3,[r7,#128]
 109 0070 1A46     	 mov r2,r3
 110 0072 4FEAE273 	 asr r3,r2,#31
 111 0076 396F     	 ldr r1,[r7,#112]
 112 0078 0846     	 mov r0,r1
 113 007a 4FEAE071 	 asr r1,r0,#31
 114 007e 00FB03F5 	 mul r5,r0,r3
 115 0082 02FB01F4 	 mul r4,r2,r1
 116 0086 2C44     	 add r4,r4,r5
 117 0088 A2FB0023 	 umull r2,r3,r2,r0
 118 008c E118     	 adds r1,r4,r3
 119 008e 0B46     	 mov r3,r1
 120 0090 9A46     	 mov r10,r3
 121 0092 4FEAE37B 	 asr fp,r3,#31
 122 0096 5346     	 mov r3,r10
 123 0098 3B66     	 str r3,[r7,#96]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out2 = ((q63_t) inA2 * inB2) >> 32;
 124              	 .loc 1 100 0
 125 009a FB6F     	 ldr r3,[r7,#124]
 126 009c 1A46     	 mov r2,r3
 127 009e 4FEAE273 	 asr r3,r2,#31
 128 00a2 F96E     	 ldr r1,[r7,#108]
 129 00a4 0846     	 mov r0,r1
 130 00a6 4FEAE071 	 asr r1,r0,#31
 131 00aa 00FB03F5 	 mul r5,r0,r3
 132 00ae 02FB01F4 	 mul r4,r2,r1
 133 00b2 2C44     	 add r4,r4,r5
 134 00b4 A2FB0023 	 umull r2,r3,r2,r0
 135 00b8 E118     	 adds r1,r4,r3
 136 00ba 0B46     	 mov r3,r1
 137 00bc 1900     	 movs r1,r3
 138 00be 3961     	 str r1,[r7,#16]
 139 00c0 DB17     	 asrs r3,r3,#31
 140 00c2 7B61     	 str r3,[r7,#20]
 141 00c4 3B69     	 ldr r3,[r7,#16]
 142 00c6 FB65     	 str r3,[r7,#92]
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out3 = ((q63_t) inA3 * inB3) >> 32;
 143              	 .loc 1 101 0
 144 00c8 BB6F     	 ldr r3,[r7,#120]
 145 00ca 1A46     	 mov r2,r3
 146 00cc 4FEAE273 	 asr r3,r2,#31
 147 00d0 B96E     	 ldr r1,[r7,#104]
 148 00d2 0846     	 mov r0,r1
 149 00d4 4FEAE071 	 asr r1,r0,#31
 150 00d8 00FB03F5 	 mul r5,r0,r3
 151 00dc 02FB01F4 	 mul r4,r2,r1
 152 00e0 2C44     	 add r4,r4,r5
 153 00e2 A2FB0023 	 umull r2,r3,r2,r0
 154 00e6 E118     	 adds r1,r4,r3
 155 00e8 0B46     	 mov r3,r1
 156 00ea 1900     	 movs r1,r3
 157 00ec B960     	 str r1,[r7,#8]
 158 00ee DB17     	 asrs r3,r3,#31
 159 00f0 FB60     	 str r3,[r7,#12]
 160 00f2 BB68     	 ldr r3,[r7,#8]
 161 00f4 BB65     	 str r3,[r7,#88]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out4 = ((q63_t) inA4 * inB4) >> 32;
 162              	 .loc 1 102 0
 163 00f6 7B6F     	 ldr r3,[r7,#116]
 164 00f8 1A46     	 mov r2,r3
 165 00fa 4FEAE273 	 asr r3,r2,#31
 166 00fe 796E     	 ldr r1,[r7,#100]
 167 0100 0846     	 mov r0,r1
 168 0102 4FEAE071 	 asr r1,r0,#31
 169 0106 00FB03F5 	 mul r5,r0,r3
 170 010a 02FB01F4 	 mul r4,r2,r1
 171 010e 2C44     	 add r4,r4,r5
 172 0110 A2FB0023 	 umull r2,r3,r2,r0
 173 0114 E118     	 adds r1,r4,r3
 174 0116 0B46     	 mov r3,r1
 175 0118 1900     	 movs r1,r3
 176 011a 3960     	 str r1,[r7]
 177 011c DB17     	 asrs r3,r3,#31
 178 011e 7B60     	 str r3,[r7,#4]
 179 0120 3B68     	 ldr r3,[r7]
 180 0122 7B65     	 str r3,[r7,#84]
 181              	.LBB2:
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out1 = __SSAT(out1, 31);
 182              	 .loc 1 104 0
 183 0124 3B6E     	 ldr r3,[r7,#96]
 184 0126 3B65     	 str r3,[r7,#80]
 185 0128 3B6D     	 ldr r3,[r7,#80]
 186              	
 187 012a 03F31E03 	 ssat r3,#31,r3
 188              	
 189              	 .thumb
 190 012e FB64     	 str r3,[r7,#76]
 191 0130 FB6C     	 ldr r3,[r7,#76]
 192              	.LBE2:
 193 0132 3B66     	 str r3,[r7,#96]
 194              	.LBB3:
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out2 = __SSAT(out2, 31);
 195              	 .loc 1 105 0
 196 0134 FB6D     	 ldr r3,[r7,#92]
 197 0136 BB64     	 str r3,[r7,#72]
 198 0138 BB6C     	 ldr r3,[r7,#72]
 199              	
 200 013a 03F31E03 	 ssat r3,#31,r3
 201              	
 202              	 .thumb
 203 013e 7B64     	 str r3,[r7,#68]
 204 0140 7B6C     	 ldr r3,[r7,#68]
 205              	.LBE3:
 206 0142 FB65     	 str r3,[r7,#92]
 207              	.LBB4:
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out3 = __SSAT(out3, 31);
 208              	 .loc 1 106 0
 209 0144 BB6D     	 ldr r3,[r7,#88]
 210 0146 3B64     	 str r3,[r7,#64]
 211 0148 3B6C     	 ldr r3,[r7,#64]
 212              	
 213 014a 03F31E03 	 ssat r3,#31,r3
 214              	
 215              	 .thumb
 216 014e FB63     	 str r3,[r7,#60]
 217 0150 FB6B     	 ldr r3,[r7,#60]
 218              	.LBE4:
 219 0152 BB65     	 str r3,[r7,#88]
 220              	.LBB5:
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out4 = __SSAT(out4, 31);
 221              	 .loc 1 107 0
 222 0154 7B6D     	 ldr r3,[r7,#84]
 223 0156 BB63     	 str r3,[r7,#56]
 224 0158 BB6B     	 ldr r3,[r7,#56]
 225              	
 226 015a 03F31E03 	 ssat r3,#31,r3
 227              	
 228              	 .thumb
 229 015e 7B63     	 str r3,[r7,#52]
 230 0160 7B6B     	 ldr r3,[r7,#52]
 231              	.LBE5:
 232 0162 7B65     	 str r3,[r7,#84]
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out1 << 1u;
 233              	 .loc 1 109 0
 234 0164 FB69     	 ldr r3,[r7,#28]
 235 0166 1A1D     	 adds r2,r3,#4
 236 0168 FA61     	 str r2,[r7,#28]
 237 016a 3A6E     	 ldr r2,[r7,#96]
 238 016c 5200     	 lsls r2,r2,#1
 239 016e 1A60     	 str r2,[r3]
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out2 << 1u;
 240              	 .loc 1 110 0
 241 0170 FB69     	 ldr r3,[r7,#28]
 242 0172 1A1D     	 adds r2,r3,#4
 243 0174 FA61     	 str r2,[r7,#28]
 244 0176 FA6D     	 ldr r2,[r7,#92]
 245 0178 5200     	 lsls r2,r2,#1
 246 017a 1A60     	 str r2,[r3]
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out3 << 1u;
 247              	 .loc 1 111 0
 248 017c FB69     	 ldr r3,[r7,#28]
 249 017e 1A1D     	 adds r2,r3,#4
 250 0180 FA61     	 str r2,[r7,#28]
 251 0182 BA6D     	 ldr r2,[r7,#88]
 252 0184 5200     	 lsls r2,r2,#1
 253 0186 1A60     	 str r2,[r3]
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out4 << 1u;
 254              	 .loc 1 112 0
 255 0188 FB69     	 ldr r3,[r7,#28]
 256 018a 1A1D     	 adds r2,r3,#4
 257 018c FA61     	 str r2,[r7,#28]
 258 018e 7A6D     	 ldr r2,[r7,#84]
 259 0190 5200     	 lsls r2,r2,#1
 260 0192 1A60     	 str r2,[r3]
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* Decrement the blockSize loop counter */
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 261              	 .loc 1 115 0
 262 0194 D7F88430 	 ldr r3,[r7,#132]
 263 0198 013B     	 subs r3,r3,#1
 264 019a C7F88430 	 str r3,[r7,#132]
 265              	.L2:
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   {
 266              	 .loc 1 86 0
 267 019e D7F88430 	 ldr r3,[r7,#132]
 268 01a2 002B     	 cmp r3,#0
 269 01a4 7FF439AF 	 bne .L3
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   }
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****    ** No loop unrolling is used. */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize % 0x4u;
 270              	 .loc 1 120 0
 271 01a8 BB69     	 ldr r3,[r7,#24]
 272 01aa 03F00303 	 and r3,r3,#3
 273 01ae C7F88430 	 str r3,[r7,#132]
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   while(blkCnt > 0u)
 274              	 .loc 1 122 0
 275 01b2 34E0     	 b .L4
 276              	.L5:
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   {
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* Multiply the inputs and then store the results in the destination buffer. */
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inA1 = *pSrcA++;
 277              	 .loc 1 126 0
 278 01b4 7B6A     	 ldr r3,[r7,#36]
 279 01b6 1A1D     	 adds r2,r3,#4
 280 01b8 7A62     	 str r2,[r7,#36]
 281 01ba 1B68     	 ldr r3,[r3]
 282 01bc C7F88030 	 str r3,[r7,#128]
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     inB1 = *pSrcB++;
 283              	 .loc 1 127 0
 284 01c0 3B6A     	 ldr r3,[r7,#32]
 285 01c2 1A1D     	 adds r2,r3,#4
 286 01c4 3A62     	 str r2,[r7,#32]
 287 01c6 1B68     	 ldr r3,[r3]
 288 01c8 3B67     	 str r3,[r7,#112]
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out1 = ((q63_t) inA1 * inB1) >> 32;
 289              	 .loc 1 128 0
 290 01ca D7F88030 	 ldr r3,[r7,#128]
 291 01ce 1846     	 mov r0,r3
 292 01d0 4FEAE071 	 asr r1,r0,#31
 293 01d4 3B6F     	 ldr r3,[r7,#112]
 294 01d6 1A46     	 mov r2,r3
 295 01d8 4FEAE273 	 asr r3,r2,#31
 296 01dc 02FB01F5 	 mul r5,r2,r1
 297 01e0 00FB03F4 	 mul r4,r0,r3
 298 01e4 2C44     	 add r4,r4,r5
 299 01e6 A0FB0223 	 umull r2,r3,r0,r2
 300 01ea E118     	 adds r1,r4,r3
 301 01ec 0B46     	 mov r3,r1
 302 01ee 9846     	 mov r8,r3
 303 01f0 4FEAE379 	 asr r9,r3,#31
 304 01f4 4346     	 mov r3,r8
 305 01f6 3B66     	 str r3,[r7,#96]
 306              	.LBB6:
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     out1 = __SSAT(out1, 31);
 307              	 .loc 1 129 0
 308 01f8 3B6E     	 ldr r3,[r7,#96]
 309 01fa 3B63     	 str r3,[r7,#48]
 310 01fc 3B6B     	 ldr r3,[r7,#48]
 311              	
 312 01fe 03F31E03 	 ssat r3,#31,r3
 313              	
 314              	 .thumb
 315 0202 FB62     	 str r3,[r7,#44]
 316 0204 FB6A     	 ldr r3,[r7,#44]
 317              	.LBE6:
 318 0206 3B66     	 str r3,[r7,#96]
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     *pDst++ = out1 << 1u;
 319              	 .loc 1 130 0
 320 0208 FB69     	 ldr r3,[r7,#28]
 321 020a 1A1D     	 adds r2,r3,#4
 322 020c FA61     	 str r2,[r7,#28]
 323 020e 3A6E     	 ldr r2,[r7,#96]
 324 0210 5200     	 lsls r2,r2,#1
 325 0212 1A60     	 str r2,[r3]
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* Decrement the blockSize loop counter */
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 326              	 .loc 1 133 0
 327 0214 D7F88430 	 ldr r3,[r7,#132]
 328 0218 013B     	 subs r3,r3,#1
 329 021a C7F88430 	 str r3,[r7,#132]
 330              	.L4:
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   {
 331              	 .loc 1 122 0
 332 021e D7F88430 	 ldr r3,[r7,#132]
 333 0222 002B     	 cmp r3,#0
 334 0224 C6D1     	 bne .L5
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   }
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** #else
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   /* Run the below code for Cortex-M0 */
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   /* Initialize blkCnt with number of samples */
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   blkCnt = blockSize;
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   while(blkCnt > 0u)
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   {
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* C = A * B */
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* Multiply the inputs and then store the results in the destination buffer. */
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     *pDst++ =
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****       (q31_t) clip_q63_to_q31(((q63_t) (*pSrcA++) * (*pSrcB++)) >> 31);
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** 
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     /* Decrement the blockSize loop counter */
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****     blkCnt--;
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   }
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c ****   
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q31.c **** }
 335              	 .loc 1 156 0
 336 0226 8C37     	 adds r7,r7,#140
 337              	.LCFI3:
 338              	 .cfi_def_cfa_offset 28
 339 0228 BD46     	 mov sp,r7
 340              	.LCFI4:
 341              	 .cfi_def_cfa_register 13
 342              	 
 343 022a BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 344              	.LCFI5:
 345              	 .cfi_restore 11
 346              	 .cfi_restore 10
 347              	 .cfi_restore 9
 348              	 .cfi_restore 8
 349              	 .cfi_restore 7
 350              	 .cfi_restore 5
 351              	 .cfi_restore 4
 352              	 .cfi_def_cfa_offset 0
 353 022e 7047     	 bx lr
 354              	 .cfi_endproc
 355              	.LFE139:
 357              	 .text
 358              	.Letext0:
 359              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 360              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 361              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_q31.c
    {standard input}:19     .text.arm_mult_q31:00000000 $t
    {standard input}:24     .text.arm_mult_q31:00000000 arm_mult_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
