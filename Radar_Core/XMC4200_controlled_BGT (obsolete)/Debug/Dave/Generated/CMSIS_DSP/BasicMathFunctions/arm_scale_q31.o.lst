   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_scale_q31.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_scale_q31,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_scale_q31
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_scale_q31:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * Title:		arm_scale_q31.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * Description:	Multiplies a Q31 vector by a scalar.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * POSSIBILITY OF SUCH DAMAGE.   
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /**       
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @ingroup groupMath       
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /**       
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @addtogroup scale       
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @{       
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /**       
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @brief Multiplies a Q31 vector by a scalar.       
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       *pSrc points to the input vector       
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       scaleFract fractional portion of the scale value       
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       shift number of bits to shift the result by       
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[out]      *pDst points to the output vector       
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @param[in]       blockSize number of samples in the vector       
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * @return none.       
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  *       
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * <b>Scaling and Overflow Behavior:</b>       
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * \par       
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.31 format.       
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  * These are multiplied to yield a 2.62 intermediate result and this is shifted with saturation to 
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****  */
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** void arm_scale_q31(
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t * pSrc,
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t scaleFract,
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t shift,
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t * pDst,
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   uint32_t blockSize)
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** {
  27              	 .loc 1 73 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 28
  35              	 .cfi_offset 4,-28
  36              	 .cfi_offset 5,-24
  37              	 .cfi_offset 7,-20
  38              	 .cfi_offset 8,-16
  39              	 .cfi_offset 9,-12
  40              	 .cfi_offset 10,-8
  41              	 .cfi_offset 11,-4
  42 0004 A1B0     	 sub sp,sp,#132
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 160
  45 0006 00AF     	 add r7,sp,#0
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 7
  48 0008 F864     	 str r0,[r7,#76]
  49 000a B964     	 str r1,[r7,#72]
  50 000c 3B64     	 str r3,[r7,#64]
  51 000e 1346     	 mov r3,r2
  52 0010 87F84730 	 strb r3,[r7,#71]
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t kShift = shift + 1;                     /* Shift to apply after scaling */
  53              	 .loc 1 74 0
  54 0014 97F84730 	 ldrb r3,[r7,#71]
  55 0018 0133     	 adds r3,r3,#1
  56 001a DBB2     	 uxtb r3,r3
  57 001c 87F86730 	 strb r3,[r7,#103]
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   int8_t sign = (kShift & 0x80);
  58              	 .loc 1 75 0
  59 0020 97F86730 	 ldrb r3,[r7,#103]
  60 0024 23F07F03 	 bic r3,r3,#127
  61 0028 87F86630 	 strb r3,[r7,#102]
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t in, out;
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #ifndef ARM_MATH_CM0_FAMILY
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t in1, in2, in3, in4;                      /* temporary input variables */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   q31_t out1, out2, out3, out4;                  /* temporary output variabels */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /*loop Unrolling */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize >> 2u;
  62              	 .loc 1 88 0
  63 002c D7F8A030 	 ldr r3,[r7,#160]
  64 0030 9B08     	 lsrs r3,r3,#2
  65 0032 FB67     	 str r3,[r7,#124]
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   if(sign == 0u)
  66              	 .loc 1 90 0
  67 0034 97F96630 	 ldrsb r3,[r7,#102]
  68 0038 002B     	 cmp r3,#0
  69 003a 40F0D280 	 bne .L2
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     while(blkCnt > 0u)
  70              	 .loc 1 94 0
  71 003e CBE0     	 b .L3
  72              	.L8:
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* read four inputs from source */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = *pSrc;
  73              	 .loc 1 97 0
  74 0040 FB6C     	 ldr r3,[r7,#76]
  75 0042 1B68     	 ldr r3,[r3]
  76 0044 3B66     	 str r3,[r7,#96]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = *(pSrc + 1);
  77              	 .loc 1 98 0
  78 0046 FB6C     	 ldr r3,[r7,#76]
  79 0048 5B68     	 ldr r3,[r3,#4]
  80 004a FB65     	 str r3,[r7,#92]
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = *(pSrc + 2);
  81              	 .loc 1 99 0
  82 004c FB6C     	 ldr r3,[r7,#76]
  83 004e 9B68     	 ldr r3,[r3,#8]
  84 0050 BB65     	 str r3,[r7,#88]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = *(pSrc + 3);
  85              	 .loc 1 100 0
  86 0052 FB6C     	 ldr r3,[r7,#76]
  87 0054 DB68     	 ldr r3,[r3,#12]
  88 0056 7B65     	 str r3,[r7,#84]
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* multiply input with scaler value */
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = ((q63_t) in1 * scaleFract) >> 32;
  89              	 .loc 1 103 0
  90 0058 3B6E     	 ldr r3,[r7,#96]
  91 005a 1846     	 mov r0,r3
  92 005c 4FEAE071 	 asr r1,r0,#31
  93 0060 BB6C     	 ldr r3,[r7,#72]
  94 0062 1A46     	 mov r2,r3
  95 0064 4FEAE273 	 asr r3,r2,#31
  96 0068 02FB01F5 	 mul r5,r2,r1
  97 006c 00FB03F4 	 mul r4,r0,r3
  98 0070 2C44     	 add r4,r4,r5
  99 0072 A0FB0223 	 umull r2,r3,r0,r2
 100 0076 E118     	 adds r1,r4,r3
 101 0078 0B46     	 mov r3,r1
 102 007a 1900     	 movs r1,r3
 103 007c B963     	 str r1,[r7,#56]
 104 007e DB17     	 asrs r3,r3,#31
 105 0080 FB63     	 str r3,[r7,#60]
 106 0082 BB6B     	 ldr r3,[r7,#56]
 107 0084 3B66     	 str r3,[r7,#96]
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = ((q63_t) in2 * scaleFract) >> 32;
 108              	 .loc 1 104 0
 109 0086 FB6D     	 ldr r3,[r7,#92]
 110 0088 1846     	 mov r0,r3
 111 008a 4FEAE071 	 asr r1,r0,#31
 112 008e BB6C     	 ldr r3,[r7,#72]
 113 0090 1A46     	 mov r2,r3
 114 0092 4FEAE273 	 asr r3,r2,#31
 115 0096 02FB01F5 	 mul r5,r2,r1
 116 009a 00FB03F4 	 mul r4,r0,r3
 117 009e 2C44     	 add r4,r4,r5
 118 00a0 A0FB0223 	 umull r2,r3,r0,r2
 119 00a4 E118     	 adds r1,r4,r3
 120 00a6 0B46     	 mov r3,r1
 121 00a8 1900     	 movs r1,r3
 122 00aa 3963     	 str r1,[r7,#48]
 123 00ac DB17     	 asrs r3,r3,#31
 124 00ae 7B63     	 str r3,[r7,#52]
 125 00b0 3B6B     	 ldr r3,[r7,#48]
 126 00b2 FB65     	 str r3,[r7,#92]
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = ((q63_t) in3 * scaleFract) >> 32;
 127              	 .loc 1 105 0
 128 00b4 BB6D     	 ldr r3,[r7,#88]
 129 00b6 1846     	 mov r0,r3
 130 00b8 4FEAE071 	 asr r1,r0,#31
 131 00bc BB6C     	 ldr r3,[r7,#72]
 132 00be 1A46     	 mov r2,r3
 133 00c0 4FEAE273 	 asr r3,r2,#31
 134 00c4 02FB01F5 	 mul r5,r2,r1
 135 00c8 00FB03F4 	 mul r4,r0,r3
 136 00cc 2C44     	 add r4,r4,r5
 137 00ce A0FB0223 	 umull r2,r3,r0,r2
 138 00d2 E118     	 adds r1,r4,r3
 139 00d4 0B46     	 mov r3,r1
 140 00d6 1900     	 movs r1,r3
 141 00d8 B962     	 str r1,[r7,#40]
 142 00da DB17     	 asrs r3,r3,#31
 143 00dc FB62     	 str r3,[r7,#44]
 144 00de BB6A     	 ldr r3,[r7,#40]
 145 00e0 BB65     	 str r3,[r7,#88]
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = ((q63_t) in4 * scaleFract) >> 32;
 146              	 .loc 1 106 0
 147 00e2 7B6D     	 ldr r3,[r7,#84]
 148 00e4 1846     	 mov r0,r3
 149 00e6 4FEAE071 	 asr r1,r0,#31
 150 00ea BB6C     	 ldr r3,[r7,#72]
 151 00ec 1A46     	 mov r2,r3
 152 00ee 4FEAE273 	 asr r3,r2,#31
 153 00f2 02FB01F5 	 mul r5,r2,r1
 154 00f6 00FB03F4 	 mul r4,r0,r3
 155 00fa 2C44     	 add r4,r4,r5
 156 00fc A0FB0223 	 umull r2,r3,r0,r2
 157 0100 E118     	 adds r1,r4,r3
 158 0102 0B46     	 mov r3,r1
 159 0104 1900     	 movs r1,r3
 160 0106 3962     	 str r1,[r7,#32]
 161 0108 DB17     	 asrs r3,r3,#31
 162 010a 7B62     	 str r3,[r7,#36]
 163 010c 3B6A     	 ldr r3,[r7,#32]
 164 010e 7B65     	 str r3,[r7,#84]
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* apply shifting */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out1 = in1 << kShift;
 165              	 .loc 1 109 0
 166 0110 97F96730 	 ldrsb r3,[r7,#103]
 167 0114 3A6E     	 ldr r2,[r7,#96]
 168 0116 02FA03F3 	 lsl r3,r2,r3
 169 011a 7B67     	 str r3,[r7,#116]
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out2 = in2 << kShift;
 170              	 .loc 1 110 0
 171 011c 97F96730 	 ldrsb r3,[r7,#103]
 172 0120 FA6D     	 ldr r2,[r7,#92]
 173 0122 02FA03F3 	 lsl r3,r2,r3
 174 0126 3B67     	 str r3,[r7,#112]
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* saturate the results. */
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if(in1 != (out1 >> kShift))
 175              	 .loc 1 113 0
 176 0128 97F96730 	 ldrsb r3,[r7,#103]
 177 012c 7A6F     	 ldr r2,[r7,#116]
 178 012e 1A41     	 asrs r2,r2,r3
 179 0130 3B6E     	 ldr r3,[r7,#96]
 180 0132 9A42     	 cmp r2,r3
 181 0134 05D0     	 beq .L4
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out1 = 0x7FFFFFFF ^ (in1 >> 31);
 182              	 .loc 1 114 0
 183 0136 3B6E     	 ldr r3,[r7,#96]
 184 0138 DB17     	 asrs r3,r3,#31
 185 013a 83F00043 	 eor r3,r3,#-2147483648
 186 013e DB43     	 mvns r3,r3
 187 0140 7B67     	 str r3,[r7,#116]
 188              	.L4:
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if(in2 != (out2 >> kShift))
 189              	 .loc 1 116 0
 190 0142 97F96730 	 ldrsb r3,[r7,#103]
 191 0146 3A6F     	 ldr r2,[r7,#112]
 192 0148 1A41     	 asrs r2,r2,r3
 193 014a FB6D     	 ldr r3,[r7,#92]
 194 014c 9A42     	 cmp r2,r3
 195 014e 05D0     	 beq .L5
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out2 = 0x7FFFFFFF ^ (in2 >> 31);
 196              	 .loc 1 117 0
 197 0150 FB6D     	 ldr r3,[r7,#92]
 198 0152 DB17     	 asrs r3,r3,#31
 199 0154 83F00043 	 eor r3,r3,#-2147483648
 200 0158 DB43     	 mvns r3,r3
 201 015a 3B67     	 str r3,[r7,#112]
 202              	.L5:
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out3 = in3 << kShift;
 203              	 .loc 1 119 0
 204 015c 97F96730 	 ldrsb r3,[r7,#103]
 205 0160 BA6D     	 ldr r2,[r7,#88]
 206 0162 02FA03F3 	 lsl r3,r2,r3
 207 0166 FB66     	 str r3,[r7,#108]
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out4 = in4 << kShift;
 208              	 .loc 1 120 0
 209 0168 97F96730 	 ldrsb r3,[r7,#103]
 210 016c 7A6D     	 ldr r2,[r7,#84]
 211 016e 02FA03F3 	 lsl r3,r2,r3
 212 0172 BB66     	 str r3,[r7,#104]
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *pDst = out1;
 213              	 .loc 1 122 0
 214 0174 3B6C     	 ldr r3,[r7,#64]
 215 0176 7A6F     	 ldr r2,[r7,#116]
 216 0178 1A60     	 str r2,[r3]
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 1) = out2;
 217              	 .loc 1 123 0
 218 017a 3B6C     	 ldr r3,[r7,#64]
 219 017c 0433     	 adds r3,r3,#4
 220 017e 3A6F     	 ldr r2,[r7,#112]
 221 0180 1A60     	 str r2,[r3]
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if(in3 != (out3 >> kShift))
 222              	 .loc 1 125 0
 223 0182 97F96730 	 ldrsb r3,[r7,#103]
 224 0186 FA6E     	 ldr r2,[r7,#108]
 225 0188 1A41     	 asrs r2,r2,r3
 226 018a BB6D     	 ldr r3,[r7,#88]
 227 018c 9A42     	 cmp r2,r3
 228 018e 05D0     	 beq .L6
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out3 = 0x7FFFFFFF ^ (in3 >> 31);
 229              	 .loc 1 126 0
 230 0190 BB6D     	 ldr r3,[r7,#88]
 231 0192 DB17     	 asrs r3,r3,#31
 232 0194 83F00043 	 eor r3,r3,#-2147483648
 233 0198 DB43     	 mvns r3,r3
 234 019a FB66     	 str r3,[r7,#108]
 235              	.L6:
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       if(in4 != (out4 >> kShift))
 236              	 .loc 1 128 0
 237 019c 97F96730 	 ldrsb r3,[r7,#103]
 238 01a0 BA6E     	 ldr r2,[r7,#104]
 239 01a2 1A41     	 asrs r2,r2,r3
 240 01a4 7B6D     	 ldr r3,[r7,#84]
 241 01a6 9A42     	 cmp r2,r3
 242 01a8 05D0     	 beq .L7
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****         out4 = 0x7FFFFFFF ^ (in4 >> 31);
 243              	 .loc 1 129 0
 244 01aa 7B6D     	 ldr r3,[r7,#84]
 245 01ac DB17     	 asrs r3,r3,#31
 246 01ae 83F00043 	 eor r3,r3,#-2147483648
 247 01b2 DB43     	 mvns r3,r3
 248 01b4 BB66     	 str r3,[r7,#104]
 249              	.L7:
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Store result destination */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 2) = out3;
 250              	 .loc 1 132 0
 251 01b6 3B6C     	 ldr r3,[r7,#64]
 252 01b8 0833     	 adds r3,r3,#8
 253 01ba FA6E     	 ldr r2,[r7,#108]
 254 01bc 1A60     	 str r2,[r3]
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 3) = out4;
 255              	 .loc 1 133 0
 256 01be 3B6C     	 ldr r3,[r7,#64]
 257 01c0 0C33     	 adds r3,r3,#12
 258 01c2 BA6E     	 ldr r2,[r7,#104]
 259 01c4 1A60     	 str r2,[r3]
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Update pointers to process next sampels */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pSrc += 4u;
 260              	 .loc 1 136 0
 261 01c6 FB6C     	 ldr r3,[r7,#76]
 262 01c8 1033     	 adds r3,r3,#16
 263 01ca FB64     	 str r3,[r7,#76]
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pDst += 4u;
 264              	 .loc 1 137 0
 265 01cc 3B6C     	 ldr r3,[r7,#64]
 266 01ce 1033     	 adds r3,r3,#16
 267 01d0 3B64     	 str r3,[r7,#64]
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement the loop counter */
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 268              	 .loc 1 140 0
 269 01d2 FB6F     	 ldr r3,[r7,#124]
 270 01d4 013B     	 subs r3,r3,#1
 271 01d6 FB67     	 str r3,[r7,#124]
 272              	.L3:
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 273              	 .loc 1 94 0
 274 01d8 FB6F     	 ldr r3,[r7,#124]
 275 01da 002B     	 cmp r3,#0
 276 01dc 7FF430AF 	 bne .L8
 277 01e0 9EE0     	 b .L9
 278              	.L2:
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     }
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   else
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.       
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     while(blkCnt > 0u)
 279              	 .loc 1 148 0
 280 01e2 99E0     	 b .L10
 281              	.L11:
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* read four inputs from source */
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = *pSrc;
 282              	 .loc 1 151 0
 283 01e4 FB6C     	 ldr r3,[r7,#76]
 284 01e6 1B68     	 ldr r3,[r3]
 285 01e8 3B66     	 str r3,[r7,#96]
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = *(pSrc + 1);
 286              	 .loc 1 152 0
 287 01ea FB6C     	 ldr r3,[r7,#76]
 288 01ec 5B68     	 ldr r3,[r3,#4]
 289 01ee FB65     	 str r3,[r7,#92]
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = *(pSrc + 2);
 290              	 .loc 1 153 0
 291 01f0 FB6C     	 ldr r3,[r7,#76]
 292 01f2 9B68     	 ldr r3,[r3,#8]
 293 01f4 BB65     	 str r3,[r7,#88]
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = *(pSrc + 3);
 294              	 .loc 1 154 0
 295 01f6 FB6C     	 ldr r3,[r7,#76]
 296 01f8 DB68     	 ldr r3,[r3,#12]
 297 01fa 7B65     	 str r3,[r7,#84]
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* multiply input with scaler value */
 157:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in1 = ((q63_t) in1 * scaleFract) >> 32;
 298              	 .loc 1 157 0
 299 01fc 3B6E     	 ldr r3,[r7,#96]
 300 01fe 1846     	 mov r0,r3
 301 0200 4FEAE071 	 asr r1,r0,#31
 302 0204 BB6C     	 ldr r3,[r7,#72]
 303 0206 1A46     	 mov r2,r3
 304 0208 4FEAE273 	 asr r3,r2,#31
 305 020c 02FB01F5 	 mul r5,r2,r1
 306 0210 00FB03F4 	 mul r4,r0,r3
 307 0214 2C44     	 add r4,r4,r5
 308 0216 A0FB0223 	 umull r2,r3,r0,r2
 309 021a E118     	 adds r1,r4,r3
 310 021c 0B46     	 mov r3,r1
 311 021e 9846     	 mov r8,r3
 312 0220 4FEAE379 	 asr r9,r3,#31
 313 0224 4346     	 mov r3,r8
 314 0226 3B66     	 str r3,[r7,#96]
 158:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in2 = ((q63_t) in2 * scaleFract) >> 32;
 315              	 .loc 1 158 0
 316 0228 FB6D     	 ldr r3,[r7,#92]
 317 022a 1846     	 mov r0,r3
 318 022c 4FEAE071 	 asr r1,r0,#31
 319 0230 BB6C     	 ldr r3,[r7,#72]
 320 0232 1A46     	 mov r2,r3
 321 0234 4FEAE273 	 asr r3,r2,#31
 322 0238 02FB01F5 	 mul r5,r2,r1
 323 023c 00FB03F4 	 mul r4,r0,r3
 324 0240 2C44     	 add r4,r4,r5
 325 0242 A0FB0223 	 umull r2,r3,r0,r2
 326 0246 E118     	 adds r1,r4,r3
 327 0248 0B46     	 mov r3,r1
 328 024a 9A46     	 mov r10,r3
 329 024c 4FEAE37B 	 asr fp,r3,#31
 330 0250 5346     	 mov r3,r10
 331 0252 FB65     	 str r3,[r7,#92]
 159:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in3 = ((q63_t) in3 * scaleFract) >> 32;
 332              	 .loc 1 159 0
 333 0254 BB6D     	 ldr r3,[r7,#88]
 334 0256 1846     	 mov r0,r3
 335 0258 4FEAE071 	 asr r1,r0,#31
 336 025c BB6C     	 ldr r3,[r7,#72]
 337 025e 1A46     	 mov r2,r3
 338 0260 4FEAE273 	 asr r3,r2,#31
 339 0264 02FB01F5 	 mul r5,r2,r1
 340 0268 00FB03F4 	 mul r4,r0,r3
 341 026c 2C44     	 add r4,r4,r5
 342 026e A0FB0223 	 umull r2,r3,r0,r2
 343 0272 E118     	 adds r1,r4,r3
 344 0274 0B46     	 mov r3,r1
 345 0276 1900     	 movs r1,r3
 346 0278 B961     	 str r1,[r7,#24]
 347 027a DB17     	 asrs r3,r3,#31
 348 027c FB61     	 str r3,[r7,#28]
 349 027e BB69     	 ldr r3,[r7,#24]
 350 0280 BB65     	 str r3,[r7,#88]
 160:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       in4 = ((q63_t) in4 * scaleFract) >> 32;
 351              	 .loc 1 160 0
 352 0282 7B6D     	 ldr r3,[r7,#84]
 353 0284 1846     	 mov r0,r3
 354 0286 4FEAE071 	 asr r1,r0,#31
 355 028a BB6C     	 ldr r3,[r7,#72]
 356 028c 1A46     	 mov r2,r3
 357 028e 4FEAE273 	 asr r3,r2,#31
 358 0292 02FB01F5 	 mul r5,r2,r1
 359 0296 00FB03F4 	 mul r4,r0,r3
 360 029a 2C44     	 add r4,r4,r5
 361 029c A0FB0223 	 umull r2,r3,r0,r2
 362 02a0 E118     	 adds r1,r4,r3
 363 02a2 0B46     	 mov r3,r1
 364 02a4 1900     	 movs r1,r3
 365 02a6 3961     	 str r1,[r7,#16]
 366 02a8 DB17     	 asrs r3,r3,#31
 367 02aa 7B61     	 str r3,[r7,#20]
 368 02ac 3B69     	 ldr r3,[r7,#16]
 369 02ae 7B65     	 str r3,[r7,#84]
 161:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 162:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* apply shifting */
 163:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out1 = in1 >> -kShift;
 370              	 .loc 1 163 0
 371 02b0 97F96730 	 ldrsb r3,[r7,#103]
 372 02b4 5B42     	 negs r3,r3
 373 02b6 3A6E     	 ldr r2,[r7,#96]
 374 02b8 42FA03F3 	 asr r3,r2,r3
 375 02bc 7B67     	 str r3,[r7,#116]
 164:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out2 = in2 >> -kShift;
 376              	 .loc 1 164 0
 377 02be 97F96730 	 ldrsb r3,[r7,#103]
 378 02c2 5B42     	 negs r3,r3
 379 02c4 FA6D     	 ldr r2,[r7,#92]
 380 02c6 42FA03F3 	 asr r3,r2,r3
 381 02ca 3B67     	 str r3,[r7,#112]
 165:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 166:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out3 = in3 >> -kShift;
 382              	 .loc 1 166 0
 383 02cc 97F96730 	 ldrsb r3,[r7,#103]
 384 02d0 5B42     	 negs r3,r3
 385 02d2 BA6D     	 ldr r2,[r7,#88]
 386 02d4 42FA03F3 	 asr r3,r2,r3
 387 02d8 FB66     	 str r3,[r7,#108]
 167:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       out4 = in4 >> -kShift;
 388              	 .loc 1 167 0
 389 02da 97F96730 	 ldrsb r3,[r7,#103]
 390 02de 5B42     	 negs r3,r3
 391 02e0 7A6D     	 ldr r2,[r7,#84]
 392 02e2 42FA03F3 	 asr r3,r2,r3
 393 02e6 BB66     	 str r3,[r7,#104]
 168:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 169:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Store result destination */
 170:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *pDst = out1;
 394              	 .loc 1 170 0
 395 02e8 3B6C     	 ldr r3,[r7,#64]
 396 02ea 7A6F     	 ldr r2,[r7,#116]
 397 02ec 1A60     	 str r2,[r3]
 171:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 1) = out2;
 398              	 .loc 1 171 0
 399 02ee 3B6C     	 ldr r3,[r7,#64]
 400 02f0 0433     	 adds r3,r3,#4
 401 02f2 3A6F     	 ldr r2,[r7,#112]
 402 02f4 1A60     	 str r2,[r3]
 172:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 173:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 2) = out3;
 403              	 .loc 1 173 0
 404 02f6 3B6C     	 ldr r3,[r7,#64]
 405 02f8 0833     	 adds r3,r3,#8
 406 02fa FA6E     	 ldr r2,[r7,#108]
 407 02fc 1A60     	 str r2,[r3]
 174:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       *(pDst + 3) = out4;
 408              	 .loc 1 174 0
 409 02fe 3B6C     	 ldr r3,[r7,#64]
 410 0300 0C33     	 adds r3,r3,#12
 411 0302 BA6E     	 ldr r2,[r7,#104]
 412 0304 1A60     	 str r2,[r3]
 175:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 176:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Update pointers to process next sampels */
 177:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pSrc += 4u;
 413              	 .loc 1 177 0
 414 0306 FB6C     	 ldr r3,[r7,#76]
 415 0308 1033     	 adds r3,r3,#16
 416 030a FB64     	 str r3,[r7,#76]
 178:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       pDst += 4u;
 417              	 .loc 1 178 0
 418 030c 3B6C     	 ldr r3,[r7,#64]
 419 030e 1033     	 adds r3,r3,#16
 420 0310 3B64     	 str r3,[r7,#64]
 179:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 180:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       /* Decrement the loop counter */
 181:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****       blkCnt--;
 421              	 .loc 1 181 0
 422 0312 FB6F     	 ldr r3,[r7,#124]
 423 0314 013B     	 subs r3,r3,#1
 424 0316 FB67     	 str r3,[r7,#124]
 425              	.L10:
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     {
 426              	 .loc 1 148 0
 427 0318 FB6F     	 ldr r3,[r7,#124]
 428 031a 002B     	 cmp r3,#0
 429 031c 7FF462AF 	 bne .L11
 430              	.L9:
 182:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****     }
 183:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 184:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.       
 185:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****    ** No loop unrolling is used. */
 186:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize % 0x4u;
 431              	 .loc 1 186 0
 432 0320 D7F8A030 	 ldr r3,[r7,#160]
 433 0324 03F00303 	 and r3,r3,#3
 434 0328 FB67     	 str r3,[r7,#124]
 187:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 188:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #else
 189:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 190:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /* Run the below code for Cortex-M0 */
 191:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 192:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   /* Initialize blkCnt with number of samples */
 193:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   blkCnt = blockSize;
 194:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 195:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 196:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 197:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   if(sign == 0)
 435              	 .loc 1 197 0
 436 032a 97F96630 	 ldrsb r3,[r7,#102]
 437 032e 002B     	 cmp r3,#0
 438 0330 3BD1     	 bne .L12
 198:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
 199:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  while(blkCnt > 0u)
 439              	 .loc 1 199 0
 440 0332 36E0     	 b .L13
 441              	.L15:
 200:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 201:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* C = A * scale */
 202:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Scale the input and then store the result in the destination buffer. */
 203:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = *pSrc++;
 442              	 .loc 1 203 0
 443 0334 FB6C     	 ldr r3,[r7,#76]
 444 0336 1A1D     	 adds r2,r3,#4
 445 0338 FA64     	 str r2,[r7,#76]
 446 033a 1B68     	 ldr r3,[r3]
 447 033c 3B65     	 str r3,[r7,#80]
 204:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = ((q63_t) in * scaleFract) >> 32;
 448              	 .loc 1 204 0
 449 033e 3B6D     	 ldr r3,[r7,#80]
 450 0340 1846     	 mov r0,r3
 451 0342 4FEAE071 	 asr r1,r0,#31
 452 0346 BB6C     	 ldr r3,[r7,#72]
 453 0348 1A46     	 mov r2,r3
 454 034a 4FEAE273 	 asr r3,r2,#31
 455 034e 02FB01F5 	 mul r5,r2,r1
 456 0352 00FB03F4 	 mul r4,r0,r3
 457 0356 2C44     	 add r4,r4,r5
 458 0358 A0FB0223 	 umull r2,r3,r0,r2
 459 035c E118     	 adds r1,r4,r3
 460 035e 0B46     	 mov r3,r1
 461 0360 1900     	 movs r1,r3
 462 0362 B960     	 str r1,[r7,#8]
 463 0364 DB17     	 asrs r3,r3,#31
 464 0366 FB60     	 str r3,[r7,#12]
 465 0368 BB68     	 ldr r3,[r7,#8]
 466 036a 3B65     	 str r3,[r7,#80]
 205:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 206:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		out = in << kShift;
 467              	 .loc 1 206 0
 468 036c 97F96730 	 ldrsb r3,[r7,#103]
 469 0370 3A6D     	 ldr r2,[r7,#80]
 470 0372 02FA03F3 	 lsl r3,r2,r3
 471 0376 BB67     	 str r3,[r7,#120]
 207:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		
 208:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		if(in != (out >> kShift))
 472              	 .loc 1 208 0
 473 0378 97F96730 	 ldrsb r3,[r7,#103]
 474 037c BA6F     	 ldr r2,[r7,#120]
 475 037e 1A41     	 asrs r2,r2,r3
 476 0380 3B6D     	 ldr r3,[r7,#80]
 477 0382 9A42     	 cmp r2,r3
 478 0384 05D0     	 beq .L14
 209:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 			out = 0x7FFFFFFF ^ (in >> 31);
 479              	 .loc 1 209 0
 480 0386 3B6D     	 ldr r3,[r7,#80]
 481 0388 DB17     	 asrs r3,r3,#31
 482 038a 83F00043 	 eor r3,r3,#-2147483648
 483 038e DB43     	 mvns r3,r3
 484 0390 BB67     	 str r3,[r7,#120]
 485              	.L14:
 210:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 211:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		*pDst++ = out;
 486              	 .loc 1 211 0
 487 0392 3B6C     	 ldr r3,[r7,#64]
 488 0394 1A1D     	 adds r2,r3,#4
 489 0396 3A64     	 str r2,[r7,#64]
 490 0398 BA6F     	 ldr r2,[r7,#120]
 491 039a 1A60     	 str r2,[r3]
 212:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 213:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Decrement the loop counter */
 214:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		blkCnt--;
 492              	 .loc 1 214 0
 493 039c FB6F     	 ldr r3,[r7,#124]
 494 039e 013B     	 subs r3,r3,#1
 495 03a0 FB67     	 str r3,[r7,#124]
 496              	.L13:
 199:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 497              	 .loc 1 199 0
 498 03a2 FB6F     	 ldr r3,[r7,#124]
 499 03a4 002B     	 cmp r3,#0
 500 03a6 C5D1     	 bne .L15
 501 03a8 2EE0     	 b .L1
 502              	.L12:
 215:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  }
 216:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 217:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   else
 218:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   {
 219:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  while(blkCnt > 0u)
 503              	 .loc 1 219 0
 504 03aa 2AE0     	 b .L17
 505              	.L18:
 220:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 221:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* C = A * scale */
 222:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Scale the input and then store the result in the destination buffer. */
 223:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = *pSrc++;
 506              	 .loc 1 223 0
 507 03ac FB6C     	 ldr r3,[r7,#76]
 508 03ae 1A1D     	 adds r2,r3,#4
 509 03b0 FA64     	 str r2,[r7,#76]
 510 03b2 1B68     	 ldr r3,[r3]
 511 03b4 3B65     	 str r3,[r7,#80]
 224:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		in = ((q63_t) in * scaleFract) >> 32;
 512              	 .loc 1 224 0
 513 03b6 3B6D     	 ldr r3,[r7,#80]
 514 03b8 1846     	 mov r0,r3
 515 03ba 4FEAE071 	 asr r1,r0,#31
 516 03be BB6C     	 ldr r3,[r7,#72]
 517 03c0 1A46     	 mov r2,r3
 518 03c2 4FEAE273 	 asr r3,r2,#31
 519 03c6 02FB01F5 	 mul r5,r2,r1
 520 03ca 00FB03F4 	 mul r4,r0,r3
 521 03ce 2C44     	 add r4,r4,r5
 522 03d0 A0FB0223 	 umull r2,r3,r0,r2
 523 03d4 E118     	 adds r1,r4,r3
 524 03d6 0B46     	 mov r3,r1
 525 03d8 1900     	 movs r1,r3
 526 03da 3960     	 str r1,[r7]
 527 03dc DB17     	 asrs r3,r3,#31
 528 03de 7B60     	 str r3,[r7,#4]
 529 03e0 3B68     	 ldr r3,[r7]
 530 03e2 3B65     	 str r3,[r7,#80]
 225:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 226:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		out = in >> -kShift;
 531              	 .loc 1 226 0
 532 03e4 97F96730 	 ldrsb r3,[r7,#103]
 533 03e8 5B42     	 negs r3,r3
 534 03ea 3A6D     	 ldr r2,[r7,#80]
 535 03ec 42FA03F3 	 asr r3,r2,r3
 536 03f0 BB67     	 str r3,[r7,#120]
 227:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 228:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		*pDst++ = out;
 537              	 .loc 1 228 0
 538 03f2 3B6C     	 ldr r3,[r7,#64]
 539 03f4 1A1D     	 adds r2,r3,#4
 540 03f6 3A64     	 str r2,[r7,#64]
 541 03f8 BA6F     	 ldr r2,[r7,#120]
 542 03fa 1A60     	 str r2,[r3]
 229:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 
 230:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		/* Decrement the loop counter */
 231:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 		blkCnt--;
 543              	 .loc 1 231 0
 544 03fc FB6F     	 ldr r3,[r7,#124]
 545 03fe 013B     	 subs r3,r3,#1
 546 0400 FB67     	 str r3,[r7,#124]
 547              	.L17:
 219:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  {
 548              	 .loc 1 219 0
 549 0402 FB6F     	 ldr r3,[r7,#124]
 550 0404 002B     	 cmp r3,#0
 551 0406 D1D1     	 bne .L18
 552              	.L1:
 232:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** 	  }
 233:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   
 234:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c ****   }
 235:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_scale_q31.c **** }
 553              	 .loc 1 235 0
 554 0408 8437     	 adds r7,r7,#132
 555              	.LCFI3:
 556              	 .cfi_def_cfa_offset 28
 557 040a BD46     	 mov sp,r7
 558              	.LCFI4:
 559              	 .cfi_def_cfa_register 13
 560              	 
 561 040c BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 562              	.LCFI5:
 563              	 .cfi_restore 11
 564              	 .cfi_restore 10
 565              	 .cfi_restore 9
 566              	 .cfi_restore 8
 567              	 .cfi_restore 7
 568              	 .cfi_restore 5
 569              	 .cfi_restore 4
 570              	 .cfi_def_cfa_offset 0
 571 0410 7047     	 bx lr
 572              	 .cfi_endproc
 573              	.LFE139:
 575 0412 00BF     	 .text
 576              	.Letext0:
 577              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 578              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 579              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_scale_q31.c
    {standard input}:19     .text.arm_scale_q31:00000000 $t
    {standard input}:24     .text.arm_scale_q31:00000000 arm_scale_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
