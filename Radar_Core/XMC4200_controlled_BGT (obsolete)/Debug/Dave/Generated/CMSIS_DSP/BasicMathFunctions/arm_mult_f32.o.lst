   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_mult_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fmul
  19              	 .section .text.arm_mult_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mult_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mult_f32:
  26              	.LFB139:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * Title:	    arm_mult_f32.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * Description:	Floating-point vector multiplication.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * POSSIBILITY OF SUCH DAMAGE.  
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**        
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @ingroup groupMath        
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**        
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @defgroup BasicMult Vector Multiplication        
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *        
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * Element-by-element multiplication of two vectors.        
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *        
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * <pre>        
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *     pDst[n] = pSrcA[n] * pSrcB[n],   0 <= n < blockSize.        
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * </pre>        
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  *        
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.        
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**        
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @addtogroup BasicMult        
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @{        
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** /**        
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @brief Floating-point vector multiplication.        
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[in]       *pSrcA points to the first input vector        
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[in]       *pSrcB points to the second input vector        
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[out]      *pDst points to the output vector        
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @param[in]       blockSize number of samples in each vector        
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  * @return none.        
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** void arm_mult_f32(
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t * pSrcA,
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t * pSrcB,
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t * pDst,
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   uint32_t blockSize)
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** {
  28              	 .loc 1 78 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 90B5     	 push {r4,r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 12
  35              	 .cfi_offset 4,-12
  36              	 .cfi_offset 7,-8
  37              	 .cfi_offset 14,-4
  38 0002 93B0     	 sub sp,sp,#76
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 88
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
  44 0006 F860     	 str r0,[r7,#12]
  45 0008 B960     	 str r1,[r7,#8]
  46 000a 7A60     	 str r2,[r7,#4]
  47 000c 3B60     	 str r3,[r7]
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   uint32_t blkCnt;                               /* loop counters */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   float32_t out1, out2, out3, out4;              /* temporary output variables */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* loop Unrolling */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize >> 2u;
  48              	 .loc 1 88 0
  49 000e 3B68     	 ldr r3,[r7]
  50 0010 9B08     	 lsrs r3,r3,#2
  51 0012 7B64     	 str r3,[r7,#68]
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   while(blkCnt > 0u)
  52              	 .loc 1 92 0
  53 0014 4AE0     	 b .L2
  54              	.L3:
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* Multiply the inputs and store the results in output buffer */
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA1 = *pSrcA;
  55              	 .loc 1 97 0
  56 0016 FB68     	 ldr r3,[r7,#12]
  57 0018 1B68     	 ldr r3,[r3]
  58 001a 3B64     	 str r3,[r7,#64]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB1 = *pSrcB;
  59              	 .loc 1 99 0
  60 001c BB68     	 ldr r3,[r7,#8]
  61 001e 1B68     	 ldr r3,[r3]
  62 0020 FB63     	 str r3,[r7,#60]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA2 = *(pSrcA + 1);
  63              	 .loc 1 101 0
  64 0022 FB68     	 ldr r3,[r7,#12]
  65 0024 5B68     	 ldr r3,[r3,#4]
  66 0026 BB63     	 str r3,[r7,#56]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB2 = *(pSrcB + 1);
  67              	 .loc 1 103 0
  68 0028 BB68     	 ldr r3,[r7,#8]
  69 002a 5B68     	 ldr r3,[r3,#4]
  70 002c 7B63     	 str r3,[r7,#52]
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out1 = inA1 * inB1;
  71              	 .loc 1 106 0
  72 002e 386C     	 ldr r0,[r7,#64]
  73 0030 F96B     	 ldr r1,[r7,#60]
  74 0032 FFF7FEFF 	 bl __aeabi_fmul
  75 0036 0346     	 mov r3,r0
  76 0038 3B63     	 str r3,[r7,#48]
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA3 = *(pSrcA + 2);
  77              	 .loc 1 109 0
  78 003a FB68     	 ldr r3,[r7,#12]
  79 003c 9B68     	 ldr r3,[r3,#8]
  80 003e FB62     	 str r3,[r7,#44]
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB3 = *(pSrcB + 2);
  81              	 .loc 1 111 0
  82 0040 BB68     	 ldr r3,[r7,#8]
  83 0042 9B68     	 ldr r3,[r3,#8]
  84 0044 BB62     	 str r3,[r7,#40]
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out2 = inA2 * inB2;
  85              	 .loc 1 114 0
  86 0046 B86B     	 ldr r0,[r7,#56]
  87 0048 796B     	 ldr r1,[r7,#52]
  88 004a FFF7FEFF 	 bl __aeabi_fmul
  89 004e 0346     	 mov r3,r0
  90 0050 7B62     	 str r3,[r7,#36]
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceA */
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inA4 = *(pSrcA + 3);
  91              	 .loc 1 117 0
  92 0052 FB68     	 ldr r3,[r7,#12]
  93 0054 DB68     	 ldr r3,[r3,#12]
  94 0056 3B62     	 str r3,[r7,#32]
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *pDst = out1;
  95              	 .loc 1 120 0
  96 0058 7B68     	 ldr r3,[r7,#4]
  97 005a 3A6B     	 ldr r2,[r7,#48]
  98 005c 1A60     	 str r2,[r3]
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* read sample from sourceB */
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     inB4 = *(pSrcB + 3);
  99              	 .loc 1 123 0
 100 005e BB68     	 ldr r3,[r7,#8]
 101 0060 DB68     	 ldr r3,[r3,#12]
 102 0062 FB61     	 str r3,[r7,#28]
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out3 = inA3 * inB3;
 103              	 .loc 1 126 0
 104 0064 F86A     	 ldr r0,[r7,#44]
 105 0066 B96A     	 ldr r1,[r7,#40]
 106 0068 FFF7FEFF 	 bl __aeabi_fmul
 107 006c 0346     	 mov r3,r0
 108 006e BB61     	 str r3,[r7,#24]
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *(pDst + 1) = out2;
 109              	 .loc 1 129 0
 110 0070 7B68     	 ldr r3,[r7,#4]
 111 0072 0433     	 adds r3,r3,#4
 112 0074 7A6A     	 ldr r2,[r7,#36]
 113 0076 1A60     	 str r2,[r3]
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* out = sourceA * sourceB */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     out4 = inA4 * inB4;
 114              	 .loc 1 132 0
 115 0078 386A     	 ldr r0,[r7,#32]
 116 007a F969     	 ldr r1,[r7,#28]
 117 007c FFF7FEFF 	 bl __aeabi_fmul
 118 0080 0346     	 mov r3,r0
 119 0082 7B61     	 str r3,[r7,#20]
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *(pDst + 2) = out3;
 120              	 .loc 1 134 0
 121 0084 7B68     	 ldr r3,[r7,#4]
 122 0086 0833     	 adds r3,r3,#8
 123 0088 BA69     	 ldr r2,[r7,#24]
 124 008a 1A60     	 str r2,[r3]
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* store result to destination buffer */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *(pDst + 3) = out4;
 125              	 .loc 1 136 0
 126 008c 7B68     	 ldr r3,[r7,#4]
 127 008e 0C33     	 adds r3,r3,#12
 128 0090 7A69     	 ldr r2,[r7,#20]
 129 0092 1A60     	 str r2,[r3]
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* update pointers to process next samples */
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     pSrcA += 4u;
 130              	 .loc 1 140 0
 131 0094 FB68     	 ldr r3,[r7,#12]
 132 0096 1033     	 adds r3,r3,#16
 133 0098 FB60     	 str r3,[r7,#12]
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     pSrcB += 4u;
 134              	 .loc 1 141 0
 135 009a BB68     	 ldr r3,[r7,#8]
 136 009c 1033     	 adds r3,r3,#16
 137 009e BB60     	 str r3,[r7,#8]
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     pDst += 4u;
 138              	 .loc 1 142 0
 139 00a0 7B68     	 ldr r3,[r7,#4]
 140 00a2 1033     	 adds r3,r3,#16
 141 00a4 7B60     	 str r3,[r7,#4]
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* Decrement the blockSize loop counter */
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     blkCnt--;
 142              	 .loc 1 145 0
 143 00a6 7B6C     	 ldr r3,[r7,#68]
 144 00a8 013B     	 subs r3,r3,#1
 145 00aa 7B64     	 str r3,[r7,#68]
 146              	.L2:
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
 147              	 .loc 1 92 0
 148 00ac 7B6C     	 ldr r3,[r7,#68]
 149 00ae 002B     	 cmp r3,#0
 150 00b0 B1D1     	 bne .L3
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   }
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****    ** No loop unrolling is used. */
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize % 0x4u;
 151              	 .loc 1 150 0
 152 00b2 3B68     	 ldr r3,[r7]
 153 00b4 03F00303 	 and r3,r3,#3
 154 00b8 7B64     	 str r3,[r7,#68]
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #else
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* Run the below code for Cortex-M0 */
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   /* Initialize blkCnt with number of samples */
 157:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   blkCnt = blockSize;
 158:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 159:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 160:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 161:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   while(blkCnt > 0u)
 155              	 .loc 1 161 0
 156 00ba 13E0     	 b .L4
 157              	.L5:
 162:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
 163:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* C = A * B */
 164:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* Multiply the inputs and store the results in output buffer */
 165:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     *pDst++ = (*pSrcA++) * (*pSrcB++);
 158              	 .loc 1 165 0
 159 00bc 7C68     	 ldr r4,[r7,#4]
 160 00be 231D     	 adds r3,r4,#4
 161 00c0 7B60     	 str r3,[r7,#4]
 162 00c2 FB68     	 ldr r3,[r7,#12]
 163 00c4 1A1D     	 adds r2,r3,#4
 164 00c6 FA60     	 str r2,[r7,#12]
 165 00c8 1968     	 ldr r1,[r3]
 166 00ca BB68     	 ldr r3,[r7,#8]
 167 00cc 1A1D     	 adds r2,r3,#4
 168 00ce BA60     	 str r2,[r7,#8]
 169 00d0 1B68     	 ldr r3,[r3]
 170 00d2 0846     	 mov r0,r1
 171 00d4 1946     	 mov r1,r3
 172 00d6 FFF7FEFF 	 bl __aeabi_fmul
 173 00da 0346     	 mov r3,r0
 174 00dc 2360     	 str r3,[r4]
 166:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     /* Decrement the blockSize loop counter */
 168:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****     blkCnt--;
 175              	 .loc 1 168 0
 176 00de 7B6C     	 ldr r3,[r7,#68]
 177 00e0 013B     	 subs r3,r3,#1
 178 00e2 7B64     	 str r3,[r7,#68]
 179              	.L4:
 161:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   {
 180              	 .loc 1 161 0
 181 00e4 7B6C     	 ldr r3,[r7,#68]
 182 00e6 002B     	 cmp r3,#0
 183 00e8 E8D1     	 bne .L5
 169:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c ****   }
 170:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_f32.c **** }
 184              	 .loc 1 170 0
 185 00ea 4C37     	 adds r7,r7,#76
 186              	.LCFI3:
 187              	 .cfi_def_cfa_offset 12
 188 00ec BD46     	 mov sp,r7
 189              	.LCFI4:
 190              	 .cfi_def_cfa_register 13
 191              	 
 192 00ee 90BD     	 pop {r4,r7,pc}
 193              	 .cfi_endproc
 194              	.LFE139:
 196              	 .text
 197              	.Letext0:
 198              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 199              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 200              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_f32.c
    {standard input}:20     .text.arm_mult_f32:00000000 $t
    {standard input}:25     .text.arm_mult_f32:00000000 arm_mult_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
