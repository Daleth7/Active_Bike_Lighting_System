   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_shift_q15.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_shift_q15,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_shift_q15
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_shift_q15:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * Title:		arm_shift_q15.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * Description:	Shifts the elements of a Q15 vector by a specified number of bits.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * POSSIBILITY OF SUCH DAMAGE. 
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @ingroup groupMath    
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @addtogroup shift    
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @brief  Shifts the elements of a Q15 vector a specified number of bits.    
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  *pSrc points to the input vector    
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  shiftBits number of bits to shift.  A positive value shifts left; a negative value s
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[out]  *pDst points to the output vector    
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @param[in]  blockSize number of samples in the vector    
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * @return none.    
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  *    
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * <b>Scaling and Overflow Behavior:</b>    
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * \par    
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * The function uses saturating arithmetic.    
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  * Results outside of the allowable Q15 range [0x8000 0x7FFF] will be saturated.    
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****  */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** void arm_shift_q15(
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   q15_t * pSrc,
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   int8_t shiftBits,
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   q15_t * pDst,
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   uint32_t blockSize)
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** {
  27              	 .loc 1 71 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 9FB0     	 sub sp,sp,#124
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 128
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 7A60     	 str r2,[r7,#4]
  44 000a 3B60     	 str r3,[r7]
  45 000c 0B46     	 mov r3,r1
  46 000e FB72     	 strb r3,[r7,#11]
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   uint32_t blkCnt;                               /* loop counter */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   uint8_t sign;                                  /* Sign of shiftBits */
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef ARM_MATH_CM0_FAMILY
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   q15_t in1, in2;                                /* Temporary variables */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /*loop Unrolling */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   blkCnt = blockSize >> 2u;
  47              	 .loc 1 83 0
  48 0010 3B68     	 ldr r3,[r7]
  49 0012 9B08     	 lsrs r3,r3,#2
  50 0014 7B67     	 str r3,[r7,#116]
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /* Getting the sign of shiftBits */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   sign = (shiftBits & 0x80);
  51              	 .loc 1 86 0
  52 0016 FB7A     	 ldrb r3,[r7,#11]
  53 0018 23F07F03 	 bic r3,r3,#127
  54 001c 87F87330 	 strb r3,[r7,#115]
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   if(sign == 0u)
  55              	 .loc 1 89 0
  56 0020 97F87330 	 ldrb r3,[r7,#115]
  57 0024 002B     	 cmp r3,#0
  58 0026 40F08980 	 bne .L2
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   {
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while(blkCnt > 0u)
  59              	 .loc 1 93 0
  60 002a 64E0     	 b .L3
  61              	.L4:
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Read 2 inputs */
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
  62              	 .loc 1 96 0
  63 002c FB68     	 ldr r3,[r7,#12]
  64 002e 9A1C     	 adds r2,r3,#2
  65 0030 FA60     	 str r2,[r7,#12]
  66 0032 1B88     	 ldrh r3,[r3]
  67 0034 A7F87030 	 strh r3,[r7,#112]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
  68              	 .loc 1 97 0
  69 0038 FB68     	 ldr r3,[r7,#12]
  70 003a 9A1C     	 adds r2,r3,#2
  71 003c FA60     	 str r2,[r7,#12]
  72 003e 1B88     	 ldrh r3,[r3]
  73 0040 A7F86E30 	 strh r3,[r7,#110]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
  74              	 .loc 1 102 0
  75 0044 3A1D     	 adds r2,r7,#4
  76 0046 1368     	 ldr r3,[r2]
  77 0048 191D     	 adds r1,r3,#4
  78 004a 1160     	 str r1,[r2]
  79              	.LBB2:
  80              	.LBB3:
  81 004c B7F97010 	 ldrsh r1,[r7,#112]
  82 0050 97F90B20 	 ldrsb r2,[r7,#11]
  83 0054 01FA02F2 	 lsl r2,r1,r2
  84 0058 BA66     	 str r2,[r7,#104]
  85 005a BA6E     	 ldr r2,[r7,#104]
  86              	
  87 005c 02F30F02 	 ssat r2,#16,r2
  88              	
  89              	 .thumb
  90 0060 7A66     	 str r2,[r7,#100]
  91 0062 7A6E     	 ldr r2,[r7,#100]
  92              	.LBE3:
  93 0064 3A66     	 str r2,[r7,#96]
  94              	.LBB4:
  95 0066 B7F96E10 	 ldrsh r1,[r7,#110]
  96 006a 97F90B20 	 ldrsb r2,[r7,#11]
  97 006e 01FA02F2 	 lsl r2,r1,r2
  98 0072 FA65     	 str r2,[r7,#92]
  99 0074 FA6D     	 ldr r2,[r7,#92]
 100              	
 101 0076 02F30F02 	 ssat r2,#16,r2
 102              	
 103              	 .thumb
 104 007a BA65     	 str r2,[r7,#88]
 105 007c BA6D     	 ldr r2,[r7,#88]
 106              	.LBE4:
 107 007e 7A65     	 str r2,[r7,#84]
 108 0080 3A6E     	 ldr r2,[r7,#96]
 109 0082 796D     	 ldr r1,[r7,#84]
 110              	
 111 0084 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 112              	
 113              	 .thumb
 114 0088 3A65     	 str r2,[r7,#80]
 115 008a 3A6D     	 ldr r2,[r7,#80]
 116              	.LBE2:
 117 008c 1A60     	 str r2,[r3]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in1 << shiftBits), 16), 16);
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 118              	 .loc 1 112 0
 119 008e FB68     	 ldr r3,[r7,#12]
 120 0090 9A1C     	 adds r2,r3,#2
 121 0092 FA60     	 str r2,[r7,#12]
 122 0094 1B88     	 ldrh r3,[r3]
 123 0096 A7F87030 	 strh r3,[r7,#112]
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 124              	 .loc 1 113 0
 125 009a FB68     	 ldr r3,[r7,#12]
 126 009c 9A1C     	 adds r2,r3,#2
 127 009e FA60     	 str r2,[r7,#12]
 128 00a0 1B88     	 ldrh r3,[r3]
 129 00a2 A7F86E30 	 strh r3,[r7,#110]
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in1 << shiftBits), 16),
 130              	 .loc 1 117 0
 131 00a6 3A1D     	 adds r2,r7,#4
 132 00a8 1368     	 ldr r3,[r2]
 133 00aa 191D     	 adds r1,r3,#4
 134 00ac 1160     	 str r1,[r2]
 135              	.LBB5:
 136              	.LBB6:
 137 00ae B7F97010 	 ldrsh r1,[r7,#112]
 138 00b2 97F90B20 	 ldrsb r2,[r7,#11]
 139 00b6 01FA02F2 	 lsl r2,r1,r2
 140 00ba FA64     	 str r2,[r7,#76]
 141 00bc FA6C     	 ldr r2,[r7,#76]
 142              	
 143 00be 02F30F02 	 ssat r2,#16,r2
 144              	
 145              	 .thumb
 146 00c2 BA64     	 str r2,[r7,#72]
 147 00c4 BA6C     	 ldr r2,[r7,#72]
 148              	.LBE6:
 149 00c6 7A64     	 str r2,[r7,#68]
 150              	.LBB7:
 151 00c8 B7F96E10 	 ldrsh r1,[r7,#110]
 152 00cc 97F90B20 	 ldrsb r2,[r7,#11]
 153 00d0 01FA02F2 	 lsl r2,r1,r2
 154 00d4 3A64     	 str r2,[r7,#64]
 155 00d6 3A6C     	 ldr r2,[r7,#64]
 156              	
 157 00d8 02F30F02 	 ssat r2,#16,r2
 158              	
 159              	 .thumb
 160 00dc FA63     	 str r2,[r7,#60]
 161 00de FA6B     	 ldr r2,[r7,#60]
 162              	.LBE7:
 163 00e0 BA63     	 str r2,[r7,#56]
 164 00e2 7A6C     	 ldr r2,[r7,#68]
 165 00e4 B96B     	 ldr r1,[r7,#56]
 166              	
 167 00e6 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 168              	
 169              	 .thumb
 170 00ea 7A63     	 str r2,[r7,#52]
 171 00ec 7A6B     	 ldr r2,[r7,#52]
 172              	.LBE5:
 173 00ee 1A60     	 str r2,[r3]
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in2 << shiftBits), 16), 16);
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT(__SSAT((in2 << shiftBits), 16),
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   __SSAT((in1 << shiftBits), 16), 16);
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 174              	 .loc 1 128 0
 175 00f0 7B6F     	 ldr r3,[r7,#116]
 176 00f2 013B     	 subs r3,r3,#1
 177 00f4 7B67     	 str r3,[r7,#116]
 178              	.L3:
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 179              	 .loc 1 93 0
 180 00f6 7B6F     	 ldr r3,[r7,#116]
 181 00f8 002B     	 cmp r3,#0
 182 00fa 97D1     	 bne .L4
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** No loop unrolling is used. */
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize % 0x4u;
 183              	 .loc 1 133 0
 184 00fc 3B68     	 ldr r3,[r7]
 185 00fe 03F00303 	 and r3,r3,#3
 186 0102 7B67     	 str r3,[r7,#116]
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while(blkCnt > 0u)
 187              	 .loc 1 135 0
 188 0104 16E0     	 b .L5
 189              	.L6:
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift and then store the results in the destination buffer. */
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT((*pSrc++ << shiftBits), 16);
 190              	 .loc 1 139 0
 191 0106 7B68     	 ldr r3,[r7,#4]
 192 0108 9A1C     	 adds r2,r3,#2
 193 010a 7A60     	 str r2,[r7,#4]
 194              	.LBB8:
 195 010c FA68     	 ldr r2,[r7,#12]
 196 010e 911C     	 adds r1,r2,#2
 197 0110 F960     	 str r1,[r7,#12]
 198 0112 1288     	 ldrh r2,[r2]
 199 0114 11B2     	 sxth r1,r2
 200 0116 97F90B20 	 ldrsb r2,[r7,#11]
 201 011a 01FA02F2 	 lsl r2,r1,r2
 202 011e 3A63     	 str r2,[r7,#48]
 203 0120 3A6B     	 ldr r2,[r7,#48]
 204              	
 205 0122 02F30F02 	 ssat r2,#16,r2
 206              	
 207              	 .thumb
 208 0126 FA62     	 str r2,[r7,#44]
 209 0128 FA6A     	 ldr r2,[r7,#44]
 210              	.LBE8:
 211 012a 92B2     	 uxth r2,r2
 212 012c 1A80     	 strh r2,[r3]
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 213              	 .loc 1 142 0
 214 012e 7B6F     	 ldr r3,[r7,#116]
 215 0130 013B     	 subs r3,r3,#1
 216 0132 7B67     	 str r3,[r7,#116]
 217              	.L5:
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 218              	 .loc 1 135 0
 219 0134 7B6F     	 ldr r3,[r7,#116]
 220 0136 002B     	 cmp r3,#0
 221 0138 E5D1     	 bne .L6
 222 013a 6EE0     	 b .L1
 223              	.L2:
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   }
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   else
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   {
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while(blkCnt > 0u)
 224              	 .loc 1 149 0
 225 013c 50E0     	 b .L8
 226              	.L9:
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Read 2 inputs */
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 227              	 .loc 1 152 0
 228 013e FB68     	 ldr r3,[r7,#12]
 229 0140 9A1C     	 adds r2,r3,#2
 230 0142 FA60     	 str r2,[r7,#12]
 231 0144 1B88     	 ldrh r3,[r3]
 232 0146 A7F87030 	 strh r3,[r7,#112]
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 233              	 .loc 1 153 0
 234 014a FB68     	 ldr r3,[r7,#12]
 235 014c 9A1C     	 adds r2,r3,#2
 236 014e FA60     	 str r2,[r7,#12]
 237 0150 1B88     	 ldrh r3,[r3]
 238 0152 A7F86E30 	 strh r3,[r7,#110]
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 157:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 158:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 159:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 239              	 .loc 1 159 0
 240 0156 3A1D     	 adds r2,r7,#4
 241 0158 1368     	 ldr r3,[r2]
 242 015a 191D     	 adds r1,r3,#4
 243 015c 1160     	 str r1,[r2]
 244              	.LBB9:
 245 015e B7F97010 	 ldrsh r1,[r7,#112]
 246 0162 97F90B20 	 ldrsb r2,[r7,#11]
 247 0166 5242     	 negs r2,r2
 248 0168 41FA02F2 	 asr r2,r1,r2
 249 016c BA62     	 str r2,[r7,#40]
 250 016e B7F96E10 	 ldrsh r1,[r7,#110]
 251 0172 97F90B20 	 ldrsb r2,[r7,#11]
 252 0176 5242     	 negs r2,r2
 253 0178 41FA02F2 	 asr r2,r1,r2
 254 017c 7A62     	 str r2,[r7,#36]
 255 017e BA6A     	 ldr r2,[r7,#40]
 256 0180 796A     	 ldr r1,[r7,#36]
 257              	
 258 0182 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 259              	
 260              	 .thumb
 261 0186 3A62     	 str r2,[r7,#32]
 262 0188 3A6A     	 ldr r2,[r7,#32]
 263              	.LBE9:
 264 018a 1A60     	 str r2,[r3]
 160:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
 161:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 162:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 163:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 164:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
 165:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in1 >> -shiftBits), 16);
 166:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 167:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 168:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 169:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in1 = *pSrc++;
 265              	 .loc 1 169 0
 266 018c FB68     	 ldr r3,[r7,#12]
 267 018e 9A1C     	 adds r2,r3,#2
 268 0190 FA60     	 str r2,[r7,#12]
 269 0192 1B88     	 ldrh r3,[r3]
 270 0194 A7F87030 	 strh r3,[r7,#112]
 170:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       in2 = *pSrc++;
 271              	 .loc 1 170 0
 272 0198 FB68     	 ldr r3,[r7,#12]
 273 019a 9A1C     	 adds r2,r3,#2
 274 019c FA60     	 str r2,[r7,#12]
 275 019e 1B88     	 ldrh r3,[r3]
 276 01a0 A7F86E30 	 strh r3,[r7,#110]
 171:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 172:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #ifndef  ARM_MATH_BIG_ENDIAN
 173:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 174:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in1 >> -shiftBits),
 277              	 .loc 1 174 0
 278 01a4 3A1D     	 adds r2,r7,#4
 279 01a6 1368     	 ldr r3,[r2]
 280 01a8 191D     	 adds r1,r3,#4
 281 01aa 1160     	 str r1,[r2]
 282              	.LBB10:
 283 01ac B7F97010 	 ldrsh r1,[r7,#112]
 284 01b0 97F90B20 	 ldrsb r2,[r7,#11]
 285 01b4 5242     	 negs r2,r2
 286 01b6 41FA02F2 	 asr r2,r1,r2
 287 01ba FA61     	 str r2,[r7,#28]
 288 01bc B7F96E10 	 ldrsh r1,[r7,#110]
 289 01c0 97F90B20 	 ldrsb r2,[r7,#11]
 290 01c4 5242     	 negs r2,r2
 291 01c6 41FA02F2 	 asr r2,r1,r2
 292 01ca BA61     	 str r2,[r7,#24]
 293 01cc FA69     	 ldr r2,[r7,#28]
 294 01ce B969     	 ldr r1,[r7,#24]
 295              	
 296 01d0 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 297              	
 298              	 .thumb
 299 01d4 7A61     	 str r2,[r7,#20]
 300 01d6 7A69     	 ldr r2,[r7,#20]
 301              	.LBE10:
 302 01d8 1A60     	 str r2,[r3]
 175:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in2 >> -shiftBits), 16);
 176:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 177:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 178:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 179:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *__SIMD32(pDst)++ = __PKHBT((in2 >> -shiftBits),
 180:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****                                   (in1 >> -shiftBits), 16);
 181:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 182:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef  ARM_MATH_BIG_ENDIAN    */
 183:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 184:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 185:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 303              	 .loc 1 185 0
 304 01da 7B6F     	 ldr r3,[r7,#116]
 305 01dc 013B     	 subs r3,r3,#1
 306 01de 7B67     	 str r3,[r7,#116]
 307              	.L8:
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 308              	 .loc 1 149 0
 309 01e0 7B6F     	 ldr r3,[r7,#116]
 310 01e2 002B     	 cmp r3,#0
 311 01e4 ABD1     	 bne .L9
 186:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 187:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 188:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 189:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****      ** No loop unrolling is used. */
 190:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize % 0x4u;
 312              	 .loc 1 190 0
 313 01e6 3B68     	 ldr r3,[r7]
 314 01e8 03F00303 	 and r3,r3,#3
 315 01ec 7B67     	 str r3,[r7,#116]
 191:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 192:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while(blkCnt > 0u)
 316              	 .loc 1 192 0
 317 01ee 11E0     	 b .L10
 318              	.L11:
 193:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 194:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 195:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 196:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 319              	 .loc 1 196 0
 320 01f0 7B68     	 ldr r3,[r7,#4]
 321 01f2 9A1C     	 adds r2,r3,#2
 322 01f4 7A60     	 str r2,[r7,#4]
 323 01f6 FA68     	 ldr r2,[r7,#12]
 324 01f8 911C     	 adds r1,r2,#2
 325 01fa F960     	 str r1,[r7,#12]
 326 01fc 1288     	 ldrh r2,[r2]
 327 01fe 11B2     	 sxth r1,r2
 328 0200 97F90B20 	 ldrsb r2,[r7,#11]
 329 0204 5242     	 negs r2,r2
 330 0206 41FA02F2 	 asr r2,r1,r2
 331 020a 92B2     	 uxth r2,r2
 332 020c 1A80     	 strh r2,[r3]
 197:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 198:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 199:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 333              	 .loc 1 199 0
 334 020e 7B6F     	 ldr r3,[r7,#116]
 335 0210 013B     	 subs r3,r3,#1
 336 0212 7B67     	 str r3,[r7,#116]
 337              	.L10:
 192:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 338              	 .loc 1 192 0
 339 0214 7B6F     	 ldr r3,[r7,#116]
 340 0216 002B     	 cmp r3,#0
 341 0218 EAD1     	 bne .L11
 342              	.L1:
 200:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 201:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   }
 202:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 203:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #else
 204:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 205:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /* Run the below code for Cortex-M0 */
 206:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 207:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /* Getting the sign of shiftBits */
 208:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   sign = (shiftBits & 0x80);
 209:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 210:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   /* If the shift value is positive then do right shift else left shift */
 211:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   if(sign == 0u)
 212:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   {
 213:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* Initialize blkCnt with number of samples */
 214:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize;
 215:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 216:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while(blkCnt > 0u)
 217:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 218:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A << shiftBits */
 219:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift and then store the results in the destination buffer. */
 220:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = __SSAT(((q31_t) * pSrc++ << shiftBits), 16);
 221:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 222:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 223:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 224:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 225:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   }
 226:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   else
 227:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   {
 228:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     /* Initialize blkCnt with number of samples */
 229:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     blkCnt = blockSize;
 230:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 231:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     while(blkCnt > 0u)
 232:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     {
 233:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* C = A >> shiftBits */
 234:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Shift the inputs and then store the results in the destination buffer. */
 235:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       *pDst++ = (*pSrc++ >> -shiftBits);
 236:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 237:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       /* Decrement the loop counter */
 238:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****       blkCnt--;
 239:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****     }
 240:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c ****   }
 241:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 242:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 243:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** 
 244:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_shift_q15.c **** }
 343              	 .loc 1 244 0
 344 021a 7C37     	 adds r7,r7,#124
 345              	.LCFI3:
 346              	 .cfi_def_cfa_offset 4
 347 021c BD46     	 mov sp,r7
 348              	.LCFI4:
 349              	 .cfi_def_cfa_register 13
 350              	 
 351 021e 5DF8047B 	 ldr r7,[sp],#4
 352              	.LCFI5:
 353              	 .cfi_restore 7
 354              	 .cfi_def_cfa_offset 0
 355 0222 7047     	 bx lr
 356              	 .cfi_endproc
 357              	.LFE139:
 359              	 .text
 360              	.Letext0:
 361              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 362              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 363              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_shift_q15.c
    {standard input}:19     .text.arm_shift_q15:00000000 $t
    {standard input}:24     .text.arm_shift_q15:00000000 arm_shift_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
