   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_dot_prod_q31.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_dot_prod_q31,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_dot_prod_q31
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_dot_prod_q31:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * Title:		arm_dot_prod_q31.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * Description:	Q31 dot product.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * POSSIBILITY OF SUCH DAMAGE. 
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @ingroup groupMath    
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @addtogroup dot_prod    
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @brief Dot product of Q31 vectors.    
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @param[in]       *pSrcA points to the first input vector    
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @param[in]       *pSrcB points to the second input vector    
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @param[in]       blockSize number of samples in each vector    
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @param[out]      *result output result returned here    
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * @return none.    
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  *    
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * <b>Scaling and Overflow Behavior:</b>    
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * \par    
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * The intermediate multiplications are in 1.31 x 1.31 = 2.62 format and these    
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * are truncated to 2.48 format by discarding the lower 14 bits.    
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * The 2.48 result is then added without saturation to a 64-bit accumulator in 16.48 format.    
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * There are 15 guard bits in the accumulator and there is no risk of overflow as long as    
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * the length of the vectors is less than 2^16 elements.    
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  * The return result is in 16.48 format.    
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****  */
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** void arm_dot_prod_q31(
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   q31_t * pSrcA,
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   q31_t * pSrcB,
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   uint32_t blockSize,
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   q63_t * result)
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** {
  27              	 .loc 1 75 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 28
  35              	 .cfi_offset 4,-28
  36              	 .cfi_offset 5,-24
  37              	 .cfi_offset 7,-20
  38              	 .cfi_offset 8,-16
  39              	 .cfi_offset 9,-12
  40              	 .cfi_offset 10,-8
  41              	 .cfi_offset 11,-4
  42 0004 97B0     	 sub sp,sp,#92
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 120
  45 0006 00AF     	 add r7,sp,#0
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 7
  48 0008 7862     	 str r0,[r7,#36]
  49 000a 3962     	 str r1,[r7,#32]
  50 000c FA61     	 str r2,[r7,#28]
  51 000e BB61     	 str r3,[r7,#24]
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   q63_t sum = 0;                                 /* Temporary result storage */
  52              	 .loc 1 76 0
  53 0010 4FF00002 	 mov r2,#0
  54 0014 4FF00003 	 mov r3,#0
  55 0018 C7E91423 	 strd r2,[r7,#80]
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** #ifndef ARM_MATH_CM0_FAMILY
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   q31_t inA1, inA2, inA3, inA4;
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   q31_t inB1, inB2, inB3, inB4;
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   /*loop Unrolling */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize >> 2u;
  56              	 .loc 1 87 0
  57 001c FB69     	 ldr r3,[r7,#28]
  58 001e 9B08     	 lsrs r3,r3,#2
  59 0020 FB64     	 str r3,[r7,#76]
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   while(blkCnt > 0u)
  60              	 .loc 1 91 0
  61 0022 B5E0     	 b .L2
  62              	.L3:
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   {
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Calculate dot product and then store the result in a temporary buffer. */
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inA1 = *pSrcA++;
  63              	 .loc 1 95 0
  64 0024 7B6A     	 ldr r3,[r7,#36]
  65 0026 1A1D     	 adds r2,r3,#4
  66 0028 7A62     	 str r2,[r7,#36]
  67 002a 1B68     	 ldr r3,[r3]
  68 002c BB64     	 str r3,[r7,#72]
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inA2 = *pSrcA++;
  69              	 .loc 1 96 0
  70 002e 7B6A     	 ldr r3,[r7,#36]
  71 0030 1A1D     	 adds r2,r3,#4
  72 0032 7A62     	 str r2,[r7,#36]
  73 0034 1B68     	 ldr r3,[r3]
  74 0036 7B64     	 str r3,[r7,#68]
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inA3 = *pSrcA++;
  75              	 .loc 1 97 0
  76 0038 7B6A     	 ldr r3,[r7,#36]
  77 003a 1A1D     	 adds r2,r3,#4
  78 003c 7A62     	 str r2,[r7,#36]
  79 003e 1B68     	 ldr r3,[r3]
  80 0040 3B64     	 str r3,[r7,#64]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inA4 = *pSrcA++;
  81              	 .loc 1 98 0
  82 0042 7B6A     	 ldr r3,[r7,#36]
  83 0044 1A1D     	 adds r2,r3,#4
  84 0046 7A62     	 str r2,[r7,#36]
  85 0048 1B68     	 ldr r3,[r3]
  86 004a FB63     	 str r3,[r7,#60]
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inB1 = *pSrcB++;
  87              	 .loc 1 99 0
  88 004c 3B6A     	 ldr r3,[r7,#32]
  89 004e 1A1D     	 adds r2,r3,#4
  90 0050 3A62     	 str r2,[r7,#32]
  91 0052 1B68     	 ldr r3,[r3]
  92 0054 BB63     	 str r3,[r7,#56]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inB2 = *pSrcB++;
  93              	 .loc 1 100 0
  94 0056 3B6A     	 ldr r3,[r7,#32]
  95 0058 1A1D     	 adds r2,r3,#4
  96 005a 3A62     	 str r2,[r7,#32]
  97 005c 1B68     	 ldr r3,[r3]
  98 005e 7B63     	 str r3,[r7,#52]
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inB3 = *pSrcB++;
  99              	 .loc 1 101 0
 100 0060 3B6A     	 ldr r3,[r7,#32]
 101 0062 1A1D     	 adds r2,r3,#4
 102 0064 3A62     	 str r2,[r7,#32]
 103 0066 1B68     	 ldr r3,[r3]
 104 0068 3B63     	 str r3,[r7,#48]
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     inB4 = *pSrcB++;
 105              	 .loc 1 102 0
 106 006a 3B6A     	 ldr r3,[r7,#32]
 107 006c 1A1D     	 adds r2,r3,#4
 108 006e 3A62     	 str r2,[r7,#32]
 109 0070 1B68     	 ldr r3,[r3]
 110 0072 FB62     	 str r3,[r7,#44]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) inA1 * inB1) >> 14u;
 111              	 .loc 1 104 0
 112 0074 BB6C     	 ldr r3,[r7,#72]
 113 0076 1A46     	 mov r2,r3
 114 0078 4FEAE273 	 asr r3,r2,#31
 115 007c B96B     	 ldr r1,[r7,#56]
 116 007e 0846     	 mov r0,r1
 117 0080 4FEAE071 	 asr r1,r0,#31
 118 0084 00FB03F5 	 mul r5,r0,r3
 119 0088 02FB01F4 	 mul r4,r2,r1
 120 008c 2C44     	 add r4,r4,r5
 121 008e A2FB0023 	 umull r2,r3,r2,r0
 122 0092 E118     	 adds r1,r4,r3
 123 0094 0B46     	 mov r3,r1
 124 0096 4FEA923A 	 lsr r10,r2,#14
 125 009a 4AEA834A 	 orr r10,r10,r3,lsl#18
 126 009e 4FEAA33B 	 asr fp,r3,#14
 127 00a2 D7E91423 	 ldrd r2,[r7,#80]
 128 00a6 12EB0A02 	 adds r2,r2,r10
 129 00aa 43EB0B03 	 adc r3,r3,fp
 130 00ae C7E91423 	 strd r2,[r7,#80]
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) inA2 * inB2) >> 14u;
 131              	 .loc 1 105 0
 132 00b2 7B6C     	 ldr r3,[r7,#68]
 133 00b4 1A46     	 mov r2,r3
 134 00b6 4FEAE273 	 asr r3,r2,#31
 135 00ba 796B     	 ldr r1,[r7,#52]
 136 00bc 0846     	 mov r0,r1
 137 00be 4FEAE071 	 asr r1,r0,#31
 138 00c2 00FB03F5 	 mul r5,r0,r3
 139 00c6 02FB01F4 	 mul r4,r2,r1
 140 00ca 2C44     	 add r4,r4,r5
 141 00cc A2FB0023 	 umull r2,r3,r2,r0
 142 00d0 E118     	 adds r1,r4,r3
 143 00d2 0B46     	 mov r3,r1
 144 00d4 910B     	 lsrs r1,r2,#14
 145 00d6 3961     	 str r1,[r7,#16]
 146 00d8 3969     	 ldr r1,[r7,#16]
 147 00da 41EA8341 	 orr r1,r1,r3,lsl#18
 148 00de 3961     	 str r1,[r7,#16]
 149 00e0 9B13     	 asrs r3,r3,#14
 150 00e2 7B61     	 str r3,[r7,#20]
 151 00e4 D7E91423 	 ldrd r2,[r7,#80]
 152 00e8 D7E90401 	 ldrd r0,[r7,#16]
 153 00ec 8018     	 adds r0,r0,r2
 154 00ee 41EB0301 	 adc r1,r1,r3
 155 00f2 0246     	 mov r2,r0
 156 00f4 0B46     	 mov r3,r1
 157 00f6 C7E91423 	 strd r2,[r7,#80]
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) inA3 * inB3) >> 14u;
 158              	 .loc 1 106 0
 159 00fa 3B6C     	 ldr r3,[r7,#64]
 160 00fc 1A46     	 mov r2,r3
 161 00fe 4FEAE273 	 asr r3,r2,#31
 162 0102 396B     	 ldr r1,[r7,#48]
 163 0104 0846     	 mov r0,r1
 164 0106 4FEAE071 	 asr r1,r0,#31
 165 010a 00FB03F5 	 mul r5,r0,r3
 166 010e 02FB01F4 	 mul r4,r2,r1
 167 0112 2C44     	 add r4,r4,r5
 168 0114 A2FB0023 	 umull r2,r3,r2,r0
 169 0118 E118     	 adds r1,r4,r3
 170 011a 0B46     	 mov r3,r1
 171 011c 910B     	 lsrs r1,r2,#14
 172 011e B960     	 str r1,[r7,#8]
 173 0120 B968     	 ldr r1,[r7,#8]
 174 0122 41EA8341 	 orr r1,r1,r3,lsl#18
 175 0126 B960     	 str r1,[r7,#8]
 176 0128 9B13     	 asrs r3,r3,#14
 177 012a FB60     	 str r3,[r7,#12]
 178 012c D7E91423 	 ldrd r2,[r7,#80]
 179 0130 D7E90201 	 ldrd r0,[r7,#8]
 180 0134 8018     	 adds r0,r0,r2
 181 0136 41EB0301 	 adc r1,r1,r3
 182 013a 0246     	 mov r2,r0
 183 013c 0B46     	 mov r3,r1
 184 013e C7E91423 	 strd r2,[r7,#80]
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) inA4 * inB4) >> 14u;
 185              	 .loc 1 107 0
 186 0142 FB6B     	 ldr r3,[r7,#60]
 187 0144 1A46     	 mov r2,r3
 188 0146 4FEAE273 	 asr r3,r2,#31
 189 014a F96A     	 ldr r1,[r7,#44]
 190 014c 0846     	 mov r0,r1
 191 014e 4FEAE071 	 asr r1,r0,#31
 192 0152 00FB03F5 	 mul r5,r0,r3
 193 0156 02FB01F4 	 mul r4,r2,r1
 194 015a 2C44     	 add r4,r4,r5
 195 015c A2FB0023 	 umull r2,r3,r2,r0
 196 0160 E118     	 adds r1,r4,r3
 197 0162 0B46     	 mov r3,r1
 198 0164 910B     	 lsrs r1,r2,#14
 199 0166 3960     	 str r1,[r7]
 200 0168 3968     	 ldr r1,[r7]
 201 016a 41EA8341 	 orr r1,r1,r3,lsl#18
 202 016e 3960     	 str r1,[r7]
 203 0170 9B13     	 asrs r3,r3,#14
 204 0172 7B60     	 str r3,[r7,#4]
 205 0174 D7E91423 	 ldrd r2,[r7,#80]
 206 0178 D7E90001 	 ldrd r0,[r7]
 207 017c 8018     	 adds r0,r0,r2
 208 017e 41EB0301 	 adc r1,r1,r3
 209 0182 0246     	 mov r2,r0
 210 0184 0B46     	 mov r3,r1
 211 0186 C7E91423 	 strd r2,[r7,#80]
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Decrement the loop counter */
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt--;
 212              	 .loc 1 110 0
 213 018a FB6C     	 ldr r3,[r7,#76]
 214 018c 013B     	 subs r3,r3,#1
 215 018e FB64     	 str r3,[r7,#76]
 216              	.L2:
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   {
 217              	 .loc 1 91 0
 218 0190 FB6C     	 ldr r3,[r7,#76]
 219 0192 002B     	 cmp r3,#0
 220 0194 7FF446AF 	 bne .L3
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   }
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****    ** No loop unrolling is used. */
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize % 0x4u;
 221              	 .loc 1 115 0
 222 0198 FB69     	 ldr r3,[r7,#28]
 223 019a 03F00303 	 and r3,r3,#3
 224 019e FB64     	 str r3,[r7,#76]
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** #else
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   /* Run the below code for Cortex-M0 */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   /* Initialize blkCnt with number of samples */
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   blkCnt = blockSize;
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   while(blkCnt > 0u)
 225              	 .loc 1 127 0
 226 01a0 27E0     	 b .L4
 227              	.L5:
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   {
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Calculate dot product and then store the result in a temporary buffer. */
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     sum += ((q63_t) * pSrcA++ * *pSrcB++) >> 14u;
 228              	 .loc 1 131 0
 229 01a2 7B6A     	 ldr r3,[r7,#36]
 230 01a4 1A1D     	 adds r2,r3,#4
 231 01a6 7A62     	 str r2,[r7,#36]
 232 01a8 1B68     	 ldr r3,[r3]
 233 01aa 1846     	 mov r0,r3
 234 01ac 4FEAE071 	 asr r1,r0,#31
 235 01b0 3B6A     	 ldr r3,[r7,#32]
 236 01b2 1A1D     	 adds r2,r3,#4
 237 01b4 3A62     	 str r2,[r7,#32]
 238 01b6 1B68     	 ldr r3,[r3]
 239 01b8 1A46     	 mov r2,r3
 240 01ba 4FEAE273 	 asr r3,r2,#31
 241 01be 02FB01F5 	 mul r5,r2,r1
 242 01c2 00FB03F4 	 mul r4,r0,r3
 243 01c6 2C44     	 add r4,r4,r5
 244 01c8 A0FB0223 	 umull r2,r3,r0,r2
 245 01cc E118     	 adds r1,r4,r3
 246 01ce 0B46     	 mov r3,r1
 247 01d0 4FEA9238 	 lsr r8,r2,#14
 248 01d4 48EA8348 	 orr r8,r8,r3,lsl#18
 249 01d8 4FEAA339 	 asr r9,r3,#14
 250 01dc D7E91423 	 ldrd r2,[r7,#80]
 251 01e0 12EB0802 	 adds r2,r2,r8
 252 01e4 43EB0903 	 adc r3,r3,r9
 253 01e8 C7E91423 	 strd r2,[r7,#80]
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     /* Decrement the loop counter */
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****     blkCnt--;
 254              	 .loc 1 134 0
 255 01ec FB6C     	 ldr r3,[r7,#76]
 256 01ee 013B     	 subs r3,r3,#1
 257 01f0 FB64     	 str r3,[r7,#76]
 258              	.L4:
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   {
 259              	 .loc 1 127 0
 260 01f2 FB6C     	 ldr r3,[r7,#76]
 261 01f4 002B     	 cmp r3,#0
 262 01f6 D4D1     	 bne .L5
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   }
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** 
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   /* Store the result in the destination buffer in 16.48 format */
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c ****   *result = sum;
 263              	 .loc 1 138 0
 264 01f8 B969     	 ldr r1,[r7,#24]
 265 01fa D7E91423 	 ldrd r2,[r7,#80]
 266 01fe C1E90023 	 strd r2,[r1]
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_q31.c **** }
 267              	 .loc 1 139 0
 268 0202 5C37     	 adds r7,r7,#92
 269              	.LCFI3:
 270              	 .cfi_def_cfa_offset 28
 271 0204 BD46     	 mov sp,r7
 272              	.LCFI4:
 273              	 .cfi_def_cfa_register 13
 274              	 
 275 0206 BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 276              	.LCFI5:
 277              	 .cfi_restore 11
 278              	 .cfi_restore 10
 279              	 .cfi_restore 9
 280              	 .cfi_restore 8
 281              	 .cfi_restore 7
 282              	 .cfi_restore 5
 283              	 .cfi_restore 4
 284              	 .cfi_def_cfa_offset 0
 285 020a 7047     	 bx lr
 286              	 .cfi_endproc
 287              	.LFE139:
 289              	 .text
 290              	.Letext0:
 291              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 292              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 293              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_dot_prod_q31.c
    {standard input}:19     .text.arm_dot_prod_q31:00000000 $t
    {standard input}:24     .text.arm_dot_prod_q31:00000000 arm_dot_prod_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
