   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_offset_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fadd
  19              	 .section .text.arm_offset_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_offset_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_offset_f32:
  26              	.LFB139:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * Title:		arm_offset_f32.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * Description:	Floating-point vector offset.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * POSSIBILITY OF SUCH DAMAGE.   
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** * ---------------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** /**        
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @ingroup groupMath        
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  */
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** /**        
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @defgroup offset Vector Offset        
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  *        
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * Adds a constant offset to each element of a vector.        
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  *        
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * <pre>        
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  *     pDst[n] = pSrc[n] + offset,   0 <= n < blockSize.        
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * </pre>        
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  *        
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * The functions support in-place computation allowing the source and
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * destination pointers to reference the same memory buffer.
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  */
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** /**        
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @addtogroup offset        
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @{        
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  */
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** /**        
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @brief  Adds a constant offset to a floating-point vector.        
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @param[in]  *pSrc points to the input vector        
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @param[in]  offset is the offset to be added        
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @param[out]  *pDst points to the output vector        
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @param[in]  blockSize number of samples in the vector        
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  * @return none.        
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****  */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** void arm_offset_f32(
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   float32_t * pSrc,
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   float32_t offset,
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   float32_t * pDst,
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   uint32_t blockSize)
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** {
  28              	 .loc 1 80 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 90B5     	 push {r4,r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 12
  35              	 .cfi_offset 4,-12
  36              	 .cfi_offset 7,-8
  37              	 .cfi_offset 14,-4
  38 0002 8BB0     	 sub sp,sp,#44
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 56
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
  44 0006 F860     	 str r0,[r7,#12]
  45 0008 B960     	 str r1,[r7,#8]
  46 000a 7A60     	 str r2,[r7,#4]
  47 000c 3B60     	 str r3,[r7]
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   float32_t in1, in2, in3, in4;
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   /*loop Unrolling */
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize >> 2u;
  48              	 .loc 1 89 0
  49 000e 3B68     	 ldr r3,[r7]
  50 0010 9B08     	 lsrs r3,r3,#2
  51 0012 7B62     	 str r3,[r7,#36]
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   while(blkCnt > 0u)
  52              	 .loc 1 93 0
  53 0014 3BE0     	 b .L2
  54              	.L3:
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   {
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* C = A + offset */
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* Add offset and then store the results in the destination buffer. */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* read samples from source */
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in1 = *pSrc;
  55              	 .loc 1 98 0
  56 0016 FB68     	 ldr r3,[r7,#12]
  57 0018 1B68     	 ldr r3,[r3]
  58 001a 3B62     	 str r3,[r7,#32]
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in2 = *(pSrc + 1);
  59              	 .loc 1 99 0
  60 001c FB68     	 ldr r3,[r7,#12]
  61 001e 5B68     	 ldr r3,[r3,#4]
  62 0020 FB61     	 str r3,[r7,#28]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in1 = in1 + offset;
  63              	 .loc 1 102 0
  64 0022 386A     	 ldr r0,[r7,#32]
  65 0024 B968     	 ldr r1,[r7,#8]
  66 0026 FFF7FEFF 	 bl __aeabi_fadd
  67 002a 0346     	 mov r3,r0
  68 002c 3B62     	 str r3,[r7,#32]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* read samples from source */
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in3 = *(pSrc + 2);
  69              	 .loc 1 105 0
  70 002e FB68     	 ldr r3,[r7,#12]
  71 0030 9B68     	 ldr r3,[r3,#8]
  72 0032 BB61     	 str r3,[r7,#24]
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in2 = in2 + offset;
  73              	 .loc 1 108 0
  74 0034 F869     	 ldr r0,[r7,#28]
  75 0036 B968     	 ldr r1,[r7,#8]
  76 0038 FFF7FEFF 	 bl __aeabi_fadd
  77 003c 0346     	 mov r3,r0
  78 003e FB61     	 str r3,[r7,#28]
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* read samples from source */
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in4 = *(pSrc + 3);
  79              	 .loc 1 111 0
  80 0040 FB68     	 ldr r3,[r7,#12]
  81 0042 DB68     	 ldr r3,[r3,#12]
  82 0044 7B61     	 str r3,[r7,#20]
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in3 = in3 + offset;
  83              	 .loc 1 114 0
  84 0046 B869     	 ldr r0,[r7,#24]
  85 0048 B968     	 ldr r1,[r7,#8]
  86 004a FFF7FEFF 	 bl __aeabi_fadd
  87 004e 0346     	 mov r3,r0
  88 0050 BB61     	 str r3,[r7,#24]
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     *pDst = in1;
  89              	 .loc 1 117 0
  90 0052 7B68     	 ldr r3,[r7,#4]
  91 0054 3A6A     	 ldr r2,[r7,#32]
  92 0056 1A60     	 str r2,[r3]
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* add offset to input */
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     in4 = in4 + offset;
  93              	 .loc 1 120 0
  94 0058 7869     	 ldr r0,[r7,#20]
  95 005a B968     	 ldr r1,[r7,#8]
  96 005c FFF7FEFF 	 bl __aeabi_fadd
  97 0060 0346     	 mov r3,r0
  98 0062 7B61     	 str r3,[r7,#20]
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     *(pDst + 1) = in2;
  99              	 .loc 1 123 0
 100 0064 7B68     	 ldr r3,[r7,#4]
 101 0066 0433     	 adds r3,r3,#4
 102 0068 FA69     	 ldr r2,[r7,#28]
 103 006a 1A60     	 str r2,[r3]
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     *(pDst + 2) = in3;
 104              	 .loc 1 126 0
 105 006c 7B68     	 ldr r3,[r7,#4]
 106 006e 0833     	 adds r3,r3,#8
 107 0070 BA69     	 ldr r2,[r7,#24]
 108 0072 1A60     	 str r2,[r3]
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* store result to destination */
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     *(pDst + 3) = in4;
 109              	 .loc 1 129 0
 110 0074 7B68     	 ldr r3,[r7,#4]
 111 0076 0C33     	 adds r3,r3,#12
 112 0078 7A69     	 ldr r2,[r7,#20]
 113 007a 1A60     	 str r2,[r3]
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* update pointers to process next samples */
 132:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     pSrc += 4u;
 114              	 .loc 1 132 0
 115 007c FB68     	 ldr r3,[r7,#12]
 116 007e 1033     	 adds r3,r3,#16
 117 0080 FB60     	 str r3,[r7,#12]
 133:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     pDst += 4u;
 118              	 .loc 1 133 0
 119 0082 7B68     	 ldr r3,[r7,#4]
 120 0084 1033     	 adds r3,r3,#16
 121 0086 7B60     	 str r3,[r7,#4]
 134:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 135:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* Decrement the loop counter */
 136:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     blkCnt--;
 122              	 .loc 1 136 0
 123 0088 7B6A     	 ldr r3,[r7,#36]
 124 008a 013B     	 subs r3,r3,#1
 125 008c 7B62     	 str r3,[r7,#36]
 126              	.L2:
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   {
 127              	 .loc 1 93 0
 128 008e 7B6A     	 ldr r3,[r7,#36]
 129 0090 002B     	 cmp r3,#0
 130 0092 C0D1     	 bne .L3
 137:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   }
 138:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 139:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
 140:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****    ** No loop unrolling is used. */
 141:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize % 0x4u;
 131              	 .loc 1 141 0
 132 0094 3B68     	 ldr r3,[r7]
 133 0096 03F00303 	 and r3,r3,#3
 134 009a 7B62     	 str r3,[r7,#36]
 142:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 143:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** #else
 144:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 145:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   /* Run the below code for Cortex-M0 */
 146:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   /* Initialize blkCnt with number of samples */
 148:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   blkCnt = blockSize;
 149:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 151:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   while(blkCnt > 0u)
 135              	 .loc 1 152 0
 136 009c 0FE0     	 b .L4
 137              	.L5:
 153:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   {
 154:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* C = A + offset */
 155:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* Add offset and then store the result in the destination buffer. */
 156:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     *pDst++ = (*pSrc++) + offset;
 138              	 .loc 1 156 0
 139 009e 7C68     	 ldr r4,[r7,#4]
 140 00a0 231D     	 adds r3,r4,#4
 141 00a2 7B60     	 str r3,[r7,#4]
 142 00a4 FB68     	 ldr r3,[r7,#12]
 143 00a6 1A1D     	 adds r2,r3,#4
 144 00a8 FA60     	 str r2,[r7,#12]
 145 00aa 1B68     	 ldr r3,[r3]
 146 00ac 1846     	 mov r0,r3
 147 00ae B968     	 ldr r1,[r7,#8]
 148 00b0 FFF7FEFF 	 bl __aeabi_fadd
 149 00b4 0346     	 mov r3,r0
 150 00b6 2360     	 str r3,[r4]
 157:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** 
 158:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     /* Decrement the loop counter */
 159:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****     blkCnt--;
 151              	 .loc 1 159 0
 152 00b8 7B6A     	 ldr r3,[r7,#36]
 153 00ba 013B     	 subs r3,r3,#1
 154 00bc 7B62     	 str r3,[r7,#36]
 155              	.L4:
 152:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   {
 156              	 .loc 1 152 0
 157 00be 7B6A     	 ldr r3,[r7,#36]
 158 00c0 002B     	 cmp r3,#0
 159 00c2 ECD1     	 bne .L5
 160:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c ****   }
 161:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_offset_f32.c **** }
 160              	 .loc 1 161 0
 161 00c4 2C37     	 adds r7,r7,#44
 162              	.LCFI3:
 163              	 .cfi_def_cfa_offset 12
 164 00c6 BD46     	 mov sp,r7
 165              	.LCFI4:
 166              	 .cfi_def_cfa_register 13
 167              	 
 168 00c8 90BD     	 pop {r4,r7,pc}
 169              	 .cfi_endproc
 170              	.LFE139:
 172 00ca 00BF     	 .text
 173              	.Letext0:
 174              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 175              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 176              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_offset_f32.c
    {standard input}:20     .text.arm_offset_f32:00000000 $t
    {standard input}:25     .text.arm_offset_f32:00000000 arm_offset_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fadd
