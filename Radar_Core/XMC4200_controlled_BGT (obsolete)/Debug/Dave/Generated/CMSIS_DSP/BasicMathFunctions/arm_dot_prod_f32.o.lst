   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_dot_prod_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fmul
  19              	 .global __aeabi_fadd
  20              	 .section .text.arm_dot_prod_f32,"ax",%progbits
  21              	 .align 2
  22              	 .global arm_dot_prod_f32
  23              	 .thumb
  24              	 .thumb_func
  26              	arm_dot_prod_f32:
  27              	.LFB139:
  28              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * Title:		arm_dot_prod_f32.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * Description:	Floating-point dot product.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * POSSIBILITY OF SUCH DAMAGE.  
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** * ---------------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @ingroup groupMath
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** /**
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @defgroup dot_prod Vector Dot Product
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * Computes the dot product of two vectors.
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * The vectors are multiplied element-by-element and then summed.
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * <pre>
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  *     sum = pSrcA[0]*pSrcB[0] + pSrcA[1]*pSrcB[1] + ... + pSrcA[blockSize-1]*pSrcB[blockSize-1]
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * </pre>     
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  *
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * There are separate functions for floating-point, Q7, Q15, and Q31 data types.    
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** /**    
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @addtogroup dot_prod    
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @{    
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** /**    
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @brief Dot product of floating-point vectors.    
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @param[in]       *pSrcA points to the first input vector    
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @param[in]       *pSrcB points to the second input vector    
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @param[in]       blockSize number of samples in each vector    
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @param[out]      *result output result returned here    
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  * @return none.    
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****  */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** void arm_dot_prod_f32(
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   float32_t * pSrcA,
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   float32_t * pSrcB,
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   uint32_t blockSize,
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   float32_t * result)
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** {
  29              	 .loc 1 80 0
  30              	 .cfi_startproc
  31              	 
  32              	 
  33 0000 80B5     	 push {r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 8
  36              	 .cfi_offset 7,-8
  37              	 .cfi_offset 14,-4
  38 0002 86B0     	 sub sp,sp,#24
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 32
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
  44 0006 F860     	 str r0,[r7,#12]
  45 0008 B960     	 str r1,[r7,#8]
  46 000a 7A60     	 str r2,[r7,#4]
  47 000c 3B60     	 str r3,[r7]
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   float32_t sum = 0.0f;                          /* Temporary result storage */
  48              	 .loc 1 81 0
  49 000e 4FF00003 	 mov r3,#0
  50 0012 7B61     	 str r3,[r7,#20]
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   /*loop Unrolling */
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize >> 2u;
  51              	 .loc 1 89 0
  52 0014 7B68     	 ldr r3,[r7,#4]
  53 0016 9B08     	 lsrs r3,r3,#2
  54 0018 3B61     	 str r3,[r7,#16]
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   while(blkCnt > 0u)
  55              	 .loc 1 93 0
  56 001a 4EE0     	 b .L2
  57              	.L3:
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   {
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and then store the result in a temporary buffer */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
  58              	 .loc 1 97 0
  59 001c FB68     	 ldr r3,[r7,#12]
  60 001e 1A1D     	 adds r2,r3,#4
  61 0020 FA60     	 str r2,[r7,#12]
  62 0022 1968     	 ldr r1,[r3]
  63 0024 BB68     	 ldr r3,[r7,#8]
  64 0026 1A1D     	 adds r2,r3,#4
  65 0028 BA60     	 str r2,[r7,#8]
  66 002a 1B68     	 ldr r3,[r3]
  67 002c 0846     	 mov r0,r1
  68 002e 1946     	 mov r1,r3
  69 0030 FFF7FEFF 	 bl __aeabi_fmul
  70 0034 0346     	 mov r3,r0
  71 0036 7869     	 ldr r0,[r7,#20]
  72 0038 1946     	 mov r1,r3
  73 003a FFF7FEFF 	 bl __aeabi_fadd
  74 003e 0346     	 mov r3,r0
  75 0040 7B61     	 str r3,[r7,#20]
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
  76              	 .loc 1 98 0
  77 0042 FB68     	 ldr r3,[r7,#12]
  78 0044 1A1D     	 adds r2,r3,#4
  79 0046 FA60     	 str r2,[r7,#12]
  80 0048 1968     	 ldr r1,[r3]
  81 004a BB68     	 ldr r3,[r7,#8]
  82 004c 1A1D     	 adds r2,r3,#4
  83 004e BA60     	 str r2,[r7,#8]
  84 0050 1B68     	 ldr r3,[r3]
  85 0052 0846     	 mov r0,r1
  86 0054 1946     	 mov r1,r3
  87 0056 FFF7FEFF 	 bl __aeabi_fmul
  88 005a 0346     	 mov r3,r0
  89 005c 7869     	 ldr r0,[r7,#20]
  90 005e 1946     	 mov r1,r3
  91 0060 FFF7FEFF 	 bl __aeabi_fadd
  92 0064 0346     	 mov r3,r0
  93 0066 7B61     	 str r3,[r7,#20]
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
  94              	 .loc 1 99 0
  95 0068 FB68     	 ldr r3,[r7,#12]
  96 006a 1A1D     	 adds r2,r3,#4
  97 006c FA60     	 str r2,[r7,#12]
  98 006e 1968     	 ldr r1,[r3]
  99 0070 BB68     	 ldr r3,[r7,#8]
 100 0072 1A1D     	 adds r2,r3,#4
 101 0074 BA60     	 str r2,[r7,#8]
 102 0076 1B68     	 ldr r3,[r3]
 103 0078 0846     	 mov r0,r1
 104 007a 1946     	 mov r1,r3
 105 007c FFF7FEFF 	 bl __aeabi_fmul
 106 0080 0346     	 mov r3,r0
 107 0082 7869     	 ldr r0,[r7,#20]
 108 0084 1946     	 mov r1,r3
 109 0086 FFF7FEFF 	 bl __aeabi_fadd
 110 008a 0346     	 mov r3,r0
 111 008c 7B61     	 str r3,[r7,#20]
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 112              	 .loc 1 100 0
 113 008e FB68     	 ldr r3,[r7,#12]
 114 0090 1A1D     	 adds r2,r3,#4
 115 0092 FA60     	 str r2,[r7,#12]
 116 0094 1968     	 ldr r1,[r3]
 117 0096 BB68     	 ldr r3,[r7,#8]
 118 0098 1A1D     	 adds r2,r3,#4
 119 009a BA60     	 str r2,[r7,#8]
 120 009c 1B68     	 ldr r3,[r3]
 121 009e 0846     	 mov r0,r1
 122 00a0 1946     	 mov r1,r3
 123 00a2 FFF7FEFF 	 bl __aeabi_fmul
 124 00a6 0346     	 mov r3,r0
 125 00a8 7869     	 ldr r0,[r7,#20]
 126 00aa 1946     	 mov r1,r3
 127 00ac FFF7FEFF 	 bl __aeabi_fadd
 128 00b0 0346     	 mov r3,r0
 129 00b2 7B61     	 str r3,[r7,#20]
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement the loop counter */
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
 130              	 .loc 1 103 0
 131 00b4 3B69     	 ldr r3,[r7,#16]
 132 00b6 013B     	 subs r3,r3,#1
 133 00b8 3B61     	 str r3,[r7,#16]
 134              	.L2:
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 135              	 .loc 1 93 0
 136 00ba 3B69     	 ldr r3,[r7,#16]
 137 00bc 002B     	 cmp r3,#0
 138 00be ADD1     	 bne .L3
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****    ** No loop unrolling is used. */
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize % 0x4u;
 139              	 .loc 1 108 0
 140 00c0 7B68     	 ldr r3,[r7,#4]
 141 00c2 03F00303 	 and r3,r3,#3
 142 00c6 3B61     	 str r3,[r7,#16]
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** #else
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Run the below code for Cortex-M0 */
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Initialize blkCnt with number of samples */
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   blkCnt = blockSize;
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   while(blkCnt > 0u)
 143              	 .loc 1 120 0
 144 00c8 15E0     	 b .L4
 145              	.L5:
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Calculate dot product and then store the result in a temporary buffer. */
 124:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     sum += (*pSrcA++) * (*pSrcB++);
 146              	 .loc 1 124 0
 147 00ca FB68     	 ldr r3,[r7,#12]
 148 00cc 1A1D     	 adds r2,r3,#4
 149 00ce FA60     	 str r2,[r7,#12]
 150 00d0 1968     	 ldr r1,[r3]
 151 00d2 BB68     	 ldr r3,[r7,#8]
 152 00d4 1A1D     	 adds r2,r3,#4
 153 00d6 BA60     	 str r2,[r7,#8]
 154 00d8 1B68     	 ldr r3,[r3]
 155 00da 0846     	 mov r0,r1
 156 00dc 1946     	 mov r1,r3
 157 00de FFF7FEFF 	 bl __aeabi_fmul
 158 00e2 0346     	 mov r3,r0
 159 00e4 7869     	 ldr r0,[r7,#20]
 160 00e6 1946     	 mov r1,r3
 161 00e8 FFF7FEFF 	 bl __aeabi_fadd
 162 00ec 0346     	 mov r3,r0
 163 00ee 7B61     	 str r3,[r7,#20]
 125:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** 
 126:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     /* Decrement the loop counter */
 127:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****     blkCnt--;
 164              	 .loc 1 127 0
 165 00f0 3B69     	 ldr r3,[r7,#16]
 166 00f2 013B     	 subs r3,r3,#1
 167 00f4 3B61     	 str r3,[r7,#16]
 168              	.L4:
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   {
 169              	 .loc 1 120 0
 170 00f6 3B69     	 ldr r3,[r7,#16]
 171 00f8 002B     	 cmp r3,#0
 172 00fa E6D1     	 bne .L5
 128:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   }
 129:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   /* Store the result back in the destination buffer */
 130:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c ****   *result = sum;
 173              	 .loc 1 130 0
 174 00fc 3B68     	 ldr r3,[r7]
 175 00fe 7A69     	 ldr r2,[r7,#20]
 176 0100 1A60     	 str r2,[r3]
 131:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_dot_prod_f32.c **** }
 177              	 .loc 1 131 0
 178 0102 1837     	 adds r7,r7,#24
 179              	.LCFI3:
 180              	 .cfi_def_cfa_offset 8
 181 0104 BD46     	 mov sp,r7
 182              	.LCFI4:
 183              	 .cfi_def_cfa_register 13
 184              	 
 185 0106 80BD     	 pop {r7,pc}
 186              	 .cfi_endproc
 187              	.LFE139:
 189              	 .text
 190              	.Letext0:
 191              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 192              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 193              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_dot_prod_f32.c
    {standard input}:21     .text.arm_dot_prod_f32:00000000 $t
    {standard input}:26     .text.arm_dot_prod_f32:00000000 arm_dot_prod_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fadd
