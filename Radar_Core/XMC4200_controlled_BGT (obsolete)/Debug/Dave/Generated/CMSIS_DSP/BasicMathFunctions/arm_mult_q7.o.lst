   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_mult_q7.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_mult_q7,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_mult_q7
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_mult_q7:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c"
   1:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *    
   4:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *    
   7:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * Title:	    arm_mult_q7.c    
   9:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *    
  10:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * Description:	Q7 vector multiplication.    
  11:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *    
  12:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *  
  14:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** *
  27:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * POSSIBILITY OF SUCH DAMAGE. 
  39:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  41:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  43:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @ingroup groupMath    
  45:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  46:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  47:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @addtogroup BasicMult    
  49:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  51:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  52:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @brief           Q7 vector multiplication    
  54:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcA points to the first input vector    
  55:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       *pSrcB points to the second input vector    
  56:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[out]      *pDst points to the output vector    
  57:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @param[in]       blockSize number of samples in each vector    
  58:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * @return none.    
  59:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  *    
  60:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * <b>Scaling and Overflow Behavior:</b>    
  61:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * \par    
  62:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * The function uses saturating arithmetic.    
  63:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  * Results outside of the allowable Q7 range [0x80 0x7F] will be saturated.    
  64:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****  */
  65:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  66:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** void arm_mult_q7(
  67:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcA,
  68:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pSrcB,
  69:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t * pDst,
  70:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   uint32_t blockSize)
  71:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** {
  27              	 .loc 1 71 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 95B0     	 sub sp,sp,#84
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 88
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 B960     	 str r1,[r7,#8]
  44 000a 7A60     	 str r2,[r7,#4]
  45 000c 3B60     	 str r3,[r7]
  72:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   uint32_t blkCnt;                               /* loop counters */
  73:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  74:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #ifndef ARM_MATH_CM0_FAMILY
  75:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  76:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** /* Run the below code for Cortex-M4 and Cortex-M3 */
  77:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   q7_t out1, out2, out3, out4;                   /* Temporary variables to store the product */
  78:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  79:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* loop Unrolling */
  80:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize >> 2u;
  46              	 .loc 1 80 0
  47 000e 3B68     	 ldr r3,[r7]
  48 0010 9B08     	 lsrs r3,r3,#2
  49 0012 FB64     	 str r3,[r7,#76]
  81:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  82:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
  83:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   while(blkCnt > 0u)
  50              	 .loc 1 84 0
  51 0014 6CE0     	 b .L2
  52              	.L3:
  53              	.LBB2:
  85:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
  86:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
  87:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the results in temporary variables */
  88:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out1 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  54              	 .loc 1 88 0
  55 0016 FB68     	 ldr r3,[r7,#12]
  56 0018 5A1C     	 adds r2,r3,#1
  57 001a FA60     	 str r2,[r7,#12]
  58 001c 1B78     	 ldrb r3,[r3]
  59 001e 5AB2     	 sxtb r2,r3
  60 0020 BB68     	 ldr r3,[r7,#8]
  61 0022 591C     	 adds r1,r3,#1
  62 0024 B960     	 str r1,[r7,#8]
  63 0026 1B78     	 ldrb r3,[r3]
  64 0028 5BB2     	 sxtb r3,r3
  65 002a 03FB02F3 	 mul r3,r3,r2
  66 002e DB11     	 asrs r3,r3,#7
  67 0030 BB64     	 str r3,[r7,#72]
  68 0032 BB6C     	 ldr r3,[r7,#72]
  69              	
  70 0034 03F30703 	 ssat r3,#8,r3
  71              	
  72              	 .thumb
  73 0038 7B64     	 str r3,[r7,#68]
  74 003a 7B6C     	 ldr r3,[r7,#68]
  75              	.LBE2:
  76 003c 87F84330 	 strb r3,[r7,#67]
  77              	.LBB3:
  89:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out2 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
  78              	 .loc 1 89 0
  79 0040 FB68     	 ldr r3,[r7,#12]
  80 0042 5A1C     	 adds r2,r3,#1
  81 0044 FA60     	 str r2,[r7,#12]
  82 0046 1B78     	 ldrb r3,[r3]
  83 0048 5AB2     	 sxtb r2,r3
  84 004a BB68     	 ldr r3,[r7,#8]
  85 004c 591C     	 adds r1,r3,#1
  86 004e B960     	 str r1,[r7,#8]
  87 0050 1B78     	 ldrb r3,[r3]
  88 0052 5BB2     	 sxtb r3,r3
  89 0054 03FB02F3 	 mul r3,r3,r2
  90 0058 DB11     	 asrs r3,r3,#7
  91 005a FB63     	 str r3,[r7,#60]
  92 005c FB6B     	 ldr r3,[r7,#60]
  93              	
  94 005e 03F30703 	 ssat r3,#8,r3
  95              	
  96              	 .thumb
  97 0062 BB63     	 str r3,[r7,#56]
  98 0064 BB6B     	 ldr r3,[r7,#56]
  99              	.LBE3:
 100 0066 87F83730 	 strb r3,[r7,#55]
 101              	.LBB4:
  90:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out3 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 102              	 .loc 1 90 0
 103 006a FB68     	 ldr r3,[r7,#12]
 104 006c 5A1C     	 adds r2,r3,#1
 105 006e FA60     	 str r2,[r7,#12]
 106 0070 1B78     	 ldrb r3,[r3]
 107 0072 5AB2     	 sxtb r2,r3
 108 0074 BB68     	 ldr r3,[r7,#8]
 109 0076 591C     	 adds r1,r3,#1
 110 0078 B960     	 str r1,[r7,#8]
 111 007a 1B78     	 ldrb r3,[r3]
 112 007c 5BB2     	 sxtb r3,r3
 113 007e 03FB02F3 	 mul r3,r3,r2
 114 0082 DB11     	 asrs r3,r3,#7
 115 0084 3B63     	 str r3,[r7,#48]
 116 0086 3B6B     	 ldr r3,[r7,#48]
 117              	
 118 0088 03F30703 	 ssat r3,#8,r3
 119              	
 120              	 .thumb
 121 008c FB62     	 str r3,[r7,#44]
 122 008e FB6A     	 ldr r3,[r7,#44]
 123              	.LBE4:
 124 0090 87F82B30 	 strb r3,[r7,#43]
 125              	.LBB5:
  91:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     out4 = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 126              	 .loc 1 91 0
 127 0094 FB68     	 ldr r3,[r7,#12]
 128 0096 5A1C     	 adds r2,r3,#1
 129 0098 FA60     	 str r2,[r7,#12]
 130 009a 1B78     	 ldrb r3,[r3]
 131 009c 5AB2     	 sxtb r2,r3
 132 009e BB68     	 ldr r3,[r7,#8]
 133 00a0 591C     	 adds r1,r3,#1
 134 00a2 B960     	 str r1,[r7,#8]
 135 00a4 1B78     	 ldrb r3,[r3]
 136 00a6 5BB2     	 sxtb r3,r3
 137 00a8 03FB02F3 	 mul r3,r3,r2
 138 00ac DB11     	 asrs r3,r3,#7
 139 00ae 7B62     	 str r3,[r7,#36]
 140 00b0 7B6A     	 ldr r3,[r7,#36]
 141              	
 142 00b2 03F30703 	 ssat r3,#8,r3
 143              	
 144              	 .thumb
 145 00b6 3B62     	 str r3,[r7,#32]
 146 00b8 3B6A     	 ldr r3,[r7,#32]
 147              	.LBE5:
 148 00ba FB77     	 strb r3,[r7,#31]
  92:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  93:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Store the results of 4 inputs in the destination buffer in single cycle by packing */
  94:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     *__SIMD32(pDst)++ = __PACKq7(out1, out2, out3, out4);
 149              	 .loc 1 94 0
 150 00bc 3A1D     	 adds r2,r7,#4
 151 00be 1368     	 ldr r3,[r2]
 152 00c0 191D     	 adds r1,r3,#4
 153 00c2 1160     	 str r1,[r2]
 154 00c4 97F94320 	 ldrsb r2,[r7,#67]
 155 00c8 D1B2     	 uxtb r1,r2
 156 00ca 97F93720 	 ldrsb r2,[r7,#55]
 157 00ce 1202     	 lsls r2,r2,#8
 158 00d0 92B2     	 uxth r2,r2
 159 00d2 1143     	 orrs r1,r1,r2
 160 00d4 97F92B20 	 ldrsb r2,[r7,#43]
 161 00d8 1204     	 lsls r2,r2,#16
 162 00da 02F47F02 	 and r2,r2,#16711680
 163 00de 1143     	 orrs r1,r1,r2
 164 00e0 97F91F20 	 ldrsb r2,[r7,#31]
 165 00e4 1206     	 lsls r2,r2,#24
 166 00e6 0A43     	 orrs r2,r2,r1
 167 00e8 1A60     	 str r2,[r3]
  95:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
  96:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
  97:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 168              	 .loc 1 97 0
 169 00ea FB6C     	 ldr r3,[r7,#76]
 170 00ec 013B     	 subs r3,r3,#1
 171 00ee FB64     	 str r3,[r7,#76]
 172              	.L2:
  84:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 173              	 .loc 1 84 0
 174 00f0 FB6C     	 ldr r3,[r7,#76]
 175 00f2 002B     	 cmp r3,#0
 176 00f4 8FD1     	 bne .L3
  98:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   }
  99:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 100:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
 101:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****    ** No loop unrolling is used. */
 102:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize % 0x4u;
 177              	 .loc 1 102 0
 178 00f6 3B68     	 ldr r3,[r7]
 179 00f8 03F00303 	 and r3,r3,#3
 180 00fc FB64     	 str r3,[r7,#76]
 103:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 104:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #else
 105:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 106:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* Run the below code for Cortex-M0 */
 107:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 108:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   /* Initialize blkCnt with number of samples */
 109:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   blkCnt = blockSize;
 110:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 111:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 112:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 113:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   while(blkCnt > 0u)
 181              	 .loc 1 114 0
 182 00fe 1AE0     	 b .L4
 183              	.L5:
 115:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 116:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* C = A * B */
 117:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Multiply the inputs and store the result in the destination buffer */
 118:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     *pDst++ = (q7_t) __SSAT((((q15_t) (*pSrcA++) * (*pSrcB++)) >> 7), 8);
 184              	 .loc 1 118 0
 185 0100 7B68     	 ldr r3,[r7,#4]
 186 0102 5A1C     	 adds r2,r3,#1
 187 0104 7A60     	 str r2,[r7,#4]
 188              	.LBB6:
 189 0106 FA68     	 ldr r2,[r7,#12]
 190 0108 511C     	 adds r1,r2,#1
 191 010a F960     	 str r1,[r7,#12]
 192 010c 1278     	 ldrb r2,[r2]
 193 010e 51B2     	 sxtb r1,r2
 194 0110 BA68     	 ldr r2,[r7,#8]
 195 0112 501C     	 adds r0,r2,#1
 196 0114 B860     	 str r0,[r7,#8]
 197 0116 1278     	 ldrb r2,[r2]
 198 0118 52B2     	 sxtb r2,r2
 199 011a 02FB01F2 	 mul r2,r2,r1
 200 011e D211     	 asrs r2,r2,#7
 201 0120 BA61     	 str r2,[r7,#24]
 202 0122 BA69     	 ldr r2,[r7,#24]
 203              	
 204 0124 02F30702 	 ssat r2,#8,r2
 205              	
 206              	 .thumb
 207 0128 7A61     	 str r2,[r7,#20]
 208 012a 7A69     	 ldr r2,[r7,#20]
 209              	.LBE6:
 210 012c D2B2     	 uxtb r2,r2
 211 012e 1A70     	 strb r2,[r3]
 119:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** 
 120:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     /* Decrement the blockSize loop counter */
 121:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****     blkCnt--;
 212              	 .loc 1 121 0
 213 0130 FB6C     	 ldr r3,[r7,#76]
 214 0132 013B     	 subs r3,r3,#1
 215 0134 FB64     	 str r3,[r7,#76]
 216              	.L4:
 114:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   {
 217              	 .loc 1 114 0
 218 0136 FB6C     	 ldr r3,[r7,#76]
 219 0138 002B     	 cmp r3,#0
 220 013a E1D1     	 bne .L5
 122:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c ****   }
 123:../Dave/Generated/CMSIS_DSP/BasicMathFunctions/arm_mult_q7.c **** }
 221              	 .loc 1 123 0
 222 013c 5437     	 adds r7,r7,#84
 223              	.LCFI3:
 224              	 .cfi_def_cfa_offset 4
 225 013e BD46     	 mov sp,r7
 226              	.LCFI4:
 227              	 .cfi_def_cfa_register 13
 228              	 
 229 0140 5DF8047B 	 ldr r7,[sp],#4
 230              	.LCFI5:
 231              	 .cfi_restore 7
 232              	 .cfi_def_cfa_offset 0
 233 0144 7047     	 bx lr
 234              	 .cfi_endproc
 235              	.LFE139:
 237 0146 00BF     	 .text
 238              	.Letext0:
 239              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 240              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 241              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mult_q7.c
    {standard input}:19     .text.arm_mult_q7:00000000 $t
    {standard input}:24     .text.arm_mult_q7:00000000 arm_mult_q7
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
