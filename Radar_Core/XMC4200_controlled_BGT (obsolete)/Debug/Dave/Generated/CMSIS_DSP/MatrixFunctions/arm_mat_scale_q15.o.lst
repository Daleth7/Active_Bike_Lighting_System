   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_mat_scale_q15.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_mat_scale_q15,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_mat_scale_q15
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_mat_scale_q15:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * $Date:        31. July 2014
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Title:	    arm_mat_scale_q15.c    
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Description:	Multiplies a Q15 matrix by a scalar.    
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *    
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *  
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** *
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * POSSIBILITY OF SUCH DAMAGE.  
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @ingroup groupMatrix    
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @addtogroup MatrixScale    
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @brief Q15 matrix scaling.    
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       *pSrc points to input matrix    
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       scaleFract fractional portion of the scale factor    
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[in]       shift number of bits to shift the result by    
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @param[out]      *pDst points to output matrix structure    
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @return     		The function returns either    
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  *    
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * @details    
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * <b>Scaling and Overflow Behavior:</b>    
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * \par    
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * The input data <code>*pSrc</code> and <code>scaleFract</code> are in 1.15 format.    
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  * These are multiplied to yield a 2.30 intermediate result and this is shifted with saturation to 
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****  */
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** arm_status arm_mat_scale_q15(
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   const arm_matrix_instance_q15 * pSrc,
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t scaleFract,
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   int32_t shift,
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   arm_matrix_instance_q15 * pDst)
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** {
  27              	 .loc 1 73 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 A5B0     	 sub sp,sp,#148
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 152
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 7A60     	 str r2,[r7,#4]
  44 000a 3B60     	 str r3,[r7]
  45 000c 0B46     	 mov r3,r1
  46 000e 7B81     	 strh r3,[r7,#10]
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pIn = pSrc->pData;                      /* input data matrix pointer */
  47              	 .loc 1 74 0
  48 0010 FB68     	 ldr r3,[r7,#12]
  49 0012 5B68     	 ldr r3,[r3,#4]
  50 0014 C7F88C30 	 str r3,[r7,#140]
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t *pOut = pDst->pData;                     /* output data matrix pointer */
  51              	 .loc 1 75 0
  52 0018 3B68     	 ldr r3,[r7]
  53 001a 5B68     	 ldr r3,[r3,#4]
  54 001c C7F88830 	 str r3,[r7,#136]
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t numSamples;                           /* total number of elements in the matrix */
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   int32_t totShift = 15 - shift;                 /* total shift to apply after scaling */
  55              	 .loc 1 77 0
  56 0020 7B68     	 ldr r3,[r7,#4]
  57 0022 C3F10F03 	 rsb r3,r3,#15
  58 0026 FB67     	 str r3,[r7,#124]
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   uint32_t blkCnt;                               /* loop counters */
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   arm_status status;                             /* status of matrix scaling     */
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #ifndef ARM_MATH_CM0_FAMILY
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q15_t in1, in2, in3, in4;
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q31_t out1, out2, out3, out4;
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   q31_t inA1, inA2;
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif //     #ifndef ARM_MATH_CM0_FAMILY
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #ifdef ARM_MATH_MATRIX_CHECK
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   /* Check for matrix mismatch */
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   if((pSrc->numRows != pDst->numRows) || (pSrc->numCols != pDst->numCols))
  59              	 .loc 1 91 0
  60 0028 FB68     	 ldr r3,[r7,#12]
  61 002a 1A88     	 ldrh r2,[r3]
  62 002c 3B68     	 ldr r3,[r7]
  63 002e 1B88     	 ldrh r3,[r3]
  64 0030 9A42     	 cmp r2,r3
  65 0032 05D1     	 bne .L2
  66              	 .loc 1 91 0 is_stmt 0 discriminator 1
  67 0034 FB68     	 ldr r3,[r7,#12]
  68 0036 5A88     	 ldrh r2,[r3,#2]
  69 0038 3B68     	 ldr r3,[r7]
  70 003a 5B88     	 ldrh r3,[r3,#2]
  71 003c 9A42     	 cmp r2,r3
  72 003e 03D0     	 beq .L3
  73              	.L2:
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   {
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SIZE_MISMATCH;
  74              	 .loc 1 94 0 is_stmt 1
  75 0040 FD23     	 movs r3,#253
  76 0042 87F88330 	 strb r3,[r7,#131]
  77 0046 D5E0     	 b .L4
  78              	.L3:
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   }
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   else
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif //    #ifdef ARM_MATH_MATRIX_CHECK
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   {
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Total number of samples in the input matrix */
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
  79              	 .loc 1 100 0
  80 0048 FB68     	 ldr r3,[r7,#12]
  81 004a 1B88     	 ldrh r3,[r3]
  82 004c 1A46     	 mov r2,r3
  83 004e FB68     	 ldr r3,[r7,#12]
  84 0050 5B88     	 ldrh r3,[r3,#2]
  85 0052 03FB02F3 	 mul r3,r3,r2
  86 0056 BB67     	 str r3,[r7,#120]
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #ifndef ARM_MATH_CM0_FAMILY
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M4 and Cortex-M3 */
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Loop Unrolling */
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples >> 2;
  87              	 .loc 1 106 0
  88 0058 BB6F     	 ldr r3,[r7,#120]
  89 005a 9B08     	 lsrs r3,r3,#2
  90 005c C7F88430 	 str r3,[r7,#132]
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     while(blkCnt > 0u)
  91              	 .loc 1 110 0
  92 0060 96E0     	 b .L5
  93              	.L6:
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Reading 2 inputs from memory */
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn);
  94              	 .loc 1 115 0
  95 0062 D7F88C30 	 ldr r3,[r7,#140]
  96 0066 1B68     	 ldr r3,[r3]
  97 0068 7B67     	 str r3,[r7,#116]
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 2);
  98              	 .loc 1 116 0
  99 006a D7F88C30 	 ldr r3,[r7,#140]
 100 006e 5B68     	 ldr r3,[r3,#4]
 101 0070 3B67     	 str r3,[r7,#112]
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C = A * scale */
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale the inputs and then store the 2 results in the destination buffer        
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****        * in single cycle by packing the outputs */
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out1 = (q31_t) ((q15_t) (inA1 >> 16) * scaleFract);
 102              	 .loc 1 121 0
 103 0072 7B6F     	 ldr r3,[r7,#116]
 104 0074 1B14     	 asrs r3,r3,#16
 105 0076 9BB2     	 uxth r3,r3
 106 0078 1BB2     	 sxth r3,r3
 107 007a B7F90A20 	 ldrsh r2,[r7,#10]
 108 007e 02FB03F3 	 mul r3,r2,r3
 109 0082 FB66     	 str r3,[r7,#108]
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out2 = (q31_t) ((q15_t) inA1 * scaleFract);
 110              	 .loc 1 122 0
 111 0084 7B6F     	 ldr r3,[r7,#116]
 112 0086 9BB2     	 uxth r3,r3
 113 0088 1BB2     	 sxth r3,r3
 114 008a B7F90A20 	 ldrsh r2,[r7,#10]
 115 008e 02FB03F3 	 mul r3,r2,r3
 116 0092 BB66     	 str r3,[r7,#104]
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out3 = (q31_t) ((q15_t) (inA2 >> 16) * scaleFract);
 117              	 .loc 1 123 0
 118 0094 3B6F     	 ldr r3,[r7,#112]
 119 0096 1B14     	 asrs r3,r3,#16
 120 0098 9BB2     	 uxth r3,r3
 121 009a 1BB2     	 sxth r3,r3
 122 009c B7F90A20 	 ldrsh r2,[r7,#10]
 123 00a0 02FB03F3 	 mul r3,r2,r3
 124 00a4 7B66     	 str r3,[r7,#100]
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out4 = (q31_t) ((q15_t) inA2 * scaleFract);
 125              	 .loc 1 124 0
 126 00a6 3B6F     	 ldr r3,[r7,#112]
 127 00a8 9BB2     	 uxth r3,r3
 128 00aa 1BB2     	 sxth r3,r3
 129 00ac B7F90A20 	 ldrsh r2,[r7,#10]
 130 00b0 02FB03F3 	 mul r3,r2,r3
 131 00b4 3B66     	 str r3,[r7,#96]
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out1 = out1 >> totShift;
 132              	 .loc 1 126 0
 133 00b6 FA6E     	 ldr r2,[r7,#108]
 134 00b8 FB6F     	 ldr r3,[r7,#124]
 135 00ba 42FA03F3 	 asr r3,r2,r3
 136 00be FB66     	 str r3,[r7,#108]
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA1 = _SIMD32_OFFSET(pIn + 4);
 137              	 .loc 1 127 0
 138 00c0 D7F88C30 	 ldr r3,[r7,#140]
 139 00c4 9B68     	 ldr r3,[r3,#8]
 140 00c6 7B67     	 str r3,[r7,#116]
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out2 = out2 >> totShift;
 141              	 .loc 1 128 0
 142 00c8 BA6E     	 ldr r2,[r7,#104]
 143 00ca FB6F     	 ldr r3,[r7,#124]
 144 00cc 42FA03F3 	 asr r3,r2,r3
 145 00d0 BB66     	 str r3,[r7,#104]
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       inA2 = _SIMD32_OFFSET(pIn + 6);
 146              	 .loc 1 129 0
 147 00d2 D7F88C30 	 ldr r3,[r7,#140]
 148 00d6 DB68     	 ldr r3,[r3,#12]
 149 00d8 3B67     	 str r3,[r7,#112]
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out3 = out3 >> totShift;
 150              	 .loc 1 130 0
 151 00da 7A6E     	 ldr r2,[r7,#100]
 152 00dc FB6F     	 ldr r3,[r7,#124]
 153 00de 42FA03F3 	 asr r3,r2,r3
 154 00e2 7B66     	 str r3,[r7,#100]
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       out4 = out4 >> totShift;
 155              	 .loc 1 131 0
 156 00e4 3A6E     	 ldr r2,[r7,#96]
 157 00e6 FB6F     	 ldr r3,[r7,#124]
 158 00e8 42FA03F3 	 asr r3,r2,r3
 159 00ec 3B66     	 str r3,[r7,#96]
 160              	.LBB2:
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in1 = (q15_t) (__SSAT(out1, 16));
 161              	 .loc 1 133 0
 162 00ee FB6E     	 ldr r3,[r7,#108]
 163 00f0 FB65     	 str r3,[r7,#92]
 164 00f2 FB6D     	 ldr r3,[r7,#92]
 165              	
 166 00f4 03F30F03 	 ssat r3,#16,r3
 167              	
 168              	 .thumb
 169 00f8 BB65     	 str r3,[r7,#88]
 170 00fa BB6D     	 ldr r3,[r7,#88]
 171              	.LBE2:
 172 00fc A7F85630 	 strh r3,[r7,#86]
 173              	.LBB3:
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in2 = (q15_t) (__SSAT(out2, 16));
 174              	 .loc 1 134 0
 175 0100 BB6E     	 ldr r3,[r7,#104]
 176 0102 3B65     	 str r3,[r7,#80]
 177 0104 3B6D     	 ldr r3,[r7,#80]
 178              	
 179 0106 03F30F03 	 ssat r3,#16,r3
 180              	
 181              	 .thumb
 182 010a FB64     	 str r3,[r7,#76]
 183 010c FB6C     	 ldr r3,[r7,#76]
 184              	.LBE3:
 185 010e A7F84A30 	 strh r3,[r7,#74]
 186              	.LBB4:
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in3 = (q15_t) (__SSAT(out3, 16));
 187              	 .loc 1 135 0
 188 0112 7B6E     	 ldr r3,[r7,#100]
 189 0114 7B64     	 str r3,[r7,#68]
 190 0116 7B6C     	 ldr r3,[r7,#68]
 191              	
 192 0118 03F30F03 	 ssat r3,#16,r3
 193              	
 194              	 .thumb
 195 011c 3B64     	 str r3,[r7,#64]
 196 011e 3B6C     	 ldr r3,[r7,#64]
 197              	.LBE4:
 198 0120 FB87     	 strh r3,[r7,#62]
 199              	.LBB5:
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       in4 = (q15_t) (__SSAT(out4, 16));
 200              	 .loc 1 136 0
 201 0122 3B6E     	 ldr r3,[r7,#96]
 202 0124 BB63     	 str r3,[r7,#56]
 203 0126 BB6B     	 ldr r3,[r7,#56]
 204              	
 205 0128 03F30F03 	 ssat r3,#16,r3
 206              	
 207              	 .thumb
 208 012c 7B63     	 str r3,[r7,#52]
 209 012e 7B6B     	 ldr r3,[r7,#52]
 210              	.LBE5:
 211 0130 7B86     	 strh r3,[r7,#50]
 212              	.LBB6:
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut) = __PKHBT(in2, in1, 16);
 213              	 .loc 1 138 0
 214 0132 B7F94A30 	 ldrsh r3,[r7,#74]
 215 0136 FB62     	 str r3,[r7,#44]
 216 0138 B7F95630 	 ldrsh r3,[r7,#86]
 217 013c BB62     	 str r3,[r7,#40]
 218 013e FB6A     	 ldr r3,[r7,#44]
 219 0140 BA6A     	 ldr r2,[r7,#40]
 220              	
 221 0142 C3EA0243 	 pkhbt r3,r3,r2,lsl#16
 222              	
 223              	 .thumb
 224 0146 7B62     	 str r3,[r7,#36]
 225 0148 7B6A     	 ldr r3,[r7,#36]
 226              	.LBE6:
 227 014a 1A46     	 mov r2,r3
 228 014c D7F88830 	 ldr r3,[r7,#136]
 229 0150 1A60     	 str r2,[r3]
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       _SIMD32_OFFSET(pOut + 2) = __PKHBT(in4, in3, 16);
 230              	 .loc 1 139 0
 231 0152 D7F88830 	 ldr r3,[r7,#136]
 232 0156 0433     	 adds r3,r3,#4
 233              	.LBB7:
 234 0158 B7F93220 	 ldrsh r2,[r7,#50]
 235 015c 3A62     	 str r2,[r7,#32]
 236 015e B7F93E20 	 ldrsh r2,[r7,#62]
 237 0162 FA61     	 str r2,[r7,#28]
 238 0164 3A6A     	 ldr r2,[r7,#32]
 239 0166 F969     	 ldr r1,[r7,#28]
 240              	
 241 0168 C2EA0142 	 pkhbt r2,r2,r1,lsl#16
 242              	
 243              	 .thumb
 244 016c BA61     	 str r2,[r7,#24]
 245 016e BA69     	 ldr r2,[r7,#24]
 246              	.LBE7:
 247 0170 1A60     	 str r2,[r3]
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* update pointers to process next sampels */
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       pIn += 4u;
 248              	 .loc 1 142 0
 249 0172 D7F88C30 	 ldr r3,[r7,#140]
 250 0176 0833     	 adds r3,r3,#8
 251 0178 C7F88C30 	 str r3,[r7,#140]
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       pOut += 4u;
 252              	 .loc 1 143 0
 253 017c D7F88830 	 ldr r3,[r7,#136]
 254 0180 0833     	 adds r3,r3,#8
 255 0182 C7F88830 	 str r3,[r7,#136]
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 256              	 .loc 1 147 0
 257 0186 D7F88430 	 ldr r3,[r7,#132]
 258 018a 013B     	 subs r3,r3,#1
 259 018c C7F88430 	 str r3,[r7,#132]
 260              	.L5:
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 261              	 .loc 1 110 0
 262 0190 D7F88430 	 ldr r3,[r7,#132]
 263 0194 002B     	 cmp r3,#0
 264 0196 7FF464AF 	 bne .L6
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     }
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****      ** No loop unrolling is used. */
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples % 0x4u;
 265              	 .loc 1 152 0
 266 019a BB6F     	 ldr r3,[r7,#120]
 267 019c 03F00303 	 and r3,r3,#3
 268 01a0 C7F88430 	 str r3,[r7,#132]
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #else
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Run the below code for Cortex-M0 */
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Initialize blkCnt with number of samples */
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     blkCnt = numSamples;
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     while(blkCnt > 0u)
 269              	 .loc 1 163 0
 270 01a4 1FE0     	 b .L7
 271              	.L8:
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* C(m,n) = A(m,n) * k */
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Scale, saturate and then store the results in the destination buffer. */
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       *pOut++ =
 272              	 .loc 1 167 0
 273 01a6 D7F88830 	 ldr r3,[r7,#136]
 274 01aa 9A1C     	 adds r2,r3,#2
 275 01ac C7F88820 	 str r2,[r7,#136]
 276              	.LBB8:
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
 277              	 .loc 1 168 0
 278 01b0 D7F88C20 	 ldr r2,[r7,#140]
 279 01b4 911C     	 adds r1,r2,#2
 280 01b6 C7F88C10 	 str r1,[r7,#140]
 281 01ba 1288     	 ldrh r2,[r2]
 282 01bc 12B2     	 sxth r2,r2
 283 01be B7F90A10 	 ldrsh r1,[r7,#10]
 284 01c2 01FB02F1 	 mul r1,r1,r2
 285 01c6 FA6F     	 ldr r2,[r7,#124]
 286 01c8 41FA02F2 	 asr r2,r1,r2
 287 01cc 7A61     	 str r2,[r7,#20]
 288 01ce 7A69     	 ldr r2,[r7,#20]
 289              	
 290 01d0 02F30F02 	 ssat r2,#16,r2
 291              	
 292              	 .thumb
 293 01d4 3A61     	 str r2,[r7,#16]
 294 01d6 3A69     	 ldr r2,[r7,#16]
 295              	.LBE8:
 296 01d8 92B2     	 uxth r2,r2
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****         (q15_t) (__SSAT(((q31_t) (*pIn++) * scaleFract) >> totShift, 16));
 297              	 .loc 1 167 0
 298 01da 1A80     	 strh r2,[r3]
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       /* Decrement the numSamples loop counter */
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****       blkCnt--;
 299              	 .loc 1 171 0
 300 01dc D7F88430 	 ldr r3,[r7,#132]
 301 01e0 013B     	 subs r3,r3,#1
 302 01e2 C7F88430 	 str r3,[r7,#132]
 303              	.L7:
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     {
 304              	 .loc 1 163 0
 305 01e6 D7F88430 	 ldr r3,[r7,#132]
 306 01ea 002B     	 cmp r3,#0
 307 01ec DBD1     	 bne .L8
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     }
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     /* Set status as ARM_MATH_SUCCESS */
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****     status = ARM_MATH_SUCCESS;
 308              	 .loc 1 174 0
 309 01ee 0023     	 movs r3,#0
 310 01f0 87F88330 	 strb r3,[r7,#131]
 311              	.L4:
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   }
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** 
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   /* Return to application */
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c ****   return (status);
 312              	 .loc 1 178 0
 313 01f4 97F88330 	 ldrb r3,[r7,#131]
 314 01f8 5BB2     	 sxtb r3,r3
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_scale_q15.c **** }
 315              	 .loc 1 179 0
 316 01fa 1846     	 mov r0,r3
 317 01fc 9437     	 adds r7,r7,#148
 318              	.LCFI3:
 319              	 .cfi_def_cfa_offset 4
 320 01fe BD46     	 mov sp,r7
 321              	.LCFI4:
 322              	 .cfi_def_cfa_register 13
 323              	 
 324 0200 5DF8047B 	 ldr r7,[sp],#4
 325              	.LCFI5:
 326              	 .cfi_restore 7
 327              	 .cfi_def_cfa_offset 0
 328 0204 7047     	 bx lr
 329              	 .cfi_endproc
 330              	.LFE139:
 332 0206 00BF     	 .text
 333              	.Letext0:
 334              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 335              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 336              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_scale_q15.c
    {standard input}:19     .text.arm_mat_scale_q15:00000000 $t
    {standard input}:24     .text.arm_mat_scale_q15:00000000 arm_mat_scale_q15
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
