   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_mat_add_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fadd
  19              	 .section .text.arm_mat_add_f32,"ax",%progbits
  20              	 .align 2
  21              	 .global arm_mat_add_f32
  22              	 .thumb
  23              	 .thumb_func
  25              	arm_mat_add_f32:
  26              	.LFB139:
  27              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** /* ----------------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * $Date:        31. July 2014
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * Title:        arm_mat_add_f32.c    
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * Description:	Floating-point matrix addition    
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * POSSIBILITY OF SUCH DAMAGE.     
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** * -------------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** /**        
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @ingroup groupMatrix        
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** /**        
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @defgroup MatrixAdd Matrix Addition        
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  *        
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * Adds two matrices.        
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * \image html MatrixAddition.gif "Addition of two 3 x 3 matrices"        
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  *        
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * The functions check to make sure that        
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * <code>pSrcA</code>, <code>pSrcB</code>, and <code>pDst</code> have the same        
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * number of rows and columns.        
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  */
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** /**        
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @addtogroup MatrixAdd        
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @{        
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  */
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** /**        
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @brief Floating-point matrix addition.        
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @param[in]       *pSrcA points to the first input matrix structure        
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @param[in]       *pSrcB points to the second input matrix structure        
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @param[out]      *pDst points to output matrix structure        
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * @return     		The function returns either        
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** arm_status arm_mat_add_f32(
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   arm_matrix_instance_f32 * pDst)
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** {
  28              	 .loc 1 77 0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32 0000 90B5     	 push {r4,r7,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 12
  35              	 .cfi_offset 4,-12
  36              	 .cfi_offset 7,-8
  37              	 .cfi_offset 14,-4
  38 0002 91B0     	 sub sp,sp,#68
  39              	.LCFI1:
  40              	 .cfi_def_cfa_offset 80
  41 0004 00AF     	 add r7,sp,#0
  42              	.LCFI2:
  43              	 .cfi_def_cfa_register 7
  44 0006 F860     	 str r0,[r7,#12]
  45 0008 B960     	 str r1,[r7,#8]
  46 000a 7A60     	 str r2,[r7,#4]
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A  */
  47              	 .loc 1 78 0
  48 000c FB68     	 ldr r3,[r7,#12]
  49 000e 5B68     	 ldr r3,[r3,#4]
  50 0010 FB63     	 str r3,[r7,#60]
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B  */
  51              	 .loc 1 79 0
  52 0012 BB68     	 ldr r3,[r7,#8]
  53 0014 5B68     	 ldr r3,[r3,#4]
  54 0016 BB63     	 str r3,[r7,#56]
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer   */
  55              	 .loc 1 80 0
  56 0018 7B68     	 ldr r3,[r7,#4]
  57 001a 5B68     	 ldr r3,[r3,#4]
  58 001c 7B63     	 str r3,[r7,#52]
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   float32_t inA1, inA2, inB1, inB2, out1, out2;  /* temporary variables */
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #endif //      #ifndef ARM_MATH_CM0_FAMILY
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   uint32_t numSamples;                           /* total number of elements in the matrix  */
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   uint32_t blkCnt;                               /* loop counters */
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   arm_status status;                             /* status of matrix addition */
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   /* Check for matrix mismatch condition */
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   if((pSrcA->numRows != pSrcB->numRows) ||
  59              	 .loc 1 94 0
  60 001e FB68     	 ldr r3,[r7,#12]
  61 0020 1A88     	 ldrh r2,[r3]
  62 0022 BB68     	 ldr r3,[r7,#8]
  63 0024 1B88     	 ldrh r3,[r3]
  64 0026 9A42     	 cmp r2,r3
  65 0028 11D1     	 bne .L2
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****      (pSrcA->numCols != pSrcB->numCols) ||
  66              	 .loc 1 95 0 discriminator 1
  67 002a FB68     	 ldr r3,[r7,#12]
  68 002c 5A88     	 ldrh r2,[r3,#2]
  69 002e BB68     	 ldr r3,[r7,#8]
  70 0030 5B88     	 ldrh r3,[r3,#2]
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****      (pSrcA->numCols != pSrcB->numCols) ||
  71              	 .loc 1 94 0 discriminator 1
  72 0032 9A42     	 cmp r2,r3
  73 0034 0BD1     	 bne .L2
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcA->numCols != pDst->numCols))
  74              	 .loc 1 96 0
  75 0036 FB68     	 ldr r3,[r7,#12]
  76 0038 1A88     	 ldrh r2,[r3]
  77 003a 7B68     	 ldr r3,[r7,#4]
  78 003c 1B88     	 ldrh r3,[r3]
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****      (pSrcA->numCols != pSrcB->numCols) ||
  79              	 .loc 1 95 0
  80 003e 9A42     	 cmp r2,r3
  81 0040 05D1     	 bne .L2
  82              	 .loc 1 96 0
  83 0042 FB68     	 ldr r3,[r7,#12]
  84 0044 5A88     	 ldrh r2,[r3,#2]
  85 0046 7B68     	 ldr r3,[r7,#4]
  86 0048 5B88     	 ldrh r3,[r3,#2]
  87 004a 9A42     	 cmp r2,r3
  88 004c 03D0     	 beq .L3
  89              	.L2:
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   {
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
  90              	 .loc 1 99 0
  91 004e FD23     	 movs r3,#253
  92 0050 87F82F30 	 strb r3,[r7,#47]
  93 0054 78E0     	 b .L4
  94              	.L3:
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   }
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   else
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #endif
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   {
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* Total number of samples in the input matrix */
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
  95              	 .loc 1 106 0
  96 0056 FB68     	 ldr r3,[r7,#12]
  97 0058 1B88     	 ldrh r3,[r3]
  98 005a 1A46     	 mov r2,r3
  99 005c FB68     	 ldr r3,[r7,#12]
 100 005e 5B88     	 ldrh r3,[r3,#2]
 101 0060 03FB02F3 	 mul r3,r3,r2
 102 0064 BB62     	 str r3,[r7,#40]
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* Loop unrolling */
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples >> 2u;
 103              	 .loc 1 111 0
 104 0066 BB6A     	 ldr r3,[r7,#40]
 105 0068 9B08     	 lsrs r3,r3,#2
 106 006a 3B63     	 str r3,[r7,#48]
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****      ** a second loop below computes the remaining 1 to 3 samples. */
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     while(blkCnt > 0u)
 107              	 .loc 1 115 0
 108 006c 4AE0     	 b .L5
 109              	.L6:
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     {
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* C(m,n) = A(m,n) + B(m,n) */
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Add and then store the results in the destination buffer. */
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source A */
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inA1 = pIn1[0];
 110              	 .loc 1 120 0
 111 006e FB6B     	 ldr r3,[r7,#60]
 112 0070 1B68     	 ldr r3,[r3]
 113 0072 7B62     	 str r3,[r7,#36]
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source B */
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inB1 = pIn2[0];
 114              	 .loc 1 123 0
 115 0074 BB6B     	 ldr r3,[r7,#56]
 116 0076 1B68     	 ldr r3,[r3]
 117 0078 3B62     	 str r3,[r7,#32]
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source A */
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inA2 = pIn1[1];
 118              	 .loc 1 126 0
 119 007a FB6B     	 ldr r3,[r7,#60]
 120 007c 5B68     	 ldr r3,[r3,#4]
 121 007e FB61     	 str r3,[r7,#28]
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* out = sourceA + sourceB */
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       out1 = inA1 + inB1;
 122              	 .loc 1 129 0
 123 0080 786A     	 ldr r0,[r7,#36]
 124 0082 396A     	 ldr r1,[r7,#32]
 125 0084 FFF7FEFF 	 bl __aeabi_fadd
 126 0088 0346     	 mov r3,r0
 127 008a BB61     	 str r3,[r7,#24]
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source B */
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inB2 = pIn2[1];
 128              	 .loc 1 132 0
 129 008c BB6B     	 ldr r3,[r7,#56]
 130 008e 5B68     	 ldr r3,[r3,#4]
 131 0090 7B61     	 str r3,[r7,#20]
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source A */
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inA1 = pIn1[2];
 132              	 .loc 1 135 0
 133 0092 FB6B     	 ldr r3,[r7,#60]
 134 0094 9B68     	 ldr r3,[r3,#8]
 135 0096 7B62     	 str r3,[r7,#36]
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* out = sourceA + sourceB */
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       out2 = inA2 + inB2;
 136              	 .loc 1 138 0
 137 0098 F869     	 ldr r0,[r7,#28]
 138 009a 7969     	 ldr r1,[r7,#20]
 139 009c FFF7FEFF 	 bl __aeabi_fadd
 140 00a0 0346     	 mov r3,r0
 141 00a2 3B61     	 str r3,[r7,#16]
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source B */
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inB1 = pIn2[2];
 142              	 .loc 1 141 0
 143 00a4 BB6B     	 ldr r3,[r7,#56]
 144 00a6 9B68     	 ldr r3,[r3,#8]
 145 00a8 3B62     	 str r3,[r7,#32]
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Store result in destination */
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       pOut[0] = out1;
 146              	 .loc 1 144 0
 147 00aa 7B6B     	 ldr r3,[r7,#52]
 148 00ac BA69     	 ldr r2,[r7,#24]
 149 00ae 1A60     	 str r2,[r3]
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       pOut[1] = out2;
 150              	 .loc 1 145 0
 151 00b0 7B6B     	 ldr r3,[r7,#52]
 152 00b2 0433     	 adds r3,r3,#4
 153 00b4 3A69     	 ldr r2,[r7,#16]
 154 00b6 1A60     	 str r2,[r3]
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source A */
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inA2 = pIn1[3];
 155              	 .loc 1 148 0
 156 00b8 FB6B     	 ldr r3,[r7,#60]
 157 00ba DB68     	 ldr r3,[r3,#12]
 158 00bc FB61     	 str r3,[r7,#28]
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Read values from source B */
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       inB2 = pIn2[3];
 159              	 .loc 1 151 0
 160 00be BB6B     	 ldr r3,[r7,#56]
 161 00c0 DB68     	 ldr r3,[r3,#12]
 162 00c2 7B61     	 str r3,[r7,#20]
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* out = sourceA + sourceB */
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       out1 = inA1 + inB1;
 163              	 .loc 1 154 0
 164 00c4 786A     	 ldr r0,[r7,#36]
 165 00c6 396A     	 ldr r1,[r7,#32]
 166 00c8 FFF7FEFF 	 bl __aeabi_fadd
 167 00cc 0346     	 mov r3,r0
 168 00ce BB61     	 str r3,[r7,#24]
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* out = sourceA + sourceB */
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       out2 = inA2 + inB2;
 169              	 .loc 1 157 0
 170 00d0 F869     	 ldr r0,[r7,#28]
 171 00d2 7969     	 ldr r1,[r7,#20]
 172 00d4 FFF7FEFF 	 bl __aeabi_fadd
 173 00d8 0346     	 mov r3,r0
 174 00da 3B61     	 str r3,[r7,#16]
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Store result in destination */
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       pOut[2] = out1;
 175              	 .loc 1 160 0
 176 00dc 7B6B     	 ldr r3,[r7,#52]
 177 00de 0833     	 adds r3,r3,#8
 178 00e0 BA69     	 ldr r2,[r7,#24]
 179 00e2 1A60     	 str r2,[r3]
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Store result in destination */
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       pOut[3] = out2;
 180              	 .loc 1 163 0
 181 00e4 7B6B     	 ldr r3,[r7,#52]
 182 00e6 0C33     	 adds r3,r3,#12
 183 00e8 3A69     	 ldr r2,[r7,#16]
 184 00ea 1A60     	 str r2,[r3]
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* update pointers to process next sampels */
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       pIn1 += 4u;
 185              	 .loc 1 167 0
 186 00ec FB6B     	 ldr r3,[r7,#60]
 187 00ee 1033     	 adds r3,r3,#16
 188 00f0 FB63     	 str r3,[r7,#60]
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       pIn2 += 4u;
 189              	 .loc 1 168 0
 190 00f2 BB6B     	 ldr r3,[r7,#56]
 191 00f4 1033     	 adds r3,r3,#16
 192 00f6 BB63     	 str r3,[r7,#56]
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       pOut += 4u;
 193              	 .loc 1 169 0
 194 00f8 7B6B     	 ldr r3,[r7,#52]
 195 00fa 1033     	 adds r3,r3,#16
 196 00fc 7B63     	 str r3,[r7,#52]
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Decrement the loop counter */
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       blkCnt--;
 197              	 .loc 1 171 0
 198 00fe 3B6B     	 ldr r3,[r7,#48]
 199 0100 013B     	 subs r3,r3,#1
 200 0102 3B63     	 str r3,[r7,#48]
 201              	.L5:
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     {
 202              	 .loc 1 115 0
 203 0104 3B6B     	 ldr r3,[r7,#48]
 204 0106 002B     	 cmp r3,#0
 205 0108 B1D1     	 bne .L6
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     }
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****      ** No loop unrolling is used. */
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples % 0x4u;
 206              	 .loc 1 176 0
 207 010a BB6A     	 ldr r3,[r7,#40]
 208 010c 03F00303 	 and r3,r3,#3
 209 0110 3B63     	 str r3,[r7,#48]
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #else
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* Run the below code for Cortex-M0 */
 181:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* Initialize blkCnt with number of samples */
 183:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     blkCnt = numSamples;
 184:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 186:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     while(blkCnt > 0u)
 210              	 .loc 1 187 0
 211 0112 13E0     	 b .L7
 212              	.L8:
 188:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     {
 189:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* C(m,n) = A(m,n) + B(m,n) */
 190:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Add and then store the results in the destination buffer. */
 191:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       *pOut++ = (*pIn1++) + (*pIn2++);
 213              	 .loc 1 191 0
 214 0114 7C6B     	 ldr r4,[r7,#52]
 215 0116 231D     	 adds r3,r4,#4
 216 0118 7B63     	 str r3,[r7,#52]
 217 011a FB6B     	 ldr r3,[r7,#60]
 218 011c 1A1D     	 adds r2,r3,#4
 219 011e FA63     	 str r2,[r7,#60]
 220 0120 1968     	 ldr r1,[r3]
 221 0122 BB6B     	 ldr r3,[r7,#56]
 222 0124 1A1D     	 adds r2,r3,#4
 223 0126 BA63     	 str r2,[r7,#56]
 224 0128 1B68     	 ldr r3,[r3]
 225 012a 0846     	 mov r0,r1
 226 012c 1946     	 mov r1,r3
 227 012e FFF7FEFF 	 bl __aeabi_fadd
 228 0132 0346     	 mov r3,r0
 229 0134 2360     	 str r3,[r4]
 192:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 193:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       /* Decrement the loop counter */
 194:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****       blkCnt--;
 230              	 .loc 1 194 0
 231 0136 3B6B     	 ldr r3,[r7,#48]
 232 0138 013B     	 subs r3,r3,#1
 233 013a 3B63     	 str r3,[r7,#48]
 234              	.L7:
 187:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     {
 235              	 .loc 1 187 0
 236 013c 3B6B     	 ldr r3,[r7,#48]
 237 013e 002B     	 cmp r3,#0
 238 0140 E8D1     	 bne .L8
 195:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     }
 196:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 197:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     /* set status as ARM_MATH_SUCCESS */
 198:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****     status = ARM_MATH_SUCCESS;
 239              	 .loc 1 198 0
 240 0142 0023     	 movs r3,#0
 241 0144 87F82F30 	 strb r3,[r7,#47]
 242              	.L4:
 199:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   }
 201:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** 
 202:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   /* Return to application */
 203:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c ****   return (status);
 243              	 .loc 1 203 0
 244 0148 97F82F30 	 ldrb r3,[r7,#47]
 245 014c 5BB2     	 sxtb r3,r3
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_add_f32.c **** }
 246              	 .loc 1 204 0
 247 014e 1846     	 mov r0,r3
 248 0150 4437     	 adds r7,r7,#68
 249              	.LCFI3:
 250              	 .cfi_def_cfa_offset 12
 251 0152 BD46     	 mov sp,r7
 252              	.LCFI4:
 253              	 .cfi_def_cfa_register 13
 254              	 
 255 0154 90BD     	 pop {r4,r7,pc}
 256              	 .cfi_endproc
 257              	.LFE139:
 259 0156 00BF     	 .text
 260              	.Letext0:
 261              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 262              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 263              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_add_f32.c
    {standard input}:20     .text.arm_mat_add_f32:00000000 $t
    {standard input}:25     .text.arm_mat_add_f32:00000000 arm_mat_add_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fadd
