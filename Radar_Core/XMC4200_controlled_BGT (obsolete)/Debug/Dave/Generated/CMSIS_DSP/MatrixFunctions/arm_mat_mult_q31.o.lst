   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_mat_mult_q31.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_mat_mult_q31,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_mat_mult_q31
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_mat_mult_q31:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *    
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * $Date:        31. July 2014
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *    
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * Title:	    arm_mat_mult_q31.c    
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *    
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * Description:	 Q31 matrix multiplication.    
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *    
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *  
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** *
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * POSSIBILITY OF SUCH DAMAGE.   
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @ingroup groupMatrix    
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  */
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @addtogroup MatrixMult    
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  */
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** /**    
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @brief Q31 matrix multiplication    
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @param[in]       *pSrcA points to the first input matrix structure    
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @param[in]       *pSrcB points to the second input matrix structure    
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @param[out]      *pDst points to output matrix structure    
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @return     		The function returns either    
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  *    
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * @details    
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * <b>Scaling and Overflow Behavior:</b>    
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  *    
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * \par    
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * The function is implemented using an internal 64-bit accumulator.    
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * The accumulator has a 2.62 format and maintains full precision of the intermediate    
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * multiplication results but provides only a single guard bit. There is no saturation    
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * on intermediate additions. Thus, if the accumulator overflows it wraps around and    
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * distorts the result. The input signals should be scaled down to avoid intermediate    
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * overflows. The input is thus scaled down by log2(numColsA) bits    
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * to avoid overflows, as a total of numColsA additions are performed internally.    
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * The 2.62 accumulator is right shifted by 31 bits and saturated to 1.31 format to yield the final
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  *    
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * \par    
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  * See <code>arm_mat_mult_fast_q31()</code> for a faster but less precise implementation of this fu
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  *    
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****  */
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** arm_status arm_mat_mult_q31(
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcA,
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   const arm_matrix_instance_q31 * pSrcB,
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   arm_matrix_instance_q31 * pDst)
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** {
  27              	 .loc 1 82 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 F0B5     	 push {r4,r5,r6,r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 20
  34              	 .cfi_offset 4,-20
  35              	 .cfi_offset 5,-16
  36              	 .cfi_offset 6,-12
  37              	 .cfi_offset 7,-8
  38              	 .cfi_offset 14,-4
  39 0002 99B0     	 sub sp,sp,#100
  40              	.LCFI1:
  41              	 .cfi_def_cfa_offset 120
  42 0004 00AF     	 add r7,sp,#0
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 7
  45 0006 F860     	 str r0,[r7,#12]
  46 0008 B960     	 str r1,[r7,#8]
  47 000a 7A60     	 str r2,[r7,#4]
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pIn1 = pSrcA->pData;                    /* input data matrix pointer A */
  48              	 .loc 1 83 0
  49 000c FB68     	 ldr r3,[r7,#12]
  50 000e 5B68     	 ldr r3,[r3,#4]
  51 0010 FB65     	 str r3,[r7,#92]
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pIn2 = pSrcB->pData;                    /* input data matrix pointer B */
  52              	 .loc 1 84 0
  53 0012 BB68     	 ldr r3,[r7,#8]
  54 0014 5B68     	 ldr r3,[r3,#4]
  55 0016 BB65     	 str r3,[r7,#88]
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pInA = pSrcA->pData;                    /* input data matrix pointer A */
  56              	 .loc 1 85 0
  57 0018 FB68     	 ldr r3,[r7,#12]
  58 001a 5B68     	 ldr r3,[r3,#4]
  59 001c 7B65     	 str r3,[r7,#84]
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pOut = pDst->pData;                     /* output data matrix pointer */
  60              	 .loc 1 86 0
  61 001e 7B68     	 ldr r3,[r7,#4]
  62 0020 5B68     	 ldr r3,[r3,#4]
  63 0022 BB63     	 str r3,[r7,#56]
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *px;                                     /* Temporary output data matrix pointer */
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q63_t sum;                                     /* Accumulator */
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A    */
  64              	 .loc 1 89 0
  65 0024 FB68     	 ldr r3,[r7,#12]
  66 0026 1B88     	 ldrh r3,[r3]
  67 0028 FB86     	 strh r3,[r7,#54]
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  68              	 .loc 1 90 0
  69 002a BB68     	 ldr r3,[r7,#8]
  70 002c 5B88     	 ldrh r3,[r3,#2]
  71 002e BB86     	 strh r3,[r7,#52]
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  72              	 .loc 1 91 0
  73 0030 FB68     	 ldr r3,[r7,#12]
  74 0032 5B88     	 ldrh r3,[r3,#2]
  75 0034 7B86     	 strh r3,[r7,#50]
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #ifndef ARM_MATH_CM0_FAMILY
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
  76              	 .loc 1 97 0
  77 0036 0023     	 movs r3,#0
  78 0038 A7F84430 	 strh r3,[r7,#68]
  79 003c FB8E     	 ldrh r3,[r7,#54]
  80 003e A7F84030 	 strh r3,[r7,#64]
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q31_t a0, a1, a2, a3, b0, b1, b2, b3;
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #ifdef ARM_MATH_MATRIX_CHECK
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   /* Check for matrix mismatch condition */
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   if((pSrcA->numCols != pSrcB->numRows) ||
  81              	 .loc 1 105 0
  82 0042 FB68     	 ldr r3,[r7,#12]
  83 0044 5A88     	 ldrh r2,[r3,#2]
  84 0046 BB68     	 ldr r3,[r7,#8]
  85 0048 1B88     	 ldrh r3,[r3]
  86 004a 9A42     	 cmp r2,r3
  87 004c 0BD1     	 bne .L2
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  88              	 .loc 1 106 0 discriminator 1
  89 004e FB68     	 ldr r3,[r7,#12]
  90 0050 1A88     	 ldrh r2,[r3]
  91 0052 7B68     	 ldr r3,[r7,#4]
  92 0054 1B88     	 ldrh r3,[r3]
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  93              	 .loc 1 105 0 discriminator 1
  94 0056 9A42     	 cmp r2,r3
  95 0058 05D1     	 bne .L2
  96              	 .loc 1 106 0
  97 005a BB68     	 ldr r3,[r7,#8]
  98 005c 5A88     	 ldrh r2,[r3,#2]
  99 005e 7B68     	 ldr r3,[r7,#4]
 100 0060 5B88     	 ldrh r3,[r3,#2]
 101 0062 9A42     	 cmp r2,r3
 102 0064 03D0     	 beq .L3
 103              	.L2:
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   {
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
 104              	 .loc 1 109 0
 105 0066 FD23     	 movs r3,#253
 106 0068 87F83D30 	 strb r3,[r7,#61]
 107 006c 1AE1     	 b .L4
 108              	.L3:
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   }
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   else
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   {
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     /* row loop */
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     do
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     {
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* Output pointer is set to starting address of the row being processed */
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       px = pOut + i;
 109              	 .loc 1 120 0
 110 006e B7F84430 	 ldrh r3,[r7,#68]
 111 0072 9B00     	 lsls r3,r3,#2
 112 0074 BA6B     	 ldr r2,[r7,#56]
 113 0076 1344     	 add r3,r3,r2
 114 0078 3B65     	 str r3,[r7,#80]
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the column loop counter is to be initiated */
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       col = numColsB;
 115              	 .loc 1 123 0
 116 007a BB8E     	 ldrh r3,[r7,#52]
 117 007c A7F84630 	 strh r3,[r7,#70]
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the pIn2 pointer is set    
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****        ** to the starting address of the pSrcB data */
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       pIn2 = pSrcB->pData;
 118              	 .loc 1 127 0
 119 0080 BB68     	 ldr r3,[r7,#8]
 120 0082 5B68     	 ldr r3,[r3,#4]
 121 0084 BB65     	 str r3,[r7,#88]
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       j = 0u;
 122              	 .loc 1 129 0
 123 0086 0023     	 movs r3,#0
 124 0088 A7F84230 	 strh r3,[r7,#66]
 125              	.L9:
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* column loop */
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       do
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       {
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         sum = 0;
 126              	 .loc 1 135 0
 127 008c 4FF00002 	 mov r2,#0
 128 0090 4FF00003 	 mov r3,#0
 129 0094 C7E91223 	 strd r2,[r7,#72]
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Initiate the pointer pIn1 to point to the starting address of pInA */
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         pIn1 = pInA;
 130              	 .loc 1 138 0
 131 0098 7B6D     	 ldr r3,[r7,#84]
 132 009a FB65     	 str r3,[r7,#92]
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         colCnt = numColsA >> 2;
 133              	 .loc 1 141 0
 134 009c 7B8E     	 ldrh r3,[r7,#50]
 135 009e 9B08     	 lsrs r3,r3,#2
 136 00a0 FB87     	 strh r3,[r7,#62]
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* matrix multiplication */
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         while(colCnt > 0u)
 137              	 .loc 1 145 0
 138 00a2 96E0     	 b .L5
 139              	.L6:
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         {
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* Perform the multiply-accumulates */
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           b0 = *pIn2;
 140              	 .loc 1 149 0
 141 00a4 BB6D     	 ldr r3,[r7,#88]
 142 00a6 1B68     	 ldr r3,[r3]
 143 00a8 FB62     	 str r3,[r7,#44]
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 144              	 .loc 1 150 0
 145 00aa BB8E     	 ldrh r3,[r7,#52]
 146 00ac 9B00     	 lsls r3,r3,#2
 147 00ae BA6D     	 ldr r2,[r7,#88]
 148 00b0 1344     	 add r3,r3,r2
 149 00b2 BB65     	 str r3,[r7,#88]
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           a0 = *pIn1++;
 150              	 .loc 1 152 0
 151 00b4 FB6D     	 ldr r3,[r7,#92]
 152 00b6 1A1D     	 adds r2,r3,#4
 153 00b8 FA65     	 str r2,[r7,#92]
 154 00ba 1B68     	 ldr r3,[r3]
 155 00bc BB62     	 str r3,[r7,#40]
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           a1 = *pIn1++;
 156              	 .loc 1 153 0
 157 00be FB6D     	 ldr r3,[r7,#92]
 158 00c0 1A1D     	 adds r2,r3,#4
 159 00c2 FA65     	 str r2,[r7,#92]
 160 00c4 1B68     	 ldr r3,[r3]
 161 00c6 7B62     	 str r3,[r7,#36]
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           b1 = *pIn2;
 162              	 .loc 1 155 0
 163 00c8 BB6D     	 ldr r3,[r7,#88]
 164 00ca 1B68     	 ldr r3,[r3]
 165 00cc 3B62     	 str r3,[r7,#32]
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 166              	 .loc 1 156 0
 167 00ce BB8E     	 ldrh r3,[r7,#52]
 168 00d0 9B00     	 lsls r3,r3,#2
 169 00d2 BA6D     	 ldr r2,[r7,#88]
 170 00d4 1344     	 add r3,r3,r2
 171 00d6 BB65     	 str r3,[r7,#88]
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           b2 = *pIn2;
 172              	 .loc 1 157 0
 173 00d8 BB6D     	 ldr r3,[r7,#88]
 174 00da 1B68     	 ldr r3,[r3]
 175 00dc FB61     	 str r3,[r7,#28]
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 176              	 .loc 1 158 0
 177 00de BB8E     	 ldrh r3,[r7,#52]
 178 00e0 9B00     	 lsls r3,r3,#2
 179 00e2 BA6D     	 ldr r2,[r7,#88]
 180 00e4 1344     	 add r3,r3,r2
 181 00e6 BB65     	 str r3,[r7,#88]
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a0 *b0;
 182              	 .loc 1 160 0
 183 00e8 BB6A     	 ldr r3,[r7,#40]
 184 00ea 1846     	 mov r0,r3
 185 00ec 4FEAE071 	 asr r1,r0,#31
 186 00f0 FB6A     	 ldr r3,[r7,#44]
 187 00f2 1A46     	 mov r2,r3
 188 00f4 4FEAE273 	 asr r3,r2,#31
 189 00f8 02FB01FE 	 mul lr,r2,r1
 190 00fc 00FB03F6 	 mul r6,r0,r3
 191 0100 7644     	 add r6,r6,lr
 192 0102 A0FB0223 	 umull r2,r3,r0,r2
 193 0106 F118     	 adds r1,r6,r3
 194 0108 0B46     	 mov r3,r1
 195 010a D7E91201 	 ldrd r0,[r7,#72]
 196 010e 1218     	 adds r2,r2,r0
 197 0110 43EB0103 	 adc r3,r3,r1
 198 0114 C7E91223 	 strd r2,[r7,#72]
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a1 *b1;
 199              	 .loc 1 161 0
 200 0118 7B6A     	 ldr r3,[r7,#36]
 201 011a 1846     	 mov r0,r3
 202 011c 4FEAE071 	 asr r1,r0,#31
 203 0120 3B6A     	 ldr r3,[r7,#32]
 204 0122 1A46     	 mov r2,r3
 205 0124 4FEAE273 	 asr r3,r2,#31
 206 0128 02FB01FE 	 mul lr,r2,r1
 207 012c 00FB03F6 	 mul r6,r0,r3
 208 0130 7644     	 add r6,r6,lr
 209 0132 A0FB0223 	 umull r2,r3,r0,r2
 210 0136 F118     	 adds r1,r6,r3
 211 0138 0B46     	 mov r3,r1
 212 013a D7E91201 	 ldrd r0,[r7,#72]
 213 013e 1218     	 adds r2,r2,r0
 214 0140 43EB0103 	 adc r3,r3,r1
 215 0144 C7E91223 	 strd r2,[r7,#72]
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           a2 = *pIn1++;
 216              	 .loc 1 163 0
 217 0148 FB6D     	 ldr r3,[r7,#92]
 218 014a 1A1D     	 adds r2,r3,#4
 219 014c FA65     	 str r2,[r7,#92]
 220 014e 1B68     	 ldr r3,[r3]
 221 0150 BB61     	 str r3,[r7,#24]
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           a3 = *pIn1++;
 222              	 .loc 1 164 0
 223 0152 FB6D     	 ldr r3,[r7,#92]
 224 0154 1A1D     	 adds r2,r3,#4
 225 0156 FA65     	 str r2,[r7,#92]
 226 0158 1B68     	 ldr r3,[r3]
 227 015a 7B61     	 str r3,[r7,#20]
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           b3 = *pIn2;
 228              	 .loc 1 166 0
 229 015c BB6D     	 ldr r3,[r7,#88]
 230 015e 1B68     	 ldr r3,[r3]
 231 0160 3B61     	 str r3,[r7,#16]
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 232              	 .loc 1 167 0
 233 0162 BB8E     	 ldrh r3,[r7,#52]
 234 0164 9B00     	 lsls r3,r3,#2
 235 0166 BA6D     	 ldr r2,[r7,#88]
 236 0168 1344     	 add r3,r3,r2
 237 016a BB65     	 str r3,[r7,#88]
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a2 *b2;
 238              	 .loc 1 169 0
 239 016c BB69     	 ldr r3,[r7,#24]
 240 016e 1846     	 mov r0,r3
 241 0170 4FEAE071 	 asr r1,r0,#31
 242 0174 FB69     	 ldr r3,[r7,#28]
 243 0176 1A46     	 mov r2,r3
 244 0178 4FEAE273 	 asr r3,r2,#31
 245 017c 02FB01FE 	 mul lr,r2,r1
 246 0180 00FB03F6 	 mul r6,r0,r3
 247 0184 7644     	 add r6,r6,lr
 248 0186 A0FB0223 	 umull r2,r3,r0,r2
 249 018a F118     	 adds r1,r6,r3
 250 018c 0B46     	 mov r3,r1
 251 018e D7E91201 	 ldrd r0,[r7,#72]
 252 0192 1218     	 adds r2,r2,r0
 253 0194 43EB0103 	 adc r3,r3,r1
 254 0198 C7E91223 	 strd r2,[r7,#72]
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) a3 *b3;
 255              	 .loc 1 170 0
 256 019c 7B69     	 ldr r3,[r7,#20]
 257 019e 1846     	 mov r0,r3
 258 01a0 4FEAE071 	 asr r1,r0,#31
 259 01a4 3B69     	 ldr r3,[r7,#16]
 260 01a6 1A46     	 mov r2,r3
 261 01a8 4FEAE273 	 asr r3,r2,#31
 262 01ac 02FB01FE 	 mul lr,r2,r1
 263 01b0 00FB03F6 	 mul r6,r0,r3
 264 01b4 7644     	 add r6,r6,lr
 265 01b6 A0FB0223 	 umull r2,r3,r0,r2
 266 01ba F118     	 adds r1,r6,r3
 267 01bc 0B46     	 mov r3,r1
 268 01be D7E91201 	 ldrd r0,[r7,#72]
 269 01c2 1218     	 adds r2,r2,r0
 270 01c4 43EB0103 	 adc r3,r3,r1
 271 01c8 C7E91223 	 strd r2,[r7,#72]
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* Decrement the loop counter */
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           colCnt--;
 272              	 .loc 1 173 0
 273 01cc FB8F     	 ldrh r3,[r7,#62]
 274 01ce 013B     	 subs r3,r3,#1
 275 01d0 FB87     	 strh r3,[r7,#62]
 276              	.L5:
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         {
 277              	 .loc 1 145 0
 278 01d2 FB8F     	 ldrh r3,[r7,#62]
 279 01d4 002B     	 cmp r3,#0
 280 01d6 7FF465AF 	 bne .L6
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         }
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining output samples her
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****          ** No loop unrolling is used. */
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         colCnt = numColsA % 0x4u;
 281              	 .loc 1 178 0
 282 01da 7B8E     	 ldrh r3,[r7,#50]
 283 01dc 03F00303 	 and r3,r3,#3
 284 01e0 FB87     	 strh r3,[r7,#62]
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 180:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         while(colCnt > 0u)
 285              	 .loc 1 180 0
 286 01e2 23E0     	 b .L7
 287              	.L8:
 181:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         {
 182:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 183:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* Perform the multiply-accumulates */
 184:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) * pIn1++ * *pIn2;
 288              	 .loc 1 184 0
 289 01e4 FB6D     	 ldr r3,[r7,#92]
 290 01e6 1A1D     	 adds r2,r3,#4
 291 01e8 FA65     	 str r2,[r7,#92]
 292 01ea 1B68     	 ldr r3,[r3]
 293 01ec 1846     	 mov r0,r3
 294 01ee 4FEAE071 	 asr r1,r0,#31
 295 01f2 BB6D     	 ldr r3,[r7,#88]
 296 01f4 1B68     	 ldr r3,[r3]
 297 01f6 1A46     	 mov r2,r3
 298 01f8 4FEAE273 	 asr r3,r2,#31
 299 01fc 02FB01FE 	 mul lr,r2,r1
 300 0200 00FB03F6 	 mul r6,r0,r3
 301 0204 7644     	 add r6,r6,lr
 302 0206 A0FB0223 	 umull r2,r3,r0,r2
 303 020a F118     	 adds r1,r6,r3
 304 020c 0B46     	 mov r3,r1
 305 020e D7E91201 	 ldrd r0,[r7,#72]
 306 0212 1218     	 adds r2,r2,r0
 307 0214 43EB0103 	 adc r3,r3,r1
 308 0218 C7E91223 	 strd r2,[r7,#72]
 185:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 309              	 .loc 1 185 0
 310 021c BB8E     	 ldrh r3,[r7,#52]
 311 021e 9B00     	 lsls r3,r3,#2
 312 0220 BA6D     	 ldr r2,[r7,#88]
 313 0222 1344     	 add r3,r3,r2
 314 0224 BB65     	 str r3,[r7,#88]
 186:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 187:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* Decrement the loop counter */
 188:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           colCnt--;
 315              	 .loc 1 188 0
 316 0226 FB8F     	 ldrh r3,[r7,#62]
 317 0228 013B     	 subs r3,r3,#1
 318 022a FB87     	 strh r3,[r7,#62]
 319              	.L7:
 180:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         {
 320              	 .loc 1 180 0
 321 022c FB8F     	 ldrh r3,[r7,#62]
 322 022e 002B     	 cmp r3,#0
 323 0230 D8D1     	 bne .L8
 189:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         }
 190:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 191:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Convert the result from 2.62 to 1.31 format and store in destination buffer */
 192:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         *px++ = (q31_t) (sum >> 31);
 324              	 .loc 1 192 0
 325 0232 396D     	 ldr r1,[r7,#80]
 326 0234 0B1D     	 adds r3,r1,#4
 327 0236 3B65     	 str r3,[r7,#80]
 328 0238 D7E91223 	 ldrd r2,[r7,#72]
 329 023c D40F     	 lsrs r4,r2,#31
 330 023e 44EA4304 	 orr r4,r4,r3,lsl#1
 331 0242 DD17     	 asrs r5,r3,#31
 332 0244 2346     	 mov r3,r4
 333 0246 0B60     	 str r3,[r1]
 193:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 194:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 195:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         j++;
 334              	 .loc 1 195 0
 335 0248 B7F84230 	 ldrh r3,[r7,#66]
 336 024c 0133     	 adds r3,r3,#1
 337 024e A7F84230 	 strh r3,[r7,#66]
 196:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         pIn2 = (pSrcB->pData) + j;
 338              	 .loc 1 196 0
 339 0252 BB68     	 ldr r3,[r7,#8]
 340 0254 5A68     	 ldr r2,[r3,#4]
 341 0256 B7F84230 	 ldrh r3,[r7,#66]
 342 025a 9B00     	 lsls r3,r3,#2
 343 025c 1344     	 add r3,r3,r2
 344 025e BB65     	 str r3,[r7,#88]
 197:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 198:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Decrement the column loop counter */
 199:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         col--;
 345              	 .loc 1 199 0
 346 0260 B7F84630 	 ldrh r3,[r7,#70]
 347 0264 013B     	 subs r3,r3,#1
 348 0266 A7F84630 	 strh r3,[r7,#70]
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 201:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       } while(col > 0u);
 349              	 .loc 1 201 0
 350 026a B7F84630 	 ldrh r3,[r7,#70]
 351 026e 002B     	 cmp r3,#0
 352 0270 7FF40CAF 	 bne .L9
 202:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 203:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #else
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 205:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   /* Run the below code for Cortex-M0 */
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 207:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   q31_t *pInB = pSrcB->pData;                    /* input data matrix pointer B */
 208:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   uint16_t col, i = 0u, row = numRowsA, colCnt;  /* loop counters */
 209:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   arm_status status;                             /* status of matrix multiplication */
 210:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 211:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 212:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #ifdef ARM_MATH_MATRIX_CHECK
 213:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 214:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   /* Check for matrix mismatch condition */
 215:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   if((pSrcA->numCols != pSrcB->numRows) ||
 216:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
 217:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   {
 218:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 219:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     status = ARM_MATH_SIZE_MISMATCH;
 220:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   }
 221:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   else
 222:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #endif /*    #ifdef ARM_MATH_MATRIX_CHECK    */
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 224:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   {
 225:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 226:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     /* row loop */
 227:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     do
 228:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     {
 229:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* Output pointer is set to starting address of the row being processed */
 230:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       px = pOut + i;
 231:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 232:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the column loop counter is to be initiated */
 233:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       col = numColsB;
 234:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 235:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* For every row wise process, the pIn2 pointer is set          
 236:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****        ** to the starting address of the pSrcB data */
 237:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       pIn2 = pSrcB->pData;
 238:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 239:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* column loop */
 240:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       do
 241:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       {
 242:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 243:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         sum = 0;
 244:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 245:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Initiate the pointer pIn1 to point to the starting address of pInA */
 246:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         pIn1 = pInA;
 247:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 248:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Matrix A columns number of MAC operations are to be performed */
 249:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         colCnt = numColsA;
 250:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 251:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* matrix multiplication */
 252:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         while(colCnt > 0u)
 253:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         {
 254:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 255:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* Perform the multiply-accumulates */
 256:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           sum += (q63_t) * pIn1++ * *pIn2;
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           pIn2 += numColsB;
 258:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 259:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           /* Decrement the loop counter */
 260:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****           colCnt--;
 261:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         }
 262:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 263:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Convert the result from 2.62 to 1.31 format and store in destination buffer */
 264:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         *px++ = (q31_t) clip_q63_to_q31(sum >> 31);
 265:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 266:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Decrement the column loop counter */
 267:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         col--;
 268:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 269:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 270:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****         pIn2 = pInB + (numColsB - col);
 271:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 272:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       } while(col > 0u);
 273:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 274:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** #endif
 275:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 276:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 277:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       i = i + numColsB;
 353              	 .loc 1 277 0
 354 0274 B7F84420 	 ldrh r2,[r7,#68]
 355 0278 BB8E     	 ldrh r3,[r7,#52]
 356 027a 1344     	 add r3,r3,r2
 357 027c A7F84430 	 strh r3,[r7,#68]
 278:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       pInA = pInA + numColsA;
 358              	 .loc 1 278 0
 359 0280 7B8E     	 ldrh r3,[r7,#50]
 360 0282 9B00     	 lsls r3,r3,#2
 361 0284 7A6D     	 ldr r2,[r7,#84]
 362 0286 1344     	 add r3,r3,r2
 363 0288 7B65     	 str r3,[r7,#84]
 279:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 280:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       /* Decrement the row loop counter */
 281:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****       row--;
 364              	 .loc 1 281 0
 365 028a B7F84030 	 ldrh r3,[r7,#64]
 366 028e 013B     	 subs r3,r3,#1
 367 0290 A7F84030 	 strh r3,[r7,#64]
 282:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 283:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     } while(row > 0u);
 368              	 .loc 1 283 0
 369 0294 B7F84030 	 ldrh r3,[r7,#64]
 370 0298 002B     	 cmp r3,#0
 371 029a 7FF4E8AE 	 bne .L3
 284:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** 
 285:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     /* set status as ARM_MATH_SUCCESS */
 286:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****     status = ARM_MATH_SUCCESS;
 372              	 .loc 1 286 0
 373 029e 0023     	 movs r3,#0
 374 02a0 87F83D30 	 strb r3,[r7,#61]
 375              	.L4:
 287:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   }
 288:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   /* Return to application */
 289:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c ****   return (status);
 376              	 .loc 1 289 0
 377 02a4 97F83D30 	 ldrb r3,[r7,#61]
 378 02a8 5BB2     	 sxtb r3,r3
 290:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_mult_q31.c **** }
 379              	 .loc 1 290 0
 380 02aa 1846     	 mov r0,r3
 381 02ac 6437     	 adds r7,r7,#100
 382              	.LCFI3:
 383              	 .cfi_def_cfa_offset 20
 384 02ae BD46     	 mov sp,r7
 385              	.LCFI4:
 386              	 .cfi_def_cfa_register 13
 387              	 
 388 02b0 F0BD     	 pop {r4,r5,r6,r7,pc}
 389              	 .cfi_endproc
 390              	.LFE139:
 392 02b2 00BF     	 .text
 393              	.Letext0:
 394              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 395              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 396              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_mult_q31.c
    {standard input}:19     .text.arm_mat_mult_q31:00000000 $t
    {standard input}:24     .text.arm_mat_mult_q31:00000000 arm_mat_mult_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
