   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_mat_cmplx_mult_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fmul
  19              	 .global __aeabi_fadd
  20              	 .global __aeabi_fsub
  21              	 .section .text.arm_mat_cmplx_mult_f32,"ax",%progbits
  22              	 .align 2
  23              	 .global arm_mat_cmplx_mult_f32
  24              	 .thumb
  25              	 .thumb_func
  27              	arm_mat_cmplx_mult_f32:
  28              	.LFB139:
  29              	 .file 1 "../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c"
   1:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /* ----------------------------------------------------------------------      
   2:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved. 
   3:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
   4:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
   7:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Project:      CMSIS DSP Library 
   8:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Title:	    arm_mat_cmplx_mult_f32.c      
   9:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
  10:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Description:  Floating-point matrix multiplication.      
  11:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *      
  12:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Target Processor:          Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *
  14:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * POSSIBILITY OF SUCH DAMAGE.    
  39:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  41:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  42:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  43:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @ingroup groupMatrix      
  44:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  45:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  47:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @defgroup CmplxMatrixMult  Complex Matrix Multiplication     
  48:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  *     
  49:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Complex Matrix multiplication is only defined if the number of columns of the      
  50:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * first matrix equals the number of rows of the second matrix.      
  51:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * Multiplying an <code>M x N</code> matrix with an <code>N x P</code> matrix results      
  52:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * in an <code>M x P</code> matrix.      
  53:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * When matrix size checking is enabled, the functions check: (1) that the inner dimensions of     
  54:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * <code>pSrcA</code> and <code>pSrcB</code> are equal; and (2) that the size of the output      
  55:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * matrix equals the outer dimensions of <code>pSrcA</code> and <code>pSrcB</code>.      
  56:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  57:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  58:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  60:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @addtogroup CmplxMatrixMult      
  61:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @{      
  62:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  63:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  64:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** /**      
  65:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @brief Floating-point Complex matrix multiplication.      
  66:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @param[in]       *pSrcA points to the first input complex matrix structure      
  67:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @param[in]       *pSrcB points to the second input complex matrix structure      
  68:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @param[out]      *pDst points to output complex matrix structure      
  69:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * @return     		The function returns either      
  70:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  * <code>ARM_MATH_SIZE_MISMATCH</code> or <code>ARM_MATH_SUCCESS</code> based on the outcome of siz
  71:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** arm_status arm_mat_cmplx_mult_f32(
  74:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcA,
  75:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   const arm_matrix_instance_f32 * pSrcB,
  76:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   arm_matrix_instance_f32 * pDst)
  77:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** {
  30              	 .loc 1 77 0
  31              	 .cfi_startproc
  32              	 
  33              	 
  34 0000 80B5     	 push {r7,lr}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 8
  37              	 .cfi_offset 7,-8
  38              	 .cfi_offset 14,-4
  39 0002 9AB0     	 sub sp,sp,#104
  40              	.LCFI1:
  41              	 .cfi_def_cfa_offset 112
  42 0004 00AF     	 add r7,sp,#0
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 7
  45 0006 F860     	 str r0,[r7,#12]
  46 0008 B960     	 str r1,[r7,#8]
  47 000a 7A60     	 str r2,[r7,#4]
  78:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn1 = pSrcA->pData;                /* input data matrix pointer A */
  48              	 .loc 1 78 0
  49 000c FB68     	 ldr r3,[r7,#12]
  50 000e 5B68     	 ldr r3,[r3,#4]
  51 0010 7B66     	 str r3,[r7,#100]
  79:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pIn2 = pSrcB->pData;                /* input data matrix pointer B */
  52              	 .loc 1 79 0
  53 0012 BB68     	 ldr r3,[r7,#8]
  54 0014 5B68     	 ldr r3,[r3,#4]
  55 0016 3B66     	 str r3,[r7,#96]
  80:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A  */
  56              	 .loc 1 80 0
  57 0018 FB68     	 ldr r3,[r7,#12]
  58 001a 5B68     	 ldr r3,[r3,#4]
  59 001c FB65     	 str r3,[r7,#92]
  81:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
  60              	 .loc 1 81 0
  61 001e 7B68     	 ldr r3,[r7,#4]
  62 0020 5B68     	 ldr r3,[r3,#4]
  63 0022 BB63     	 str r3,[r7,#56]
  82:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t *px;                                 /* Temporary output data matrix pointer */
  83:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numRowsA = pSrcA->numRows;            /* number of rows of input matrix A */
  64              	 .loc 1 83 0
  65 0024 FB68     	 ldr r3,[r7,#12]
  66 0026 1B88     	 ldrh r3,[r3]
  67 0028 FB86     	 strh r3,[r7,#54]
  84:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsB = pSrcB->numCols;            /* number of columns of input matrix B */
  68              	 .loc 1 84 0
  69 002a BB68     	 ldr r3,[r7,#8]
  70 002c 5B88     	 ldrh r3,[r3,#2]
  71 002e BB86     	 strh r3,[r7,#52]
  85:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t numColsA = pSrcA->numCols;            /* number of columns of input matrix A */
  72              	 .loc 1 85 0
  73 0030 FB68     	 ldr r3,[r7,#12]
  74 0032 5B88     	 ldrh r3,[r3,#2]
  75 0034 7B86     	 strh r3,[r7,#50]
  86:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal1, sumImag1;                  /* accumulator */
  87:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a0, b0, c0, d0;
  88:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t a1, b1, c1, d1;
  89:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   float32_t sumReal2, sumImag2;                  /* accumulator */
  90:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  91:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  93:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   uint16_t col, i = 0u, j, row = numRowsA, colCnt;      /* loop counters */
  76              	 .loc 1 94 0
  77 0036 0023     	 movs r3,#0
  78 0038 A7F84430 	 strh r3,[r7,#68]
  79 003c FB8E     	 ldrh r3,[r7,#54]
  80 003e A7F84030 	 strh r3,[r7,#64]
  95:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   arm_status status;                             /* status of matrix multiplication */
  96:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  97:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #ifdef ARM_MATH_MATRIX_CHECK
  98:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
  99:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 100:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Check for matrix mismatch condition */
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   if((pSrcA->numCols != pSrcB->numRows) ||
  81              	 .loc 1 101 0
  82 0042 FB68     	 ldr r3,[r7,#12]
  83 0044 5A88     	 ldrh r2,[r3,#2]
  84 0046 BB68     	 ldr r3,[r7,#8]
  85 0048 1B88     	 ldrh r3,[r3]
  86 004a 9A42     	 cmp r2,r3
  87 004c 0BD1     	 bne .L2
 102:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  88              	 .loc 1 102 0 discriminator 1
  89 004e FB68     	 ldr r3,[r7,#12]
  90 0050 1A88     	 ldrh r2,[r3]
  91 0052 7B68     	 ldr r3,[r7,#4]
  92 0054 1B88     	 ldrh r3,[r3]
 101:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****      (pSrcA->numRows != pDst->numRows) || (pSrcB->numCols != pDst->numCols))
  93              	 .loc 1 101 0 discriminator 1
  94 0056 9A42     	 cmp r2,r3
  95 0058 05D1     	 bne .L2
  96              	 .loc 1 102 0
  97 005a BB68     	 ldr r3,[r7,#8]
  98 005c 5A88     	 ldrh r2,[r3,#2]
  99 005e 7B68     	 ldr r3,[r7,#4]
 100 0060 5B88     	 ldrh r3,[r3,#2]
 101 0062 9A42     	 cmp r2,r3
 102 0064 03D0     	 beq .L3
 103              	.L2:
 103:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
 104:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 105:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SIZE_MISMATCH */
 106:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SIZE_MISMATCH;
 104              	 .loc 1 106 0
 105 0066 FD23     	 movs r3,#253
 106 0068 87F83D30 	 strb r3,[r7,#61]
 107 006c BDE1     	 b .L4
 108              	.L3:
 107:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 108:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   else
 109:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** #endif /*      #ifdef ARM_MATH_MATRIX_CHECK    */
 110:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   {
 112:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB *
 113:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* row loop */
 114:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     do
 115:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     {
 116:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Output pointer is set to starting address of the row being processed */
 117:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       px = pOut + 2 * i;
 109              	 .loc 1 117 0
 110 006e B7F84430 	 ldrh r3,[r7,#68]
 111 0072 DB00     	 lsls r3,r3,#3
 112 0074 1A46     	 mov r2,r3
 113 0076 BB6B     	 ldr r3,[r7,#56]
 114 0078 1344     	 add r3,r3,r2
 115 007a BB65     	 str r3,[r7,#88]
 118:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the column loop counter is to be initiated */
 120:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       col = numColsB;
 116              	 .loc 1 120 0
 117 007c BB8E     	 ldrh r3,[r7,#52]
 118 007e A7F84630 	 strh r3,[r7,#70]
 121:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* For every row wise process, the pIn2 pointer is set      
 123:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****        ** to the starting address of the pSrcB data */
 124:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pIn2 = pSrcB->pData;
 119              	 .loc 1 124 0
 120 0082 BB68     	 ldr r3,[r7,#8]
 121 0084 5B68     	 ldr r3,[r3,#4]
 122 0086 3B66     	 str r3,[r7,#96]
 125:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 126:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       j = 0u;
 123              	 .loc 1 126 0
 124 0088 0023     	 movs r3,#0
 125 008a A7F84230 	 strh r3,[r7,#66]
 126              	.L9:
 127:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* column loop */
 129:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       do
 130:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       {
 131:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Set the variable sum, that acts as accumulator, to zero */
 132:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 = 0.0f;
 127              	 .loc 1 132 0
 128 008e 4FF00003 	 mov r3,#0
 129 0092 7B65     	 str r3,[r7,#84]
 133:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 = 0.0f;
 130              	 .loc 1 133 0
 131 0094 4FF00003 	 mov r3,#0
 132 0098 3B65     	 str r3,[r7,#80]
 134:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 135:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal2 = 0.0f;
 133              	 .loc 1 135 0
 134 009a 4FF00003 	 mov r3,#0
 135 009e FB64     	 str r3,[r7,#76]
 136:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag2 = 0.0f;
 136              	 .loc 1 136 0
 137 00a0 4FF00003 	 mov r3,#0
 138 00a4 BB64     	 str r3,[r7,#72]
 137:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 138:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Initiate the pointer pIn1 to point to the starting address of the column being processed
 139:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn1 = pInA;
 139              	 .loc 1 139 0
 140 00a6 FB6D     	 ldr r3,[r7,#92]
 141 00a8 7B66     	 str r3,[r7,#100]
 140:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Apply loop unrolling and compute 4 MACs simultaneously. */
 142:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA >> 2;
 142              	 .loc 1 142 0
 143 00aa 7B8E     	 ldrh r3,[r7,#50]
 144 00ac 9B08     	 lsrs r3,r3,#2
 145 00ae FB87     	 strh r3,[r7,#62]
 143:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* matrix multiplication        */
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while(colCnt > 0u)
 146              	 .loc 1 145 0
 147 00b0 06E1     	 b .L5
 148              	.L6:
 146:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 147:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 148:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix A */
 149:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0 = *pIn1;
 149              	 .loc 1 149 0
 150 00b2 7B6E     	 ldr r3,[r7,#100]
 151 00b4 1B68     	 ldr r3,[r3]
 152 00b6 FB62     	 str r3,[r7,#44]
 150:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading real part of complex matrix B */
 152:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c0 = *pIn2;
 153              	 .loc 1 152 0
 154 00b8 3B6E     	 ldr r3,[r7,#96]
 155 00ba 1B68     	 ldr r3,[r3]
 156 00bc BB62     	 str r3,[r7,#40]
 153:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 154:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading imaginary part of complex matrix A */
 155:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b0 = *(pIn1 + 1u);
 157              	 .loc 1 155 0
 158 00be 7B6E     	 ldr r3,[r7,#100]
 159 00c0 5B68     	 ldr r3,[r3,#4]
 160 00c2 7B62     	 str r3,[r7,#36]
 156:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 157:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Reading imaginary part of complex matrix B */
 158:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d0 = *(pIn2 + 1u);
 161              	 .loc 1 158 0
 162 00c4 3B6E     	 ldr r3,[r7,#96]
 163 00c6 5B68     	 ldr r3,[r3,#4]
 164 00c8 3B62     	 str r3,[r7,#32]
 159:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 160:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a0 * c0;
 165              	 .loc 1 160 0
 166 00ca F86A     	 ldr r0,[r7,#44]
 167 00cc B96A     	 ldr r1,[r7,#40]
 168 00ce FFF7FEFF 	 bl __aeabi_fmul
 169 00d2 0346     	 mov r3,r0
 170 00d4 786D     	 ldr r0,[r7,#84]
 171 00d6 1946     	 mov r1,r3
 172 00d8 FFF7FEFF 	 bl __aeabi_fadd
 173 00dc 0346     	 mov r3,r0
 174 00de 7B65     	 str r3,[r7,#84]
 161:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b0 * c0;
 175              	 .loc 1 161 0
 176 00e0 786A     	 ldr r0,[r7,#36]
 177 00e2 B96A     	 ldr r1,[r7,#40]
 178 00e4 FFF7FEFF 	 bl __aeabi_fmul
 179 00e8 0346     	 mov r3,r0
 180 00ea 386D     	 ldr r0,[r7,#80]
 181 00ec 1946     	 mov r1,r3
 182 00ee FFF7FEFF 	 bl __aeabi_fadd
 183 00f2 0346     	 mov r3,r0
 184 00f4 3B65     	 str r3,[r7,#80]
 162:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 163:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 185              	 .loc 1 163 0
 186 00f6 7B6E     	 ldr r3,[r7,#100]
 187 00f8 0833     	 adds r3,r3,#8
 188 00fa 7B66     	 str r3,[r7,#100]
 164:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 189              	 .loc 1 164 0
 190 00fc BB8E     	 ldrh r3,[r7,#52]
 191 00fe DB00     	 lsls r3,r3,#3
 192 0100 1A46     	 mov r2,r3
 193 0102 3B6E     	 ldr r3,[r7,#96]
 194 0104 1344     	 add r3,r3,r2
 195 0106 3B66     	 str r3,[r7,#96]
 165:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 166:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b0 * d0;
 196              	 .loc 1 166 0
 197 0108 786A     	 ldr r0,[r7,#36]
 198 010a 396A     	 ldr r1,[r7,#32]
 199 010c FFF7FEFF 	 bl __aeabi_fmul
 200 0110 0346     	 mov r3,r0
 201 0112 F86C     	 ldr r0,[r7,#76]
 202 0114 1946     	 mov r1,r3
 203 0116 FFF7FEFF 	 bl __aeabi_fsub
 204 011a 0346     	 mov r3,r0
 205 011c FB64     	 str r3,[r7,#76]
 167:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a0 * d0;
 206              	 .loc 1 167 0
 207 011e F86A     	 ldr r0,[r7,#44]
 208 0120 396A     	 ldr r1,[r7,#32]
 209 0122 FFF7FEFF 	 bl __aeabi_fmul
 210 0126 0346     	 mov r3,r0
 211 0128 B86C     	 ldr r0,[r7,#72]
 212 012a 1946     	 mov r1,r3
 213 012c FFF7FEFF 	 bl __aeabi_fadd
 214 0130 0346     	 mov r3,r0
 215 0132 BB64     	 str r3,[r7,#72]
 168:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 169:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 170:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 171:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 216              	 .loc 1 171 0
 217 0134 7B6E     	 ldr r3,[r7,#100]
 218 0136 1B68     	 ldr r3,[r3]
 219 0138 FB61     	 str r3,[r7,#28]
 172:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 220              	 .loc 1 172 0
 221 013a 3B6E     	 ldr r3,[r7,#96]
 222 013c 1B68     	 ldr r3,[r3]
 223 013e BB61     	 str r3,[r7,#24]
 173:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 174:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1u);
 224              	 .loc 1 174 0
 225 0140 7B6E     	 ldr r3,[r7,#100]
 226 0142 5B68     	 ldr r3,[r3,#4]
 227 0144 7B61     	 str r3,[r7,#20]
 175:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1u);
 228              	 .loc 1 175 0
 229 0146 3B6E     	 ldr r3,[r7,#96]
 230 0148 5B68     	 ldr r3,[r3,#4]
 231 014a 3B61     	 str r3,[r7,#16]
 176:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 177:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 232              	 .loc 1 177 0
 233 014c F869     	 ldr r0,[r7,#28]
 234 014e B969     	 ldr r1,[r7,#24]
 235 0150 FFF7FEFF 	 bl __aeabi_fmul
 236 0154 0346     	 mov r3,r0
 237 0156 786D     	 ldr r0,[r7,#84]
 238 0158 1946     	 mov r1,r3
 239 015a FFF7FEFF 	 bl __aeabi_fadd
 240 015e 0346     	 mov r3,r0
 241 0160 7B65     	 str r3,[r7,#84]
 178:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 242              	 .loc 1 178 0
 243 0162 7869     	 ldr r0,[r7,#20]
 244 0164 B969     	 ldr r1,[r7,#24]
 245 0166 FFF7FEFF 	 bl __aeabi_fmul
 246 016a 0346     	 mov r3,r0
 247 016c 386D     	 ldr r0,[r7,#80]
 248 016e 1946     	 mov r1,r3
 249 0170 FFF7FEFF 	 bl __aeabi_fadd
 250 0174 0346     	 mov r3,r0
 251 0176 3B65     	 str r3,[r7,#80]
 179:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 252              	 .loc 1 180 0
 253 0178 7B6E     	 ldr r3,[r7,#100]
 254 017a 0833     	 adds r3,r3,#8
 255 017c 7B66     	 str r3,[r7,#100]
 181:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 256              	 .loc 1 181 0
 257 017e BB8E     	 ldrh r3,[r7,#52]
 258 0180 DB00     	 lsls r3,r3,#3
 259 0182 1A46     	 mov r2,r3
 260 0184 3B6E     	 ldr r3,[r7,#96]
 261 0186 1344     	 add r3,r3,r2
 262 0188 3B66     	 str r3,[r7,#96]
 182:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 183:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 263              	 .loc 1 183 0
 264 018a 7869     	 ldr r0,[r7,#20]
 265 018c 3969     	 ldr r1,[r7,#16]
 266 018e FFF7FEFF 	 bl __aeabi_fmul
 267 0192 0346     	 mov r3,r0
 268 0194 F86C     	 ldr r0,[r7,#76]
 269 0196 1946     	 mov r1,r3
 270 0198 FFF7FEFF 	 bl __aeabi_fsub
 271 019c 0346     	 mov r3,r0
 272 019e FB64     	 str r3,[r7,#76]
 184:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 273              	 .loc 1 184 0
 274 01a0 F869     	 ldr r0,[r7,#28]
 275 01a2 3969     	 ldr r1,[r7,#16]
 276 01a4 FFF7FEFF 	 bl __aeabi_fmul
 277 01a8 0346     	 mov r3,r0
 278 01aa B86C     	 ldr r0,[r7,#72]
 279 01ac 1946     	 mov r1,r3
 280 01ae FFF7FEFF 	 bl __aeabi_fadd
 281 01b2 0346     	 mov r3,r0
 282 01b4 BB64     	 str r3,[r7,#72]
 185:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 186:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a0 = *pIn1;
 283              	 .loc 1 186 0
 284 01b6 7B6E     	 ldr r3,[r7,#100]
 285 01b8 1B68     	 ldr r3,[r3]
 286 01ba FB62     	 str r3,[r7,#44]
 187:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c0 = *pIn2;
 287              	 .loc 1 187 0
 288 01bc 3B6E     	 ldr r3,[r7,#96]
 289 01be 1B68     	 ldr r3,[r3]
 290 01c0 BB62     	 str r3,[r7,#40]
 188:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 189:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b0 = *(pIn1 + 1u);
 291              	 .loc 1 189 0
 292 01c2 7B6E     	 ldr r3,[r7,#100]
 293 01c4 5B68     	 ldr r3,[r3,#4]
 294 01c6 7B62     	 str r3,[r7,#36]
 190:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d0 = *(pIn2 + 1u);
 295              	 .loc 1 190 0
 296 01c8 3B6E     	 ldr r3,[r7,#96]
 297 01ca 5B68     	 ldr r3,[r3,#4]
 298 01cc 3B62     	 str r3,[r7,#32]
 191:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 192:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a0 * c0;
 299              	 .loc 1 192 0
 300 01ce F86A     	 ldr r0,[r7,#44]
 301 01d0 B96A     	 ldr r1,[r7,#40]
 302 01d2 FFF7FEFF 	 bl __aeabi_fmul
 303 01d6 0346     	 mov r3,r0
 304 01d8 786D     	 ldr r0,[r7,#84]
 305 01da 1946     	 mov r1,r3
 306 01dc FFF7FEFF 	 bl __aeabi_fadd
 307 01e0 0346     	 mov r3,r0
 308 01e2 7B65     	 str r3,[r7,#84]
 193:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b0 * c0;
 309              	 .loc 1 193 0
 310 01e4 786A     	 ldr r0,[r7,#36]
 311 01e6 B96A     	 ldr r1,[r7,#40]
 312 01e8 FFF7FEFF 	 bl __aeabi_fmul
 313 01ec 0346     	 mov r3,r0
 314 01ee 386D     	 ldr r0,[r7,#80]
 315 01f0 1946     	 mov r1,r3
 316 01f2 FFF7FEFF 	 bl __aeabi_fadd
 317 01f6 0346     	 mov r3,r0
 318 01f8 3B65     	 str r3,[r7,#80]
 194:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 195:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 319              	 .loc 1 195 0
 320 01fa 7B6E     	 ldr r3,[r7,#100]
 321 01fc 0833     	 adds r3,r3,#8
 322 01fe 7B66     	 str r3,[r7,#100]
 196:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 323              	 .loc 1 196 0
 324 0200 BB8E     	 ldrh r3,[r7,#52]
 325 0202 DB00     	 lsls r3,r3,#3
 326 0204 1A46     	 mov r2,r3
 327 0206 3B6E     	 ldr r3,[r7,#96]
 328 0208 1344     	 add r3,r3,r2
 329 020a 3B66     	 str r3,[r7,#96]
 197:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 198:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b0 * d0;
 330              	 .loc 1 198 0
 331 020c 786A     	 ldr r0,[r7,#36]
 332 020e 396A     	 ldr r1,[r7,#32]
 333 0210 FFF7FEFF 	 bl __aeabi_fmul
 334 0214 0346     	 mov r3,r0
 335 0216 F86C     	 ldr r0,[r7,#76]
 336 0218 1946     	 mov r1,r3
 337 021a FFF7FEFF 	 bl __aeabi_fsub
 338 021e 0346     	 mov r3,r0
 339 0220 FB64     	 str r3,[r7,#76]
 199:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a0 * d0;
 340              	 .loc 1 199 0
 341 0222 F86A     	 ldr r0,[r7,#44]
 342 0224 396A     	 ldr r1,[r7,#32]
 343 0226 FFF7FEFF 	 bl __aeabi_fmul
 344 022a 0346     	 mov r3,r0
 345 022c B86C     	 ldr r0,[r7,#72]
 346 022e 1946     	 mov r1,r3
 347 0230 FFF7FEFF 	 bl __aeabi_fadd
 348 0234 0346     	 mov r3,r0
 349 0236 BB64     	 str r3,[r7,#72]
 200:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 201:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 202:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 203:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 350              	 .loc 1 203 0
 351 0238 7B6E     	 ldr r3,[r7,#100]
 352 023a 1B68     	 ldr r3,[r3]
 353 023c FB61     	 str r3,[r7,#28]
 204:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 354              	 .loc 1 204 0
 355 023e 3B6E     	 ldr r3,[r7,#96]
 356 0240 1B68     	 ldr r3,[r3]
 357 0242 BB61     	 str r3,[r7,#24]
 205:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 206:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1u);
 358              	 .loc 1 206 0
 359 0244 7B6E     	 ldr r3,[r7,#100]
 360 0246 5B68     	 ldr r3,[r3,#4]
 361 0248 7B61     	 str r3,[r7,#20]
 207:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1u);
 362              	 .loc 1 207 0
 363 024a 3B6E     	 ldr r3,[r7,#96]
 364 024c 5B68     	 ldr r3,[r3,#4]
 365 024e 3B61     	 str r3,[r7,#16]
 208:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 209:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 366              	 .loc 1 209 0
 367 0250 F869     	 ldr r0,[r7,#28]
 368 0252 B969     	 ldr r1,[r7,#24]
 369 0254 FFF7FEFF 	 bl __aeabi_fmul
 370 0258 0346     	 mov r3,r0
 371 025a 786D     	 ldr r0,[r7,#84]
 372 025c 1946     	 mov r1,r3
 373 025e FFF7FEFF 	 bl __aeabi_fadd
 374 0262 0346     	 mov r3,r0
 375 0264 7B65     	 str r3,[r7,#84]
 210:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 376              	 .loc 1 210 0
 377 0266 7869     	 ldr r0,[r7,#20]
 378 0268 B969     	 ldr r1,[r7,#24]
 379 026a FFF7FEFF 	 bl __aeabi_fmul
 380 026e 0346     	 mov r3,r0
 381 0270 386D     	 ldr r0,[r7,#80]
 382 0272 1946     	 mov r1,r3
 383 0274 FFF7FEFF 	 bl __aeabi_fadd
 384 0278 0346     	 mov r3,r0
 385 027a 3B65     	 str r3,[r7,#80]
 211:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 212:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 386              	 .loc 1 212 0
 387 027c 7B6E     	 ldr r3,[r7,#100]
 388 027e 0833     	 adds r3,r3,#8
 389 0280 7B66     	 str r3,[r7,#100]
 213:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 390              	 .loc 1 213 0
 391 0282 BB8E     	 ldrh r3,[r7,#52]
 392 0284 DB00     	 lsls r3,r3,#3
 393 0286 1A46     	 mov r2,r3
 394 0288 3B6E     	 ldr r3,[r7,#96]
 395 028a 1344     	 add r3,r3,r2
 396 028c 3B66     	 str r3,[r7,#96]
 214:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 215:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 397              	 .loc 1 215 0
 398 028e 7869     	 ldr r0,[r7,#20]
 399 0290 3969     	 ldr r1,[r7,#16]
 400 0292 FFF7FEFF 	 bl __aeabi_fmul
 401 0296 0346     	 mov r3,r0
 402 0298 F86C     	 ldr r0,[r7,#76]
 403 029a 1946     	 mov r1,r3
 404 029c FFF7FEFF 	 bl __aeabi_fsub
 405 02a0 0346     	 mov r3,r0
 406 02a2 FB64     	 str r3,[r7,#76]
 216:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 407              	 .loc 1 216 0
 408 02a4 F869     	 ldr r0,[r7,#28]
 409 02a6 3969     	 ldr r1,[r7,#16]
 410 02a8 FFF7FEFF 	 bl __aeabi_fmul
 411 02ac 0346     	 mov r3,r0
 412 02ae B86C     	 ldr r0,[r7,#72]
 413 02b0 1946     	 mov r1,r3
 414 02b2 FFF7FEFF 	 bl __aeabi_fadd
 415 02b6 0346     	 mov r3,r0
 416 02b8 BB64     	 str r3,[r7,#72]
 217:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 218:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop count */
 219:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 417              	 .loc 1 219 0
 418 02ba FB8F     	 ldrh r3,[r7,#62]
 419 02bc 013B     	 subs r3,r3,#1
 420 02be FB87     	 strh r3,[r7,#62]
 421              	.L5:
 145:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 422              	 .loc 1 145 0
 423 02c0 FB8F     	 ldrh r3,[r7,#62]
 424 02c2 002B     	 cmp r3,#0
 425 02c4 7FF4F5AE 	 bne .L6
 220:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 221:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 222:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* If the columns of pSrcA is not a multiple of 4, compute any remaining MACs here.      
 223:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****          ** No loop unrolling is used. */
 224:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         colCnt = numColsA % 0x4u;
 426              	 .loc 1 224 0
 427 02c8 7B8E     	 ldrh r3,[r7,#50]
 428 02ca 03F00303 	 and r3,r3,#3
 429 02ce FB87     	 strh r3,[r7,#62]
 225:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 226:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         while(colCnt > 0u)
 430              	 .loc 1 226 0
 431 02d0 43E0     	 b .L7
 432              	.L8:
 227:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 228:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* c(m,n) = a(1,1)*b(1,1) + a(1,2) * b(2,1) + .... + a(m,p)*b(p,n) */
 229:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           a1 = *pIn1;
 433              	 .loc 1 229 0
 434 02d2 7B6E     	 ldr r3,[r7,#100]
 435 02d4 1B68     	 ldr r3,[r3]
 436 02d6 FB61     	 str r3,[r7,#28]
 230:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           c1 = *pIn2;
 437              	 .loc 1 230 0
 438 02d8 3B6E     	 ldr r3,[r7,#96]
 439 02da 1B68     	 ldr r3,[r3]
 440 02dc BB61     	 str r3,[r7,#24]
 231:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 232:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           b1 = *(pIn1 + 1u);
 441              	 .loc 1 232 0
 442 02de 7B6E     	 ldr r3,[r7,#100]
 443 02e0 5B68     	 ldr r3,[r3,#4]
 444 02e2 7B61     	 str r3,[r7,#20]
 233:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           d1 = *(pIn2 + 1u);
 445              	 .loc 1 233 0
 446 02e4 3B6E     	 ldr r3,[r7,#96]
 447 02e6 5B68     	 ldr r3,[r3,#4]
 448 02e8 3B61     	 str r3,[r7,#16]
 234:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 235:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal1 += a1 * c1;
 449              	 .loc 1 235 0
 450 02ea F869     	 ldr r0,[r7,#28]
 451 02ec B969     	 ldr r1,[r7,#24]
 452 02ee FFF7FEFF 	 bl __aeabi_fmul
 453 02f2 0346     	 mov r3,r0
 454 02f4 786D     	 ldr r0,[r7,#84]
 455 02f6 1946     	 mov r1,r3
 456 02f8 FFF7FEFF 	 bl __aeabi_fadd
 457 02fc 0346     	 mov r3,r0
 458 02fe 7B65     	 str r3,[r7,#84]
 236:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag1 += b1 * c1;
 459              	 .loc 1 236 0
 460 0300 7869     	 ldr r0,[r7,#20]
 461 0302 B969     	 ldr r1,[r7,#24]
 462 0304 FFF7FEFF 	 bl __aeabi_fmul
 463 0308 0346     	 mov r3,r0
 464 030a 386D     	 ldr r0,[r7,#80]
 465 030c 1946     	 mov r1,r3
 466 030e FFF7FEFF 	 bl __aeabi_fadd
 467 0312 0346     	 mov r3,r0
 468 0314 3B65     	 str r3,[r7,#80]
 237:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn1 += 2u;
 469              	 .loc 1 238 0
 470 0316 7B6E     	 ldr r3,[r7,#100]
 471 0318 0833     	 adds r3,r3,#8
 472 031a 7B66     	 str r3,[r7,#100]
 239:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           pIn2 += 2 * numColsB;
 473              	 .loc 1 239 0
 474 031c BB8E     	 ldrh r3,[r7,#52]
 475 031e DB00     	 lsls r3,r3,#3
 476 0320 1A46     	 mov r2,r3
 477 0322 3B6E     	 ldr r3,[r7,#96]
 478 0324 1344     	 add r3,r3,r2
 479 0326 3B66     	 str r3,[r7,#96]
 240:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 241:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumReal2 -= b1 * d1;
 480              	 .loc 1 241 0
 481 0328 7869     	 ldr r0,[r7,#20]
 482 032a 3969     	 ldr r1,[r7,#16]
 483 032c FFF7FEFF 	 bl __aeabi_fmul
 484 0330 0346     	 mov r3,r0
 485 0332 F86C     	 ldr r0,[r7,#76]
 486 0334 1946     	 mov r1,r3
 487 0336 FFF7FEFF 	 bl __aeabi_fsub
 488 033a 0346     	 mov r3,r0
 489 033c FB64     	 str r3,[r7,#76]
 242:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           sumImag2 += a1 * d1;
 490              	 .loc 1 242 0
 491 033e F869     	 ldr r0,[r7,#28]
 492 0340 3969     	 ldr r1,[r7,#16]
 493 0342 FFF7FEFF 	 bl __aeabi_fmul
 494 0346 0346     	 mov r3,r0
 495 0348 B86C     	 ldr r0,[r7,#72]
 496 034a 1946     	 mov r1,r3
 497 034c FFF7FEFF 	 bl __aeabi_fadd
 498 0350 0346     	 mov r3,r0
 499 0352 BB64     	 str r3,[r7,#72]
 243:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 244:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           /* Decrement the loop counter */
 245:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****           colCnt--;
 500              	 .loc 1 245 0
 501 0354 FB8F     	 ldrh r3,[r7,#62]
 502 0356 013B     	 subs r3,r3,#1
 503 0358 FB87     	 strh r3,[r7,#62]
 504              	.L7:
 226:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         {
 505              	 .loc 1 226 0
 506 035a FB8F     	 ldrh r3,[r7,#62]
 507 035c 002B     	 cmp r3,#0
 508 035e B8D1     	 bne .L8
 246:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         }
 247:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 248:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumReal1 += sumReal2;
 509              	 .loc 1 248 0
 510 0360 786D     	 ldr r0,[r7,#84]
 511 0362 F96C     	 ldr r1,[r7,#76]
 512 0364 FFF7FEFF 	 bl __aeabi_fadd
 513 0368 0346     	 mov r3,r0
 514 036a 7B65     	 str r3,[r7,#84]
 249:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         sumImag1 += sumImag2;
 515              	 .loc 1 249 0
 516 036c 386D     	 ldr r0,[r7,#80]
 517 036e B96C     	 ldr r1,[r7,#72]
 518 0370 FFF7FEFF 	 bl __aeabi_fadd
 519 0374 0346     	 mov r3,r0
 520 0376 3B65     	 str r3,[r7,#80]
 250:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 251:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Store the result in the destination buffer */
 252:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumReal1;
 521              	 .loc 1 252 0
 522 0378 BB6D     	 ldr r3,[r7,#88]
 523 037a 1A1D     	 adds r2,r3,#4
 524 037c BA65     	 str r2,[r7,#88]
 525 037e 7A6D     	 ldr r2,[r7,#84]
 526 0380 1A60     	 str r2,[r3]
 253:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         *px++ = sumImag1;
 527              	 .loc 1 253 0
 528 0382 BB6D     	 ldr r3,[r7,#88]
 529 0384 1A1D     	 adds r2,r3,#4
 530 0386 BA65     	 str r2,[r7,#88]
 531 0388 3A6D     	 ldr r2,[r7,#80]
 532 038a 1A60     	 str r2,[r3]
 254:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 255:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Update the pointer pIn2 to point to the  starting address of the next column */
 256:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         j++;
 533              	 .loc 1 256 0
 534 038c B7F84230 	 ldrh r3,[r7,#66]
 535 0390 0133     	 adds r3,r3,#1
 536 0392 A7F84230 	 strh r3,[r7,#66]
 257:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         pIn2 = pSrcB->pData + 2u * j;
 537              	 .loc 1 257 0
 538 0396 BB68     	 ldr r3,[r7,#8]
 539 0398 5A68     	 ldr r2,[r3,#4]
 540 039a B7F84230 	 ldrh r3,[r7,#66]
 541 039e DB00     	 lsls r3,r3,#3
 542 03a0 1344     	 add r3,r3,r2
 543 03a2 3B66     	 str r3,[r7,#96]
 258:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 259:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         /* Decrement the column loop counter */
 260:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****         col--;
 544              	 .loc 1 260 0
 545 03a4 B7F84630 	 ldrh r3,[r7,#70]
 546 03a8 013B     	 subs r3,r3,#1
 547 03aa A7F84630 	 strh r3,[r7,#70]
 261:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 262:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       } while(col > 0u);
 548              	 .loc 1 262 0
 549 03ae B7F84630 	 ldrh r3,[r7,#70]
 550 03b2 002B     	 cmp r3,#0
 551 03b4 7FF46BAE 	 bne .L9
 263:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 264:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Update the pointer pInA to point to the  starting address of the next row */
 265:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       i = i + numColsB;
 552              	 .loc 1 265 0
 553 03b8 B7F84420 	 ldrh r2,[r7,#68]
 554 03bc BB8E     	 ldrh r3,[r7,#52]
 555 03be 1344     	 add r3,r3,r2
 556 03c0 A7F84430 	 strh r3,[r7,#68]
 266:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       pInA = pInA + 2 * numColsA;
 557              	 .loc 1 266 0
 558 03c4 7B8E     	 ldrh r3,[r7,#50]
 559 03c6 DB00     	 lsls r3,r3,#3
 560 03c8 1A46     	 mov r2,r3
 561 03ca FB6D     	 ldr r3,[r7,#92]
 562 03cc 1344     	 add r3,r3,r2
 563 03ce FB65     	 str r3,[r7,#92]
 267:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 268:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       /* Decrement the row loop counter */
 269:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****       row--;
 564              	 .loc 1 269 0
 565 03d0 B7F84030 	 ldrh r3,[r7,#64]
 566 03d4 013B     	 subs r3,r3,#1
 567 03d6 A7F84030 	 strh r3,[r7,#64]
 270:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 271:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     } while(row > 0u);
 568              	 .loc 1 271 0
 569 03da B7F84030 	 ldrh r3,[r7,#64]
 570 03de 002B     	 cmp r3,#0
 571 03e0 7FF445AE 	 bne .L3
 272:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 273:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     /* Set status as ARM_MATH_SUCCESS */
 274:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****     status = ARM_MATH_SUCCESS;
 572              	 .loc 1 274 0
 573 03e4 0023     	 movs r3,#0
 574 03e6 87F83D30 	 strb r3,[r7,#61]
 575              	.L4:
 275:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   }
 276:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** 
 277:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   /* Return to application */
 278:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c ****   return (status);
 576              	 .loc 1 278 0
 577 03ea 97F83D30 	 ldrb r3,[r7,#61]
 578 03ee 5BB2     	 sxtb r3,r3
 279:../Dave/Generated/CMSIS_DSP/MatrixFunctions/arm_mat_cmplx_mult_f32.c **** }
 579              	 .loc 1 279 0
 580 03f0 1846     	 mov r0,r3
 581 03f2 6837     	 adds r7,r7,#104
 582              	.LCFI3:
 583              	 .cfi_def_cfa_offset 8
 584 03f4 BD46     	 mov sp,r7
 585              	.LCFI4:
 586              	 .cfi_def_cfa_register 13
 587              	 
 588 03f6 80BD     	 pop {r7,pc}
 589              	 .cfi_endproc
 590              	.LFE139:
 592              	 .text
 593              	.Letext0:
 594              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 595              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 596              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_mat_cmplx_mult_f32.c
    {standard input}:22     .text.arm_mat_cmplx_mult_f32:00000000 $t
    {standard input}:27     .text.arm_mat_cmplx_mult_f32:00000000 arm_mat_cmplx_mult_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fadd
__aeabi_fsub
