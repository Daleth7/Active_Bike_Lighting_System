   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_rfft_fast_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fadd
  19              	 .global __aeabi_fmul
  20              	 .global __aeabi_fsub
  21              	 .section .text.stage_rfft_f32,"ax",%progbits
  22              	 .align 2
  23              	 .global stage_rfft_f32
  24              	 .thumb
  25              	 .thumb_func
  27              	stage_rfft_f32:
  28              	.LFB139:
  29              	 .file 1 "../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c"
   1:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** /* ----------------------------------------------------------------------
   2:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.
   3:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *
   4:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *
   7:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * Project: 	    CMSIS DSP Library
   8:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * Title:	    arm_rfft_f32.c
   9:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *
  10:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * Description:	RFFT & RIFFT Floating point process function
  11:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *
  12:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *
  14:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * Redistribution and use in source and binary forms, with or without
  15:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *     the documentation and/or other materials provided with the
  22:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
  31:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * POSSIBILITY OF SUCH DAMAGE.
  39:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** void stage_rfft_f32(
  44:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****   arm_rfft_fast_instance_f32 * S,
  45:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****   float32_t * p, float32_t * pOut)
  46:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** {
  30              	 .loc 1 46 0
  31              	 .cfi_startproc
  32              	 
  33              	 
  34 0000 90B5     	 push {r4,r7,lr}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 12
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 7,-8
  39              	 .cfi_offset 14,-4
  40 0002 95B0     	 sub sp,sp,#84
  41              	.LCFI1:
  42              	 .cfi_def_cfa_offset 96
  43 0004 00AF     	 add r7,sp,#0
  44              	.LCFI2:
  45              	 .cfi_def_cfa_register 7
  46 0006 F860     	 str r0,[r7,#12]
  47 0008 B960     	 str r1,[r7,#8]
  48 000a 7A60     	 str r2,[r7,#4]
  47:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    uint32_t  k;								   /* Loop Counter                     */
  48:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
  49:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
  49              	 .loc 1 49 0
  50 000c FB68     	 ldr r3,[r7,#12]
  51 000e 5B69     	 ldr r3,[r3,#20]
  52 0010 BB64     	 str r3,[r7,#72]
  50:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t *pA = p;						   /* increasing pointer               */
  53              	 .loc 1 50 0
  54 0012 BB68     	 ldr r3,[r7,#8]
  55 0014 7B64     	 str r3,[r7,#68]
  51:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t *pB = p;						   /* decreasing pointer               */
  56              	 .loc 1 51 0
  57 0016 BB68     	 ldr r3,[r7,#8]
  58 0018 3B64     	 str r3,[r7,#64]
  52:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
  53:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t t1a, t1b;				         /* temporary variables              */
  54:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t p0, p1, p2, p3;				   /* temporary variables              */
  55:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  56:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  57:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    k = (S->Sint).fftLen - 1;					
  59              	 .loc 1 57 0
  60 001a FB68     	 ldr r3,[r7,#12]
  61 001c 1B88     	 ldrh r3,[r3]
  62 001e 013B     	 subs r3,r3,#1
  63 0020 FB64     	 str r3,[r7,#76]
  58:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  59:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    /* Pack first and last sample of the frequency domain together */
  60:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  61:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    xBR = pB[0];
  64              	 .loc 1 61 0
  65 0022 3B6C     	 ldr r3,[r7,#64]
  66 0024 1B68     	 ldr r3,[r3]
  67 0026 FB63     	 str r3,[r7,#60]
  62:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    xBI = pB[1];
  68              	 .loc 1 62 0
  69 0028 3B6C     	 ldr r3,[r7,#64]
  70 002a 5B68     	 ldr r3,[r3,#4]
  71 002c BB63     	 str r3,[r7,#56]
  63:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    xAR = pA[0];
  72              	 .loc 1 63 0
  73 002e 7B6C     	 ldr r3,[r7,#68]
  74 0030 1B68     	 ldr r3,[r3]
  75 0032 7B63     	 str r3,[r7,#52]
  64:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    xAI = pA[1];
  76              	 .loc 1 64 0
  77 0034 7B6C     	 ldr r3,[r7,#68]
  78 0036 5B68     	 ldr r3,[r3,#4]
  79 0038 3B63     	 str r3,[r7,#48]
  65:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  66:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    twR = *pCoeff++ ;
  80              	 .loc 1 66 0
  81 003a BB6C     	 ldr r3,[r7,#72]
  82 003c 1A1D     	 adds r2,r3,#4
  83 003e BA64     	 str r2,[r7,#72]
  84 0040 1B68     	 ldr r3,[r3]
  85 0042 FB62     	 str r3,[r7,#44]
  67:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    twI = *pCoeff++ ;
  86              	 .loc 1 67 0
  87 0044 BB6C     	 ldr r3,[r7,#72]
  88 0046 1A1D     	 adds r2,r3,#4
  89 0048 BA64     	 str r2,[r7,#72]
  90 004a 1B68     	 ldr r3,[r3]
  91 004c BB62     	 str r3,[r7,#40]
  68:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    
  69:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    // U1 = XA(1) + XB(1); % It is real
  70:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    t1a = xBR + xAR  ;
  92              	 .loc 1 70 0
  93 004e F86B     	 ldr r0,[r7,#60]
  94 0050 796B     	 ldr r1,[r7,#52]
  95 0052 FFF7FEFF 	 bl __aeabi_fadd
  96 0056 0346     	 mov r3,r0
  97 0058 7B62     	 str r3,[r7,#36]
  71:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    
  72:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    // U2 = XB(1) - XA(1); % It is imaginary
  73:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    t1b = xBI + xAI  ;
  98              	 .loc 1 73 0
  99 005a B86B     	 ldr r0,[r7,#56]
 100 005c 396B     	 ldr r1,[r7,#48]
 101 005e FFF7FEFF 	 bl __aeabi_fadd
 102 0062 0346     	 mov r3,r0
 103 0064 3B62     	 str r3,[r7,#32]
  74:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
  76:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
  77:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( t1a + t1b );
 104              	 .loc 1 77 0
 105 0066 7C68     	 ldr r4,[r7,#4]
 106 0068 231D     	 adds r3,r4,#4
 107 006a 7B60     	 str r3,[r7,#4]
 108 006c 786A     	 ldr r0,[r7,#36]
 109 006e 396A     	 ldr r1,[r7,#32]
 110 0070 FFF7FEFF 	 bl __aeabi_fadd
 111 0074 0346     	 mov r3,r0
 112 0076 1846     	 mov r0,r3
 113 0078 4FF07C51 	 mov r1,#1056964608
 114 007c FFF7FEFF 	 bl __aeabi_fmul
 115 0080 0346     	 mov r3,r0
 116 0082 2360     	 str r3,[r4]
  78:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( t1a - t1b );
 117              	 .loc 1 78 0
 118 0084 7C68     	 ldr r4,[r7,#4]
 119 0086 231D     	 adds r3,r4,#4
 120 0088 7B60     	 str r3,[r7,#4]
 121 008a 786A     	 ldr r0,[r7,#36]
 122 008c 396A     	 ldr r1,[r7,#32]
 123 008e FFF7FEFF 	 bl __aeabi_fsub
 124 0092 0346     	 mov r3,r0
 125 0094 1846     	 mov r0,r3
 126 0096 4FF07C51 	 mov r1,#1056964608
 127 009a FFF7FEFF 	 bl __aeabi_fmul
 128 009e 0346     	 mov r3,r0
 129 00a0 2360     	 str r3,[r4]
  79:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  80:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
  81:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    pB  = p + 2*k;
 130              	 .loc 1 81 0
 131 00a2 FB6C     	 ldr r3,[r7,#76]
 132 00a4 DB00     	 lsls r3,r3,#3
 133 00a6 BA68     	 ldr r2,[r7,#8]
 134 00a8 1344     	 add r3,r3,r2
 135 00aa 3B64     	 str r3,[r7,#64]
  82:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    pA += 2;
 136              	 .loc 1 82 0
 137 00ac 7B6C     	 ldr r3,[r7,#68]
 138 00ae 0833     	 adds r3,r3,#8
 139 00b0 7B64     	 str r3,[r7,#68]
 140              	.L2:
  83:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
  84:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    do
  85:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    {
  86:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       /*
  87:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          function X = my_split_rfft(X, ifftFlag)
  88:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          % X is a series of real numbers
  89:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          L  = length(X);
  90:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          XC = X(1:2:end) +i*X(2:2:end);
  91:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          XA = fft(XC);
  92:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          XB = conj(XA([1 end:-1:2]));
  93:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          TW = i*exp(-2*pi*i*[0:L/2-1]/L).';
  94:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          for l = 2:L/2
  95:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****             XA(l) = 1/2 * (XA(l) + XB(l) + TW(l) * (XB(l) - XA(l)));
  96:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          end
  97:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(
  98:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****          X = XA;
  99:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       */
 100:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 101:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xBI = pB[1];
 141              	 .loc 1 101 0 discriminator 1
 142 00b2 3B6C     	 ldr r3,[r7,#64]
 143 00b4 5B68     	 ldr r3,[r3,#4]
 144 00b6 BB63     	 str r3,[r7,#56]
 102:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xBR = pB[0];
 145              	 .loc 1 102 0 discriminator 1
 146 00b8 3B6C     	 ldr r3,[r7,#64]
 147 00ba 1B68     	 ldr r3,[r3]
 148 00bc FB63     	 str r3,[r7,#60]
 103:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xAR = pA[0];
 149              	 .loc 1 103 0 discriminator 1
 150 00be 7B6C     	 ldr r3,[r7,#68]
 151 00c0 1B68     	 ldr r3,[r3]
 152 00c2 7B63     	 str r3,[r7,#52]
 104:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xAI = pA[1];
 153              	 .loc 1 104 0 discriminator 1
 154 00c4 7B6C     	 ldr r3,[r7,#68]
 155 00c6 5B68     	 ldr r3,[r3,#4]
 156 00c8 3B63     	 str r3,[r7,#48]
 105:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       twR = *pCoeff++;
 157              	 .loc 1 106 0 discriminator 1
 158 00ca BB6C     	 ldr r3,[r7,#72]
 159 00cc 1A1D     	 adds r2,r3,#4
 160 00ce BA64     	 str r2,[r7,#72]
 161 00d0 1B68     	 ldr r3,[r3]
 162 00d2 FB62     	 str r3,[r7,#44]
 107:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       twI = *pCoeff++;
 163              	 .loc 1 107 0 discriminator 1
 164 00d4 BB6C     	 ldr r3,[r7,#72]
 165 00d6 1A1D     	 adds r2,r3,#4
 166 00d8 BA64     	 str r2,[r7,#72]
 167 00da 1B68     	 ldr r3,[r3]
 168 00dc BB62     	 str r3,[r7,#40]
 108:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 109:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       t1a = xBR - xAR ;
 169              	 .loc 1 109 0 discriminator 1
 170 00de F86B     	 ldr r0,[r7,#60]
 171 00e0 796B     	 ldr r1,[r7,#52]
 172 00e2 FFF7FEFF 	 bl __aeabi_fsub
 173 00e6 0346     	 mov r3,r0
 174 00e8 7B62     	 str r3,[r7,#36]
 110:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       t1b = xBI + xAI ;
 175              	 .loc 1 110 0 discriminator 1
 176 00ea B86B     	 ldr r0,[r7,#56]
 177 00ec 396B     	 ldr r1,[r7,#48]
 178 00ee FFF7FEFF 	 bl __aeabi_fadd
 179 00f2 0346     	 mov r3,r0
 180 00f4 3B62     	 str r3,[r7,#32]
 111:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
 113:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
 114:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       p0 = twR * t1a;
 181              	 .loc 1 114 0 discriminator 1
 182 00f6 F86A     	 ldr r0,[r7,#44]
 183 00f8 796A     	 ldr r1,[r7,#36]
 184 00fa FFF7FEFF 	 bl __aeabi_fmul
 185 00fe 0346     	 mov r3,r0
 186 0100 FB61     	 str r3,[r7,#28]
 115:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       p1 = twI * t1a;
 187              	 .loc 1 115 0 discriminator 1
 188 0102 B86A     	 ldr r0,[r7,#40]
 189 0104 796A     	 ldr r1,[r7,#36]
 190 0106 FFF7FEFF 	 bl __aeabi_fmul
 191 010a 0346     	 mov r3,r0
 192 010c BB61     	 str r3,[r7,#24]
 116:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       p2 = twR * t1b;
 193              	 .loc 1 116 0 discriminator 1
 194 010e F86A     	 ldr r0,[r7,#44]
 195 0110 396A     	 ldr r1,[r7,#32]
 196 0112 FFF7FEFF 	 bl __aeabi_fmul
 197 0116 0346     	 mov r3,r0
 198 0118 7B61     	 str r3,[r7,#20]
 117:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       p3 = twI * t1b;
 199              	 .loc 1 117 0 discriminator 1
 200 011a B86A     	 ldr r0,[r7,#40]
 201 011c 396A     	 ldr r1,[r7,#32]
 202 011e FFF7FEFF 	 bl __aeabi_fmul
 203 0122 0346     	 mov r3,r0
 204 0124 3B61     	 str r3,[r7,#16]
 118:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 119:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 205              	 .loc 1 119 0 discriminator 1
 206 0126 7C68     	 ldr r4,[r7,#4]
 207 0128 231D     	 adds r3,r4,#4
 208 012a 7B60     	 str r3,[r7,#4]
 209 012c 786B     	 ldr r0,[r7,#52]
 210 012e F96B     	 ldr r1,[r7,#60]
 211 0130 FFF7FEFF 	 bl __aeabi_fadd
 212 0134 0346     	 mov r3,r0
 213 0136 1846     	 mov r0,r3
 214 0138 F969     	 ldr r1,[r7,#28]
 215 013a FFF7FEFF 	 bl __aeabi_fadd
 216 013e 0346     	 mov r3,r0
 217 0140 1846     	 mov r0,r3
 218 0142 3969     	 ldr r1,[r7,#16]
 219 0144 FFF7FEFF 	 bl __aeabi_fadd
 220 0148 0346     	 mov r3,r0
 221 014a 1846     	 mov r0,r3
 222 014c 4FF07C51 	 mov r1,#1056964608
 223 0150 FFF7FEFF 	 bl __aeabi_fmul
 224 0154 0346     	 mov r3,r0
 225 0156 2360     	 str r3,[r4]
 120:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 226              	 .loc 1 120 0 discriminator 1
 227 0158 7C68     	 ldr r4,[r7,#4]
 228 015a 231D     	 adds r3,r4,#4
 229 015c 7B60     	 str r3,[r7,#4]
 230 015e 386B     	 ldr r0,[r7,#48]
 231 0160 B96B     	 ldr r1,[r7,#56]
 232 0162 FFF7FEFF 	 bl __aeabi_fsub
 233 0166 0346     	 mov r3,r0
 234 0168 1846     	 mov r0,r3
 235 016a B969     	 ldr r1,[r7,#24]
 236 016c FFF7FEFF 	 bl __aeabi_fadd
 237 0170 0346     	 mov r3,r0
 238 0172 1846     	 mov r0,r3
 239 0174 7969     	 ldr r1,[r7,#20]
 240 0176 FFF7FEFF 	 bl __aeabi_fsub
 241 017a 0346     	 mov r3,r0
 242 017c 1846     	 mov r0,r3
 243 017e 4FF07C51 	 mov r1,#1056964608
 244 0182 FFF7FEFF 	 bl __aeabi_fmul
 245 0186 0346     	 mov r3,r0
 246 0188 2360     	 str r3,[r4]
 121:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 122:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 2;
 247              	 .loc 1 122 0 discriminator 1
 248 018a 7B6C     	 ldr r3,[r7,#68]
 249 018c 0833     	 adds r3,r3,#8
 250 018e 7B64     	 str r3,[r7,#68]
 123:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 2;
 251              	 .loc 1 123 0 discriminator 1
 252 0190 3B6C     	 ldr r3,[r7,#64]
 253 0192 083B     	 subs r3,r3,#8
 254 0194 3B64     	 str r3,[r7,#64]
 124:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       k--;
 255              	 .loc 1 124 0 discriminator 1
 256 0196 FB6C     	 ldr r3,[r7,#76]
 257 0198 013B     	 subs r3,r3,#1
 258 019a FB64     	 str r3,[r7,#76]
 125:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    } while(k > 0u);
 259              	 .loc 1 125 0 discriminator 1
 260 019c FB6C     	 ldr r3,[r7,#76]
 261 019e 002B     	 cmp r3,#0
 262 01a0 87D1     	 bne .L2
 126:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** }
 263              	 .loc 1 126 0
 264 01a2 5437     	 adds r7,r7,#84
 265              	.LCFI3:
 266              	 .cfi_def_cfa_offset 12
 267 01a4 BD46     	 mov sp,r7
 268              	.LCFI4:
 269              	 .cfi_def_cfa_register 13
 270              	 
 271 01a6 90BD     	 pop {r4,r7,pc}
 272              	 .cfi_endproc
 273              	.LFE139:
 275              	 .section .text.merge_rfft_f32,"ax",%progbits
 276              	 .align 2
 277              	 .global merge_rfft_f32
 278              	 .thumb
 279              	 .thumb_func
 281              	merge_rfft_f32:
 282              	.LFB140:
 127:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 128:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** /* Prepares data for inverse cfft */
 129:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** void merge_rfft_f32(
 130:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** arm_rfft_fast_instance_f32 * S,
 131:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** float32_t * p, float32_t * pOut)
 132:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** {
 283              	 .loc 1 132 0
 284              	 .cfi_startproc
 285              	 
 286              	 
 287 0000 90B5     	 push {r4,r7,lr}
 288              	.LCFI5:
 289              	 .cfi_def_cfa_offset 12
 290              	 .cfi_offset 4,-12
 291              	 .cfi_offset 7,-8
 292              	 .cfi_offset 14,-4
 293 0002 95B0     	 sub sp,sp,#84
 294              	.LCFI6:
 295              	 .cfi_def_cfa_offset 96
 296 0004 00AF     	 add r7,sp,#0
 297              	.LCFI7:
 298              	 .cfi_def_cfa_register 7
 299 0006 F860     	 str r0,[r7,#12]
 300 0008 B960     	 str r1,[r7,#8]
 301 000a 7A60     	 str r2,[r7,#4]
 133:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    uint32_t  k;								/* Loop Counter                     */
 134:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t twR, twI;						/* RFFT Twiddle coefficients        */
 135:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 302              	 .loc 1 135 0
 303 000c FB68     	 ldr r3,[r7,#12]
 304 000e 5B69     	 ldr r3,[r3,#20]
 305 0010 BB64     	 str r3,[r7,#72]
 136:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t *pA = p;						/* increasing pointer               */
 306              	 .loc 1 136 0
 307 0012 BB68     	 ldr r3,[r7,#8]
 308 0014 7B64     	 str r3,[r7,#68]
 137:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t *pB = p;						/* decreasing pointer               */
 309              	 .loc 1 137 0
 310 0016 BB68     	 ldr r3,[r7,#8]
 311 0018 3B64     	 str r3,[r7,#64]
 138:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
 139:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */
 140:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    k = (S->Sint).fftLen - 1;					
 312              	 .loc 1 141 0
 313 001a FB68     	 ldr r3,[r7,#12]
 314 001c 1B88     	 ldrh r3,[r3]
 315 001e 013B     	 subs r3,r3,#1
 316 0020 FB64     	 str r3,[r7,#76]
 142:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 143:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    xAR = pA[0];
 317              	 .loc 1 143 0
 318 0022 7B6C     	 ldr r3,[r7,#68]
 319 0024 1B68     	 ldr r3,[r3]
 320 0026 FB63     	 str r3,[r7,#60]
 144:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    xAI = pA[1];
 321              	 .loc 1 144 0
 322 0028 7B6C     	 ldr r3,[r7,#68]
 323 002a 5B68     	 ldr r3,[r3,#4]
 324 002c BB63     	 str r3,[r7,#56]
 145:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 146:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    pCoeff += 2 ;
 325              	 .loc 1 146 0
 326 002e BB6C     	 ldr r3,[r7,#72]
 327 0030 0833     	 adds r3,r3,#8
 328 0032 BB64     	 str r3,[r7,#72]
 147:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 148:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( xAR + xAI );
 329              	 .loc 1 148 0
 330 0034 7C68     	 ldr r4,[r7,#4]
 331 0036 231D     	 adds r3,r4,#4
 332 0038 7B60     	 str r3,[r7,#4]
 333 003a F86B     	 ldr r0,[r7,#60]
 334 003c B96B     	 ldr r1,[r7,#56]
 335 003e FFF7FEFF 	 bl __aeabi_fadd
 336 0042 0346     	 mov r3,r0
 337 0044 1846     	 mov r0,r3
 338 0046 4FF07C51 	 mov r1,#1056964608
 339 004a FFF7FEFF 	 bl __aeabi_fmul
 340 004e 0346     	 mov r3,r0
 341 0050 2360     	 str r3,[r4]
 149:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    *pOut++ = 0.5f * ( xAR - xAI );
 342              	 .loc 1 149 0
 343 0052 7C68     	 ldr r4,[r7,#4]
 344 0054 231D     	 adds r3,r4,#4
 345 0056 7B60     	 str r3,[r7,#4]
 346 0058 F86B     	 ldr r0,[r7,#60]
 347 005a B96B     	 ldr r1,[r7,#56]
 348 005c FFF7FEFF 	 bl __aeabi_fsub
 349 0060 0346     	 mov r3,r0
 350 0062 1846     	 mov r0,r3
 351 0064 4FF07C51 	 mov r1,#1056964608
 352 0068 FFF7FEFF 	 bl __aeabi_fmul
 353 006c 0346     	 mov r3,r0
 354 006e 2360     	 str r3,[r4]
 150:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 151:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    pB  =  p + 2*k ;
 355              	 .loc 1 151 0
 356 0070 FB6C     	 ldr r3,[r7,#76]
 357 0072 DB00     	 lsls r3,r3,#3
 358 0074 BA68     	 ldr r2,[r7,#8]
 359 0076 1344     	 add r3,r3,r2
 360 0078 3B64     	 str r3,[r7,#64]
 152:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    pA +=  2	   ;
 361              	 .loc 1 152 0
 362 007a 7B6C     	 ldr r3,[r7,#68]
 363 007c 0833     	 adds r3,r3,#8
 364 007e 7B64     	 str r3,[r7,#68]
 153:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 154:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    while(k > 0u)
 365              	 .loc 1 154 0
 366 0080 74E0     	 b .L4
 367              	.L5:
 155:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    {
 156:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       /* G is half of the frequency complex spectrum */
 157:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       //for k = 2:N
 158:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
 159:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xBI =   pB[1]    ;
 368              	 .loc 1 159 0
 369 0082 3B6C     	 ldr r3,[r7,#64]
 370 0084 5B68     	 ldr r3,[r3,#4]
 371 0086 7B63     	 str r3,[r7,#52]
 160:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xBR =   pB[0]    ;
 372              	 .loc 1 160 0
 373 0088 3B6C     	 ldr r3,[r7,#64]
 374 008a 1B68     	 ldr r3,[r3]
 375 008c 3B63     	 str r3,[r7,#48]
 161:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xAR =  pA[0];
 376              	 .loc 1 161 0
 377 008e 7B6C     	 ldr r3,[r7,#68]
 378 0090 1B68     	 ldr r3,[r3]
 379 0092 FB63     	 str r3,[r7,#60]
 162:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       xAI =  pA[1];
 380              	 .loc 1 162 0
 381 0094 7B6C     	 ldr r3,[r7,#68]
 382 0096 5B68     	 ldr r3,[r3,#4]
 383 0098 BB63     	 str r3,[r7,#56]
 163:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 164:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       twR = *pCoeff++;
 384              	 .loc 1 164 0
 385 009a BB6C     	 ldr r3,[r7,#72]
 386 009c 1A1D     	 adds r2,r3,#4
 387 009e BA64     	 str r2,[r7,#72]
 388 00a0 1B68     	 ldr r3,[r3]
 389 00a2 FB62     	 str r3,[r7,#44]
 165:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       twI = *pCoeff++;
 390              	 .loc 1 165 0
 391 00a4 BB6C     	 ldr r3,[r7,#72]
 392 00a6 1A1D     	 adds r2,r3,#4
 393 00a8 BA64     	 str r2,[r7,#72]
 394 00aa 1B68     	 ldr r3,[r3]
 395 00ac BB62     	 str r3,[r7,#40]
 166:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       t1a = xAR - xBR ;
 396              	 .loc 1 167 0
 397 00ae F86B     	 ldr r0,[r7,#60]
 398 00b0 396B     	 ldr r1,[r7,#48]
 399 00b2 FFF7FEFF 	 bl __aeabi_fsub
 400 00b6 0346     	 mov r3,r0
 401 00b8 7B62     	 str r3,[r7,#36]
 168:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       t1b = xAI + xBI ;
 402              	 .loc 1 168 0
 403 00ba B86B     	 ldr r0,[r7,#56]
 404 00bc 796B     	 ldr r1,[r7,#52]
 405 00be FFF7FEFF 	 bl __aeabi_fadd
 406 00c2 0346     	 mov r3,r0
 407 00c4 3B62     	 str r3,[r7,#32]
 169:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 170:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       r = twR * t1a;
 408              	 .loc 1 170 0
 409 00c6 F86A     	 ldr r0,[r7,#44]
 410 00c8 796A     	 ldr r1,[r7,#36]
 411 00ca FFF7FEFF 	 bl __aeabi_fmul
 412 00ce 0346     	 mov r3,r0
 413 00d0 FB61     	 str r3,[r7,#28]
 171:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       s = twI * t1b;
 414              	 .loc 1 171 0
 415 00d2 B86A     	 ldr r0,[r7,#40]
 416 00d4 396A     	 ldr r1,[r7,#32]
 417 00d6 FFF7FEFF 	 bl __aeabi_fmul
 418 00da 0346     	 mov r3,r0
 419 00dc BB61     	 str r3,[r7,#24]
 172:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       t = twI * t1a;
 420              	 .loc 1 172 0
 421 00de B86A     	 ldr r0,[r7,#40]
 422 00e0 796A     	 ldr r1,[r7,#36]
 423 00e2 FFF7FEFF 	 bl __aeabi_fmul
 424 00e6 0346     	 mov r3,r0
 425 00e8 7B61     	 str r3,[r7,#20]
 173:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       u = twR * t1b;
 426              	 .loc 1 173 0
 427 00ea F86A     	 ldr r0,[r7,#44]
 428 00ec 396A     	 ldr r1,[r7,#32]
 429 00ee FFF7FEFF 	 bl __aeabi_fmul
 430 00f2 0346     	 mov r3,r0
 431 00f4 3B61     	 str r3,[r7,#16]
 174:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 175:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
 176:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
 177:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 432              	 .loc 1 177 0
 433 00f6 7C68     	 ldr r4,[r7,#4]
 434 00f8 231D     	 adds r3,r4,#4
 435 00fa 7B60     	 str r3,[r7,#4]
 436 00fc F86B     	 ldr r0,[r7,#60]
 437 00fe 396B     	 ldr r1,[r7,#48]
 438 0100 FFF7FEFF 	 bl __aeabi_fadd
 439 0104 0346     	 mov r3,r0
 440 0106 1846     	 mov r0,r3
 441 0108 F969     	 ldr r1,[r7,#28]
 442 010a FFF7FEFF 	 bl __aeabi_fsub
 443 010e 0346     	 mov r3,r0
 444 0110 1846     	 mov r0,r3
 445 0112 B969     	 ldr r1,[r7,#24]
 446 0114 FFF7FEFF 	 bl __aeabi_fsub
 447 0118 0346     	 mov r3,r0
 448 011a 1846     	 mov r0,r3
 449 011c 4FF07C51 	 mov r1,#1056964608
 450 0120 FFF7FEFF 	 bl __aeabi_fmul
 451 0124 0346     	 mov r3,r0
 452 0126 2360     	 str r3,[r4]
 178:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 453              	 .loc 1 178 0
 454 0128 7C68     	 ldr r4,[r7,#4]
 455 012a 231D     	 adds r3,r4,#4
 456 012c 7B60     	 str r3,[r7,#4]
 457 012e B86B     	 ldr r0,[r7,#56]
 458 0130 796B     	 ldr r1,[r7,#52]
 459 0132 FFF7FEFF 	 bl __aeabi_fsub
 460 0136 0346     	 mov r3,r0
 461 0138 1846     	 mov r0,r3
 462 013a 7969     	 ldr r1,[r7,#20]
 463 013c FFF7FEFF 	 bl __aeabi_fadd
 464 0140 0346     	 mov r3,r0
 465 0142 1846     	 mov r0,r3
 466 0144 3969     	 ldr r1,[r7,#16]
 467 0146 FFF7FEFF 	 bl __aeabi_fsub
 468 014a 0346     	 mov r3,r0
 469 014c 1846     	 mov r0,r3
 470 014e 4FF07C51 	 mov r1,#1056964608
 471 0152 FFF7FEFF 	 bl __aeabi_fmul
 472 0156 0346     	 mov r3,r0
 473 0158 2360     	 str r3,[r4]
 179:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       pA += 2;
 474              	 .loc 1 180 0
 475 015a 7B6C     	 ldr r3,[r7,#68]
 476 015c 0833     	 adds r3,r3,#8
 477 015e 7B64     	 str r3,[r7,#68]
 181:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       pB -= 2;
 478              	 .loc 1 181 0
 479 0160 3B6C     	 ldr r3,[r7,#64]
 480 0162 083B     	 subs r3,r3,#8
 481 0164 3B64     	 str r3,[r7,#64]
 182:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       k--;
 482              	 .loc 1 182 0
 483 0166 FB6C     	 ldr r3,[r7,#76]
 484 0168 013B     	 subs r3,r3,#1
 485 016a FB64     	 str r3,[r7,#76]
 486              	.L4:
 154:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    {
 487              	 .loc 1 154 0
 488 016c FB6C     	 ldr r3,[r7,#76]
 489 016e 002B     	 cmp r3,#0
 490 0170 87D1     	 bne .L5
 183:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    }
 184:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** }
 491              	 .loc 1 185 0
 492 0172 5437     	 adds r7,r7,#84
 493              	.LCFI8:
 494              	 .cfi_def_cfa_offset 12
 495 0174 BD46     	 mov sp,r7
 496              	.LCFI9:
 497              	 .cfi_def_cfa_register 13
 498              	 
 499 0176 90BD     	 pop {r4,r7,pc}
 500              	 .cfi_endproc
 501              	.LFE140:
 503              	 .section .text.arm_rfft_fast_f32,"ax",%progbits
 504              	 .align 2
 505              	 .global arm_rfft_fast_f32
 506              	 .thumb
 507              	 .thumb_func
 509              	arm_rfft_fast_f32:
 510              	.LFB141:
 186:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** /**
 188:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @ingroup groupTransforms
 189:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** */
 190:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 191:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** /**
 192:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * @defgroup Fast Real FFT Functions
 193:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *
 194:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 195:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The CMSIS DSP library includes specialized algorithms for computing the
 196:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * FFT of real data sequences.  The FFT is defined over complex data but
 197:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * in many applications the input is real.  Real FFT algorithms take advantage
 198:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * of the symmetry properties of the FFT and have a speed advantage over complex
 199:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * algorithms of the same length.
 200:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 201:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The Fast RFFT algorith relays on the mixed radix CFFT that save processor usage.
 202:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 203:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The real length N forward FFT of a sequence is computed using the steps shown below.
 204:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 205:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \image html RFFT.gif "Real Fast Fourier Transform"
 206:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 207:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The real sequence is initially treated as if it were complex to perform a CFFT.
 208:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * Later, a processing stage reshapes the data to obtain half of the frequency spectrum
 209:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * in complex format. Except the first complex number that contains the two real numbers
 210:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * X[0] and X[N/2] all the data is complex. In other words, the first complex sample
 211:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * contains two real values packed.
 212:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 213:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The input for the inverse RFFT should keep the same format as the output of the 
 214:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * forward RFFT. A first processing stage pre-process the data to later perform an
 215:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * inverse CFFT.
 216:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par    
 217:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \image html RIFFT.gif "Real Inverse Fast Fourier Transform"    
 218:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par    
 219:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The algorithms for floating-point, Q15, and Q31 data are slightly different
 220:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * and we describe each algorithm in turn.
 221:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par Floating-point
 222:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The main functions are <code>arm_rfft_fast_f32()</code>
 223:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * and <code>arm_rfft_fast_init_f32()</code>.  The older functions
 224:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>arm_rfft_f32()</code> and <code>arm_rfft_init_f32()</code> have been
 225:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * deprecated but are still documented.
 226:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 227:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The FFT of a real N-point sequence has even symmetry in the frequency
 228:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * domain.  The second half of the data equals the conjugate of the first half
 229:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * flipped in frequency:
 230:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <pre>
 231:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[0] - real data
 232:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[1] - complex data
 233:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[2] - complex data
 234:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *... 
 235:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen/2-1] - complex data
 236:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen/2] - real data
 237:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen/2+1] - conjugate of X[fftLen/2-1]
 238:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen/2+2] - conjugate of X[fftLen/2-2]
 239:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *... 
 240:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen-1] - conjugate of X[1]
 241:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * </pre>
 242:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * Looking at the data, we see that we can uniquely represent the FFT using only
 243:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <pre>
 244:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *N/2+1 samples:
 245:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[0] - real data
 246:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[1] - complex data
 247:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[2] - complex data
 248:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *... 
 249:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen/2-1] - complex data
 250:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen/2] - real data
 251:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * </pre>
 252:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * Looking more closely we see that the first and last samples are real valued.
 253:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * They can be packed together and we can thus represent the FFT of an N-point
 254:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * real sequence by N/2 complex values:
 255:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <pre>
 256:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[0],X[N/2] - packed real data: X[0] + jX[N/2]
 257:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[1] - complex data
 258:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[2] - complex data
 259:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *... 
 260:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *X[fftLen/2-1] - complex data
 261:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * </pre>
 262:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The real FFT functions pack the frequency domain data in this fashion.  The
 263:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * forward transform outputs the data in this form and the inverse transform
 264:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * expects input data in this form.  The function always performs the needed
 265:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * bitreversal so that the input and output data is always in normal order.  The 
 266:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * functions support lengths of [32, 64, 128, ..., 4096] samples.
 267:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 268:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The forward and inverse real FFT functions apply the standard FFT scaling; no
 269:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * scaling on the forward transform and 1/fftLen scaling on the inverse
 270:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * transform.
 271:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par Q15 and Q31
 272:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The real algorithms are defined in a similar manner and utilize N/2 complex
 273:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * transforms behind the scenes.  In the case of fixed-point data, a radix-4
 274:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * complex transform is performed and this limits the allows sequence lengths to
 275:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * 128, 512, and 2048 samples.
 276:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 277:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * TBD.  We need to document input and output order of data.
 278:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 279:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The complex transforms used internally include scaling to prevent fixed-point
 280:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * overflows.  The overall scaling equals 1/(fftLen/2).
 281:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 282:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * A separate instance structure must be defined for each transform used but 
 283:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * twiddle factor and bit reversal tables can be reused.
 284:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par
 285:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * There is also an associated initialization function for each data type. 
 286:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The initialization function performs the following operations:
 287:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * - Sets the values of the internal structure fields.   
 288:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * - Initializes twiddle factor table and bit reversal table pointers.
 289:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * - Initializes the internal complex FFT data structure.
 290:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * \par   
 291:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * Use of the initialization function is optional.   
 292:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * However, if the initialization function is used, then the instance structure 
 293:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * cannot be placed into a const data section. To place an instance structure 
 294:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * into a const data section, the instance structure should be manually 
 295:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * initialized as follows:
 296:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <pre>
 297:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *arm_rfft_instance_q31 S = {fftLenReal, fftLenBy2, ifftFlagR, bitReverseFlagR, twidCoefRModifier, 
 298:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  *arm_rfft_instance_q15 S = {fftLenReal, fftLenBy2, ifftFlagR, bitReverseFlagR, twidCoefRModifier, 
 299:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * </pre>
 300:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * where <code>fftLenReal</code> is the length of the real transform;
 301:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>fftLenBy2</code> length of  the internal complex transform.
 302:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>ifftFlagR</code> Selects forward (=0) or inverse (=1) transform.
 303:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>bitReverseFlagR</code> Selects bit reversed output (=0) or normal order
 304:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * output (=1).
 305:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>twidCoefRModifier</code> stride modifier for the twiddle factor table.
 306:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * The value is based on the FFT length;
 307:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>pTwiddleAReal</code>points to the A array of twiddle coefficients; 
 308:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>pTwiddleBReal</code>points to the B array of twiddle coefficients;    
 309:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * <code>pCfft</code> points to the CFFT Instance structure. The CFFT structure
 310:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * must also be initialized.  Refer to arm_cfft_radix4_f32() for details regarding    
 311:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  * static initialization of the complex FFT instance structure.    
 312:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****  */
 313:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 314:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** /**
 315:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @addtogroup RealFFT
 316:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @{
 317:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** */
 318:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 319:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** /**
 320:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @brief Processing function for the floating-point real FFT.
 321:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @param[in]  *S              points to an arm_rfft_fast_instance_f32 structure.
 322:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @param[in]  *p              points to the input buffer.
 323:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @param[in]  *pOut           points to the output buffer.
 324:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @param[in]  ifftFlag        RFFT if flag is 0, RIFFT if flag is 1
 325:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** * @return none.
 326:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** */
 327:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 328:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** void arm_rfft_fast_f32(
 329:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** arm_rfft_fast_instance_f32 * S,
 330:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** float32_t * p, float32_t * pOut,
 331:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** uint8_t ifftFlag)
 332:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** {
 511              	 .loc 1 332 0
 512              	 .cfi_startproc
 513              	 
 514              	 
 515 0000 80B5     	 push {r7,lr}
 516              	.LCFI10:
 517              	 .cfi_def_cfa_offset 8
 518              	 .cfi_offset 7,-8
 519              	 .cfi_offset 14,-4
 520 0002 86B0     	 sub sp,sp,#24
 521              	.LCFI11:
 522              	 .cfi_def_cfa_offset 32
 523 0004 00AF     	 add r7,sp,#0
 524              	.LCFI12:
 525              	 .cfi_def_cfa_register 7
 526 0006 F860     	 str r0,[r7,#12]
 527 0008 B960     	 str r1,[r7,#8]
 528 000a 7A60     	 str r2,[r7,#4]
 529 000c FB70     	 strb r3,[r7,#3]
 333:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    arm_cfft_instance_f32 * Sint = &(S->Sint);
 530              	 .loc 1 333 0
 531 000e FB68     	 ldr r3,[r7,#12]
 532 0010 7B61     	 str r3,[r7,#20]
 334:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    Sint->fftLen = S->fftLenRFFT / 2;
 533              	 .loc 1 334 0
 534 0012 FB68     	 ldr r3,[r7,#12]
 535 0014 1B8A     	 ldrh r3,[r3,#16]
 536 0016 5B08     	 lsrs r3,r3,#1
 537 0018 9AB2     	 uxth r2,r3
 538 001a 7B69     	 ldr r3,[r7,#20]
 539 001c 1A80     	 strh r2,[r3]
 335:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 336:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    /* Calculation of Real FFT */
 337:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    if(ifftFlag)
 540              	 .loc 1 337 0
 541 001e FB78     	 ldrb r3,[r7,#3]
 542 0020 002B     	 cmp r3,#0
 543 0022 0CD0     	 beq .L7
 338:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    {
 339:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       /*  Real FFT compression */
 340:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       merge_rfft_f32(S, p, pOut);
 544              	 .loc 1 340 0
 545 0024 F868     	 ldr r0,[r7,#12]
 546 0026 B968     	 ldr r1,[r7,#8]
 547 0028 7A68     	 ldr r2,[r7,#4]
 548 002a FFF7FEFF 	 bl merge_rfft_f32
 341:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** 
 342:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       /* Complex radix-4 IFFT process */
 343:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 549              	 .loc 1 343 0
 550 002e FB78     	 ldrb r3,[r7,#3]
 551 0030 7869     	 ldr r0,[r7,#20]
 552 0032 7968     	 ldr r1,[r7,#4]
 553 0034 1A46     	 mov r2,r3
 554 0036 0123     	 movs r3,#1
 555 0038 FFF7FEFF 	 bl arm_cfft_f32
 556 003c 0BE0     	 b .L6
 557              	.L7:
 344:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    }
 345:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    else
 346:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    {
 347:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       /* Calculation of RFFT of input */
 348:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       arm_cfft_f32( Sint, p, ifftFlag, 1);
 558              	 .loc 1 348 0
 559 003e FB78     	 ldrb r3,[r7,#3]
 560 0040 7869     	 ldr r0,[r7,#20]
 561 0042 B968     	 ldr r1,[r7,#8]
 562 0044 1A46     	 mov r2,r3
 563 0046 0123     	 movs r3,#1
 564 0048 FFF7FEFF 	 bl arm_cfft_f32
 349:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    
 350:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       /*  Real FFT extraction */
 351:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****       stage_rfft_f32(S, p, pOut);
 565              	 .loc 1 351 0
 566 004c F868     	 ldr r0,[r7,#12]
 567 004e B968     	 ldr r1,[r7,#8]
 568 0050 7A68     	 ldr r2,[r7,#4]
 569 0052 FFF7FEFF 	 bl stage_rfft_f32
 570              	.L6:
 352:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c ****    }
 353:../Dave/Generated/CMSIS_DSP/TransformFunctions/arm_rfft_fast_f32.c **** }
 571              	 .loc 1 353 0
 572 0056 1837     	 adds r7,r7,#24
 573              	.LCFI13:
 574              	 .cfi_def_cfa_offset 8
 575 0058 BD46     	 mov sp,r7
 576              	.LCFI14:
 577              	 .cfi_def_cfa_register 13
 578              	 
 579 005a 80BD     	 pop {r7,pc}
 580              	 .cfi_endproc
 581              	.LFE141:
 583              	 .text
 584              	.Letext0:
 585              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 586              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 587              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_rfft_fast_f32.c
    {standard input}:22     .text.stage_rfft_f32:00000000 $t
    {standard input}:27     .text.stage_rfft_f32:00000000 stage_rfft_f32
    {standard input}:276    .text.merge_rfft_f32:00000000 $t
    {standard input}:281    .text.merge_rfft_f32:00000000 merge_rfft_f32
    {standard input}:504    .text.arm_rfft_fast_f32:00000000 $t
    {standard input}:509    .text.arm_rfft_fast_f32:00000000 arm_rfft_fast_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fadd
__aeabi_fmul
__aeabi_fsub
arm_cfft_f32
