   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_cmplx_mult_cmplx_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fmul
  19              	 .global __aeabi_fsub
  20              	 .global __aeabi_fadd
  21              	 .section .text.arm_cmplx_mult_cmplx_f32,"ax",%progbits
  22              	 .align 2
  23              	 .global arm_cmplx_mult_cmplx_f32
  24              	 .thumb
  25              	 .thumb_func
  27              	arm_cmplx_mult_cmplx_f32:
  28              	.LFB139:
  29              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * Title:	    arm_cmplx_mult_cmplx_f32.c    
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * Description:	Floating-point complex-by-complex multiplication    
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * POSSIBILITY OF SUCH DAMAGE. 
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**        
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @ingroup groupCmplxMath        
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**        
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @defgroup CmplxByCmplxMult Complex-by-Complex Multiplication        
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *        
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * Multiplies a complex vector by another complex vector and generates a complex result.        
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * The data in the complex arrays is stored in an interleaved fashion        
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * (real, imag, real, imag, ...).        
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * The parameter <code>numSamples</code> represents the number of complex        
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * samples processed.  The complex arrays have a total of <code>2*numSamples</code>        
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * real values.        
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *        
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * The underlying algorithm is used:        
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *        
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * <pre>        
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * for(n=0; n<numSamples; n++) {        
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *     pDst[(2*n)+0] = pSrcA[(2*n)+0] * pSrcB[(2*n)+0] - pSrcA[(2*n)+1] * pSrcB[(2*n)+1];        
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *     pDst[(2*n)+1] = pSrcA[(2*n)+0] * pSrcB[(2*n)+1] + pSrcA[(2*n)+1] * pSrcB[(2*n)+0];        
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * }        
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * </pre>        
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  *        
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * There are separate functions for floating-point, Q15, and Q31 data types.        
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**        
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @addtogroup CmplxByCmplxMult        
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @{        
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** /**        
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @brief  Floating-point complex-by-complex multiplication        
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @param[in]  *pSrcA points to the first input vector        
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @param[in]  *pSrcB points to the second input vector        
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @param[out]  *pDst  points to the output vector        
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @param[in]  numSamples number of complex samples in each vector        
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  * @return none.        
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****  */
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** void arm_cmplx_mult_cmplx_f32(
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   float32_t * pSrcA,
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   float32_t * pSrcB,
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   float32_t * pDst,
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   uint32_t numSamples)
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** {
  30              	 .loc 1 88 0
  31              	 .cfi_startproc
  32              	 
  33              	 
  34 0000 B0B5     	 push {r4,r5,r7,lr}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 16
  37              	 .cfi_offset 4,-16
  38              	 .cfi_offset 5,-12
  39              	 .cfi_offset 7,-8
  40              	 .cfi_offset 14,-4
  41 0002 92B0     	 sub sp,sp,#72
  42              	.LCFI1:
  43              	 .cfi_def_cfa_offset 88
  44 0004 00AF     	 add r7,sp,#0
  45              	.LCFI2:
  46              	 .cfi_def_cfa_register 7
  47 0006 F860     	 str r0,[r7,#12]
  48 0008 B960     	 str r1,[r7,#8]
  49 000a 7A60     	 str r2,[r7,#4]
  50 000c 3B60     	 str r3,[r7]
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   float32_t a1, b1, c1, d1;                      /* Temporary variables to store real and imaginary
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   uint32_t blkCnt;                               /* loop counters */
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   float32_t a2, b2, c2, d2;                      /* Temporary variables to store real and imaginary
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   float32_t acc1, acc2, acc3, acc4;
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* loop Unrolling */
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples >> 2u;
  51              	 .loc 1 100 0
  52 000e 3B68     	 ldr r3,[r7]
  53 0010 9B08     	 lsrs r3,r3,#2
  54 0012 7B64     	 str r3,[r7,#68]
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   while(blkCnt > 0u)
  55              	 .loc 1 104 0
  56 0014 E2E0     	 b .L2
  57              	.L3:
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a1 = *pSrcA;                /* A[2 * i] */
  58              	 .loc 1 108 0
  59 0016 FB68     	 ldr r3,[r7,#12]
  60 0018 1B68     	 ldr r3,[r3]
  61 001a 3B64     	 str r3,[r7,#64]
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c1 = *pSrcB;                /* B[2 * i] */
  62              	 .loc 1 109 0
  63 001c BB68     	 ldr r3,[r7,#8]
  64 001e 1B68     	 ldr r3,[r3]
  65 0020 FB63     	 str r3,[r7,#60]
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b1 = *(pSrcA + 1);          /* A[2 * i + 1] */
  66              	 .loc 1 111 0
  67 0022 FB68     	 ldr r3,[r7,#12]
  68 0024 5B68     	 ldr r3,[r3,#4]
  69 0026 BB63     	 str r3,[r7,#56]
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc1 = a1 * c1;             /* acc1 = A[2 * i] * B[2 * i] */
  70              	 .loc 1 112 0
  71 0028 386C     	 ldr r0,[r7,#64]
  72 002a F96B     	 ldr r1,[r7,#60]
  73 002c FFF7FEFF 	 bl __aeabi_fmul
  74 0030 0346     	 mov r3,r0
  75 0032 7B63     	 str r3,[r7,#52]
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a2 = *(pSrcA + 2);          /* A[2 * i + 2] */
  76              	 .loc 1 114 0
  77 0034 FB68     	 ldr r3,[r7,#12]
  78 0036 9B68     	 ldr r3,[r3,#8]
  79 0038 3B63     	 str r3,[r7,#48]
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc2 = (b1 * c1);           /* acc2 = A[2 * i + 1] * B[2 * i] */
  80              	 .loc 1 115 0
  81 003a B86B     	 ldr r0,[r7,#56]
  82 003c F96B     	 ldr r1,[r7,#60]
  83 003e FFF7FEFF 	 bl __aeabi_fmul
  84 0042 0346     	 mov r3,r0
  85 0044 FB62     	 str r3,[r7,#44]
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d1 = *(pSrcB + 1);          /* B[2 * i + 1] */
  86              	 .loc 1 117 0
  87 0046 BB68     	 ldr r3,[r7,#8]
  88 0048 5B68     	 ldr r3,[r3,#4]
  89 004a BB62     	 str r3,[r7,#40]
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c2 = *(pSrcB + 2);          /* B[2 * i + 2] */
  90              	 .loc 1 118 0
  91 004c BB68     	 ldr r3,[r7,#8]
  92 004e 9B68     	 ldr r3,[r3,#8]
  93 0050 7B62     	 str r3,[r7,#36]
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc1 -= b1 * d1;            /* acc1 =      A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1] */
  94              	 .loc 1 119 0
  95 0052 B86B     	 ldr r0,[r7,#56]
  96 0054 B96A     	 ldr r1,[r7,#40]
  97 0056 FFF7FEFF 	 bl __aeabi_fmul
  98 005a 0346     	 mov r3,r0
  99 005c 786B     	 ldr r0,[r7,#52]
 100 005e 1946     	 mov r1,r3
 101 0060 FFF7FEFF 	 bl __aeabi_fsub
 102 0064 0346     	 mov r3,r0
 103 0066 7B63     	 str r3,[r7,#52]
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d2 = *(pSrcB + 3);          /* B[2 * i + 3] */
 104              	 .loc 1 121 0
 105 0068 BB68     	 ldr r3,[r7,#8]
 106 006a DB68     	 ldr r3,[r3,#12]
 107 006c 3B62     	 str r3,[r7,#32]
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc3 = a2 * c2;             /* acc3 =       A[2 * i + 2] * B[2 * i + 2] */
 108              	 .loc 1 122 0
 109 006e 386B     	 ldr r0,[r7,#48]
 110 0070 796A     	 ldr r1,[r7,#36]
 111 0072 FFF7FEFF 	 bl __aeabi_fmul
 112 0076 0346     	 mov r3,r0
 113 0078 FB61     	 str r3,[r7,#28]
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b2 = *(pSrcA + 3);          /* A[2 * i + 3] */
 114              	 .loc 1 124 0
 115 007a FB68     	 ldr r3,[r7,#12]
 116 007c DB68     	 ldr r3,[r3,#12]
 117 007e BB61     	 str r3,[r7,#24]
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc2 += (a1 * d1);          /* acc2 =      A[2 * i + 1] * B[2 * i] + A[2 * i] * B[2 * i + 1] */
 118              	 .loc 1 125 0
 119 0080 386C     	 ldr r0,[r7,#64]
 120 0082 B96A     	 ldr r1,[r7,#40]
 121 0084 FFF7FEFF 	 bl __aeabi_fmul
 122 0088 0346     	 mov r3,r0
 123 008a F86A     	 ldr r0,[r7,#44]
 124 008c 1946     	 mov r1,r3
 125 008e FFF7FEFF 	 bl __aeabi_fadd
 126 0092 0346     	 mov r3,r0
 127 0094 FB62     	 str r3,[r7,#44]
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a1 = *(pSrcA + 4);          /* A[2 * i + 4] */
 128              	 .loc 1 127 0
 129 0096 FB68     	 ldr r3,[r7,#12]
 130 0098 1B69     	 ldr r3,[r3,#16]
 131 009a 3B64     	 str r3,[r7,#64]
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc4 = (a2 * d2);           /* acc4 =   A[2 * i + 2] * B[2 * i + 3] */
 132              	 .loc 1 128 0
 133 009c 386B     	 ldr r0,[r7,#48]
 134 009e 396A     	 ldr r1,[r7,#32]
 135 00a0 FFF7FEFF 	 bl __aeabi_fmul
 136 00a4 0346     	 mov r3,r0
 137 00a6 7B61     	 str r3,[r7,#20]
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c1 = *(pSrcB + 4);          /* B[2 * i + 4] */
 138              	 .loc 1 130 0
 139 00a8 BB68     	 ldr r3,[r7,#8]
 140 00aa 1B69     	 ldr r3,[r3,#16]
 141 00ac FB63     	 str r3,[r7,#60]
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc3 -= (b2 * d2);          /* acc3 =       A[2 * i + 2] * B[2 * i + 2] - A[2 * i + 3] * B[2 * 
 142              	 .loc 1 131 0
 143 00ae B869     	 ldr r0,[r7,#24]
 144 00b0 396A     	 ldr r1,[r7,#32]
 145 00b2 FFF7FEFF 	 bl __aeabi_fmul
 146 00b6 0346     	 mov r3,r0
 147 00b8 F869     	 ldr r0,[r7,#28]
 148 00ba 1946     	 mov r1,r3
 149 00bc FFF7FEFF 	 bl __aeabi_fsub
 150 00c0 0346     	 mov r3,r0
 151 00c2 FB61     	 str r3,[r7,#28]
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst = acc1;               /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1] */
 152              	 .loc 1 132 0
 153 00c4 7B68     	 ldr r3,[r7,#4]
 154 00c6 7A6B     	 ldr r2,[r7,#52]
 155 00c8 1A60     	 str r2,[r3]
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b1 = *(pSrcA + 5);          /* A[2 * i + 5] */
 156              	 .loc 1 134 0
 157 00ca FB68     	 ldr r3,[r7,#12]
 158 00cc 5B69     	 ldr r3,[r3,#20]
 159 00ce BB63     	 str r3,[r7,#56]
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc4 += b2 * c2;            /* acc4 =   A[2 * i + 2] * B[2 * i + 3] + A[2 * i + 3] * B[2 * i + 
 160              	 .loc 1 135 0
 161 00d0 B869     	 ldr r0,[r7,#24]
 162 00d2 796A     	 ldr r1,[r7,#36]
 163 00d4 FFF7FEFF 	 bl __aeabi_fmul
 164 00d8 0346     	 mov r3,r0
 165 00da 7869     	 ldr r0,[r7,#20]
 166 00dc 1946     	 mov r1,r3
 167 00de FFF7FEFF 	 bl __aeabi_fadd
 168 00e2 0346     	 mov r3,r0
 169 00e4 7B61     	 str r3,[r7,#20]
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *(pDst + 1) = acc2;         /* C[2 * i + 1] = A[2 * i + 1] * B[2 * i] + A[2 * i] * B[2 * i + 1]
 170              	 .loc 1 137 0
 171 00e6 7B68     	 ldr r3,[r7,#4]
 172 00e8 0433     	 adds r3,r3,#4
 173 00ea FA6A     	 ldr r2,[r7,#44]
 174 00ec 1A60     	 str r2,[r3]
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc1 = (a1 * c1);
 175              	 .loc 1 138 0
 176 00ee 386C     	 ldr r0,[r7,#64]
 177 00f0 F96B     	 ldr r1,[r7,#60]
 178 00f2 FFF7FEFF 	 bl __aeabi_fmul
 179 00f6 0346     	 mov r3,r0
 180 00f8 7B63     	 str r3,[r7,#52]
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d1 = *(pSrcB + 5);
 181              	 .loc 1 140 0
 182 00fa BB68     	 ldr r3,[r7,#8]
 183 00fc 5B69     	 ldr r3,[r3,#20]
 184 00fe BB62     	 str r3,[r7,#40]
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc2 = (b1 * c1);
 185              	 .loc 1 141 0
 186 0100 B86B     	 ldr r0,[r7,#56]
 187 0102 F96B     	 ldr r1,[r7,#60]
 188 0104 FFF7FEFF 	 bl __aeabi_fmul
 189 0108 0346     	 mov r3,r0
 190 010a FB62     	 str r3,[r7,#44]
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *(pDst + 2) = acc3;
 191              	 .loc 1 143 0
 192 010c 7B68     	 ldr r3,[r7,#4]
 193 010e 0833     	 adds r3,r3,#8
 194 0110 FA69     	 ldr r2,[r7,#28]
 195 0112 1A60     	 str r2,[r3]
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *(pDst + 3) = acc4;
 196              	 .loc 1 144 0
 197 0114 7B68     	 ldr r3,[r7,#4]
 198 0116 0C33     	 adds r3,r3,#12
 199 0118 7A69     	 ldr r2,[r7,#20]
 200 011a 1A60     	 str r2,[r3]
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a2 = *(pSrcA + 6);
 201              	 .loc 1 146 0
 202 011c FB68     	 ldr r3,[r7,#12]
 203 011e 9B69     	 ldr r3,[r3,#24]
 204 0120 3B63     	 str r3,[r7,#48]
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc1 -= (b1 * d1);
 205              	 .loc 1 147 0
 206 0122 B86B     	 ldr r0,[r7,#56]
 207 0124 B96A     	 ldr r1,[r7,#40]
 208 0126 FFF7FEFF 	 bl __aeabi_fmul
 209 012a 0346     	 mov r3,r0
 210 012c 786B     	 ldr r0,[r7,#52]
 211 012e 1946     	 mov r1,r3
 212 0130 FFF7FEFF 	 bl __aeabi_fsub
 213 0134 0346     	 mov r3,r0
 214 0136 7B63     	 str r3,[r7,#52]
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c2 = *(pSrcB + 6);
 215              	 .loc 1 149 0
 216 0138 BB68     	 ldr r3,[r7,#8]
 217 013a 9B69     	 ldr r3,[r3,#24]
 218 013c 7B62     	 str r3,[r7,#36]
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc2 += (a1 * d1);
 219              	 .loc 1 150 0
 220 013e 386C     	 ldr r0,[r7,#64]
 221 0140 B96A     	 ldr r1,[r7,#40]
 222 0142 FFF7FEFF 	 bl __aeabi_fmul
 223 0146 0346     	 mov r3,r0
 224 0148 F86A     	 ldr r0,[r7,#44]
 225 014a 1946     	 mov r1,r3
 226 014c FFF7FEFF 	 bl __aeabi_fadd
 227 0150 0346     	 mov r3,r0
 228 0152 FB62     	 str r3,[r7,#44]
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b2 = *(pSrcA + 7);
 229              	 .loc 1 152 0
 230 0154 FB68     	 ldr r3,[r7,#12]
 231 0156 DB69     	 ldr r3,[r3,#28]
 232 0158 BB61     	 str r3,[r7,#24]
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc3 = (a2 * c2);
 233              	 .loc 1 153 0
 234 015a 386B     	 ldr r0,[r7,#48]
 235 015c 796A     	 ldr r1,[r7,#36]
 236 015e FFF7FEFF 	 bl __aeabi_fmul
 237 0162 0346     	 mov r3,r0
 238 0164 FB61     	 str r3,[r7,#28]
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d2 = *(pSrcB + 7);
 239              	 .loc 1 155 0
 240 0166 BB68     	 ldr r3,[r7,#8]
 241 0168 DB69     	 ldr r3,[r3,#28]
 242 016a 3B62     	 str r3,[r7,#32]
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc4 = (b2 * c2);
 243              	 .loc 1 156 0
 244 016c B869     	 ldr r0,[r7,#24]
 245 016e 796A     	 ldr r1,[r7,#36]
 246 0170 FFF7FEFF 	 bl __aeabi_fmul
 247 0174 0346     	 mov r3,r0
 248 0176 7B61     	 str r3,[r7,#20]
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *(pDst + 4) = acc1;
 249              	 .loc 1 158 0
 250 0178 7B68     	 ldr r3,[r7,#4]
 251 017a 1033     	 adds r3,r3,#16
 252 017c 7A6B     	 ldr r2,[r7,#52]
 253 017e 1A60     	 str r2,[r3]
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     pSrcA += 8u;
 254              	 .loc 1 159 0
 255 0180 FB68     	 ldr r3,[r7,#12]
 256 0182 2033     	 adds r3,r3,#32
 257 0184 FB60     	 str r3,[r7,#12]
 160:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc3 -= (b2 * d2);
 258              	 .loc 1 161 0
 259 0186 B869     	 ldr r0,[r7,#24]
 260 0188 396A     	 ldr r1,[r7,#32]
 261 018a FFF7FEFF 	 bl __aeabi_fmul
 262 018e 0346     	 mov r3,r0
 263 0190 F869     	 ldr r0,[r7,#28]
 264 0192 1946     	 mov r1,r3
 265 0194 FFF7FEFF 	 bl __aeabi_fsub
 266 0198 0346     	 mov r3,r0
 267 019a FB61     	 str r3,[r7,#28]
 162:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     acc4 += (a2 * d2);
 268              	 .loc 1 162 0
 269 019c 386B     	 ldr r0,[r7,#48]
 270 019e 396A     	 ldr r1,[r7,#32]
 271 01a0 FFF7FEFF 	 bl __aeabi_fmul
 272 01a4 0346     	 mov r3,r0
 273 01a6 7869     	 ldr r0,[r7,#20]
 274 01a8 1946     	 mov r1,r3
 275 01aa FFF7FEFF 	 bl __aeabi_fadd
 276 01ae 0346     	 mov r3,r0
 277 01b0 7B61     	 str r3,[r7,#20]
 163:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 164:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *(pDst + 5) = acc2;
 278              	 .loc 1 164 0
 279 01b2 7B68     	 ldr r3,[r7,#4]
 280 01b4 1433     	 adds r3,r3,#20
 281 01b6 FA6A     	 ldr r2,[r7,#44]
 282 01b8 1A60     	 str r2,[r3]
 165:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     pSrcB += 8u;
 283              	 .loc 1 165 0
 284 01ba BB68     	 ldr r3,[r7,#8]
 285 01bc 2033     	 adds r3,r3,#32
 286 01be BB60     	 str r3,[r7,#8]
 166:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *(pDst + 6) = acc3;
 287              	 .loc 1 167 0
 288 01c0 7B68     	 ldr r3,[r7,#4]
 289 01c2 1833     	 adds r3,r3,#24
 290 01c4 FA69     	 ldr r2,[r7,#28]
 291 01c6 1A60     	 str r2,[r3]
 168:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *(pDst + 7) = acc4;
 292              	 .loc 1 168 0
 293 01c8 7B68     	 ldr r3,[r7,#4]
 294 01ca 1C33     	 adds r3,r3,#28
 295 01cc 7A69     	 ldr r2,[r7,#20]
 296 01ce 1A60     	 str r2,[r3]
 169:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 170:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     pDst += 8u;
 297              	 .loc 1 170 0
 298 01d0 7B68     	 ldr r3,[r7,#4]
 299 01d2 2033     	 adds r3,r3,#32
 300 01d4 7B60     	 str r3,[r7,#4]
 171:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 172:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Decrement the numSamples loop counter */
 173:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt--;
 301              	 .loc 1 173 0
 302 01d6 7B6C     	 ldr r3,[r7,#68]
 303 01d8 013B     	 subs r3,r3,#1
 304 01da 7B64     	 str r3,[r7,#68]
 305              	.L2:
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 306              	 .loc 1 104 0
 307 01dc 7B6C     	 ldr r3,[r7,#68]
 308 01de 002B     	 cmp r3,#0
 309 01e0 7FF419AF 	 bne .L3
 174:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
 175:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 176:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
 177:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****    ** No loop unrolling is used. */
 178:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples % 0x4u;
 310              	 .loc 1 178 0
 311 01e4 3B68     	 ldr r3,[r7]
 312 01e6 03F00303 	 and r3,r3,#3
 313 01ea 7B64     	 str r3,[r7,#68]
 179:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 180:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #else
 181:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   /* Run the below code for Cortex-M0 */
 183:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   blkCnt = numSamples;
 184:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 185:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 186:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   while(blkCnt > 0u)
 314              	 .loc 1 187 0
 315 01ec 3EE0     	 b .L4
 316              	.L5:
 188:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 189:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i] = A[2 * i] * B[2 * i] - A[2 * i + 1] * B[2 * i + 1].  */
 190:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* C[2 * i + 1] = A[2 * i] * B[2 * i + 1] + A[2 * i + 1] * B[2 * i].  */
 191:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     a1 = *pSrcA++;
 317              	 .loc 1 191 0
 318 01ee FB68     	 ldr r3,[r7,#12]
 319 01f0 1A1D     	 adds r2,r3,#4
 320 01f2 FA60     	 str r2,[r7,#12]
 321 01f4 1B68     	 ldr r3,[r3]
 322 01f6 3B64     	 str r3,[r7,#64]
 192:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     b1 = *pSrcA++;
 323              	 .loc 1 192 0
 324 01f8 FB68     	 ldr r3,[r7,#12]
 325 01fa 1A1D     	 adds r2,r3,#4
 326 01fc FA60     	 str r2,[r7,#12]
 327 01fe 1B68     	 ldr r3,[r3]
 328 0200 BB63     	 str r3,[r7,#56]
 193:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     c1 = *pSrcB++;
 329              	 .loc 1 193 0
 330 0202 BB68     	 ldr r3,[r7,#8]
 331 0204 1A1D     	 adds r2,r3,#4
 332 0206 BA60     	 str r2,[r7,#8]
 333 0208 1B68     	 ldr r3,[r3]
 334 020a FB63     	 str r3,[r7,#60]
 194:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     d1 = *pSrcB++;
 335              	 .loc 1 194 0
 336 020c BB68     	 ldr r3,[r7,#8]
 337 020e 1A1D     	 adds r2,r3,#4
 338 0210 BA60     	 str r2,[r7,#8]
 339 0212 1B68     	 ldr r3,[r3]
 340 0214 BB62     	 str r3,[r7,#40]
 195:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 196:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* store the result in the destination buffer. */
 197:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a1 * c1) - (b1 * d1);
 341              	 .loc 1 197 0
 342 0216 7C68     	 ldr r4,[r7,#4]
 343 0218 231D     	 adds r3,r4,#4
 344 021a 7B60     	 str r3,[r7,#4]
 345 021c 386C     	 ldr r0,[r7,#64]
 346 021e F96B     	 ldr r1,[r7,#60]
 347 0220 FFF7FEFF 	 bl __aeabi_fmul
 348 0224 0346     	 mov r3,r0
 349 0226 1D46     	 mov r5,r3
 350 0228 B86B     	 ldr r0,[r7,#56]
 351 022a B96A     	 ldr r1,[r7,#40]
 352 022c FFF7FEFF 	 bl __aeabi_fmul
 353 0230 0346     	 mov r3,r0
 354 0232 2846     	 mov r0,r5
 355 0234 1946     	 mov r1,r3
 356 0236 FFF7FEFF 	 bl __aeabi_fsub
 357 023a 0346     	 mov r3,r0
 358 023c 2360     	 str r3,[r4]
 198:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     *pDst++ = (a1 * d1) + (b1 * c1);
 359              	 .loc 1 198 0
 360 023e 7C68     	 ldr r4,[r7,#4]
 361 0240 231D     	 adds r3,r4,#4
 362 0242 7B60     	 str r3,[r7,#4]
 363 0244 386C     	 ldr r0,[r7,#64]
 364 0246 B96A     	 ldr r1,[r7,#40]
 365 0248 FFF7FEFF 	 bl __aeabi_fmul
 366 024c 0346     	 mov r3,r0
 367 024e 1D46     	 mov r5,r3
 368 0250 B86B     	 ldr r0,[r7,#56]
 369 0252 F96B     	 ldr r1,[r7,#60]
 370 0254 FFF7FEFF 	 bl __aeabi_fmul
 371 0258 0346     	 mov r3,r0
 372 025a 2846     	 mov r0,r5
 373 025c 1946     	 mov r1,r3
 374 025e FFF7FEFF 	 bl __aeabi_fadd
 375 0262 0346     	 mov r3,r0
 376 0264 2360     	 str r3,[r4]
 199:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** 
 200:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     /* Decrement the numSamples loop counter */
 201:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****     blkCnt--;
 377              	 .loc 1 201 0
 378 0266 7B6C     	 ldr r3,[r7,#68]
 379 0268 013B     	 subs r3,r3,#1
 380 026a 7B64     	 str r3,[r7,#68]
 381              	.L4:
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   {
 382              	 .loc 1 187 0
 383 026c 7B6C     	 ldr r3,[r7,#68]
 384 026e 002B     	 cmp r3,#0
 385 0270 BDD1     	 bne .L5
 202:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c ****   }
 203:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mult_cmplx_f32.c **** }
 386              	 .loc 1 203 0
 387 0272 4837     	 adds r7,r7,#72
 388              	.LCFI3:
 389              	 .cfi_def_cfa_offset 16
 390 0274 BD46     	 mov sp,r7
 391              	.LCFI4:
 392              	 .cfi_def_cfa_register 13
 393              	 
 394 0276 B0BD     	 pop {r4,r5,r7,pc}
 395              	 .cfi_endproc
 396              	.LFE139:
 398              	 .text
 399              	.Letext0:
 400              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 401              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 402              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mult_cmplx_f32.c
    {standard input}:22     .text.arm_cmplx_mult_cmplx_f32:00000000 $t
    {standard input}:27     .text.arm_cmplx_mult_cmplx_f32:00000000 arm_cmplx_mult_cmplx_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fsub
__aeabi_fadd
