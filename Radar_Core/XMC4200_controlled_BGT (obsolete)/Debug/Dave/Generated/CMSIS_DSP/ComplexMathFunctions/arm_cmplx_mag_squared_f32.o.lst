   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_cmplx_mag_squared_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fmul
  19              	 .global __aeabi_fadd
  20              	 .section .text.arm_cmplx_mag_squared_f32,"ax",%progbits
  21              	 .align 2
  22              	 .global arm_cmplx_mag_squared_f32
  23              	 .thumb
  24              	 .thumb_func
  26              	arm_cmplx_mag_squared_f32:
  27              	.LFB139:
  28              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * Title:		arm_cmplx_mag_squared_f32.c    
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * Description:	Floating-point complex magnitude squared.    
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * POSSIBILITY OF SUCH DAMAGE.  
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** * ---------------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**        
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @ingroup groupCmplxMath        
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**        
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @defgroup cmplx_mag_squared Complex Magnitude Squared        
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *        
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * Computes the magnitude squared of the elements of a complex data vector.        
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *       
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The <code>pSrc</code> points to the source data and        
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <code>pDst</code> points to the where the result should be written.        
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <code>numSamples</code> specifies the number of complex samples        
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * in the input array and the data is stored in an interleaved fashion        
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * (real, imag, real, imag, ...).        
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The input array has a total of <code>2*numSamples</code> values;        
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * the output array has a total of <code>numSamples</code> values.        
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *        
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * The underlying algorithm is used:        
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *        
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * <pre>        
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * for(n=0; n<numSamples; n++) {        
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *     pDst[n] = pSrc[(2*n)+0]^2 + pSrc[(2*n)+1]^2;        
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * }        
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * </pre>        
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  *        
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * There are separate functions for floating-point, Q15, and Q31 data types.        
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**        
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @addtogroup cmplx_mag_squared        
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @{        
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** /**        
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @brief  Floating-point complex magnitude squared        
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[in]  *pSrc points to the complex input vector        
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[out]  *pDst points to the real output vector        
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @param[in]  numSamples number of complex samples in the input vector        
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  * @return none.        
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****  */
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** void arm_cmplx_mag_squared_f32(
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t * pSrc,
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t * pDst,
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   uint32_t numSamples)
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** {
  29              	 .loc 1 88 0
  30              	 .cfi_startproc
  31              	 
  32              	 
  33 0000 B0B5     	 push {r4,r5,r7,lr}
  34              	.LCFI0:
  35              	 .cfi_def_cfa_offset 16
  36              	 .cfi_offset 4,-16
  37              	 .cfi_offset 5,-12
  38              	 .cfi_offset 7,-8
  39              	 .cfi_offset 14,-4
  40 0002 9CB0     	 sub sp,sp,#112
  41              	.LCFI1:
  42              	 .cfi_def_cfa_offset 128
  43 0004 00AF     	 add r7,sp,#0
  44              	.LCFI2:
  45              	 .cfi_def_cfa_register 7
  46 0006 F860     	 str r0,[r7,#12]
  47 0008 B960     	 str r1,[r7,#8]
  48 000a 7A60     	 str r2,[r7,#4]
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t real, imag;                          /* Temporary variables to store real and imaginary
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   uint32_t blkCnt;                               /* loop counter */
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t real1, real2, real3, real4;          /* Temporary variables to hold real values */
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t imag1, imag2, imag3, imag4;          /* Temporary variables to hold imaginary values */
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t mul1, mul2, mul3, mul4;              /* Temporary variables */
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t mul5, mul6, mul7, mul8;              /* Temporary variables */
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   float32_t out1, out2, out3, out4;              /* Temporary variables to hold output values */
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /*loop Unrolling */
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples >> 2u;
  49              	 .loc 1 100 0
  50 000c 7B68     	 ldr r3,[r7,#4]
  51 000e 9B08     	 lsrs r3,r3,#2
  52 0010 FB66     	 str r3,[r7,#108]
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while(blkCnt > 0u)
  53              	 .loc 1 104 0
  54 0012 77E0     	 b .L2
  55              	.L3:
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real1 = pSrc[0];
  56              	 .loc 1 108 0
  57 0014 FB68     	 ldr r3,[r7,#12]
  58 0016 1B68     	 ldr r3,[r3]
  59 0018 BB66     	 str r3,[r7,#104]
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag1 = pSrc[1];
  60              	 .loc 1 110 0
  61 001a FB68     	 ldr r3,[r7,#12]
  62 001c 5B68     	 ldr r3,[r3,#4]
  63 001e 7B66     	 str r3,[r7,#100]
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul1 = real1 * real1;
  64              	 .loc 1 113 0
  65 0020 B86E     	 ldr r0,[r7,#104]
  66 0022 B96E     	 ldr r1,[r7,#104]
  67 0024 FFF7FEFF 	 bl __aeabi_fmul
  68 0028 0346     	 mov r3,r0
  69 002a 3B66     	 str r3,[r7,#96]
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real2 = pSrc[2];
  70              	 .loc 1 116 0
  71 002c FB68     	 ldr r3,[r7,#12]
  72 002e 9B68     	 ldr r3,[r3,#8]
  73 0030 FB65     	 str r3,[r7,#92]
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul2 = imag1 * imag1;
  74              	 .loc 1 119 0
  75 0032 786E     	 ldr r0,[r7,#100]
  76 0034 796E     	 ldr r1,[r7,#100]
  77 0036 FFF7FEFF 	 bl __aeabi_fmul
  78 003a 0346     	 mov r3,r0
  79 003c BB65     	 str r3,[r7,#88]
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag2 = pSrc[3];
  80              	 .loc 1 122 0
  81 003e FB68     	 ldr r3,[r7,#12]
  82 0040 DB68     	 ldr r3,[r3,#12]
  83 0042 7B65     	 str r3,[r7,#84]
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul3 = real2 * real2;
  84              	 .loc 1 125 0
  85 0044 F86D     	 ldr r0,[r7,#92]
  86 0046 F96D     	 ldr r1,[r7,#92]
  87 0048 FFF7FEFF 	 bl __aeabi_fmul
  88 004c 0346     	 mov r3,r0
  89 004e 3B65     	 str r3,[r7,#80]
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real3 = pSrc[4];
  90              	 .loc 1 128 0
  91 0050 FB68     	 ldr r3,[r7,#12]
  92 0052 1B69     	 ldr r3,[r3,#16]
  93 0054 FB64     	 str r3,[r7,#76]
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul4 = imag2 * imag2;
  94              	 .loc 1 131 0
  95 0056 786D     	 ldr r0,[r7,#84]
  96 0058 796D     	 ldr r1,[r7,#84]
  97 005a FFF7FEFF 	 bl __aeabi_fmul
  98 005e 0346     	 mov r3,r0
  99 0060 BB64     	 str r3,[r7,#72]
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag3 = pSrc[5];
 100              	 .loc 1 134 0
 101 0062 FB68     	 ldr r3,[r7,#12]
 102 0064 5B69     	 ldr r3,[r3,#20]
 103 0066 7B64     	 str r3,[r7,#68]
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul5 = real3 * real3;
 104              	 .loc 1 137 0
 105 0068 F86C     	 ldr r0,[r7,#76]
 106 006a F96C     	 ldr r1,[r7,#76]
 107 006c FFF7FEFF 	 bl __aeabi_fmul
 108 0070 0346     	 mov r3,r0
 109 0072 3B64     	 str r3,[r7,#64]
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul6 = imag3 * imag3;
 110              	 .loc 1 139 0
 111 0074 786C     	 ldr r0,[r7,#68]
 112 0076 796C     	 ldr r1,[r7,#68]
 113 0078 FFF7FEFF 	 bl __aeabi_fmul
 114 007c 0346     	 mov r3,r0
 115 007e FB63     	 str r3,[r7,#60]
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read real input sample from source buffer */
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real4 = pSrc[6];
 116              	 .loc 1 142 0
 117 0080 FB68     	 ldr r3,[r7,#12]
 118 0082 9B69     	 ldr r3,[r3,#24]
 119 0084 BB63     	 str r3,[r7,#56]
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out1 = mul1 + mul2;
 120              	 .loc 1 145 0
 121 0086 386E     	 ldr r0,[r7,#96]
 122 0088 B96D     	 ldr r1,[r7,#88]
 123 008a FFF7FEFF 	 bl __aeabi_fadd
 124 008e 0346     	 mov r3,r0
 125 0090 7B63     	 str r3,[r7,#52]
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* read imaginary input sample from source buffer */
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag4 = pSrc[7];
 126              	 .loc 1 148 0
 127 0092 FB68     	 ldr r3,[r7,#12]
 128 0094 DB69     	 ldr r3,[r3,#28]
 129 0096 3B63     	 str r3,[r7,#48]
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out2 = mul3 + mul4;
 130              	 .loc 1 151 0
 131 0098 386D     	 ldr r0,[r7,#80]
 132 009a B96C     	 ldr r1,[r7,#72]
 133 009c FFF7FEFF 	 bl __aeabi_fadd
 134 00a0 0346     	 mov r3,r0
 135 00a2 FB62     	 str r3,[r7,#44]
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of real value */
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul7 = real4 * real4;
 136              	 .loc 1 154 0
 137 00a4 B86B     	 ldr r0,[r7,#56]
 138 00a6 B96B     	 ldr r1,[r7,#56]
 139 00a8 FFF7FEFF 	 bl __aeabi_fmul
 140 00ac 0346     	 mov r3,r0
 141 00ae BB62     	 str r3,[r7,#40]
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* calculate power of imaginary value */
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     mul8 = imag4 * imag4;
 142              	 .loc 1 156 0
 143 00b0 386B     	 ldr r0,[r7,#48]
 144 00b2 396B     	 ldr r1,[r7,#48]
 145 00b4 FFF7FEFF 	 bl __aeabi_fmul
 146 00b8 0346     	 mov r3,r0
 147 00ba 7B62     	 str r3,[r7,#36]
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[0] = out1;
 148              	 .loc 1 159 0
 149 00bc BB68     	 ldr r3,[r7,#8]
 150 00be 7A6B     	 ldr r2,[r7,#52]
 151 00c0 1A60     	 str r2,[r3]
 160:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 162:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out3 = mul5 + mul6;
 152              	 .loc 1 162 0
 153 00c2 386C     	 ldr r0,[r7,#64]
 154 00c4 F96B     	 ldr r1,[r7,#60]
 155 00c6 FFF7FEFF 	 bl __aeabi_fadd
 156 00ca 0346     	 mov r3,r0
 157 00cc 3B62     	 str r3,[r7,#32]
 163:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 164:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 165:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[1] = out2;
 158              	 .loc 1 165 0
 159 00ce BB68     	 ldr r3,[r7,#8]
 160 00d0 0433     	 adds r3,r3,#4
 161 00d2 FA6A     	 ldr r2,[r7,#44]
 162 00d4 1A60     	 str r2,[r3]
 166:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* accumulate real and imaginary powers */
 168:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     out4 = mul7 + mul8;
 163              	 .loc 1 168 0
 164 00d6 B86A     	 ldr r0,[r7,#40]
 165 00d8 796A     	 ldr r1,[r7,#36]
 166 00da FFF7FEFF 	 bl __aeabi_fadd
 167 00de 0346     	 mov r3,r0
 168 00e0 FB61     	 str r3,[r7,#28]
 169:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 170:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 171:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[2] = out3;
 169              	 .loc 1 171 0
 170 00e2 BB68     	 ldr r3,[r7,#8]
 171 00e4 0833     	 adds r3,r3,#8
 172 00e6 3A6A     	 ldr r2,[r7,#32]
 173 00e8 1A60     	 str r2,[r3]
 172:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 173:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* increment destination pointer by 8 to process next samples */
 174:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pSrc += 8u;
 174              	 .loc 1 174 0
 175 00ea FB68     	 ldr r3,[r7,#12]
 176 00ec 2033     	 adds r3,r3,#32
 177 00ee FB60     	 str r3,[r7,#12]
 175:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 176:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store output to destination */
 177:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst[3] = out4;
 178              	 .loc 1 177 0
 179 00f0 BB68     	 ldr r3,[r7,#8]
 180 00f2 0C33     	 adds r3,r3,#12
 181 00f4 FA69     	 ldr r2,[r7,#28]
 182 00f6 1A60     	 str r2,[r3]
 178:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 179:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* increment destination pointer by 4 to process next samples */
 180:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     pDst += 4u;
 183              	 .loc 1 180 0
 184 00f8 BB68     	 ldr r3,[r7,#8]
 185 00fa 1033     	 adds r3,r3,#16
 186 00fc BB60     	 str r3,[r7,#8]
 181:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 182:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 183:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 187              	 .loc 1 183 0
 188 00fe FB6E     	 ldr r3,[r7,#108]
 189 0100 013B     	 subs r3,r3,#1
 190 0102 FB66     	 str r3,[r7,#108]
 191              	.L2:
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 192              	 .loc 1 104 0
 193 0104 FB6E     	 ldr r3,[r7,#108]
 194 0106 002B     	 cmp r3,#0
 195 0108 84D1     	 bne .L3
 184:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 185:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 186:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.        
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****    ** No loop unrolling is used. */
 188:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples % 0x4u;
 196              	 .loc 1 188 0
 197 010a 7B68     	 ldr r3,[r7,#4]
 198 010c 03F00303 	 and r3,r3,#3
 199 0110 FB66     	 str r3,[r7,#108]
 189:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 190:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #else
 191:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 192:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   /* Run the below code for Cortex-M0 */
 193:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 194:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   blkCnt = numSamples;
 195:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 196:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 197:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 198:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   while(blkCnt > 0u)
 200              	 .loc 1 198 0
 201 0112 20E0     	 b .L4
 202              	.L5:
 199:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 200:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 201:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     real = *pSrc++;
 203              	 .loc 1 201 0
 204 0114 FB68     	 ldr r3,[r7,#12]
 205 0116 1A1D     	 adds r2,r3,#4
 206 0118 FA60     	 str r2,[r7,#12]
 207 011a 1B68     	 ldr r3,[r3]
 208 011c BB61     	 str r3,[r7,#24]
 202:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     imag = *pSrc++;
 209              	 .loc 1 202 0
 210 011e FB68     	 ldr r3,[r7,#12]
 211 0120 1A1D     	 adds r2,r3,#4
 212 0122 FA60     	 str r2,[r7,#12]
 213 0124 1B68     	 ldr r3,[r3]
 214 0126 7B61     	 str r3,[r7,#20]
 203:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 204:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* out = (real * real) + (imag * imag) */
 205:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* store the result in the destination buffer. */
 206:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     *pDst++ = (real * real) + (imag * imag);
 215              	 .loc 1 206 0
 216 0128 BC68     	 ldr r4,[r7,#8]
 217 012a 231D     	 adds r3,r4,#4
 218 012c BB60     	 str r3,[r7,#8]
 219 012e B869     	 ldr r0,[r7,#24]
 220 0130 B969     	 ldr r1,[r7,#24]
 221 0132 FFF7FEFF 	 bl __aeabi_fmul
 222 0136 0346     	 mov r3,r0
 223 0138 1D46     	 mov r5,r3
 224 013a 7869     	 ldr r0,[r7,#20]
 225 013c 7969     	 ldr r1,[r7,#20]
 226 013e FFF7FEFF 	 bl __aeabi_fmul
 227 0142 0346     	 mov r3,r0
 228 0144 2846     	 mov r0,r5
 229 0146 1946     	 mov r1,r3
 230 0148 FFF7FEFF 	 bl __aeabi_fadd
 231 014c 0346     	 mov r3,r0
 232 014e 2360     	 str r3,[r4]
 207:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** 
 208:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     /* Decrement the loop counter */
 209:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****     blkCnt--;
 233              	 .loc 1 209 0
 234 0150 FB6E     	 ldr r3,[r7,#108]
 235 0152 013B     	 subs r3,r3,#1
 236 0154 FB66     	 str r3,[r7,#108]
 237              	.L4:
 198:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   {
 238              	 .loc 1 198 0
 239 0156 FB6E     	 ldr r3,[r7,#108]
 240 0158 002B     	 cmp r3,#0
 241 015a DBD1     	 bne .L5
 210:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c ****   }
 211:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_f32.c **** }
 242              	 .loc 1 211 0
 243 015c 7037     	 adds r7,r7,#112
 244              	.LCFI3:
 245              	 .cfi_def_cfa_offset 16
 246 015e BD46     	 mov sp,r7
 247              	.LCFI4:
 248              	 .cfi_def_cfa_register 13
 249              	 
 250 0160 B0BD     	 pop {r4,r5,r7,pc}
 251              	 .cfi_endproc
 252              	.LFE139:
 254 0162 00BF     	 .text
 255              	.Letext0:
 256              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 257              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 258              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mag_squared_f32.c
    {standard input}:21     .text.arm_cmplx_mag_squared_f32:00000000 $t
    {standard input}:26     .text.arm_cmplx_mag_squared_f32:00000000 arm_cmplx_mag_squared_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fadd
