   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_cmplx_dot_prod_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fmul
  19              	 .global __aeabi_fadd
  20              	 .global __aeabi_fsub
  21              	 .section .text.arm_cmplx_dot_prod_f32,"ax",%progbits
  22              	 .align 2
  23              	 .global arm_cmplx_dot_prod_f32
  24              	 .thumb
  25              	 .thumb_func
  27              	arm_cmplx_dot_prod_f32:
  28              	.LFB139:
  29              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * Title:		arm_cmplx_dot_prod_f32.c    
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * Description:	Floating-point complex dot product    
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * POSSIBILITY OF SUCH DAMAGE.    
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** * ---------------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @ingroup groupCmplxMath    
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @defgroup cmplx_dot_prod Complex Dot Product    
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *    
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Computes the dot product of two complex vectors.    
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * The vectors are multiplied element-by-element and then summed.    
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *   
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * The <code>pSrcA</code> points to the first complex input vector and    
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * <code>pSrcB</code> points to the second complex input vector.    
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * <code>numSamples</code> specifies the number of complex samples    
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * and the data in each array is stored in an interleaved fashion    
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * (real, imag, real, imag, ...).    
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * Each array has a total of <code>2*numSamples</code> values.    
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *    
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * The underlying algorithm is used:    
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * <pre>    
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * realResult=0;    
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * imagResult=0;    
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * for(n=0; n<numSamples; n++) {    
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *     realResult += pSrcA[(2*n)+0]*pSrcB[(2*n)+0] - pSrcA[(2*n)+1]*pSrcB[(2*n)+1];    
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *     imagResult += pSrcA[(2*n)+0]*pSrcB[(2*n)+1] + pSrcA[(2*n)+1]*pSrcB[(2*n)+0];    
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * }    
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * </pre>    
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  *    
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * There are separate functions for floating-point, Q15, and Q31 data types.    
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**    
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @addtogroup cmplx_dot_prod    
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @{    
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** /**    
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @brief  Floating-point complex dot product    
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *pSrcA points to the first input vector    
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *pSrcB points to the second input vector    
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  numSamples number of complex samples in each vector    
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *realResult real part of the result returned here    
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @param  *imagResult imaginary part of the result returned here    
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  * @return none.    
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****  */
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** void arm_cmplx_dot_prod_f32(
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * pSrcA,
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * pSrcB,
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   uint32_t numSamples,
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * realResult,
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t * imagResult)
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** {
  30              	 .loc 1 94 0
  31              	 .cfi_startproc
  32              	 
  33              	 
  34 0000 80B5     	 push {r7,lr}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 8
  37              	 .cfi_offset 7,-8
  38              	 .cfi_offset 14,-4
  39 0002 8CB0     	 sub sp,sp,#48
  40              	.LCFI1:
  41              	 .cfi_def_cfa_offset 56
  42 0004 00AF     	 add r7,sp,#0
  43              	.LCFI2:
  44              	 .cfi_def_cfa_register 7
  45 0006 F860     	 str r0,[r7,#12]
  46 0008 B960     	 str r1,[r7,#8]
  47 000a 7A60     	 str r2,[r7,#4]
  48 000c 3B60     	 str r3,[r7]
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t real_sum = 0.0f, imag_sum = 0.0f;    /* Temporary result storage */
  49              	 .loc 1 95 0
  50 000e 4FF00003 	 mov r3,#0
  51 0012 FB62     	 str r3,[r7,#44]
  52 0014 4FF00003 	 mov r3,#0
  53 0018 BB62     	 str r3,[r7,#40]
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   float32_t a0,b0,c0,d0;
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   uint32_t blkCnt;                               /* loop counter */
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /*loop Unrolling */
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples >> 2u;
  54              	 .loc 1 104 0
  55 001a 7B68     	 ldr r3,[r7,#4]
  56 001c 9B08     	 lsrs r3,r3,#2
  57 001e 7B62     	 str r3,[r7,#36]
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while(blkCnt > 0u)
  58              	 .loc 1 108 0
  59 0020 02E1     	 b .L2
  60              	.L3:
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
  61              	 .loc 1 110 0
  62 0022 FB68     	 ldr r3,[r7,#12]
  63 0024 1A1D     	 adds r2,r3,#4
  64 0026 FA60     	 str r2,[r7,#12]
  65 0028 1B68     	 ldr r3,[r3]
  66 002a 3B62     	 str r3,[r7,#32]
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
  67              	 .loc 1 111 0
  68 002c FB68     	 ldr r3,[r7,#12]
  69 002e 1A1D     	 adds r2,r3,#4
  70 0030 FA60     	 str r2,[r7,#12]
  71 0032 1B68     	 ldr r3,[r3]
  72 0034 FB61     	 str r3,[r7,#28]
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
  73              	 .loc 1 112 0
  74 0036 BB68     	 ldr r3,[r7,#8]
  75 0038 1A1D     	 adds r2,r3,#4
  76 003a BA60     	 str r2,[r7,#8]
  77 003c 1B68     	 ldr r3,[r3]
  78 003e BB61     	 str r3,[r7,#24]
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;  
  79              	 .loc 1 113 0
  80 0040 BB68     	 ldr r3,[r7,#8]
  81 0042 1A1D     	 adds r2,r3,#4
  82 0044 BA60     	 str r2,[r7,#8]
  83 0046 1B68     	 ldr r3,[r3]
  84 0048 7B61     	 str r3,[r7,#20]
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
  85              	 .loc 1 115 0
  86 004a 386A     	 ldr r0,[r7,#32]
  87 004c B969     	 ldr r1,[r7,#24]
  88 004e FFF7FEFF 	 bl __aeabi_fmul
  89 0052 0346     	 mov r3,r0
  90 0054 F86A     	 ldr r0,[r7,#44]
  91 0056 1946     	 mov r1,r3
  92 0058 FFF7FEFF 	 bl __aeabi_fadd
  93 005c 0346     	 mov r3,r0
  94 005e FB62     	 str r3,[r7,#44]
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
  95              	 .loc 1 116 0
  96 0060 386A     	 ldr r0,[r7,#32]
  97 0062 7969     	 ldr r1,[r7,#20]
  98 0064 FFF7FEFF 	 bl __aeabi_fmul
  99 0068 0346     	 mov r3,r0
 100 006a B86A     	 ldr r0,[r7,#40]
 101 006c 1946     	 mov r1,r3
 102 006e FFF7FEFF 	 bl __aeabi_fadd
 103 0072 0346     	 mov r3,r0
 104 0074 BB62     	 str r3,[r7,#40]
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 105              	 .loc 1 117 0
 106 0076 F869     	 ldr r0,[r7,#28]
 107 0078 7969     	 ldr r1,[r7,#20]
 108 007a FFF7FEFF 	 bl __aeabi_fmul
 109 007e 0346     	 mov r3,r0
 110 0080 F86A     	 ldr r0,[r7,#44]
 111 0082 1946     	 mov r1,r3
 112 0084 FFF7FEFF 	 bl __aeabi_fsub
 113 0088 0346     	 mov r3,r0
 114 008a FB62     	 str r3,[r7,#44]
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 115              	 .loc 1 118 0
 116 008c F869     	 ldr r0,[r7,#28]
 117 008e B969     	 ldr r1,[r7,#24]
 118 0090 FFF7FEFF 	 bl __aeabi_fmul
 119 0094 0346     	 mov r3,r0
 120 0096 B86A     	 ldr r0,[r7,#40]
 121 0098 1946     	 mov r1,r3
 122 009a FFF7FEFF 	 bl __aeabi_fadd
 123 009e 0346     	 mov r3,r0
 124 00a0 BB62     	 str r3,[r7,#40]
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 125              	 .loc 1 120 0
 126 00a2 FB68     	 ldr r3,[r7,#12]
 127 00a4 1A1D     	 adds r2,r3,#4
 128 00a6 FA60     	 str r2,[r7,#12]
 129 00a8 1B68     	 ldr r3,[r3]
 130 00aa 3B62     	 str r3,[r7,#32]
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 131              	 .loc 1 121 0
 132 00ac FB68     	 ldr r3,[r7,#12]
 133 00ae 1A1D     	 adds r2,r3,#4
 134 00b0 FA60     	 str r2,[r7,#12]
 135 00b2 1B68     	 ldr r3,[r3]
 136 00b4 FB61     	 str r3,[r7,#28]
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 137              	 .loc 1 122 0
 138 00b6 BB68     	 ldr r3,[r7,#8]
 139 00b8 1A1D     	 adds r2,r3,#4
 140 00ba BA60     	 str r2,[r7,#8]
 141 00bc 1B68     	 ldr r3,[r3]
 142 00be BB61     	 str r3,[r7,#24]
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++; 
 143              	 .loc 1 123 0
 144 00c0 BB68     	 ldr r3,[r7,#8]
 145 00c2 1A1D     	 adds r2,r3,#4
 146 00c4 BA60     	 str r2,[r7,#8]
 147 00c6 1B68     	 ldr r3,[r3]
 148 00c8 7B61     	 str r3,[r7,#20]
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 149              	 .loc 1 125 0
 150 00ca 386A     	 ldr r0,[r7,#32]
 151 00cc B969     	 ldr r1,[r7,#24]
 152 00ce FFF7FEFF 	 bl __aeabi_fmul
 153 00d2 0346     	 mov r3,r0
 154 00d4 F86A     	 ldr r0,[r7,#44]
 155 00d6 1946     	 mov r1,r3
 156 00d8 FFF7FEFF 	 bl __aeabi_fadd
 157 00dc 0346     	 mov r3,r0
 158 00de FB62     	 str r3,[r7,#44]
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 159              	 .loc 1 126 0
 160 00e0 386A     	 ldr r0,[r7,#32]
 161 00e2 7969     	 ldr r1,[r7,#20]
 162 00e4 FFF7FEFF 	 bl __aeabi_fmul
 163 00e8 0346     	 mov r3,r0
 164 00ea B86A     	 ldr r0,[r7,#40]
 165 00ec 1946     	 mov r1,r3
 166 00ee FFF7FEFF 	 bl __aeabi_fadd
 167 00f2 0346     	 mov r3,r0
 168 00f4 BB62     	 str r3,[r7,#40]
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 169              	 .loc 1 127 0
 170 00f6 F869     	 ldr r0,[r7,#28]
 171 00f8 7969     	 ldr r1,[r7,#20]
 172 00fa FFF7FEFF 	 bl __aeabi_fmul
 173 00fe 0346     	 mov r3,r0
 174 0100 F86A     	 ldr r0,[r7,#44]
 175 0102 1946     	 mov r1,r3
 176 0104 FFF7FEFF 	 bl __aeabi_fsub
 177 0108 0346     	 mov r3,r0
 178 010a FB62     	 str r3,[r7,#44]
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 179              	 .loc 1 128 0
 180 010c F869     	 ldr r0,[r7,#28]
 181 010e B969     	 ldr r1,[r7,#24]
 182 0110 FFF7FEFF 	 bl __aeabi_fmul
 183 0114 0346     	 mov r3,r0
 184 0116 B86A     	 ldr r0,[r7,#40]
 185 0118 1946     	 mov r1,r3
 186 011a FFF7FEFF 	 bl __aeabi_fadd
 187 011e 0346     	 mov r3,r0
 188 0120 BB62     	 str r3,[r7,#40]
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 189              	 .loc 1 130 0
 190 0122 FB68     	 ldr r3,[r7,#12]
 191 0124 1A1D     	 adds r2,r3,#4
 192 0126 FA60     	 str r2,[r7,#12]
 193 0128 1B68     	 ldr r3,[r3]
 194 012a 3B62     	 str r3,[r7,#32]
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 195              	 .loc 1 131 0
 196 012c FB68     	 ldr r3,[r7,#12]
 197 012e 1A1D     	 adds r2,r3,#4
 198 0130 FA60     	 str r2,[r7,#12]
 199 0132 1B68     	 ldr r3,[r3]
 200 0134 FB61     	 str r3,[r7,#28]
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 201              	 .loc 1 132 0
 202 0136 BB68     	 ldr r3,[r7,#8]
 203 0138 1A1D     	 adds r2,r3,#4
 204 013a BA60     	 str r2,[r7,#8]
 205 013c 1B68     	 ldr r3,[r3]
 206 013e BB61     	 str r3,[r7,#24]
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;  
 207              	 .loc 1 133 0
 208 0140 BB68     	 ldr r3,[r7,#8]
 209 0142 1A1D     	 adds r2,r3,#4
 210 0144 BA60     	 str r2,[r7,#8]
 211 0146 1B68     	 ldr r3,[r3]
 212 0148 7B61     	 str r3,[r7,#20]
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 213              	 .loc 1 135 0
 214 014a 386A     	 ldr r0,[r7,#32]
 215 014c B969     	 ldr r1,[r7,#24]
 216 014e FFF7FEFF 	 bl __aeabi_fmul
 217 0152 0346     	 mov r3,r0
 218 0154 F86A     	 ldr r0,[r7,#44]
 219 0156 1946     	 mov r1,r3
 220 0158 FFF7FEFF 	 bl __aeabi_fadd
 221 015c 0346     	 mov r3,r0
 222 015e FB62     	 str r3,[r7,#44]
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 223              	 .loc 1 136 0
 224 0160 386A     	 ldr r0,[r7,#32]
 225 0162 7969     	 ldr r1,[r7,#20]
 226 0164 FFF7FEFF 	 bl __aeabi_fmul
 227 0168 0346     	 mov r3,r0
 228 016a B86A     	 ldr r0,[r7,#40]
 229 016c 1946     	 mov r1,r3
 230 016e FFF7FEFF 	 bl __aeabi_fadd
 231 0172 0346     	 mov r3,r0
 232 0174 BB62     	 str r3,[r7,#40]
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 233              	 .loc 1 137 0
 234 0176 F869     	 ldr r0,[r7,#28]
 235 0178 7969     	 ldr r1,[r7,#20]
 236 017a FFF7FEFF 	 bl __aeabi_fmul
 237 017e 0346     	 mov r3,r0
 238 0180 F86A     	 ldr r0,[r7,#44]
 239 0182 1946     	 mov r1,r3
 240 0184 FFF7FEFF 	 bl __aeabi_fsub
 241 0188 0346     	 mov r3,r0
 242 018a FB62     	 str r3,[r7,#44]
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 243              	 .loc 1 138 0
 244 018c F869     	 ldr r0,[r7,#28]
 245 018e B969     	 ldr r1,[r7,#24]
 246 0190 FFF7FEFF 	 bl __aeabi_fmul
 247 0194 0346     	 mov r3,r0
 248 0196 B86A     	 ldr r0,[r7,#40]
 249 0198 1946     	 mov r1,r3
 250 019a FFF7FEFF 	 bl __aeabi_fadd
 251 019e 0346     	 mov r3,r0
 252 01a0 BB62     	 str r3,[r7,#40]
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****     
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 253              	 .loc 1 140 0
 254 01a2 FB68     	 ldr r3,[r7,#12]
 255 01a4 1A1D     	 adds r2,r3,#4
 256 01a6 FA60     	 str r2,[r7,#12]
 257 01a8 1B68     	 ldr r3,[r3]
 258 01aa 3B62     	 str r3,[r7,#32]
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 259              	 .loc 1 141 0
 260 01ac FB68     	 ldr r3,[r7,#12]
 261 01ae 1A1D     	 adds r2,r3,#4
 262 01b0 FA60     	 str r2,[r7,#12]
 263 01b2 1B68     	 ldr r3,[r3]
 264 01b4 FB61     	 str r3,[r7,#28]
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 265              	 .loc 1 142 0
 266 01b6 BB68     	 ldr r3,[r7,#8]
 267 01b8 1A1D     	 adds r2,r3,#4
 268 01ba BA60     	 str r2,[r7,#8]
 269 01bc 1B68     	 ldr r3,[r3]
 270 01be BB61     	 str r3,[r7,#24]
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++; 
 271              	 .loc 1 143 0
 272 01c0 BB68     	 ldr r3,[r7,#8]
 273 01c2 1A1D     	 adds r2,r3,#4
 274 01c4 BA60     	 str r2,[r7,#8]
 275 01c6 1B68     	 ldr r3,[r3]
 276 01c8 7B61     	 str r3,[r7,#20]
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 277              	 .loc 1 145 0
 278 01ca 386A     	 ldr r0,[r7,#32]
 279 01cc B969     	 ldr r1,[r7,#24]
 280 01ce FFF7FEFF 	 bl __aeabi_fmul
 281 01d2 0346     	 mov r3,r0
 282 01d4 F86A     	 ldr r0,[r7,#44]
 283 01d6 1946     	 mov r1,r3
 284 01d8 FFF7FEFF 	 bl __aeabi_fadd
 285 01dc 0346     	 mov r3,r0
 286 01de FB62     	 str r3,[r7,#44]
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 287              	 .loc 1 146 0
 288 01e0 386A     	 ldr r0,[r7,#32]
 289 01e2 7969     	 ldr r1,[r7,#20]
 290 01e4 FFF7FEFF 	 bl __aeabi_fmul
 291 01e8 0346     	 mov r3,r0
 292 01ea B86A     	 ldr r0,[r7,#40]
 293 01ec 1946     	 mov r1,r3
 294 01ee FFF7FEFF 	 bl __aeabi_fadd
 295 01f2 0346     	 mov r3,r0
 296 01f4 BB62     	 str r3,[r7,#40]
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 297              	 .loc 1 147 0
 298 01f6 F869     	 ldr r0,[r7,#28]
 299 01f8 7969     	 ldr r1,[r7,#20]
 300 01fa FFF7FEFF 	 bl __aeabi_fmul
 301 01fe 0346     	 mov r3,r0
 302 0200 F86A     	 ldr r0,[r7,#44]
 303 0202 1946     	 mov r1,r3
 304 0204 FFF7FEFF 	 bl __aeabi_fsub
 305 0208 0346     	 mov r3,r0
 306 020a FB62     	 str r3,[r7,#44]
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 307              	 .loc 1 148 0
 308 020c F869     	 ldr r0,[r7,#28]
 309 020e B969     	 ldr r1,[r7,#24]
 310 0210 FFF7FEFF 	 bl __aeabi_fmul
 311 0214 0346     	 mov r3,r0
 312 0216 B86A     	 ldr r0,[r7,#40]
 313 0218 1946     	 mov r1,r3
 314 021a FFF7FEFF 	 bl __aeabi_fadd
 315 021e 0346     	 mov r3,r0
 316 0220 BB62     	 str r3,[r7,#40]
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       /* Decrement the loop counter */
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       blkCnt--;
 317              	 .loc 1 151 0
 318 0222 7B6A     	 ldr r3,[r7,#36]
 319 0224 013B     	 subs r3,r3,#1
 320 0226 7B62     	 str r3,[r7,#36]
 321              	.L2:
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 322              	 .loc 1 108 0
 323 0228 7B6A     	 ldr r3,[r7,#36]
 324 022a 002B     	 cmp r3,#0
 325 022c 7FF4F9AE 	 bne .L3
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****    ** No loop unrolling is used. */
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   blkCnt = numSamples & 0x3u;
 326              	 .loc 1 156 0
 327 0230 7B68     	 ldr r3,[r7,#4]
 328 0232 03F00303 	 and r3,r3,#3
 329 0236 7B62     	 str r3,[r7,#36]
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while(blkCnt > 0u)
 330              	 .loc 1 158 0
 331 0238 42E0     	 b .L4
 332              	.L5:
 159:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 160:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 333              	 .loc 1 160 0
 334 023a FB68     	 ldr r3,[r7,#12]
 335 023c 1A1D     	 adds r2,r3,#4
 336 023e FA60     	 str r2,[r7,#12]
 337 0240 1B68     	 ldr r3,[r3]
 338 0242 3B62     	 str r3,[r7,#32]
 161:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 339              	 .loc 1 161 0
 340 0244 FB68     	 ldr r3,[r7,#12]
 341 0246 1A1D     	 adds r2,r3,#4
 342 0248 FA60     	 str r2,[r7,#12]
 343 024a 1B68     	 ldr r3,[r3]
 344 024c FB61     	 str r3,[r7,#28]
 162:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 345              	 .loc 1 162 0
 346 024e BB68     	 ldr r3,[r7,#8]
 347 0250 1A1D     	 adds r2,r3,#4
 348 0252 BA60     	 str r2,[r7,#8]
 349 0254 1B68     	 ldr r3,[r3]
 350 0256 BB61     	 str r3,[r7,#24]
 163:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;  
 351              	 .loc 1 163 0
 352 0258 BB68     	 ldr r3,[r7,#8]
 353 025a 1A1D     	 adds r2,r3,#4
 354 025c BA60     	 str r2,[r7,#8]
 355 025e 1B68     	 ldr r3,[r3]
 356 0260 7B61     	 str r3,[r7,#20]
 164:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 165:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 357              	 .loc 1 165 0
 358 0262 386A     	 ldr r0,[r7,#32]
 359 0264 B969     	 ldr r1,[r7,#24]
 360 0266 FFF7FEFF 	 bl __aeabi_fmul
 361 026a 0346     	 mov r3,r0
 362 026c F86A     	 ldr r0,[r7,#44]
 363 026e 1946     	 mov r1,r3
 364 0270 FFF7FEFF 	 bl __aeabi_fadd
 365 0274 0346     	 mov r3,r0
 366 0276 FB62     	 str r3,[r7,#44]
 166:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 367              	 .loc 1 166 0
 368 0278 386A     	 ldr r0,[r7,#32]
 369 027a 7969     	 ldr r1,[r7,#20]
 370 027c FFF7FEFF 	 bl __aeabi_fmul
 371 0280 0346     	 mov r3,r0
 372 0282 B86A     	 ldr r0,[r7,#40]
 373 0284 1946     	 mov r1,r3
 374 0286 FFF7FEFF 	 bl __aeabi_fadd
 375 028a 0346     	 mov r3,r0
 376 028c BB62     	 str r3,[r7,#40]
 167:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 377              	 .loc 1 167 0
 378 028e F869     	 ldr r0,[r7,#28]
 379 0290 7969     	 ldr r1,[r7,#20]
 380 0292 FFF7FEFF 	 bl __aeabi_fmul
 381 0296 0346     	 mov r3,r0
 382 0298 F86A     	 ldr r0,[r7,#44]
 383 029a 1946     	 mov r1,r3
 384 029c FFF7FEFF 	 bl __aeabi_fsub
 385 02a0 0346     	 mov r3,r0
 386 02a2 FB62     	 str r3,[r7,#44]
 168:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 387              	 .loc 1 168 0
 388 02a4 F869     	 ldr r0,[r7,#28]
 389 02a6 B969     	 ldr r1,[r7,#24]
 390 02a8 FFF7FEFF 	 bl __aeabi_fmul
 391 02ac 0346     	 mov r3,r0
 392 02ae B86A     	 ldr r0,[r7,#40]
 393 02b0 1946     	 mov r1,r3
 394 02b2 FFF7FEFF 	 bl __aeabi_fadd
 395 02b6 0346     	 mov r3,r0
 396 02b8 BB62     	 str r3,[r7,#40]
 169:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 170:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       /* Decrement the loop counter */
 171:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       blkCnt--;
 397              	 .loc 1 171 0
 398 02ba 7B6A     	 ldr r3,[r7,#36]
 399 02bc 013B     	 subs r3,r3,#1
 400 02be 7B62     	 str r3,[r7,#36]
 401              	.L4:
 158:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 402              	 .loc 1 158 0
 403 02c0 7B6A     	 ldr r3,[r7,#36]
 404 02c2 002B     	 cmp r3,#0
 405 02c4 B9D1     	 bne .L5
 172:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 173:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 174:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #else
 175:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 176:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Run the below code for Cortex-M0 */
 177:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 178:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   while(numSamples > 0u)
 179:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   {
 180:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       a0 = *pSrcA++;
 181:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       b0 = *pSrcA++;
 182:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       c0 = *pSrcB++;
 183:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       d0 = *pSrcB++;  
 184:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   
 185:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum += a0 * c0;
 186:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += a0 * d0;
 187:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       real_sum -= b0 * d0;
 188:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       imag_sum += b0 * c0;
 189:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 190:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       /* Decrement the loop counter */
 191:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****       numSamples--;
 192:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   }
 193:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 194:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 195:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** 
 196:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   /* Store the real and imaginary results in the destination buffers */
 197:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *realResult = real_sum;
 406              	 .loc 1 197 0
 407 02c6 3B68     	 ldr r3,[r7]
 408 02c8 FA6A     	 ldr r2,[r7,#44]
 409 02ca 1A60     	 str r2,[r3]
 198:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c ****   *imagResult = imag_sum;
 410              	 .loc 1 198 0
 411 02cc BB6B     	 ldr r3,[r7,#56]
 412 02ce BA6A     	 ldr r2,[r7,#40]
 413 02d0 1A60     	 str r2,[r3]
 199:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_dot_prod_f32.c **** }
 414              	 .loc 1 199 0
 415 02d2 3037     	 adds r7,r7,#48
 416              	.LCFI3:
 417              	 .cfi_def_cfa_offset 8
 418 02d4 BD46     	 mov sp,r7
 419              	.LCFI4:
 420              	 .cfi_def_cfa_register 13
 421              	 
 422 02d6 80BD     	 pop {r7,pc}
 423              	 .cfi_endproc
 424              	.LFE139:
 426              	 .text
 427              	.Letext0:
 428              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 429              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 430              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_dot_prod_f32.c
    {standard input}:22     .text.arm_cmplx_dot_prod_f32:00000000 $t
    {standard input}:27     .text.arm_cmplx_dot_prod_f32:00000000 arm_cmplx_dot_prod_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fadd
__aeabi_fsub
