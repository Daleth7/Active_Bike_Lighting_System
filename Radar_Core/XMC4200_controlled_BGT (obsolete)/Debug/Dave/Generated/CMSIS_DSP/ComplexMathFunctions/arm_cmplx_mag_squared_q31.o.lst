   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_cmplx_mag_squared_q31.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .section .text.arm_cmplx_mag_squared_q31,"ax",%progbits
  19              	 .align 2
  20              	 .global arm_cmplx_mag_squared_q31
  21              	 .thumb
  22              	 .thumb_func
  24              	arm_cmplx_mag_squared_q31:
  25              	.LFB139:
  26              	 .file 1 "../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c"
   1:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *    
   4:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *    
   7:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * Title:		arm_cmplx_mag_squared_q31.c    
   9:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *    
  10:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * Description:	Q31 complex magnitude squared.    
  11:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *    
  12:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *  
  14:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** *
  27:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * POSSIBILITY OF SUCH DAMAGE. 
  39:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** * ---------------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  41:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  43:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @ingroup groupCmplxMath    
  45:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  */
  46:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  47:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @addtogroup cmplx_mag_squared    
  49:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @{    
  50:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  */
  51:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  52:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  53:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** /**    
  54:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @brief  Q31 complex magnitude squared    
  55:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @param  *pSrc points to the complex input vector    
  56:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @param  *pDst points to the real output vector    
  57:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @param  numSamples number of complex samples in the input vector    
  58:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * @return none.    
  59:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  *    
  60:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * <b>Scaling and Overflow Behavior:</b>    
  61:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * \par    
  62:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * The function implements 1.31 by 1.31 multiplications and finally output is converted into 3.29 f
  63:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  * Input down scaling is not required.    
  64:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****  */
  65:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  66:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** void arm_cmplx_mag_squared_q31(
  67:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   q31_t * pSrc,
  68:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   q31_t * pDst,
  69:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   uint32_t numSamples)
  70:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** {
  27              	 .loc 1 70 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 2DE9B00F 	 push {r4,r5,r7,r8,r9,r10,fp}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 28
  35              	 .cfi_offset 4,-28
  36              	 .cfi_offset 5,-24
  37              	 .cfi_offset 7,-20
  38              	 .cfi_offset 8,-16
  39              	 .cfi_offset 9,-12
  40              	 .cfi_offset 10,-8
  41              	 .cfi_offset 11,-4
  42 0004 9BB0     	 sub sp,sp,#108
  43              	.LCFI1:
  44              	 .cfi_def_cfa_offset 136
  45 0006 00AF     	 add r7,sp,#0
  46              	.LCFI2:
  47              	 .cfi_def_cfa_register 7
  48 0008 F864     	 str r0,[r7,#76]
  49 000a B964     	 str r1,[r7,#72]
  50 000c 7A64     	 str r2,[r7,#68]
  71:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   q31_t real, imag;                              /* Temporary variables to store real and imaginary
  72:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   q31_t acc0, acc1;                              /* Accumulators */
  73:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  74:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #ifndef ARM_MATH_CM0_FAMILY
  75:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  76:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
  77:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   uint32_t blkCnt;                               /* loop counter */
  78:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  79:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* loop Unrolling */
  80:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   blkCnt = numSamples >> 2u;
  51              	 .loc 1 80 0
  52 000e 7B6C     	 ldr r3,[r7,#68]
  53 0010 9B08     	 lsrs r3,r3,#2
  54 0012 7B66     	 str r3,[r7,#100]
  81:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  82:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
  83:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****    ** a second loop below computes the remaining 1 to 3 samples. */
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   while(blkCnt > 0u)
  55              	 .loc 1 84 0
  56 0014 FEE0     	 b .L2
  57              	.L3:
  85:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
  86:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
  87:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
  58              	 .loc 1 87 0
  59 0016 FA6C     	 ldr r2,[r7,#76]
  60 0018 131D     	 adds r3,r2,#4
  61 001a FB64     	 str r3,[r7,#76]
  62 001c 1368     	 ldr r3,[r2]
  63 001e 3B66     	 str r3,[r7,#96]
  88:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
  64              	 .loc 1 88 0
  65 0020 FA6C     	 ldr r2,[r7,#76]
  66 0022 131D     	 adds r3,r2,#4
  67 0024 FB64     	 str r3,[r7,#76]
  68 0026 1368     	 ldr r3,[r2]
  69 0028 FB65     	 str r3,[r7,#92]
  89:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
  70              	 .loc 1 89 0
  71 002a 3B6E     	 ldr r3,[r7,#96]
  72 002c 1846     	 mov r0,r3
  73 002e 4FEAE071 	 asr r1,r0,#31
  74 0032 3B6E     	 ldr r3,[r7,#96]
  75 0034 1A46     	 mov r2,r3
  76 0036 4FEAE273 	 asr r3,r2,#31
  77 003a 02FB01F5 	 mul r5,r2,r1
  78 003e 00FB03F4 	 mul r4,r0,r3
  79 0042 2C44     	 add r4,r4,r5
  80 0044 A0FB0223 	 umull r2,r3,r0,r2
  81 0048 E118     	 adds r1,r4,r3
  82 004a 0B46     	 mov r3,r1
  83 004c 5910     	 asrs r1,r3,#1
  84 004e B963     	 str r1,[r7,#56]
  85 0050 DB17     	 asrs r3,r3,#31
  86 0052 FB63     	 str r3,[r7,#60]
  87 0054 BB6B     	 ldr r3,[r7,#56]
  88 0056 BB65     	 str r3,[r7,#88]
  90:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
  89              	 .loc 1 90 0
  90 0058 FB6D     	 ldr r3,[r7,#92]
  91 005a 1846     	 mov r0,r3
  92 005c 4FEAE071 	 asr r1,r0,#31
  93 0060 FB6D     	 ldr r3,[r7,#92]
  94 0062 1A46     	 mov r2,r3
  95 0064 4FEAE273 	 asr r3,r2,#31
  96 0068 02FB01F5 	 mul r5,r2,r1
  97 006c 00FB03F4 	 mul r4,r0,r3
  98 0070 2C44     	 add r4,r4,r5
  99 0072 A0FB0223 	 umull r2,r3,r0,r2
 100 0076 E118     	 adds r1,r4,r3
 101 0078 0B46     	 mov r3,r1
 102 007a 5910     	 asrs r1,r3,#1
 103 007c 3963     	 str r1,[r7,#48]
 104 007e DB17     	 asrs r3,r3,#31
 105 0080 7B63     	 str r3,[r7,#52]
 106 0082 3B6B     	 ldr r3,[r7,#48]
 107 0084 7B65     	 str r3,[r7,#84]
  91:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store the result in 3.29 format in the destination buffer. */
  92:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 108              	 .loc 1 92 0
 109 0086 B96C     	 ldr r1,[r7,#72]
 110 0088 0B1D     	 adds r3,r1,#4
 111 008a BB64     	 str r3,[r7,#72]
 112 008c BA6D     	 ldr r2,[r7,#88]
 113 008e 7B6D     	 ldr r3,[r7,#84]
 114 0090 1344     	 add r3,r3,r2
 115 0092 0B60     	 str r3,[r1]
  93:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
  94:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 116              	 .loc 1 94 0
 117 0094 FA6C     	 ldr r2,[r7,#76]
 118 0096 131D     	 adds r3,r2,#4
 119 0098 FB64     	 str r3,[r7,#76]
 120 009a 1368     	 ldr r3,[r2]
 121 009c 3B66     	 str r3,[r7,#96]
  95:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 122              	 .loc 1 95 0
 123 009e FA6C     	 ldr r2,[r7,#76]
 124 00a0 131D     	 adds r3,r2,#4
 125 00a2 FB64     	 str r3,[r7,#76]
 126 00a4 1368     	 ldr r3,[r2]
 127 00a6 FB65     	 str r3,[r7,#92]
  96:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 128              	 .loc 1 96 0
 129 00a8 3B6E     	 ldr r3,[r7,#96]
 130 00aa 1846     	 mov r0,r3
 131 00ac 4FEAE071 	 asr r1,r0,#31
 132 00b0 3B6E     	 ldr r3,[r7,#96]
 133 00b2 1A46     	 mov r2,r3
 134 00b4 4FEAE273 	 asr r3,r2,#31
 135 00b8 02FB01F5 	 mul r5,r2,r1
 136 00bc 00FB03F4 	 mul r4,r0,r3
 137 00c0 2C44     	 add r4,r4,r5
 138 00c2 A0FB0223 	 umull r2,r3,r0,r2
 139 00c6 E118     	 adds r1,r4,r3
 140 00c8 0B46     	 mov r3,r1
 141 00ca 5910     	 asrs r1,r3,#1
 142 00cc B962     	 str r1,[r7,#40]
 143 00ce DB17     	 asrs r3,r3,#31
 144 00d0 FB62     	 str r3,[r7,#44]
 145 00d2 BB6A     	 ldr r3,[r7,#40]
 146 00d4 BB65     	 str r3,[r7,#88]
  97:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 147              	 .loc 1 97 0
 148 00d6 FB6D     	 ldr r3,[r7,#92]
 149 00d8 1846     	 mov r0,r3
 150 00da 4FEAE071 	 asr r1,r0,#31
 151 00de FB6D     	 ldr r3,[r7,#92]
 152 00e0 1A46     	 mov r2,r3
 153 00e2 4FEAE273 	 asr r3,r2,#31
 154 00e6 02FB01F5 	 mul r5,r2,r1
 155 00ea 00FB03F4 	 mul r4,r0,r3
 156 00ee 2C44     	 add r4,r4,r5
 157 00f0 A0FB0223 	 umull r2,r3,r0,r2
 158 00f4 E118     	 adds r1,r4,r3
 159 00f6 0B46     	 mov r3,r1
 160 00f8 5910     	 asrs r1,r3,#1
 161 00fa 3962     	 str r1,[r7,#32]
 162 00fc DB17     	 asrs r3,r3,#31
 163 00fe 7B62     	 str r3,[r7,#36]
 164 0100 3B6A     	 ldr r3,[r7,#32]
 165 0102 7B65     	 str r3,[r7,#84]
  98:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store the result in 3.29 format in the destination buffer. */
  99:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 166              	 .loc 1 99 0
 167 0104 B96C     	 ldr r1,[r7,#72]
 168 0106 0B1D     	 adds r3,r1,#4
 169 0108 BB64     	 str r3,[r7,#72]
 170 010a BA6D     	 ldr r2,[r7,#88]
 171 010c 7B6D     	 ldr r3,[r7,#84]
 172 010e 1344     	 add r3,r3,r2
 173 0110 0B60     	 str r3,[r1]
 100:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 101:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 174              	 .loc 1 101 0
 175 0112 FA6C     	 ldr r2,[r7,#76]
 176 0114 131D     	 adds r3,r2,#4
 177 0116 FB64     	 str r3,[r7,#76]
 178 0118 1368     	 ldr r3,[r2]
 179 011a 3B66     	 str r3,[r7,#96]
 102:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 180              	 .loc 1 102 0
 181 011c FA6C     	 ldr r2,[r7,#76]
 182 011e 131D     	 adds r3,r2,#4
 183 0120 FB64     	 str r3,[r7,#76]
 184 0122 1368     	 ldr r3,[r2]
 185 0124 FB65     	 str r3,[r7,#92]
 103:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 186              	 .loc 1 103 0
 187 0126 3B6E     	 ldr r3,[r7,#96]
 188 0128 1846     	 mov r0,r3
 189 012a 4FEAE071 	 asr r1,r0,#31
 190 012e 3B6E     	 ldr r3,[r7,#96]
 191 0130 1A46     	 mov r2,r3
 192 0132 4FEAE273 	 asr r3,r2,#31
 193 0136 02FB01F5 	 mul r5,r2,r1
 194 013a 00FB03F4 	 mul r4,r0,r3
 195 013e 2C44     	 add r4,r4,r5
 196 0140 A0FB0223 	 umull r2,r3,r0,r2
 197 0144 E118     	 adds r1,r4,r3
 198 0146 0B46     	 mov r3,r1
 199 0148 5910     	 asrs r1,r3,#1
 200 014a B961     	 str r1,[r7,#24]
 201 014c DB17     	 asrs r3,r3,#31
 202 014e FB61     	 str r3,[r7,#28]
 203 0150 BB69     	 ldr r3,[r7,#24]
 204 0152 BB65     	 str r3,[r7,#88]
 104:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 205              	 .loc 1 104 0
 206 0154 FB6D     	 ldr r3,[r7,#92]
 207 0156 1846     	 mov r0,r3
 208 0158 4FEAE071 	 asr r1,r0,#31
 209 015c FB6D     	 ldr r3,[r7,#92]
 210 015e 1A46     	 mov r2,r3
 211 0160 4FEAE273 	 asr r3,r2,#31
 212 0164 02FB01F5 	 mul r5,r2,r1
 213 0168 00FB03F4 	 mul r4,r0,r3
 214 016c 2C44     	 add r4,r4,r5
 215 016e A0FB0223 	 umull r2,r3,r0,r2
 216 0172 E118     	 adds r1,r4,r3
 217 0174 0B46     	 mov r3,r1
 218 0176 5910     	 asrs r1,r3,#1
 219 0178 3961     	 str r1,[r7,#16]
 220 017a DB17     	 asrs r3,r3,#31
 221 017c 7B61     	 str r3,[r7,#20]
 222 017e 3B69     	 ldr r3,[r7,#16]
 223 0180 7B65     	 str r3,[r7,#84]
 105:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store the result in 3.29 format in the destination buffer. */
 106:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 224              	 .loc 1 106 0
 225 0182 B96C     	 ldr r1,[r7,#72]
 226 0184 0B1D     	 adds r3,r1,#4
 227 0186 BB64     	 str r3,[r7,#72]
 228 0188 BA6D     	 ldr r2,[r7,#88]
 229 018a 7B6D     	 ldr r3,[r7,#84]
 230 018c 1344     	 add r3,r3,r2
 231 018e 0B60     	 str r3,[r1]
 107:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 108:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 232              	 .loc 1 108 0
 233 0190 FA6C     	 ldr r2,[r7,#76]
 234 0192 131D     	 adds r3,r2,#4
 235 0194 FB64     	 str r3,[r7,#76]
 236 0196 1368     	 ldr r3,[r2]
 237 0198 3B66     	 str r3,[r7,#96]
 109:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 238              	 .loc 1 109 0
 239 019a FA6C     	 ldr r2,[r7,#76]
 240 019c 131D     	 adds r3,r2,#4
 241 019e FB64     	 str r3,[r7,#76]
 242 01a0 1368     	 ldr r3,[r2]
 243 01a2 FB65     	 str r3,[r7,#92]
 110:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 244              	 .loc 1 110 0
 245 01a4 3B6E     	 ldr r3,[r7,#96]
 246 01a6 1846     	 mov r0,r3
 247 01a8 4FEAE071 	 asr r1,r0,#31
 248 01ac 3B6E     	 ldr r3,[r7,#96]
 249 01ae 1A46     	 mov r2,r3
 250 01b0 4FEAE273 	 asr r3,r2,#31
 251 01b4 02FB01F5 	 mul r5,r2,r1
 252 01b8 00FB03F4 	 mul r4,r0,r3
 253 01bc 2C44     	 add r4,r4,r5
 254 01be A0FB0223 	 umull r2,r3,r0,r2
 255 01c2 E118     	 adds r1,r4,r3
 256 01c4 0B46     	 mov r3,r1
 257 01c6 5910     	 asrs r1,r3,#1
 258 01c8 B960     	 str r1,[r7,#8]
 259 01ca DB17     	 asrs r3,r3,#31
 260 01cc FB60     	 str r3,[r7,#12]
 261 01ce BB68     	 ldr r3,[r7,#8]
 262 01d0 BB65     	 str r3,[r7,#88]
 111:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 263              	 .loc 1 111 0
 264 01d2 FB6D     	 ldr r3,[r7,#92]
 265 01d4 1846     	 mov r0,r3
 266 01d6 4FEAE071 	 asr r1,r0,#31
 267 01da FB6D     	 ldr r3,[r7,#92]
 268 01dc 1A46     	 mov r2,r3
 269 01de 4FEAE273 	 asr r3,r2,#31
 270 01e2 02FB01F5 	 mul r5,r2,r1
 271 01e6 00FB03F4 	 mul r4,r0,r3
 272 01ea 2C44     	 add r4,r4,r5
 273 01ec A0FB0223 	 umull r2,r3,r0,r2
 274 01f0 E118     	 adds r1,r4,r3
 275 01f2 0B46     	 mov r3,r1
 276 01f4 5910     	 asrs r1,r3,#1
 277 01f6 3960     	 str r1,[r7]
 278 01f8 DB17     	 asrs r3,r3,#31
 279 01fa 7B60     	 str r3,[r7,#4]
 280 01fc 3B68     	 ldr r3,[r7]
 281 01fe 7B65     	 str r3,[r7,#84]
 112:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store the result in 3.29 format in the destination buffer. */
 113:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 282              	 .loc 1 113 0
 283 0200 B96C     	 ldr r1,[r7,#72]
 284 0202 0B1D     	 adds r3,r1,#4
 285 0204 BB64     	 str r3,[r7,#72]
 286 0206 BA6D     	 ldr r2,[r7,#88]
 287 0208 7B6D     	 ldr r3,[r7,#84]
 288 020a 1344     	 add r3,r3,r2
 289 020c 0B60     	 str r3,[r1]
 114:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 115:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* Decrement the loop counter */
 116:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     blkCnt--;
 290              	 .loc 1 116 0
 291 020e 7B6E     	 ldr r3,[r7,#100]
 292 0210 013B     	 subs r3,r3,#1
 293 0212 7B66     	 str r3,[r7,#100]
 294              	.L2:
  84:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
 295              	 .loc 1 84 0
 296 0214 7B6E     	 ldr r3,[r7,#100]
 297 0216 002B     	 cmp r3,#0
 298 0218 7FF4FDAE 	 bne .L3
 117:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   }
 118:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 119:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
 120:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****    ** No loop unrolling is used. */
 121:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   blkCnt = numSamples % 0x4u;
 299              	 .loc 1 121 0
 300 021c 7B6C     	 ldr r3,[r7,#68]
 301 021e 03F00303 	 and r3,r3,#3
 302 0222 7B66     	 str r3,[r7,#100]
 122:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   while(blkCnt > 0u)
 303              	 .loc 1 123 0
 304 0224 41E0     	 b .L4
 305              	.L5:
 124:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
 125:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* C[0] = (A[0] * A[0] + A[1] * A[1]) */
 126:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 306              	 .loc 1 126 0
 307 0226 FB6C     	 ldr r3,[r7,#76]
 308 0228 1A1D     	 adds r2,r3,#4
 309 022a FA64     	 str r2,[r7,#76]
 310 022c 1B68     	 ldr r3,[r3]
 311 022e 3B66     	 str r3,[r7,#96]
 127:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 312              	 .loc 1 127 0
 313 0230 FB6C     	 ldr r3,[r7,#76]
 314 0232 1A1D     	 adds r2,r3,#4
 315 0234 FA64     	 str r2,[r7,#76]
 316 0236 1B68     	 ldr r3,[r3]
 317 0238 FB65     	 str r3,[r7,#92]
 128:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 318              	 .loc 1 128 0
 319 023a 3B6E     	 ldr r3,[r7,#96]
 320 023c 1846     	 mov r0,r3
 321 023e 4FEAE071 	 asr r1,r0,#31
 322 0242 3B6E     	 ldr r3,[r7,#96]
 323 0244 1A46     	 mov r2,r3
 324 0246 4FEAE273 	 asr r3,r2,#31
 325 024a 02FB01F5 	 mul r5,r2,r1
 326 024e 00FB03F4 	 mul r4,r0,r3
 327 0252 2C44     	 add r4,r4,r5
 328 0254 A0FB0223 	 umull r2,r3,r0,r2
 329 0258 E118     	 adds r1,r4,r3
 330 025a 0B46     	 mov r3,r1
 331 025c 4FEA6308 	 asr r8,r3,#1
 332 0260 4FEAE379 	 asr r9,r3,#31
 333 0264 4346     	 mov r3,r8
 334 0266 BB65     	 str r3,[r7,#88]
 129:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 335              	 .loc 1 129 0
 336 0268 FB6D     	 ldr r3,[r7,#92]
 337 026a 1846     	 mov r0,r3
 338 026c 4FEAE071 	 asr r1,r0,#31
 339 0270 FB6D     	 ldr r3,[r7,#92]
 340 0272 1A46     	 mov r2,r3
 341 0274 4FEAE273 	 asr r3,r2,#31
 342 0278 02FB01F5 	 mul r5,r2,r1
 343 027c 00FB03F4 	 mul r4,r0,r3
 344 0280 2C44     	 add r4,r4,r5
 345 0282 A0FB0223 	 umull r2,r3,r0,r2
 346 0286 E118     	 adds r1,r4,r3
 347 0288 0B46     	 mov r3,r1
 348 028a 4FEA630A 	 asr r10,r3,#1
 349 028e 4FEAE37B 	 asr fp,r3,#31
 350 0292 5346     	 mov r3,r10
 351 0294 7B65     	 str r3,[r7,#84]
 130:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store the result in 3.29 format in the destination buffer. */
 131:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 352              	 .loc 1 131 0
 353 0296 BB6C     	 ldr r3,[r7,#72]
 354 0298 1A1D     	 adds r2,r3,#4
 355 029a BA64     	 str r2,[r7,#72]
 356 029c B96D     	 ldr r1,[r7,#88]
 357 029e 7A6D     	 ldr r2,[r7,#84]
 358 02a0 0A44     	 add r2,r2,r1
 359 02a2 1A60     	 str r2,[r3]
 132:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 133:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* Decrement the loop counter */
 134:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     blkCnt--;
 360              	 .loc 1 134 0
 361 02a4 7B6E     	 ldr r3,[r7,#100]
 362 02a6 013B     	 subs r3,r3,#1
 363 02a8 7B66     	 str r3,[r7,#100]
 364              	.L4:
 123:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
 365              	 .loc 1 123 0
 366 02aa 7B6E     	 ldr r3,[r7,#100]
 367 02ac 002B     	 cmp r3,#0
 368 02ae BAD1     	 bne .L5
 135:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   }
 136:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 137:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #else
 138:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 139:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   /* Run the below code for Cortex-M0 */
 140:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 141:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   while(numSamples > 0u)
 142:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   {
 143:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* out = ((real * real) + (imag * imag)) */
 144:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     real = *pSrc++;
 145:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     imag = *pSrc++;
 146:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc0 = (q31_t) (((q63_t) real * real) >> 33);
 147:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     acc1 = (q31_t) (((q63_t) imag * imag) >> 33);
 148:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* store the result in 3.29 format in the destination buffer. */
 149:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     *pDst++ = acc0 + acc1;
 150:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 151:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     /* Decrement the loop counter */
 152:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****     numSamples--;
 153:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c ****   }
 154:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 155:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** #endif /* #ifndef ARM_MATH_CM0_FAMILY */
 156:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** 
 157:../Dave/Generated/CMSIS_DSP/ComplexMathFunctions/arm_cmplx_mag_squared_q31.c **** }
 369              	 .loc 1 157 0
 370 02b0 6C37     	 adds r7,r7,#108
 371              	.LCFI3:
 372              	 .cfi_def_cfa_offset 28
 373 02b2 BD46     	 mov sp,r7
 374              	.LCFI4:
 375              	 .cfi_def_cfa_register 13
 376              	 
 377 02b4 BDE8B00F 	 pop {r4,r5,r7,r8,r9,r10,fp}
 378              	.LCFI5:
 379              	 .cfi_restore 11
 380              	 .cfi_restore 10
 381              	 .cfi_restore 9
 382              	 .cfi_restore 8
 383              	 .cfi_restore 7
 384              	 .cfi_restore 5
 385              	 .cfi_restore 4
 386              	 .cfi_def_cfa_offset 0
 387 02b8 7047     	 bx lr
 388              	 .cfi_endproc
 389              	.LFE139:
 391 02ba 00BF     	 .text
 392              	.Letext0:
 393              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 394              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 395              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_cmplx_mag_squared_q31.c
    {standard input}:19     .text.arm_cmplx_mag_squared_q31:00000000 $t
    {standard input}:24     .text.arm_cmplx_mag_squared_q31:00000000 arm_cmplx_mag_squared_q31
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
