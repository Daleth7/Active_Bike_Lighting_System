   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .fpu softvfp
   4              	 .eabi_attribute 20,1
   5              	 .eabi_attribute 21,1
   6              	 .eabi_attribute 23,3
   7              	 .eabi_attribute 24,1
   8              	 .eabi_attribute 25,1
   9              	 .eabi_attribute 26,1
  10              	 .eabi_attribute 30,6
  11              	 .eabi_attribute 34,1
  12              	 .eabi_attribute 18,4
  13              	 .thumb
  14              	 .file "arm_lms_f32.c"
  15              	 .text
  16              	.Ltext0:
  17              	 .cfi_sections .debug_frame
  18              	 .global __aeabi_fmul
  19              	 .global __aeabi_fadd
  20              	 .global __aeabi_fsub
  21              	 .section .text.arm_lms_f32,"ax",%progbits
  22              	 .align 2
  23              	 .global arm_lms_f32
  24              	 .thumb
  25              	 .thumb_func
  27              	arm_lms_f32:
  28              	.LFB139:
  29              	 .file 1 "../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c"
   1:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /* ----------------------------------------------------------------------    
   2:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * Copyright (C) 2010-2014 ARM Limited. All rights reserved.    
   3:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *    
   4:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * $Date:        12. March 2014
   5:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * $Revision: 	V1.4.4
   6:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *    
   7:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * Project: 	    CMSIS DSP Library    
   8:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * Title:	    arm_lms_f32.c    
   9:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *    
  10:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * Description:	Processing function for the floating-point LMS filter.    
  11:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *    
  12:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * Target Processor: Cortex-M4/Cortex-M3/Cortex-M0
  13:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *  
  14:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * Redistribution and use in source and binary forms, with or without 
  15:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * modification, are permitted provided that the following conditions
  16:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * are met:
  17:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *   - Redistributions of source code must retain the above copyright
  18:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *     notice, this list of conditions and the following disclaimer.
  19:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *   - Redistributions in binary form must reproduce the above copyright
  20:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *     notice, this list of conditions and the following disclaimer in
  21:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *     the documentation and/or other materials provided with the 
  22:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *     distribution.
  23:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *   - Neither the name of ARM LIMITED nor the names of its contributors
  24:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *     may be used to endorse or promote products derived from this
  25:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *     software without specific prior written permission.
  26:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** *
  27:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
  28:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
  29:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
  30:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE 
  31:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  32:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
  33:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  34:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  35:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  36:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
  37:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  38:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * POSSIBILITY OF SUCH DAMAGE.    
  39:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** * -------------------------------------------------------------------- */
  40:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
  41:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #include "CMSIS_DSP/cmsis_dsp.h"
  42:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
  43:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**    
  44:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @ingroup groupFilters    
  45:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
  46:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
  47:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**    
  48:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @defgroup LMS Least Mean Square (LMS) Filters    
  49:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
  50:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * LMS filters are a class of adaptive filters that are able to "learn" an unknown transfer functio
  51:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * LMS filters use a gradient descent method in which the filter coefficients are updated based on 
  52:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Adaptive filters are often used in communication systems, equalizers, and noise removal.    
  53:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The CMSIS DSP Library contains LMS filter functions that operate on Q15, Q31, and floating-point
  54:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The library also contains normalized LMS filters in which the filter coefficient adaptation is i
  55:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
  56:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * An LMS filter consists of two components as shown below.    
  57:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The first component is a standard transversal or FIR filter.    
  58:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The second component is a coefficient update mechanism.    
  59:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The LMS filter has two input signals.    
  60:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The "input" feeds the FIR filter while the "reference input" corresponds to the desired output o
  61:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * That is, the FIR filter coefficients are updated so that the output of the FIR filter matches th
  62:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The filter coefficient update mechanism is based on the difference between the FIR filter output
  63:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * This "error signal" tends towards zero as the filter adapts.    
  64:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The LMS processing functions accept the input and reference input signals and generate the filte
  65:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \image html LMS.gif "Internal structure of the Least Mean Square filter"    
  66:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
  67:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The functions operate on blocks of data and each call to the function processes    
  68:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>blockSize</code> samples through the filter.    
  69:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pSrc</code> points to input signal, <code>pRef</code> points to reference signal,    
  70:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pOut</code> points to output signal and <code>pErr</code> points to error signal.    
  71:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * All arrays contain <code>blockSize</code> values.    
  72:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
  73:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The functions operate on a block-by-block basis.    
  74:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Internally, the filter coefficients <code>b[n]</code> are updated on a sample-by-sample basis.  
  75:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The convergence of the LMS filter is slower compared to the normalized LMS algorithm.    
  76:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
  77:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Algorithm:    
  78:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The output signal <code>y[n]</code> is computed by a standard FIR filter:    
  79:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>    
  80:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *     y[n] = b[0] * x[n] + b[1] * x[n-1] + b[2] * x[n-2] + ...+ b[numTaps-1] * x[n-numTaps+1]    
  81:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>    
  82:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
  83:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par    
  84:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The error signal equals the difference between the reference signal <code>d[n]</code> and the fi
  85:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>    
  86:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *     e[n] = d[n] - y[n].    
  87:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>    
  88:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
  89:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par    
  90:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * After each sample of the error signal is computed, the filter coefficients <code>b[k]</code> are
  91:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>    
  92:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *     b[k] = b[k] + e[n] * mu * x[n-k],  for k=0, 1, ..., numTaps-1    
  93:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>    
  94:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * where <code>mu</code> is the step size and controls the rate of coefficient convergence.    
  95:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *\par    
  96:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * In the APIs, <code>pCoeffs</code> points to a coefficient array of size <code>numTaps</code>.   
  97:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Coefficients are stored in time reversed order.    
  98:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par    
  99:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>    
 100:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    {b[numTaps-1], b[numTaps-2], b[N-2], ..., b[1], b[0]}    
 101:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>    
 102:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par    
 103:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pState</code> points to a state array of size <code>numTaps + blockSize - 1</code>.    
 104:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Samples in the state buffer are stored in the order:    
 105:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par    
 106:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>    
 107:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    {x[n-numTaps+1], x[n-numTaps], x[n-numTaps-1], x[n-numTaps-2]....x[0], x[1], ..., x[blockSize
 108:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>    
 109:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par    
 110:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Note that the length of the state buffer exceeds the length of the coefficient array by <code>bl
 111:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The increased state buffer length allows circular addressing, which is traditionally used in FIR
 112:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * to be avoided and yields a significant speed improvement.    
 113:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The state variables are updated after each block of data is processed.    
 114:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Instance Structure    
 115:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The coefficients and state variables for a filter are stored together in an instance data struct
 116:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * A separate instance structure must be defined for each filter and    
 117:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * coefficient and state arrays cannot be shared among instances.    
 118:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * There are separate instance structure declarations for each of the 3 supported data types.    
 119:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
 120:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Initialization Functions    
 121:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * There is also an associated initialization function for each data type.    
 122:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The initialization function performs the following operations:    
 123:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Sets the values of the internal structure fields.    
 124:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Zeros out the values in the state buffer.    
 125:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * To do this manually without calling the init function, assign the follow subfields of the instan
 126:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * numTaps, pCoeffs, mu, postShift (not for f32), pState. Also set all of the values in pState to z
 127:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *
 128:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par    
 129:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Use of the initialization function is optional.    
 130:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * However, if the initialization function is used, then the instance structure cannot be placed in
 131:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * To place an instance structure into a const data section, the instance structure must be manuall
 132:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Set the values in the state buffer to zeros before static initialization.    
 133:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The code below statically initializes each of the 3 different data type filter instance structur
 134:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <pre>    
 135:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_f32 S = {numTaps, pState, pCoeffs, mu};    
 136:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_q31 S = {numTaps, pState, pCoeffs, mu, postShift};    
 137:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    arm_lms_instance_q15 S = {numTaps, pState, pCoeffs, mu, postShift};    
 138:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * </pre>    
 139:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * where <code>numTaps</code> is the number of filter coefficients in the filter; <code>pState</cod
 140:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * <code>pCoeffs</code> is the address of the coefficient buffer; <code>mu</code> is the step size 
 141:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
 142:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Fixed-Point Behavior:    
 143:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Care must be taken when using the Q15 and Q31 versions of the LMS filter.    
 144:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The following issues must be considered:    
 145:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Scaling of coefficients    
 146:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * - Overflow and saturation    
 147:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
 148:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Scaling of Coefficients:    
 149:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Filter coefficients are represented as fractional values and    
 150:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * coefficients are restricted to lie in the range <code>[-1 +1)</code>.    
 151:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The fixed-point functions have an additional scaling parameter <code>postShift</code>.    
 152:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * At the output of the filter's accumulator is a shift register which shifts the result by <code>p
 153:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * This essentially scales the filter coefficients by <code>2^postShift</code> and    
 154:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * allows the filter coefficients to exceed the range <code>[+1 -1)</code>.    
 155:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * The value of <code>postShift</code> is set by the user based on the expected gain through the sy
 156:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
 157:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * \par Overflow and Saturation:    
 158:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * Overflow and saturation behavior of the fixed-point Q15 and Q31 versions are    
 159:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * described separately as part of the function specific documentation below.    
 160:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
 161:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 162:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**    
 163:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @addtogroup LMS    
 164:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @{    
 165:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
 166:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 167:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** /**           
 168:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @details           
 169:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * This function operates on floating-point data types.       
 170:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  *    
 171:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @brief Processing function for floating-point LMS filter.    
 172:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *S points to an instance of the floating-point LMS filter structure.    
 173:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *pSrc points to the block of input data.    
 174:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  *pRef points to the block of reference data.    
 175:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[out] *pOut points to the block of output data.    
 176:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[out] *pErr points to the block of error data.    
 177:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @param[in]  blockSize number of samples to process.    
 178:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  * @return     none.    
 179:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****  */
 180:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 181:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** void arm_lms_f32(
 182:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   const arm_lms_instance_f32 * S,
 183:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pSrc,
 184:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pRef,
 185:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pOut,
 186:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t * pErr,
 187:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t blockSize)
 188:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** {
  30              	 .loc 1 188 0
  31              	 .cfi_startproc
  32              	 
  33              	 
  34 0000 90B5     	 push {r4,r7,lr}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 12
  37              	 .cfi_offset 4,-12
  38              	 .cfi_offset 7,-8
  39              	 .cfi_offset 14,-4
  40 0002 93B0     	 sub sp,sp,#76
  41              	.LCFI1:
  42              	 .cfi_def_cfa_offset 88
  43 0004 00AF     	 add r7,sp,#0
  44              	.LCFI2:
  45              	 .cfi_def_cfa_register 7
  46 0006 F860     	 str r0,[r7,#12]
  47 0008 B960     	 str r1,[r7,#8]
  48 000a 7A60     	 str r2,[r7,#4]
  49 000c 3B60     	 str r3,[r7]
 189:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pState = S->pState;                 /* State pointer */
  50              	 .loc 1 189 0
  51 000e FB68     	 ldr r3,[r7,#12]
  52 0010 5B68     	 ldr r3,[r3,#4]
  53 0012 7B64     	 str r3,[r7,#68]
 190:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
  54              	 .loc 1 190 0
  55 0014 FB68     	 ldr r3,[r7,#12]
  56 0016 9B68     	 ldr r3,[r3,#8]
  57 0018 BB62     	 str r3,[r7,#40]
 191:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *pStateCurnt;                        /* Points to the current sample of the state */
 192:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t *px, *pb;                            /* Temporary pointers for state and coefficient bu
 193:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t mu = S->mu;                          /* Adaptive factor */
  58              	 .loc 1 193 0
  59 001a FB68     	 ldr r3,[r7,#12]
  60 001c DB68     	 ldr r3,[r3,#12]
  61 001e 7B62     	 str r3,[r7,#36]
 194:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
  62              	 .loc 1 194 0
  63 0020 FB68     	 ldr r3,[r7,#12]
  64 0022 1B88     	 ldrh r3,[r3]
  65 0024 3B62     	 str r3,[r7,#32]
 195:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   uint32_t tapCnt, blkCnt;                       /* Loop counters */
 196:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t sum, e, d;                           /* accumulator, error, reference data sample */
 197:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   float32_t w = 0.0f;                            /* weight factor */
  66              	 .loc 1 197 0
  67 0026 4FF00003 	 mov r3,#0
  68 002a FB61     	 str r3,[r7,#28]
 198:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 199:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   e = 0.0f;
  69              	 .loc 1 199 0
  70 002c 4FF00003 	 mov r3,#0
  71 0030 BB61     	 str r3,[r7,#24]
 200:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   d = 0.0f;
  72              	 .loc 1 200 0
  73 0032 4FF00003 	 mov r3,#0
  74 0036 7B61     	 str r3,[r7,#20]
 201:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 202:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* S->pState points to state array which contains previous frame (numTaps - 1) samples */
 203:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* pStateCurnt points to the location where the new input data should be written */
 204:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = &(S->pState[(numTaps - 1u)]);
  75              	 .loc 1 204 0
  76 0038 FB68     	 ldr r3,[r7,#12]
  77 003a 5A68     	 ldr r2,[r3,#4]
  78 003c 3B6A     	 ldr r3,[r7,#32]
  79 003e 03F18043 	 add r3,r3,#1073741824
  80 0042 013B     	 subs r3,r3,#1
  81 0044 9B00     	 lsls r3,r3,#2
  82 0046 1344     	 add r3,r3,r2
  83 0048 3B64     	 str r3,[r7,#64]
 205:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 206:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   blkCnt = blockSize;
  84              	 .loc 1 206 0
  85 004a FB6D     	 ldr r3,[r7,#92]
  86 004c 3B63     	 str r3,[r7,#48]
 207:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 208:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 209:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #ifndef ARM_MATH_CM0_FAMILY
 210:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 211:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Run the below code for Cortex-M4 and Cortex-M3 */
 212:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 213:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while(blkCnt > 0u)
  87              	 .loc 1 213 0
  88 004e 2AE1     	 b .L2
  89              	.L11:
 214:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 215:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 216:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
  90              	 .loc 1 216 0
  91 0050 3B6C     	 ldr r3,[r7,#64]
  92 0052 1A1D     	 adds r2,r3,#4
  93 0054 3A64     	 str r2,[r7,#64]
  94 0056 BA68     	 ldr r2,[r7,#8]
  95 0058 111D     	 adds r1,r2,#4
  96 005a B960     	 str r1,[r7,#8]
  97 005c 1268     	 ldr r2,[r2]
  98 005e 1A60     	 str r2,[r3]
 217:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 218:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 219:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
  99              	 .loc 1 219 0
 100 0060 7B6C     	 ldr r3,[r7,#68]
 101 0062 FB63     	 str r3,[r7,#60]
 220:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 221:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 222:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 102              	 .loc 1 222 0
 103 0064 BB6A     	 ldr r3,[r7,#40]
 104 0066 BB63     	 str r3,[r7,#56]
 223:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 224:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 225:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     sum = 0.0f;
 105              	 .loc 1 225 0
 106 0068 4FF00003 	 mov r3,#0
 107 006c FB62     	 str r3,[r7,#44]
 226:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 227:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 228:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 108              	 .loc 1 228 0
 109 006e 3B6A     	 ldr r3,[r7,#32]
 110 0070 9B08     	 lsrs r3,r3,#2
 111 0072 7B63     	 str r3,[r7,#52]
 229:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while(tapCnt > 0u)
 112              	 .loc 1 230 0
 113 0074 4EE0     	 b .L3
 114              	.L4:
 231:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 232:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 233:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 115              	 .loc 1 233 0
 116 0076 FB6B     	 ldr r3,[r7,#60]
 117 0078 1A1D     	 adds r2,r3,#4
 118 007a FA63     	 str r2,[r7,#60]
 119 007c 1968     	 ldr r1,[r3]
 120 007e BB6B     	 ldr r3,[r7,#56]
 121 0080 1A1D     	 adds r2,r3,#4
 122 0082 BA63     	 str r2,[r7,#56]
 123 0084 1B68     	 ldr r3,[r3]
 124 0086 0846     	 mov r0,r1
 125 0088 1946     	 mov r1,r3
 126 008a FFF7FEFF 	 bl __aeabi_fmul
 127 008e 0346     	 mov r3,r0
 128 0090 F86A     	 ldr r0,[r7,#44]
 129 0092 1946     	 mov r1,r3
 130 0094 FFF7FEFF 	 bl __aeabi_fadd
 131 0098 0346     	 mov r3,r0
 132 009a FB62     	 str r3,[r7,#44]
 234:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 133              	 .loc 1 234 0
 134 009c FB6B     	 ldr r3,[r7,#60]
 135 009e 1A1D     	 adds r2,r3,#4
 136 00a0 FA63     	 str r2,[r7,#60]
 137 00a2 1968     	 ldr r1,[r3]
 138 00a4 BB6B     	 ldr r3,[r7,#56]
 139 00a6 1A1D     	 adds r2,r3,#4
 140 00a8 BA63     	 str r2,[r7,#56]
 141 00aa 1B68     	 ldr r3,[r3]
 142 00ac 0846     	 mov r0,r1
 143 00ae 1946     	 mov r1,r3
 144 00b0 FFF7FEFF 	 bl __aeabi_fmul
 145 00b4 0346     	 mov r3,r0
 146 00b6 F86A     	 ldr r0,[r7,#44]
 147 00b8 1946     	 mov r1,r3
 148 00ba FFF7FEFF 	 bl __aeabi_fadd
 149 00be 0346     	 mov r3,r0
 150 00c0 FB62     	 str r3,[r7,#44]
 235:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 151              	 .loc 1 235 0
 152 00c2 FB6B     	 ldr r3,[r7,#60]
 153 00c4 1A1D     	 adds r2,r3,#4
 154 00c6 FA63     	 str r2,[r7,#60]
 155 00c8 1968     	 ldr r1,[r3]
 156 00ca BB6B     	 ldr r3,[r7,#56]
 157 00cc 1A1D     	 adds r2,r3,#4
 158 00ce BA63     	 str r2,[r7,#56]
 159 00d0 1B68     	 ldr r3,[r3]
 160 00d2 0846     	 mov r0,r1
 161 00d4 1946     	 mov r1,r3
 162 00d6 FFF7FEFF 	 bl __aeabi_fmul
 163 00da 0346     	 mov r3,r0
 164 00dc F86A     	 ldr r0,[r7,#44]
 165 00de 1946     	 mov r1,r3
 166 00e0 FFF7FEFF 	 bl __aeabi_fadd
 167 00e4 0346     	 mov r3,r0
 168 00e6 FB62     	 str r3,[r7,#44]
 236:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 169              	 .loc 1 236 0
 170 00e8 FB6B     	 ldr r3,[r7,#60]
 171 00ea 1A1D     	 adds r2,r3,#4
 172 00ec FA63     	 str r2,[r7,#60]
 173 00ee 1968     	 ldr r1,[r3]
 174 00f0 BB6B     	 ldr r3,[r7,#56]
 175 00f2 1A1D     	 adds r2,r3,#4
 176 00f4 BA63     	 str r2,[r7,#56]
 177 00f6 1B68     	 ldr r3,[r3]
 178 00f8 0846     	 mov r0,r1
 179 00fa 1946     	 mov r1,r3
 180 00fc FFF7FEFF 	 bl __aeabi_fmul
 181 0100 0346     	 mov r3,r0
 182 0102 F86A     	 ldr r0,[r7,#44]
 183 0104 1946     	 mov r1,r3
 184 0106 FFF7FEFF 	 bl __aeabi_fadd
 185 010a 0346     	 mov r3,r0
 186 010c FB62     	 str r3,[r7,#44]
 237:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 238:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 239:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 187              	 .loc 1 239 0
 188 010e 7B6B     	 ldr r3,[r7,#52]
 189 0110 013B     	 subs r3,r3,#1
 190 0112 7B63     	 str r3,[r7,#52]
 191              	.L3:
 230:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 192              	 .loc 1 230 0
 193 0114 7B6B     	 ldr r3,[r7,#52]
 194 0116 002B     	 cmp r3,#0
 195 0118 ADD1     	 bne .L4
 240:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 241:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 242:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 243:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4u;
 196              	 .loc 1 243 0
 197 011a 3B6A     	 ldr r3,[r7,#32]
 198 011c 03F00303 	 and r3,r3,#3
 199 0120 7B63     	 str r3,[r7,#52]
 244:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 245:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while(tapCnt > 0u)
 200              	 .loc 1 245 0
 201 0122 15E0     	 b .L5
 202              	.L6:
 246:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 247:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 248:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 203              	 .loc 1 248 0
 204 0124 FB6B     	 ldr r3,[r7,#60]
 205 0126 1A1D     	 adds r2,r3,#4
 206 0128 FA63     	 str r2,[r7,#60]
 207 012a 1968     	 ldr r1,[r3]
 208 012c BB6B     	 ldr r3,[r7,#56]
 209 012e 1A1D     	 adds r2,r3,#4
 210 0130 BA63     	 str r2,[r7,#56]
 211 0132 1B68     	 ldr r3,[r3]
 212 0134 0846     	 mov r0,r1
 213 0136 1946     	 mov r1,r3
 214 0138 FFF7FEFF 	 bl __aeabi_fmul
 215 013c 0346     	 mov r3,r0
 216 013e F86A     	 ldr r0,[r7,#44]
 217 0140 1946     	 mov r1,r3
 218 0142 FFF7FEFF 	 bl __aeabi_fadd
 219 0146 0346     	 mov r3,r0
 220 0148 FB62     	 str r3,[r7,#44]
 249:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 250:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 251:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 221              	 .loc 1 251 0
 222 014a 7B6B     	 ldr r3,[r7,#52]
 223 014c 013B     	 subs r3,r3,#1
 224 014e 7B63     	 str r3,[r7,#52]
 225              	.L5:
 245:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 226              	 .loc 1 245 0
 227 0150 7B6B     	 ldr r3,[r7,#52]
 228 0152 002B     	 cmp r3,#0
 229 0154 E6D1     	 bne .L6
 252:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 253:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 254:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* The result in the accumulator, store in the destination buffer. */
 255:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = sum;
 230              	 .loc 1 255 0
 231 0156 3B68     	 ldr r3,[r7]
 232 0158 1A1D     	 adds r2,r3,#4
 233 015a 3A60     	 str r2,[r7]
 234 015c FA6A     	 ldr r2,[r7,#44]
 235 015e 1A60     	 str r2,[r3]
 256:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 257:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
 258:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     d = (float32_t) (*pRef++);
 236              	 .loc 1 258 0
 237 0160 7B68     	 ldr r3,[r7,#4]
 238 0162 1A1D     	 adds r2,r3,#4
 239 0164 7A60     	 str r2,[r7,#4]
 240 0166 1B68     	 ldr r3,[r3]
 241 0168 7B61     	 str r3,[r7,#20]
 259:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     e = d - sum;
 242              	 .loc 1 259 0
 243 016a 7869     	 ldr r0,[r7,#20]
 244 016c F96A     	 ldr r1,[r7,#44]
 245 016e FFF7FEFF 	 bl __aeabi_fsub
 246 0172 0346     	 mov r3,r0
 247 0174 BB61     	 str r3,[r7,#24]
 260:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 248              	 .loc 1 260 0
 249 0176 BB6D     	 ldr r3,[r7,#88]
 250 0178 1A1D     	 adds r2,r3,#4
 251 017a BA65     	 str r2,[r7,#88]
 252 017c BA69     	 ldr r2,[r7,#24]
 253 017e 1A60     	 str r2,[r3]
 261:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 262:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Calculation of Weighting factor for the updating filter coefficients */
 263:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 254              	 .loc 1 263 0
 255 0180 B869     	 ldr r0,[r7,#24]
 256 0182 796A     	 ldr r1,[r7,#36]
 257 0184 FFF7FEFF 	 bl __aeabi_fmul
 258 0188 0346     	 mov r3,r0
 259 018a FB61     	 str r3,[r7,#28]
 264:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 265:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 266:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 260              	 .loc 1 266 0
 261 018c 7B6C     	 ldr r3,[r7,#68]
 262 018e FB63     	 str r3,[r7,#60]
 267:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 268:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize coeff pointer */
 269:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = (pCoeffs);
 263              	 .loc 1 269 0
 264 0190 BB6A     	 ldr r3,[r7,#40]
 265 0192 BB63     	 str r3,[r7,#56]
 270:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 271:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop unrolling.  Process 4 taps at a time. */
 272:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps >> 2;
 266              	 .loc 1 272 0
 267 0194 3B6A     	 ldr r3,[r7,#32]
 268 0196 9B08     	 lsrs r3,r3,#2
 269 0198 7B63     	 str r3,[r7,#52]
 273:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 274:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Update filter coefficients */
 275:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while(tapCnt > 0u)
 270              	 .loc 1 275 0
 271 019a 5AE0     	 b .L7
 272              	.L8:
 276:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 277:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 278:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 273              	 .loc 1 278 0
 274 019c BB6B     	 ldr r3,[r7,#56]
 275 019e 1C68     	 ldr r4,[r3]
 276 01a0 FB6B     	 ldr r3,[r7,#60]
 277 01a2 1A1D     	 adds r2,r3,#4
 278 01a4 FA63     	 str r2,[r7,#60]
 279 01a6 1B68     	 ldr r3,[r3]
 280 01a8 1846     	 mov r0,r3
 281 01aa F969     	 ldr r1,[r7,#28]
 282 01ac FFF7FEFF 	 bl __aeabi_fmul
 283 01b0 0346     	 mov r3,r0
 284 01b2 2046     	 mov r0,r4
 285 01b4 1946     	 mov r1,r3
 286 01b6 FFF7FEFF 	 bl __aeabi_fadd
 287 01ba 0346     	 mov r3,r0
 288 01bc 1A46     	 mov r2,r3
 289 01be BB6B     	 ldr r3,[r7,#56]
 290 01c0 1A60     	 str r2,[r3]
 279:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 291              	 .loc 1 279 0
 292 01c2 BB6B     	 ldr r3,[r7,#56]
 293 01c4 0433     	 adds r3,r3,#4
 294 01c6 BB63     	 str r3,[r7,#56]
 280:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 281:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 295              	 .loc 1 281 0
 296 01c8 BB6B     	 ldr r3,[r7,#56]
 297 01ca 1C68     	 ldr r4,[r3]
 298 01cc FB6B     	 ldr r3,[r7,#60]
 299 01ce 1A1D     	 adds r2,r3,#4
 300 01d0 FA63     	 str r2,[r7,#60]
 301 01d2 1B68     	 ldr r3,[r3]
 302 01d4 1846     	 mov r0,r3
 303 01d6 F969     	 ldr r1,[r7,#28]
 304 01d8 FFF7FEFF 	 bl __aeabi_fmul
 305 01dc 0346     	 mov r3,r0
 306 01de 2046     	 mov r0,r4
 307 01e0 1946     	 mov r1,r3
 308 01e2 FFF7FEFF 	 bl __aeabi_fadd
 309 01e6 0346     	 mov r3,r0
 310 01e8 1A46     	 mov r2,r3
 311 01ea BB6B     	 ldr r3,[r7,#56]
 312 01ec 1A60     	 str r2,[r3]
 282:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 313              	 .loc 1 282 0
 314 01ee BB6B     	 ldr r3,[r7,#56]
 315 01f0 0433     	 adds r3,r3,#4
 316 01f2 BB63     	 str r3,[r7,#56]
 283:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 284:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 317              	 .loc 1 284 0
 318 01f4 BB6B     	 ldr r3,[r7,#56]
 319 01f6 1C68     	 ldr r4,[r3]
 320 01f8 FB6B     	 ldr r3,[r7,#60]
 321 01fa 1A1D     	 adds r2,r3,#4
 322 01fc FA63     	 str r2,[r7,#60]
 323 01fe 1B68     	 ldr r3,[r3]
 324 0200 1846     	 mov r0,r3
 325 0202 F969     	 ldr r1,[r7,#28]
 326 0204 FFF7FEFF 	 bl __aeabi_fmul
 327 0208 0346     	 mov r3,r0
 328 020a 2046     	 mov r0,r4
 329 020c 1946     	 mov r1,r3
 330 020e FFF7FEFF 	 bl __aeabi_fadd
 331 0212 0346     	 mov r3,r0
 332 0214 1A46     	 mov r2,r3
 333 0216 BB6B     	 ldr r3,[r7,#56]
 334 0218 1A60     	 str r2,[r3]
 285:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 335              	 .loc 1 285 0
 336 021a BB6B     	 ldr r3,[r7,#56]
 337 021c 0433     	 adds r3,r3,#4
 338 021e BB63     	 str r3,[r7,#56]
 286:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 287:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 339              	 .loc 1 287 0
 340 0220 BB6B     	 ldr r3,[r7,#56]
 341 0222 1C68     	 ldr r4,[r3]
 342 0224 FB6B     	 ldr r3,[r7,#60]
 343 0226 1A1D     	 adds r2,r3,#4
 344 0228 FA63     	 str r2,[r7,#60]
 345 022a 1B68     	 ldr r3,[r3]
 346 022c 1846     	 mov r0,r3
 347 022e F969     	 ldr r1,[r7,#28]
 348 0230 FFF7FEFF 	 bl __aeabi_fmul
 349 0234 0346     	 mov r3,r0
 350 0236 2046     	 mov r0,r4
 351 0238 1946     	 mov r1,r3
 352 023a FFF7FEFF 	 bl __aeabi_fadd
 353 023e 0346     	 mov r3,r0
 354 0240 1A46     	 mov r2,r3
 355 0242 BB6B     	 ldr r3,[r7,#56]
 356 0244 1A60     	 str r2,[r3]
 288:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 357              	 .loc 1 288 0
 358 0246 BB6B     	 ldr r3,[r7,#56]
 359 0248 0433     	 adds r3,r3,#4
 360 024a BB63     	 str r3,[r7,#56]
 289:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 290:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 291:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 361              	 .loc 1 291 0
 362 024c 7B6B     	 ldr r3,[r7,#52]
 363 024e 013B     	 subs r3,r3,#1
 364 0250 7B63     	 str r3,[r7,#52]
 365              	.L7:
 275:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 366              	 .loc 1 275 0
 367 0252 7B6B     	 ldr r3,[r7,#52]
 368 0254 002B     	 cmp r3,#0
 369 0256 A1D1     	 bne .L8
 292:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 293:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 294:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* If the filter length is not a multiple of 4, compute the remaining filter taps */
 295:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps % 0x4u;
 370              	 .loc 1 295 0
 371 0258 3B6A     	 ldr r3,[r7,#32]
 372 025a 03F00303 	 and r3,r3,#3
 373 025e 7B63     	 str r3,[r7,#52]
 296:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while(tapCnt > 0u)
 374              	 .loc 1 297 0
 375 0260 18E0     	 b .L9
 376              	.L10:
 298:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 299:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 300:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 377              	 .loc 1 300 0
 378 0262 BB6B     	 ldr r3,[r7,#56]
 379 0264 1C68     	 ldr r4,[r3]
 380 0266 FB6B     	 ldr r3,[r7,#60]
 381 0268 1A1D     	 adds r2,r3,#4
 382 026a FA63     	 str r2,[r7,#60]
 383 026c 1B68     	 ldr r3,[r3]
 384 026e 1846     	 mov r0,r3
 385 0270 F969     	 ldr r1,[r7,#28]
 386 0272 FFF7FEFF 	 bl __aeabi_fmul
 387 0276 0346     	 mov r3,r0
 388 0278 2046     	 mov r0,r4
 389 027a 1946     	 mov r1,r3
 390 027c FFF7FEFF 	 bl __aeabi_fadd
 391 0280 0346     	 mov r3,r0
 392 0282 1A46     	 mov r2,r3
 393 0284 BB6B     	 ldr r3,[r7,#56]
 394 0286 1A60     	 str r2,[r3]
 301:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 395              	 .loc 1 301 0
 396 0288 BB6B     	 ldr r3,[r7,#56]
 397 028a 0433     	 adds r3,r3,#4
 398 028c BB63     	 str r3,[r7,#56]
 302:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 303:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 304:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 399              	 .loc 1 304 0
 400 028e 7B6B     	 ldr r3,[r7,#52]
 401 0290 013B     	 subs r3,r3,#1
 402 0292 7B63     	 str r3,[r7,#52]
 403              	.L9:
 297:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 404              	 .loc 1 297 0
 405 0294 7B6B     	 ldr r3,[r7,#52]
 406 0296 002B     	 cmp r3,#0
 407 0298 E3D1     	 bne .L10
 305:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 306:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 307:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
 308:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pState = pState + 1;
 408              	 .loc 1 308 0
 409 029a 7B6C     	 ldr r3,[r7,#68]
 410 029c 0433     	 adds r3,r3,#4
 411 029e 7B64     	 str r3,[r7,#68]
 309:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 310:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 311:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 412              	 .loc 1 311 0
 413 02a0 3B6B     	 ldr r3,[r7,#48]
 414 02a2 013B     	 subs r3,r3,#1
 415 02a4 3B63     	 str r3,[r7,#48]
 416              	.L2:
 213:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 417              	 .loc 1 213 0
 418 02a6 3B6B     	 ldr r3,[r7,#48]
 419 02a8 002B     	 cmp r3,#0
 420 02aa 7FF4D1AE 	 bne .L11
 312:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 313:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 314:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 315:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the    
 316:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****      satrt of the state buffer. This prepares the state buffer for the    
 317:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****      next function call. */
 318:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 319:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 320:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 421              	 .loc 1 320 0
 422 02ae FB68     	 ldr r3,[r7,#12]
 423 02b0 5B68     	 ldr r3,[r3,#4]
 424 02b2 3B64     	 str r3,[r7,#64]
 321:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 322:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Loop unrolling for (numTaps - 1u) samples copy */
 323:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1u) >> 2u;
 425              	 .loc 1 323 0
 426 02b4 3B6A     	 ldr r3,[r7,#32]
 427 02b6 013B     	 subs r3,r3,#1
 428 02b8 9B08     	 lsrs r3,r3,#2
 429 02ba 7B63     	 str r3,[r7,#52]
 324:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 325:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* copy data */
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while(tapCnt > 0u)
 430              	 .loc 1 326 0
 431 02bc 22E0     	 b .L12
 432              	.L13:
 327:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 328:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 433              	 .loc 1 328 0
 434 02be 3B6C     	 ldr r3,[r7,#64]
 435 02c0 1A1D     	 adds r2,r3,#4
 436 02c2 3A64     	 str r2,[r7,#64]
 437 02c4 7A6C     	 ldr r2,[r7,#68]
 438 02c6 111D     	 adds r1,r2,#4
 439 02c8 7964     	 str r1,[r7,#68]
 440 02ca 1268     	 ldr r2,[r2]
 441 02cc 1A60     	 str r2,[r3]
 329:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 442              	 .loc 1 329 0
 443 02ce 3B6C     	 ldr r3,[r7,#64]
 444 02d0 1A1D     	 adds r2,r3,#4
 445 02d2 3A64     	 str r2,[r7,#64]
 446 02d4 7A6C     	 ldr r2,[r7,#68]
 447 02d6 111D     	 adds r1,r2,#4
 448 02d8 7964     	 str r1,[r7,#68]
 449 02da 1268     	 ldr r2,[r2]
 450 02dc 1A60     	 str r2,[r3]
 330:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 451              	 .loc 1 330 0
 452 02de 3B6C     	 ldr r3,[r7,#64]
 453 02e0 1A1D     	 adds r2,r3,#4
 454 02e2 3A64     	 str r2,[r7,#64]
 455 02e4 7A6C     	 ldr r2,[r7,#68]
 456 02e6 111D     	 adds r1,r2,#4
 457 02e8 7964     	 str r1,[r7,#68]
 458 02ea 1268     	 ldr r2,[r2]
 459 02ec 1A60     	 str r2,[r3]
 331:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 460              	 .loc 1 331 0
 461 02ee 3B6C     	 ldr r3,[r7,#64]
 462 02f0 1A1D     	 adds r2,r3,#4
 463 02f2 3A64     	 str r2,[r7,#64]
 464 02f4 7A6C     	 ldr r2,[r7,#68]
 465 02f6 111D     	 adds r1,r2,#4
 466 02f8 7964     	 str r1,[r7,#68]
 467 02fa 1268     	 ldr r2,[r2]
 468 02fc 1A60     	 str r2,[r3]
 332:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 333:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 334:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 469              	 .loc 1 334 0
 470 02fe 7B6B     	 ldr r3,[r7,#52]
 471 0300 013B     	 subs r3,r3,#1
 472 0302 7B63     	 str r3,[r7,#52]
 473              	.L12:
 326:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 474              	 .loc 1 326 0
 475 0304 7B6B     	 ldr r3,[r7,#52]
 476 0306 002B     	 cmp r3,#0
 477 0308 D9D1     	 bne .L13
 335:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 336:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 337:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Calculate remaining number of copies */
 338:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1u) % 0x4u;
 478              	 .loc 1 338 0
 479 030a 3B6A     	 ldr r3,[r7,#32]
 480 030c 013B     	 subs r3,r3,#1
 481 030e 03F00303 	 and r3,r3,#3
 482 0312 7B63     	 str r3,[r7,#52]
 339:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 340:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Copy the remaining q31_t data */
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while(tapCnt > 0u)
 483              	 .loc 1 341 0
 484 0314 0AE0     	 b .L14
 485              	.L15:
 342:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 343:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 486              	 .loc 1 343 0
 487 0316 3B6C     	 ldr r3,[r7,#64]
 488 0318 1A1D     	 adds r2,r3,#4
 489 031a 3A64     	 str r2,[r7,#64]
 490 031c 7A6C     	 ldr r2,[r7,#68]
 491 031e 111D     	 adds r1,r2,#4
 492 0320 7964     	 str r1,[r7,#68]
 493 0322 1268     	 ldr r2,[r2]
 494 0324 1A60     	 str r2,[r3]
 344:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 345:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 346:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 495              	 .loc 1 346 0
 496 0326 7B6B     	 ldr r3,[r7,#52]
 497 0328 013B     	 subs r3,r3,#1
 498 032a 7B63     	 str r3,[r7,#52]
 499              	.L14:
 341:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 500              	 .loc 1 341 0
 501 032c 7B6B     	 ldr r3,[r7,#52]
 502 032e 002B     	 cmp r3,#0
 503 0330 F1D1     	 bne .L15
 347:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 348:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 349:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #else
 350:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 351:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Run the below code for Cortex-M0 */
 352:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 353:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while(blkCnt > 0u)
 354:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 355:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Copy the new input sample into the state buffer */
 356:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pSrc++;
 357:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 358:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 359:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 360:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 361:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pCoeffs pointer */
 362:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 363:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 364:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Set the accumulator to zero */
 365:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     sum = 0.0f;
 366:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 367:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop over numTaps number of values */
 368:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
 369:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 370:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while(tapCnt > 0u)
 371:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 372:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 373:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       sum += (*px++) * (*pb++);
 374:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 375:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 376:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 377:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 378:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 379:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* The result is stored in the destination buffer. */
 380:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pOut++ = sum;
 381:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 382:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Compute and store error */
 383:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     d = (float32_t) (*pRef++);
 384:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     e = d - sum;
 385:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pErr++ = e;
 386:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 387:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Weighting factor for the LMS version */
 388:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     w = e * mu;
 389:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 390:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pState pointer */
 391:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     px = pState;
 392:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 393:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Initialize pCoeffs pointer */
 394:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pb = pCoeffs;
 395:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 396:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Loop over numTaps number of values */
 397:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt = numTaps;
 398:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 399:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     while(tapCnt > 0u)
 400:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     {
 401:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Perform the multiply-accumulate */
 402:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       *pb = *pb + (w * (*px++));
 403:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       pb++;
 404:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 405:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       /* Decrement the loop counter */
 406:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****       tapCnt--;
 407:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     }
 408:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 409:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Advance state pointer by 1 for the next sample */
 410:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     pState = pState + 1;
 411:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 412:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 413:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     blkCnt--;
 414:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 415:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 416:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 417:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Processing is complete. Now copy the last numTaps - 1 samples to the        
 418:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****    * start of the state buffer. This prepares the state buffer for the        
 419:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****    * next function call. */
 420:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 421:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Points to the start of the pState buffer */
 422:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   pStateCurnt = S->pState;
 423:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 424:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /*  Copy (numTaps - 1u) samples  */
 425:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   tapCnt = (numTaps - 1u);
 426:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 427:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   /* Copy the data */
 428:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   while(tapCnt > 0u)
 429:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   {
 430:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     *pStateCurnt++ = *pState++;
 431:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 432:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     /* Decrement the loop counter */
 433:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****     tapCnt--;
 434:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c ****   }
 435:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 436:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** #endif /*   #ifndef ARM_MATH_CM0_FAMILY */
 437:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** 
 438:../Dave/Generated/CMSIS_DSP/FilteringFunctions/arm_lms_f32.c **** }
 504              	 .loc 1 438 0
 505 0332 4C37     	 adds r7,r7,#76
 506              	.LCFI3:
 507              	 .cfi_def_cfa_offset 12
 508 0334 BD46     	 mov sp,r7
 509              	.LCFI4:
 510              	 .cfi_def_cfa_register 13
 511              	 
 512 0336 90BD     	 pop {r4,r7,pc}
 513              	 .cfi_endproc
 514              	.LFE139:
 516              	 .text
 517              	.Letext0:
 518              	 .file 2 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 519              	 .file 3 "c:\\davev4-64bit\\dave-4.2.6\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 520              	 .file 4 "C:\\Users\\Depes Crystalline\\Desktop\\school\\Active_Bike_Lighting_System\\Radar_Core\\Dave\\Generated/CMSIS_DSP/arm_math.h"
DEFINED SYMBOLS
                            *ABS*:00000000 arm_lms_f32.c
    {standard input}:22     .text.arm_lms_f32:00000000 $t
    {standard input}:27     .text.arm_lms_f32:00000000 arm_lms_f32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fmul
__aeabi_fadd
__aeabi_fsub
