
S2GTWO_MD_SA_T003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ec0  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08007ec0  0c007ec0  0000fec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00013ddc  08007ec8  0c007ec8  0000fec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  1fffc000  1fffc000  0002c000  2**0
                  ALLOC
  4 .ram_code     000003e8  1fffc800  0c01bcb0  00024800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data         00000268  1fffcbe8  0c01c098  00024be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000051dc  1fffce50  0c01c300  00024e50  2**2
                  ALLOC
  7 USB_RAM       00000004  2000202c  0c0214dc  00024e50  2**0
                  ALLOC
  8 .no_init      00000020  20005fc0  0c025470  00024e50  2**2
                  ALLOC
  9 .debug_aranges 000013e8  00000000  00000000  00024e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00021992  00000000  00000000  00026238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004237  00000000  00000000  00047bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a461  00000000  00000000  0004be01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00004ebc  00000000  00000000  00056264  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000c338  00000000  00000000  0005b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000a1c2  00000000  00000000  00067458  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001070  00000000  00000000  0007161a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .build_attributes 00000c07  00000000  00000000  0007268a  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 1d 70 00 08     .............p..
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000108:	91 02 00 08 09 06 00 08 00 00 00 00 00 00 00 00     ................
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 81 32 00 08 71 32 00 08 91 02 00 08     .....2..q2......
 80001a0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 91 02 00 08     ................
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>
	.align	1
    .thumb

 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)
/* Reset Handler */
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c01c098 	.word	0x0c01c098
 800024c:	1fffcbe8 	.word	0x1fffcbe8
 8000250:	00000268 	.word	0x00000268
 8000254:	0c01bcb0 	.word	0x0c01bcb0
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	000003e8 	.word	0x000003e8

08000260 <__copy_table_end__>:
 8000260:	1fffce50 	.word	0x1fffce50
 8000264:	000051dc 	.word	0x000051dc
 8000268:	2000202c 	.word	0x2000202c
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000270:	1fffc800 	.word	0x1fffc800
	.align	1
    .thumb

 8000274:	080006e9 	.word	0x080006e9
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	08007e3d 	.word	0x08007e3d
    blx  r0
#endif

    ldr  r0, =main
 800028c:	080004cd 	.word	0x080004cd

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <BGTStartTX>:

//***********************************************
//  Start the transmitter on the BGT24MTR11
//
void BGTStartTX(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af00      	add	r7, sp, #0
	uint16_t SPI_data;
#ifdef BGT_TX_MIN_POWER
	SPI_data = BGT24_PC_PA_7;  // TX on with minimum power
#else
	SPI_data = BGT24_PC2_BUF_MASK | BGT24_PC1_BUF_MASK | BGT24_PC_PA_0;  // TX on with maximum power
 800029a:	2318      	movs	r3, #24
 800029c:	80fb      	strh	r3, [r7, #6]
#endif

	SPI_MASTER_Transmit(&SPI_BGT, (uint8_t *)&SPI_data, 1);
 800029e:	1dbb      	adds	r3, r7, #6
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <BGTStartTX+0x1c>)
 80002a2:	4619      	mov	r1, r3
 80002a4:	2201      	movs	r2, #1
 80002a6:	f002 fb8d 	bl	80029c4 <SPI_MASTER_Transmit>
}  // end of BGTStartTX()
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	1fffcca8 	.word	0x1fffcca8

080002b4 <BGT_LO_Adjust>:
//  Set BGT local oscillator to ISM range
//  24.000GHz to 24.250GHz
//  Q2 is the LO/(2^^20)
//
void BGT_LO_Adjust(uint32_t Q2Count)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	static int32_t fineDACVal = 0;
	static int32_t coarseDACVal = 0;

    if (Q2Count < ISM_CNT_MIN)   // increase LO
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	f645 1267 	movw	r2, #22887	; 0x5967
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d80d      	bhi.n	80002e2 <BGT_LO_Adjust+0x2e>
    {
    	coarseDACVal += 10;
 80002c6:	4b31      	ldr	r3, [pc, #196]	; (800038c <BGT_LO_Adjust+0xd8>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	330a      	adds	r3, #10
 80002cc:	4a2f      	ldr	r2, [pc, #188]	; (800038c <BGT_LO_Adjust+0xd8>)
 80002ce:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 80002d0:	4b2e      	ldr	r3, [pc, #184]	; (800038c <BGT_LO_Adjust+0xd8>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	b21b      	sxth	r3, r3
 80002d8:	482d      	ldr	r0, [pc, #180]	; (8000390 <BGT_LO_Adjust+0xdc>)
 80002da:	4619      	mov	r1, r3
 80002dc:	f003 fb3e 	bl	800395c <DAC_SingleValue_SetValue_s16>
 80002e0:	e051      	b.n	8000386 <BGT_LO_Adjust+0xd2>
    }
    else if (Q2Count > ISM_CNT_MAX)  // decrease LO
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	f645 2256 	movw	r2, #23126	; 0x5a56
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d90d      	bls.n	8000308 <BGT_LO_Adjust+0x54>
    {
    	coarseDACVal -= 10;
 80002ec:	4b27      	ldr	r3, [pc, #156]	; (800038c <BGT_LO_Adjust+0xd8>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	3b0a      	subs	r3, #10
 80002f2:	4a26      	ldr	r2, [pc, #152]	; (800038c <BGT_LO_Adjust+0xd8>)
 80002f4:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 80002f6:	4b25      	ldr	r3, [pc, #148]	; (800038c <BGT_LO_Adjust+0xd8>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	b21b      	sxth	r3, r3
 80002fe:	4824      	ldr	r0, [pc, #144]	; (8000390 <BGT_LO_Adjust+0xdc>)
 8000300:	4619      	mov	r1, r3
 8000302:	f003 fb2b 	bl	800395c <DAC_SingleValue_SetValue_s16>
 8000306:	e03e      	b.n	8000386 <BGT_LO_Adjust+0xd2>

    }
    else if (Q2Count < (ISM_CNT_MID - ISM_CNT_HYST) )  // increase LO
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f645 12d9 	movw	r2, #23001	; 0x59d9
 800030e:	4293      	cmp	r3, r2
 8000310:	d81a      	bhi.n	8000348 <BGT_LO_Adjust+0x94>
    {
    	fineDACVal += 1;
 8000312:	4b20      	ldr	r3, [pc, #128]	; (8000394 <BGT_LO_Adjust+0xe0>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	3301      	adds	r3, #1
 8000318:	4a1e      	ldr	r2, [pc, #120]	; (8000394 <BGT_LO_Adjust+0xe0>)
 800031a:	6013      	str	r3, [r2, #0]
    	coarseDACVal += 1;
 800031c:	4b1b      	ldr	r3, [pc, #108]	; (800038c <BGT_LO_Adjust+0xd8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3301      	adds	r3, #1
 8000322:	4a1a      	ldr	r2, [pc, #104]	; (800038c <BGT_LO_Adjust+0xd8>)
 8000324:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 8000326:	4b19      	ldr	r3, [pc, #100]	; (800038c <BGT_LO_Adjust+0xd8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	b29b      	uxth	r3, r3
 800032c:	b21b      	sxth	r3, r3
 800032e:	4818      	ldr	r0, [pc, #96]	; (8000390 <BGT_LO_Adjust+0xdc>)
 8000330:	4619      	mov	r1, r3
 8000332:	f003 fb13 	bl	800395c <DAC_SingleValue_SetValue_s16>
    	DAC_SingleValue_SetValue_s16(&VFINE,fineDACVal);
 8000336:	4b17      	ldr	r3, [pc, #92]	; (8000394 <BGT_LO_Adjust+0xe0>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	b29b      	uxth	r3, r3
 800033c:	b21b      	sxth	r3, r3
 800033e:	4816      	ldr	r0, [pc, #88]	; (8000398 <BGT_LO_Adjust+0xe4>)
 8000340:	4619      	mov	r1, r3
 8000342:	f003 fb0b 	bl	800395c <DAC_SingleValue_SetValue_s16>
 8000346:	e01e      	b.n	8000386 <BGT_LO_Adjust+0xd2>
    }
    else if (Q2Count > (ISM_CNT_MID + ISM_CNT_HYST) )  // decrease LO
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	f645 12e4 	movw	r2, #23012	; 0x59e4
 800034e:	4293      	cmp	r3, r2
 8000350:	d919      	bls.n	8000386 <BGT_LO_Adjust+0xd2>
    {
    	fineDACVal -= 1;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <BGT_LO_Adjust+0xe0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3b01      	subs	r3, #1
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <BGT_LO_Adjust+0xe0>)
 800035a:	6013      	str	r3, [r2, #0]
    	coarseDACVal -= 1;
 800035c:	4b0b      	ldr	r3, [pc, #44]	; (800038c <BGT_LO_Adjust+0xd8>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3b01      	subs	r3, #1
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <BGT_LO_Adjust+0xd8>)
 8000364:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 8000366:	4b09      	ldr	r3, [pc, #36]	; (800038c <BGT_LO_Adjust+0xd8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	b29b      	uxth	r3, r3
 800036c:	b21b      	sxth	r3, r3
 800036e:	4808      	ldr	r0, [pc, #32]	; (8000390 <BGT_LO_Adjust+0xdc>)
 8000370:	4619      	mov	r1, r3
 8000372:	f003 faf3 	bl	800395c <DAC_SingleValue_SetValue_s16>
    	DAC_SingleValue_SetValue_s16(&VFINE,fineDACVal);
 8000376:	4b07      	ldr	r3, [pc, #28]	; (8000394 <BGT_LO_Adjust+0xe0>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	b29b      	uxth	r3, r3
 800037c:	b21b      	sxth	r3, r3
 800037e:	4806      	ldr	r0, [pc, #24]	; (8000398 <BGT_LO_Adjust+0xe4>)
 8000380:	4619      	mov	r1, r3
 8000382:	f003 faeb 	bl	800395c <DAC_SingleValue_SetValue_s16>
    }


}  // end of BGT_LO_Adjust
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}
 800038c:	1fffce50 	.word	0x1fffce50
 8000390:	1fffcd64 	.word	0x1fffcd64
 8000394:	1fffce54 	.word	0x1fffce54
 8000398:	1fffcd98 	.word	0x1fffcd98

0800039c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	460b      	mov	r3, r1
 80003a6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	2201      	movs	r2, #1
 80003ac:	409a      	lsls	r2, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	605a      	str	r2, [r3, #4]
}
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80003c8:	78fb      	ldrb	r3, [r7, #3]
 80003ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80003ce:	409a      	lsls	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	605a      	str	r2, [r3, #4]
}
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <XMC_GPIO_ToggleOutput>:
 * and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_ToggleOutput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_ToggleOutput: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10001U << pin;
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80003f2:	409a      	lsls	r2, r3
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	605a      	str	r2, [r3, #4]
}
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop

08000404 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	685a      	ldr	r2, [r3, #4]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	7a1b      	ldrb	r3, [r3, #8]
 8000414:	4610      	mov	r0, r2
 8000416:	4619      	mov	r1, r3
 8000418:	f7ff ffc0 	bl	800039c <XMC_GPIO_SetOutputHigh>
}
 800041c:	3708      	adds	r7, #8
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop

08000424 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	685a      	ldr	r2, [r3, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	7a1b      	ldrb	r3, [r3, #8]
 8000434:	4610      	mov	r0, r2
 8000436:	4619      	mov	r1, r3
 8000438:	f7ff ffc0 	bl	80003bc <XMC_GPIO_SetOutputLow>
}
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop

08000444 <DIGITAL_IO_ToggleOutput>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_ToggleOutput(const DIGITAL_IO_t *const handler)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_ToggleOutput: handler null pointer", handler != NULL);
  XMC_GPIO_ToggleOutput(handler->gpio_port, handler->gpio_pin);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	685a      	ldr	r2, [r3, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	7a1b      	ldrb	r3, [r3, #8]
 8000454:	4610      	mov	r0, r2
 8000456:	4619      	mov	r1, r3
 8000458:	f7ff ffc2 	bl	80003e0 <XMC_GPIO_ToggleOutput>
}
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop

08000464 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8000464:	b480      	push	{r7}
 8000466:	b085      	sub	sp, #20
 8000468:	af00      	add	r7, sp, #0
 800046a:	60f8      	str	r0, [r7, #12]
 800046c:	60b9      	str	r1, [r7, #8]
 800046e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6819      	ldr	r1, [r3, #0]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	68ba      	ldr	r2, [r7, #8]
 8000478:	32a0      	adds	r2, #160	; 0xa0
 800047a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800047e:	3714      	adds	r7, #20
 8000480:	46bd      	mov	sp, r7
 8000482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000486:	4770      	bx	lr

08000488 <XMC_VADC_GROUP_GetDetailedResult>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetResult().
 */
__STATIC_INLINE uint32_t XMC_VADC_GROUP_GetDetailedResult(XMC_VADC_GROUP_t *const group_ptr, const uint32_t res_reg)
{
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetDetailedResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  return(group_ptr->RES[res_reg]);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	683a      	ldr	r2, [r7, #0]
 8000496:	32c0      	adds	r2, #192	; 0xc0
 8000498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 800049c:	4618      	mov	r0, r3
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr

080004a8 <XMC_VADC_GROUP_GetResult>:
 * \par<b>Related APIs:</b><br>
 * XMC_VADC_GROUP_GetDetailedResult().
 */
__STATIC_INLINE XMC_VADC_RESULT_SIZE_t XMC_VADC_GROUP_GetResult(XMC_VADC_GROUP_t *const group_ptr, 
                                                                const uint32_t res_reg)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	32c0      	adds	r2, #192	; 0xc0
 80004b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004bc:	b29b      	uxth	r3, r3
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:

//*********************************************************
//
//
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80004d2:	f003 f855 	bl	8003580 <DAVE_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
  if(status == DAVE_STATUS_FAILURE)
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b01      	cmp	r3, #1
 80004de:	d100      	bne.n	80004e2 <main+0x16>
  {
    while(1U)  // loop forever on error
    	;
 80004e0:	e7fe      	b.n	80004e0 <main+0x14>
  }

  // Configure ADC Group 0 Channel 4 to acquire IFI_HG (P14.4)
  ADC_QUEUE_InsertQueueEntry(&ADC_QUEUE_G0,&ch_entry_G0_0);
 80004e2:	483e      	ldr	r0, [pc, #248]	; (80005dc <main+0x110>)
 80004e4:	493e      	ldr	r1, [pc, #248]	; (80005e0 <main+0x114>)
 80004e6:	f006 fcd9 	bl	8006e9c <ADC_QUEUE_InsertQueueEntry>
  ch_handle.result_reg_number = ch_entry_G0_0.channel_number;
 80004ea:	4b3d      	ldr	r3, [pc, #244]	; (80005e0 <main+0x114>)
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	b2d9      	uxtb	r1, r3
 80004f4:	4a3b      	ldr	r2, [pc, #236]	; (80005e4 <main+0x118>)
 80004f6:	7893      	ldrb	r3, [r2, #2]
 80004f8:	f361 0303 	bfi	r3, r1, #0, #4
 80004fc:	7093      	strb	r3, [r2, #2]
  XMC_VADC_GROUP_ChannelInit(ADC_QUEUE_G0.group_handle, (uint32_t)ch_entry_G0_0.channel_number, &ch_handle);
 80004fe:	4b37      	ldr	r3, [pc, #220]	; (80005dc <main+0x110>)
 8000500:	68da      	ldr	r2, [r3, #12]
 8000502:	4b37      	ldr	r3, [pc, #220]	; (80005e0 <main+0x114>)
 8000504:	795b      	ldrb	r3, [r3, #5]
 8000506:	4610      	mov	r0, r2
 8000508:	4619      	mov	r1, r3
 800050a:	4a36      	ldr	r2, [pc, #216]	; (80005e4 <main+0x118>)
 800050c:	f001 feac 	bl	8002268 <XMC_VADC_GROUP_ChannelInit>
  XMC_VADC_GROUP_ResultInit(ADC_QUEUE_G0.group_handle, (uint32_t)ch_handle.result_reg_number, &res_handle);
 8000510:	4b32      	ldr	r3, [pc, #200]	; (80005dc <main+0x110>)
 8000512:	68da      	ldr	r2, [r3, #12]
 8000514:	4b33      	ldr	r3, [pc, #204]	; (80005e4 <main+0x118>)
 8000516:	789b      	ldrb	r3, [r3, #2]
 8000518:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800051c:	b2db      	uxtb	r3, r3
 800051e:	4610      	mov	r0, r2
 8000520:	4619      	mov	r1, r3
 8000522:	4a31      	ldr	r2, [pc, #196]	; (80005e8 <main+0x11c>)
 8000524:	f7ff ff9e 	bl	8000464 <XMC_VADC_GROUP_ResultInit>
  ADC_QUEUE_AllEntriesInserted(&ADC_QUEUE_G0);
 8000528:	482c      	ldr	r0, [pc, #176]	; (80005dc <main+0x110>)
 800052a:	f006 fcef 	bl	8006f0c <ADC_QUEUE_AllEntriesInserted>

  // Configure ADC Group 1 Channel 3 to acquire IFQ_HG (P14.3)
  ADC_QUEUE_InsertQueueEntry(&ADC_QUEUE_G1,&ch_entry_G1_0);
 800052e:	482f      	ldr	r0, [pc, #188]	; (80005ec <main+0x120>)
 8000530:	492f      	ldr	r1, [pc, #188]	; (80005f0 <main+0x124>)
 8000532:	f006 fcb3 	bl	8006e9c <ADC_QUEUE_InsertQueueEntry>
  ch_handle.result_reg_number = ch_entry_G1_0.channel_number;
 8000536:	4b2e      	ldr	r3, [pc, #184]	; (80005f0 <main+0x124>)
 8000538:	795b      	ldrb	r3, [r3, #5]
 800053a:	f003 030f 	and.w	r3, r3, #15
 800053e:	b2d9      	uxtb	r1, r3
 8000540:	4a28      	ldr	r2, [pc, #160]	; (80005e4 <main+0x118>)
 8000542:	7893      	ldrb	r3, [r2, #2]
 8000544:	f361 0303 	bfi	r3, r1, #0, #4
 8000548:	7093      	strb	r3, [r2, #2]
  XMC_VADC_GROUP_ChannelInit(ADC_QUEUE_G1.group_handle, (uint32_t)ch_entry_G1_0.channel_number, &ch_handle);
 800054a:	4b28      	ldr	r3, [pc, #160]	; (80005ec <main+0x120>)
 800054c:	68da      	ldr	r2, [r3, #12]
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <main+0x124>)
 8000550:	795b      	ldrb	r3, [r3, #5]
 8000552:	4610      	mov	r0, r2
 8000554:	4619      	mov	r1, r3
 8000556:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <main+0x118>)
 8000558:	f001 fe86 	bl	8002268 <XMC_VADC_GROUP_ChannelInit>
  XMC_VADC_GROUP_ResultInit(ADC_QUEUE_G1.group_handle, (uint32_t)ch_handle.result_reg_number, &res_handle);
 800055c:	4b23      	ldr	r3, [pc, #140]	; (80005ec <main+0x120>)
 800055e:	68da      	ldr	r2, [r3, #12]
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <main+0x118>)
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000568:	b2db      	uxtb	r3, r3
 800056a:	4610      	mov	r0, r2
 800056c:	4619      	mov	r1, r3
 800056e:	4a1e      	ldr	r2, [pc, #120]	; (80005e8 <main+0x11c>)
 8000570:	f7ff ff78 	bl	8000464 <XMC_VADC_GROUP_ResultInit>
  ADC_QUEUE_AllEntriesInserted(&ADC_QUEUE_G1);
 8000574:	481d      	ldr	r0, [pc, #116]	; (80005ec <main+0x120>)
 8000576:	f006 fcc9 	bl	8006f0c <ADC_QUEUE_AllEntriesInserted>

  BGTStartTX();
 800057a:	f7ff fe8b 	bl	8000294 <BGTStartTX>

  CCU40->GCTRL |= (0x0001<<CCU4_GCTRL_SUSCFG_Pos);      // stop timers at breakpoint when debugging
 800057e:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <main+0x128>)
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <main+0x128>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000588:	6013      	str	r3, [r2, #0]
  CCU41->GCTRL |= (0x0001<<CCU4_GCTRL_SUSCFG_Pos);
 800058a:	4a1b      	ldr	r2, [pc, #108]	; (80005f8 <main+0x12c>)
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <main+0x12c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000594:	6013      	str	r3, [r2, #0]

  arm_rfft_fast_init_f32(&i_fftStructure, FFT_SIZE);  // setup FFT
 8000596:	4819      	ldr	r0, [pc, #100]	; (80005fc <main+0x130>)
 8000598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800059c:	f005 ff2a 	bl	80063f4 <arm_rfft_fast_init_f32>

  genHanningData();   	// generate Hanning window data
 80005a0:	f000 f84e 	bl	8000640 <genHanningData>

  TIMER_Stop(&FS_ADC);
 80005a4:	4816      	ldr	r0, [pc, #88]	; (8000600 <main+0x134>)
 80005a6:	f001 ffab 	bl	8002500 <TIMER_Stop>
  TIMER_SetTimeInterval(&FS_ADC, SAMPLE_FREQ_10KHZ);  	// set the sample frequency
 80005aa:	4815      	ldr	r0, [pc, #84]	; (8000600 <main+0x134>)
 80005ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80005b0:	f001 ffe2 	bl	8002578 <TIMER_SetTimeInterval>
  TIMER_Start(&FS_ADC); 								// start data acquisition
 80005b4:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x134>)
 80005b6:	f001 ff85 	bl	80024c4 <TIMER_Start>

  while(1U)
  {
	  if (gBGTDataReadyFlag == 0)  // flag set in ADC ISR - wait for buffer of data to be ready
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <main+0x138>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d100      	bne.n	80005c4 <main+0xf8>
		  continue;
 80005c2:	e009      	b.n	80005d8 <main+0x10c>

	  do_rfft_i();   	// Process the ADC data from the BGT24 IFI_HG channel
 80005c4:	f007 fc6c 	bl	8007ea0 <__do_rfft_i_veneer>
	  do_rfft_q();   	// Process the ADC data from the BGT24 IFQ_HG channel
 80005c8:	f007 fc72 	bl	8007eb0 <__do_rfft_q_veneer>

	  gBGTDataReadyFlag = 0;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <main+0x138>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]

	  TIMER_Start(&FS_ADC);  // Get more data
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <main+0x134>)
 80005d4:	f001 ff76 	bl	80024c4 <TIMER_Start>

  }  // bottom of while(1) loop
 80005d8:	e7ef      	b.n	80005ba <main+0xee>
 80005da:	bf00      	nop
 80005dc:	1fffce08 	.word	0x1fffce08
 80005e0:	1fffcbe8 	.word	0x1fffcbe8
 80005e4:	1fffcc00 	.word	0x1fffcc00
 80005e8:	1fffce58 	.word	0x1fffce58
 80005ec:	1fffce2c 	.word	0x1fffce2c
 80005f0:	1fffcbf4 	.word	0x1fffcbf4
 80005f4:	4000c000 	.word	0x4000c000
 80005f8:	40010000 	.word	0x40010000
 80005fc:	1fffce84 	.word	0x1fffce84
 8000600:	1fffcc40 	.word	0x1fffcc40
 8000604:	1fffce5c 	.word	0x1fffce5c

08000608 <CCU41_3_IRQHandler>:

//***********************************************
// One Hz Interrupt Service Routine
//
void OneHzISR(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	DIGITAL_IO_ToggleOutput(&LED_GREEN);
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <CCU41_3_IRQHandler+0x2c>)
 800060e:	f7ff ff19 	bl	8000444 <DIGITAL_IO_ToggleOutput>

	gQ2Freq = COUNTER_GetCurrentCount(&Q2_FREQ_P22);  // Read Q2 counter
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <CCU41_3_IRQHandler+0x30>)
 8000614:	f003 fbb6 	bl	8003d84 <COUNTER_GetCurrentCount>
 8000618:	4603      	mov	r3, r0
 800061a:	461a      	mov	r2, r3
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <CCU41_3_IRQHandler+0x34>)
 800061e:	601a      	str	r2, [r3, #0]
	COUNTER_ResetCounter(&Q2_FREQ_P22);				  // clear Q2 counter
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <CCU41_3_IRQHandler+0x30>)
 8000622:	f003 fbc7 	bl	8003db4 <COUNTER_ResetCounter>

	BGT_LO_Adjust(gQ2Freq);			// make sure Q2 is in range
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <CCU41_3_IRQHandler+0x34>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe42 	bl	80002b4 <BGT_LO_Adjust>

}  // end of OneHzISR()
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	1fffcd2c 	.word	0x1fffcd2c
 8000638:	1fffce00 	.word	0x1fffce00
 800063c:	1fffce60 	.word	0x1fffce60

08000640 <genHanningData>:
//   Generate Hanning Window data for FFT
//   Signal Processing.  Hanning window helps
//   smooth the edges of the sample window.
//
void genHanningData(void)
{
 8000640:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
	uint16_t idx;
	float32_t  piVal = (float)22.0/(float)7.0;
 8000648:	4b24      	ldr	r3, [pc, #144]	; (80006dc <genHanningData+0x9c>)
 800064a:	603b      	str	r3, [r7, #0]

	for (idx=0; idx<FFT_SIZE; idx++)
 800064c:	2300      	movs	r3, #0
 800064e:	80fb      	strh	r3, [r7, #6]
 8000650:	e03c      	b.n	80006cc <genHanningData+0x8c>
	{
		hanning_window[idx] = (1.0f - arm_cos_f32(2.0*piVal*idx/FFT_SIZE))/2.0f;
 8000652:	88fc      	ldrh	r4, [r7, #6]
 8000654:	6838      	ldr	r0, [r7, #0]
 8000656:	f006 fe6f 	bl	8007338 <__aeabi_f2d>
 800065a:	4602      	mov	r2, r0
 800065c:	460b      	mov	r3, r1
 800065e:	4610      	mov	r0, r2
 8000660:	4619      	mov	r1, r3
 8000662:	f006 fd0b 	bl	800707c <__adddf3>
 8000666:	4602      	mov	r2, r0
 8000668:	460b      	mov	r3, r1
 800066a:	4690      	mov	r8, r2
 800066c:	4699      	mov	r9, r3
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	4618      	mov	r0, r3
 8000672:	f006 fe4f 	bl	8007314 <__aeabi_i2d>
 8000676:	4602      	mov	r2, r0
 8000678:	460b      	mov	r3, r1
 800067a:	4640      	mov	r0, r8
 800067c:	4649      	mov	r1, r9
 800067e:	f006 feaf 	bl	80073e0 <__aeabi_dmul>
 8000682:	4602      	mov	r2, r0
 8000684:	460b      	mov	r3, r1
 8000686:	4610      	mov	r0, r2
 8000688:	4619      	mov	r1, r3
 800068a:	f04f 0200 	mov.w	r2, #0
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <genHanningData+0xa0>)
 8000690:	f006 ffd0 	bl	8007634 <__aeabi_ddiv>
 8000694:	4602      	mov	r2, r0
 8000696:	460b      	mov	r3, r1
 8000698:	4610      	mov	r0, r2
 800069a:	4619      	mov	r1, r3
 800069c:	f007 f8b2 	bl	8007804 <__aeabi_d2f>
 80006a0:	4603      	mov	r3, r0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 f880 	bl	80067a8 <arm_cos_f32>
 80006a8:	ee07 0a10 	vmov	s14, r0
 80006ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x70
 80006b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80006b4:	eeb0 7a00 	vmov.f32	s14, #0
 80006b8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80006bc:	4a09      	ldr	r2, [pc, #36]	; (80006e4 <genHanningData+0xa4>)
 80006be:	00a3      	lsls	r3, r4, #2
 80006c0:	4413      	add	r3, r2
 80006c2:	edc3 7a00 	vstr	s15, [r3]
void genHanningData(void)
{
	uint16_t idx;
	float32_t  piVal = (float)22.0/(float)7.0;

	for (idx=0; idx<FFT_SIZE; idx++)
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	3301      	adds	r3, #1
 80006ca:	80fb      	strh	r3, [r7, #6]
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006d2:	d3be      	bcc.n	8000652 <genHanningData+0x12>
	{
		hanning_window[idx] = (1.0f - arm_cos_f32(2.0*piVal*idx/FFT_SIZE))/2.0f;
	}

}  // end of genHanningData()
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 80006dc:	40492492 	.word	0x40492492
 80006e0:	40900000 	.word	0x40900000
 80006e4:	1fffee9c 	.word	0x1fffee9c

080006e8 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 80006e8:	b598      	push	{r3, r4, r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80006ec:	4a08      	ldr	r2, [pc, #32]	; (8000710 <SystemInit+0x28>)
 80006ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80006f2:	4614      	mov	r4, r2
 80006f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <SystemInit+0x2c>)
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <SystemInit+0x30>)
 80006fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000700:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 8000704:	f000 f80a 	bl	800071c <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8000708:	f006 fa28 	bl	8006b5c <SystemCoreClockSetup>
}
 800070c:	bd98      	pop	{r3, r4, r7, pc}
 800070e:	bf00      	nop
 8000710:	20005fc4 	.word	0x20005fc4
 8000714:	20005fd4 	.word	0x20005fd4
 8000718:	20000084 	.word	0x20000084

0800071c <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000722:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 8000724:	4b16      	ldr	r3, [pc, #88]	; (8000780 <SystemCoreSetup+0x64>)
 8000726:	4a17      	ldr	r2, [pc, #92]	; (8000784 <SystemCoreSetup+0x68>)
 8000728:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 800072a:	f3bf 8f4f 	dsb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800072e:	b662      	cpsie	i
  __DSB();
  __enable_irq();
  
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <SystemCoreSetup+0x64>)
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <SystemCoreSetup+0x64>)
 8000734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800073c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 8000740:	4a0f      	ldr	r2, [pc, #60]	; (8000780 <SystemCoreSetup+0x64>)
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <SystemCoreSetup+0x64>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f023 0308 	bic.w	r3, r3, #8
 800074a:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <SystemCoreSetup+0x6c>)
 800074e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000752:	3314      	adds	r3, #20
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f023 030f 	bic.w	r3, r3, #15
 800075e:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f043 0302 	orr.w	r3, r3, #2
 8000766:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <SystemCoreSetup+0x6c>)
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	3314      	adds	r3, #20
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	08000000 	.word	0x08000000
 8000788:	58001000 	.word	0x58001000

0800078c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8000792:	4b2f      	ldr	r3, [pc, #188]	; (8000850 <SystemCoreClockUpdate+0xc4>)
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d03e      	beq.n	800081c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800079e:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <SystemCoreClockUpdate+0xc8>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d002      	beq.n	80007b0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80007aa:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <SystemCoreClockUpdate+0xcc>)
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e002      	b.n	80007b6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80007b0:	f006 f9ca 	bl	8006b48 <OSCHP_GetFrequency>
 80007b4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <SystemCoreClockUpdate+0xc8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d020      	beq.n	8000804 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80007c2:	4b24      	ldr	r3, [pc, #144]	; (8000854 <SystemCoreClockUpdate+0xc8>)
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80007ca:	0e1b      	lsrs	r3, r3, #24
 80007cc:	3301      	adds	r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <SystemCoreClockUpdate+0xc8>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80007d8:	0a1b      	lsrs	r3, r3, #8
 80007da:	3301      	adds	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 80007de:	4b1d      	ldr	r3, [pc, #116]	; (8000854 <SystemCoreClockUpdate+0xc8>)
 80007e0:	689b      	ldr	r3, [r3, #8]
 80007e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80007e6:	0c1b      	lsrs	r3, r3, #16
 80007e8:	3301      	adds	r3, #1
 80007ea:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	fb02 f303 	mul.w	r3, r2, r3
 80007f4:	68fa      	ldr	r2, [r7, #12]
 80007f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	fb02 f303 	mul.w	r3, r2, r3
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	e00d      	b.n	8000820 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000804:	4b13      	ldr	r3, [pc, #76]	; (8000854 <SystemCoreClockUpdate+0xc8>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800080c:	3301      	adds	r3, #1
 800080e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	fbb2 f3f3 	udiv	r3, r2, r3
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	e001      	b.n	8000820 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <SystemCoreClockUpdate+0xcc>)
 800081e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <SystemCoreClockUpdate+0xc4>)
 8000822:	68db      	ldr	r3, [r3, #12]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	3301      	adds	r3, #1
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <SystemCoreClockUpdate+0xc4>)
 8000832:	691b      	ldr	r3, [r3, #16]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	3301      	adds	r3, #1
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000840:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000842:	4a06      	ldr	r2, [pc, #24]	; (800085c <SystemCoreClockUpdate+0xd0>)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	50004600 	.word	0x50004600
 8000854:	50004710 	.word	0x50004710
 8000858:	016e3600 	.word	0x016e3600
 800085c:	20005fc0 	.word	0x20005fc0

08000860 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	460b      	mov	r3, r1
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_CHECK_MODE(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	089b      	lsrs	r3, r3, #2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	4618      	mov	r0, r3
 8000876:	7afb      	ldrb	r3, [r7, #11]
 8000878:	089b      	lsrs	r3, r3, #2
 800087a:	b2db      	uxtb	r3, r3
 800087c:	461a      	mov	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	3204      	adds	r2, #4
 8000882:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000886:	7afb      	ldrb	r3, [r7, #11]
 8000888:	f003 0303 	and.w	r3, r3, #3
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	4619      	mov	r1, r3
 8000890:	23f8      	movs	r3, #248	; 0xf8
 8000892:	408b      	lsls	r3, r1
 8000894:	43db      	mvns	r3, r3
 8000896:	ea02 0103 	and.w	r1, r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	1d02      	adds	r2, r0, #4
 800089e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80008a6:	7afb      	ldrb	r3, [r7, #11]
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4619      	mov	r1, r3
 80008ac:	2303      	movs	r3, #3
 80008ae:	408b      	lsls	r3, r1
 80008b0:	43db      	mvns	r3, r3
 80008b2:	401a      	ands	r2, r3
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	4a35      	ldr	r2, [pc, #212]	; (8000990 <XMC_GPIO_Init+0x130>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d10a      	bne.n	80008d6 <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008c4:	7afb      	ldrb	r3, [r7, #11]
 80008c6:	2101      	movs	r1, #1
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	401a      	ands	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	661a      	str	r2, [r3, #96]	; 0x60
 80008d4:	e03c      	b.n	8000950 <XMC_GPIO_Init+0xf0>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	409a      	lsls	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 80008e2:	7afb      	ldrb	r3, [r7, #11]
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	4618      	mov	r0, r3
 80008ea:	7afb      	ldrb	r3, [r7, #11]
 80008ec:	08db      	lsrs	r3, r3, #3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	3210      	adds	r2, #16
 80008f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008fa:	7afb      	ldrb	r3, [r7, #11]
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4619      	mov	r1, r3
 8000904:	2307      	movs	r3, #7
 8000906:	408b      	lsls	r3, r1
 8000908:	43db      	mvns	r3, r3
 800090a:	ea02 0103 	and.w	r1, r2, r3
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f100 0210 	add.w	r2, r0, #16
 8000914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8000918:	7afb      	ldrb	r3, [r7, #11]
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	7afb      	ldrb	r3, [r7, #11]
 8000922:	08db      	lsrs	r3, r3, #3
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	3210      	adds	r2, #16
 800092c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7a1b      	ldrb	r3, [r3, #8]
 8000934:	4619      	mov	r1, r3
 8000936:	7afb      	ldrb	r3, [r7, #11]
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	fa01 f303 	lsl.w	r3, r1, r3
 8000942:	ea42 0103 	orr.w	r1, r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f100 0210 	add.w	r2, r0, #16
 800094c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000950:	7afb      	ldrb	r3, [r7, #11]
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	4618      	mov	r0, r3
 8000958:	7afb      	ldrb	r3, [r7, #11]
 800095a:	089b      	lsrs	r3, r3, #2
 800095c:	b2db      	uxtb	r3, r3
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	3204      	adds	r2, #4
 8000964:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	7afb      	ldrb	r3, [r7, #11]
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	fa01 f303 	lsl.w	r3, r1, r3
 800097a:	ea42 0103 	orr.w	r1, r2, r3
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	1d02      	adds	r2, r0, #4
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr
 8000990:	48028e00 	.word	0x48028e00

08000994 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800099a:	681b      	ldr	r3, [r3, #0]
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	20005fc0 	.word	0x20005fc0

080009ac <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_SCU_lDelay(uint32_t delay)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80009b4:	f7ff feea 	bl	800078c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <XMC_SCU_lDelay+0x3c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <XMC_SCU_lDelay+0x40>)
 80009be:	fba2 2303 	umull	r2, r3, r2, r3
 80009c2:	0c9a      	lsrs	r2, r3, #18
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	e003      	b.n	80009da <XMC_SCU_lDelay+0x2e>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 80009d2:	bf00      	nop
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3301      	adds	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3f7      	bcc.n	80009d2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20005fc0 	.word	0x20005fc0
 80009ec:	431bde83 	.word	0x431bde83

080009f0 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 80009f0:	b5b0      	push	{r4, r5, r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
		          (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
		         (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 f885 	bl	8000b08 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 80009fe:	f000 fa21 	bl	8000e44 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	79db      	ldrb	r3, [r3, #7]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8000a0a:	f000 fa45 	bl	8000e98 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7a5b      	ldrb	r3, [r3, #9]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f8f2 	bl	8000bfc <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7a1b      	ldrb	r3, [r3, #8]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f9eb 	bl	8000df8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	7c1b      	ldrb	r3, [r3, #16]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 f906 	bl	8000c38 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7c5b      	ldrb	r3, [r3, #17]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f929 	bl	8000c88 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7c9b      	ldrb	r3, [r3, #18]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f910 	bl	8000c60 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7cdb      	ldrb	r3, [r3, #19]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f933 	bl	8000cb0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	799b      	ldrb	r3, [r3, #6]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000a52:	f000 fa5b 	bl	8000f0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	78db      	ldrb	r3, [r3, #3]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d102      	bne.n	8000a64 <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 8000a5e:	f000 fa95 	bl	8000f8c <XMC_SCU_CLOCK_DisableSystemPll>
 8000a62:	e014      	b.n	8000a8e <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000a64:	f000 fa82 	bl	8000f6c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	8899      	ldrh	r1, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000a74:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000a7a:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4608      	mov	r0, r1
 8000a84:	4611      	mov	r1, r2
 8000a86:	462a      	mov	r2, r5
 8000a88:	4623      	mov	r3, r4
 8000a8a:	f000 fa8f 	bl	8000fac <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a96:	d103      	bne.n	8000aa0 <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000a98:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a9c:	f000 f834 	bl	8000b08 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000aa0:	f7ff fe74 	bl	800078c <SystemCoreClockUpdate>
}
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bdb0      	pop	{r4, r5, r7, pc}
 8000aaa:	bf00      	nop

08000aac <XMC_SCU_RESET_DeassertPeripheralReset>:
  *set_peripheral_reset[index] |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	0f1b      	lsrs	r3, r3, #28
 8000ab8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000ac0:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRCLR0),
                                                         &(SCU_RESET->PRCLR1),
                                                         &(SCU_RESET->PRCLR2)};
#endif

  *clear_peripheral_reset[index] |= (uint32_t)mask;
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aca:	4906      	ldr	r1, [pc, #24]	; (8000ae4 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000acc:	68fa      	ldr	r2, [r7, #12]
 8000ace:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ad2:	6811      	ldr	r1, [r2, #0]
 8000ad4:	68ba      	ldr	r2, [r7, #8]
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	08007ec8 	.word	0x08007ec8

08000ae8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000aec:	f7ff ff52 	bl	8000994 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000af0:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000af4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	50004600 	.word	0x50004600

08000b08 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000b10:	4906      	ldr	r1, [pc, #24]	; (8000b2c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	50004600 	.word	0x50004600

08000b30 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000b38:	4906      	ldr	r1, [pc, #24]	; (8000b54 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000b48:	370c      	adds	r7, #12
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	50004600 	.word	0x50004600

08000b58 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000b60:	4906      	ldr	r1, [pc, #24]	; (8000b7c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	50004600 	.word	0x50004600

08000b80 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d108      	bne.n	8000ba2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000b90:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b9a:	f023 0301 	bic.w	r3, r3, #1
 8000b9e:	60d3      	str	r3, [r2, #12]
 8000ba0:	e007      	b.n	8000bb2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	60d3      	str	r3, [r2, #12]
  }
}
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	50004710 	.word	0x50004710

08000bc0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000bca:	bf00      	nop
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 8000bce:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000bd2:	f003 0308 	and.w	r3, r3, #8
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d1f8      	bne.n	8000bcc <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000bda:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 8000be4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	50004000 	.word	0x50004000
 8000bf8:	50004300 	.word	0x50004300

08000bfc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000c06:	bf00      	nop
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 8000c0a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1f8      	bne.n	8000c08 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000c16:	4907      	ldr	r1, [pc, #28]	; (8000c34 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	50004000 	.word	0x50004000
 8000c34:	50004300 	.word	0x50004300

08000c38 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000c40:	4906      	ldr	r1, [pc, #24]	; (8000c5c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000c42:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	50004600 	.word	0x50004600

08000c60 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000c68:	4906      	ldr	r1, [pc, #24]	; (8000c84 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000c6c:	6a1b      	ldr	r3, [r3, #32]
 8000c6e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000c76:	4313      	orrs	r3, r2
 8000c78:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	50004600 	.word	0x50004600

08000c88 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000c90:	4906      	ldr	r1, [pc, #24]	; (8000cac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	50004600 	.word	0x50004600

08000cb0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000cb8:	4906      	ldr	r1, [pc, #24]	; (8000cd4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	50004600 	.word	0x50004600

08000cd8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000ce0:	4906      	ldr	r1, [pc, #24]	; (8000cfc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	50004600 	.word	0x50004600

08000d00 <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000d08:	4906      	ldr	r1, [pc, #24]	; (8000d24 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000d16:	4313      	orrs	r3, r2
 8000d18:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	50004600 	.word	0x50004600

08000d28 <XMC_SCU_CLOCK_EnableClock>:
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
}

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8000d32:	4a04      	ldr	r2, [pc, #16]	; (8000d44 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	6053      	str	r3, [r2, #4]
}
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	50004600 	.word	0x50004600

08000d48 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *set_peripheral_gate[index] |= (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	0f1b      	lsrs	r3, r3, #28
 8000d54:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000d5c:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_gate[] = {&(SCU_CLK->CGATCLR0),
                                                        &(SCU_CLK->CGATCLR1),
                                                        &(SCU_CLK->CGATCLR2)};
  *clear_peripheral_gate[index] |= (uint32_t)mask;
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	4906      	ldr	r1, [pc, #24]	; (8000d80 <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d6e:	6811      	ldr	r1, [r2, #0]
 8000d70:	68ba      	ldr	r2, [r7, #8]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]
}
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	08007ed4 	.word	0x08007ed4

08000d84 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000d9a:	4a16      	ldr	r2, [pc, #88]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f043 0310 	orr.w	r3, r3, #16
 8000da4:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000da6:	4913      	ldr	r1, [pc, #76]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000db4:	4313      	orrs	r3, r2
 8000db6:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc2:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f023 0310 	bic.w	r3, r3, #16
 8000dce:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000dd0:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dda:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000ddc:	bf00      	nop
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 8000de0:	691b      	ldr	r3, [r3, #16]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f9      	beq.n	8000dde <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	50004710 	.word	0x50004710

08000df8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
		                          SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e0c:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d10e      	bne.n	8000e32 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000e14:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000e1e:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000e20:	2064      	movs	r0, #100	; 0x64
 8000e22:	f7ff fdc3 	bl	80009ac <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000e26:	4a06      	ldr	r2, [pc, #24]	; (8000e40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000e28:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e30:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000e32:	2064      	movs	r0, #100	; 0x64
 8000e34:	f7ff fdba 	bl	80009ac <XMC_SCU_lDelay>
}
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	50004710 	.word	0x50004710

08000e44 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d10c      	bne.n	8000e6e <XMC_SCU_HIB_EnableHibernateDomain+0x2a>
  {
    SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000e60:	bf00      	nop
 8000e62:	4b0b      	ldr	r3, [pc, #44]	; (8000e90 <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d008      	beq.n	8000e8c <XMC_SCU_HIB_EnableHibernateDomain+0x48>
  {
    SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000e7a:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e84:	6093      	str	r3, [r2, #8]
    XMC_SCU_lDelay(150U);
 8000e86:	2096      	movs	r0, #150	; 0x96
 8000e88:	f7ff fd90 	bl	80009ac <XMC_SCU_lDelay>
  }
}
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	50004200 	.word	0x50004200
 8000e94:	50004400 	.word	0x50004400

08000e98 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000e9c:	bf00      	nop
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ea0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f8      	bne.n	8000e9e <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000eac:	4a16      	ldr	r2, [pc, #88]	; (8000f08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eb6:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000eb8:	bf00      	nop
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ebc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f8      	bne.n	8000eba <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	; (8000f08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8000ed4:	bf00      	nop
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ed8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d1f8      	bne.n	8000ed6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000ee4:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 8000ef0:	2032      	movs	r0, #50	; 0x32
 8000ef2:	f7ff fd5b 	bl	80009ac <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 8000ef6:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0308 	and.w	r3, r3, #8
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1e8      	bne.n	8000ed4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	50004000 	.word	0x50004000
 8000f08:	50004300 	.word	0x50004300

08000f0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  }
}

/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000f10:	4a13      	ldr	r2, [pc, #76]	; (8000f60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f1a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000f1c:	4d11      	ldr	r5, [pc, #68]	; (8000f64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000f26:	f024 0430 	bic.w	r4, r4, #48	; 0x30
		                          (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000f2a:	f005 fe0d 	bl	8006b48 <OSCHP_GetFrequency>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	4b0d      	ldr	r3, [pc, #52]	; (8000f68 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 8000f32:	fba3 2302 	umull	r2, r3, r3, r2
 8000f36:	0d1b      	lsrs	r3, r3, #20
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	041b      	lsls	r3, r3, #16
/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	606b      	str	r3, [r5, #4]
		                          (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000f40:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f4a:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8000f4c:	bf00      	nop
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000f56:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000f5a:	d1f8      	bne.n	8000f4e <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	50004710 	.word	0x50004710
 8000f64:	50004700 	.word	0x50004700
 8000f68:	6b5fca6b 	.word	0x6b5fca6b

08000f6c <XMC_SCU_CLOCK_EnableSystemPll>:
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000f70:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7a:	f023 0302 	bic.w	r3, r3, #2
 8000f7e:	6053      	str	r3, [r2, #4]
}
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	50004710 	.word	0x50004710

08000f8c <XMC_SCU_CLOCK_DisableSystemPll>:

void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000f90:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9a:	f043 0302 	orr.w	r3, r3, #2
 8000f9e:	6053      	str	r3, [r2, #4]
}
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	50004710 	.word	0x50004710

08000fac <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60ba      	str	r2, [r7, #8]
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	81fb      	strh	r3, [r7, #14]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000fbe:	89fb      	ldrh	r3, [r7, #14]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fddd 	bl	8000b80 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000fc6:	7b7b      	ldrb	r3, [r7, #13]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	f040 8099 	bne.w	8001100 <XMC_SCU_CLOCK_StartSystemPll+0x154>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d108      	bne.n	8000fe6 <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 8000fd4:	f005 fdb8 	bl	8006b48 <OSCHP_GetFrequency>
 8000fd8:	ee07 0a90 	vmov	s15, r0
 8000fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe0:	edc7 7a05 	vstr	s15, [r7, #20]
 8000fe4:	e001      	b.n	8000fea <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 8000fe6:	4b53      	ldr	r3, [pc, #332]	; (8001134 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000fe8:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	ee07 3a90 	vmov	s15, r3
 8000ff0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ff8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	ee07 3a90 	vmov	s15, r3
 8001002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001006:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800100a:	edc7 7a05 	vstr	s15, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 800100e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001016:	ee17 2a90 	vmov	r2, s15
 800101a:	4b47      	ldr	r3, [pc, #284]	; (8001138 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 800101c:	fba3 2302 	umull	r2, r3, r3, r2
 8001020:	0d5b      	lsrs	r3, r3, #21
 8001022:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001026:	4b45      	ldr	r3, [pc, #276]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8001030:	4a42      	ldr	r2, [pc, #264]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001032:	4b42      	ldr	r3, [pc, #264]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f043 0310 	orr.w	r3, r3, #16
 800103a:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800103c:	493f      	ldr	r1, [pc, #252]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800103e:	4b3f      	ldr	r3, [pc, #252]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8001044:	4013      	ands	r3, r2
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	3a01      	subs	r2, #1
 800104a:	0212      	lsls	r2, r2, #8
 800104c:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	3b01      	subs	r3, #1
 8001052:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8001054:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	3b01      	subs	r3, #1
 800105a:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 800105c:	4313      	orrs	r3, r2
 800105e:	608b      	str	r3, [r1, #8]
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8001060:	4a36      	ldr	r2, [pc, #216]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800106a:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 800106c:	4a33      	ldr	r2, [pc, #204]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800106e:	4b33      	ldr	r3, [pc, #204]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f023 0310 	bic.w	r3, r3, #16
 8001076:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8001078:	4a30      	ldr	r2, [pc, #192]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800107a:	4b30      	ldr	r3, [pc, #192]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001082:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8001084:	bf00      	nop
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f9      	beq.n	8001086 <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001092:	4a2a      	ldr	r2, [pc, #168]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 800109e:	bf00      	nop
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f9      	bne.n	80010a0 <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 80010ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	4a22      	ldr	r2, [pc, #136]	; (8001144 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	0a9b      	lsrs	r3, r3, #10
 80010c2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80010c4:	6a3a      	ldr	r2, [r7, #32]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d202      	bcs.n	80010d2 <XMC_SCU_CLOCK_StartSystemPll+0x126>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80010cc:	6938      	ldr	r0, [r7, #16]
 80010ce:	f000 f83d 	bl	800114c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 80010d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010da:	ee17 3a90 	vmov	r3, s15
 80010de:	09db      	lsrs	r3, r3, #7
 80010e0:	4a19      	ldr	r2, [pc, #100]	; (8001148 <XMC_SCU_CLOCK_StartSystemPll+0x19c>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0adb      	lsrs	r3, r3, #11
 80010e8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80010ea:	6a3a      	ldr	r2, [r7, #32]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d202      	bcs.n	80010f8 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80010f2:	6938      	ldr	r0, [r7, #16]
 80010f4:	f000 f82a 	bl	800114c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80010f8:	6a38      	ldr	r0, [r7, #32]
 80010fa:	f000 f827 	bl	800114c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80010fe:	e015      	b.n	800112c <XMC_SCU_CLOCK_StartSystemPll+0x180>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8001100:	490e      	ldr	r1, [pc, #56]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 800110e:	4313      	orrs	r3, r2
 8001110:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800111e:	bf00      	nop
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f9      	beq.n	8001120 <XMC_SCU_CLOCK_StartSystemPll+0x174>
    {
      /* wait for prescaler mode */
    }
  }
}
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	4bb71b00 	.word	0x4bb71b00
 8001138:	165e9f81 	.word	0x165e9f81
 800113c:	50004710 	.word	0x50004710
 8001140:	f08080ff 	.word	0xf08080ff
 8001144:	011e54c7 	.word	0x011e54c7
 8001148:	00bee32f 	.word	0x00bee32f

0800114c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8001156:	4b07      	ldr	r3, [pc, #28]	; (8001174 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3b01      	subs	r3, #1
 8001162:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8001164:	4313      	orrs	r3, r2
 8001166:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8001168:	2032      	movs	r0, #50	; 0x32
 800116a:	f7ff fc1f 	bl	80009ac <XMC_SCU_lDelay>
}
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	50004710 	.word	0x50004710

08001178 <XMC_USIC_Enable>:
 * @brief API to enable the USIC driver
 * @retval void
 *
 */
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a0c      	ldr	r2, [pc, #48]	; (80011b4 <XMC_USIC_Enable+0x3c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d108      	bne.n	800119a <XMC_USIC_Enable+0x22>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001188:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800118c:	f7ff fddc 	bl	8000d48 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001190:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001194:	f7ff fc8a 	bl	8000aac <XMC_SCU_RESET_DeassertPeripheralReset>
 8001198:	e009      	b.n	80011ae <XMC_USIC_Enable+0x36>
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <XMC_USIC_Enable+0x40>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d105      	bne.n	80011ae <XMC_USIC_Enable+0x36>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <XMC_USIC_Enable+0x44>)
 80011a4:	f7ff fdd0 	bl	8000d48 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80011a8:	4804      	ldr	r0, [pc, #16]	; (80011bc <XMC_USIC_Enable+0x44>)
 80011aa:	f7ff fc7f 	bl	8000aac <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40030008 	.word	0x40030008
 80011b8:	48020008 	.word	0x48020008
 80011bc:	10000080 	.word	0x10000080

080011c0 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));

# if (UC_FAMILY == XMC4)
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80011c8:	2010      	movs	r0, #16
 80011ca:	f7ff fdad 	bl	8000d28 <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU4 module */
  XMC_CCU4_lDeassertReset(module);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f9b2 	bl	8001538 <XMC_CCU4_lDeassertReset>
# endif

# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU4 clock gating */
  XMC_CCU4_lUngateClock(module);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 f9c3 	bl	8001560 <XMC_CCU4_lUngateClock>
# endif

}
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <XMC_CCU4_Init>:

}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffe7 	bl	80011c0 <XMC_CCU4_EnableModule>

  gctrl = module->GCTRL;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011fe:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	039b      	lsls	r3, r3, #14
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	601a      	str	r2, [r3, #0]
}
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop

08001218 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	795b      	ldrb	r3, [r3, #5]
 800122e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	051a      	lsls	r2, r3, #20
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	791b      	ldrb	r3, [r3, #4]
 800123e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001242:	b2db      	uxtb	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	795b      	ldrb	r3, [r3, #5]
 800124e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001252:	b2db      	uxtb	r3, r3
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	795b      	ldrb	r3, [r3, #5]
 800125e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	791b      	ldrb	r3, [r3, #4]
 800126e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <XMC_CCU4_SLICE_CountConfig>:
  slice->TC = tc;
}

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800129c:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	039b      	lsls	r3, r3, #14
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	605a      	str	r2, [r3, #4]
}
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	605a      	str	r2, [r3, #4]
}
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001304:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8001306:	78fb      	ldrb	r3, [r7, #3]
 8001308:	029b      	lsls	r3, r3, #10
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	605a      	str	r2, [r3, #4]
}
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8001320:	b480      	push	{r7}
 8001322:	b087      	sub	sp, #28
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	460b      	mov	r3, r1
 800132a:	607a      	str	r2, [r7, #4]
 800132c:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  
  ins = slice->INS;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	3b01      	subs	r3, #1
 8001338:	74fb      	strb	r3, [r7, #19]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 800133a:	7cfb      	ldrb	r3, [r7, #19]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	b2db      	uxtb	r3, r3
 8001340:	3310      	adds	r3, #16
 8001342:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8001344:	7cbb      	ldrb	r3, [r7, #18]
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->edge) << pos;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	461a      	mov	r2, r3
 800135a:	7cbb      	ldrb	r3, [r7, #18]
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	4313      	orrs	r3, r2
 8001364:	617b      	str	r3, [r7, #20]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8001366:	7cfb      	ldrb	r3, [r7, #19]
 8001368:	3316      	adds	r3, #22
 800136a:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 800136c:	7cbb      	ldrb	r3, [r7, #18]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->level) << pos;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	461a      	mov	r2, r3
 8001382:	7cbb      	ldrb	r3, [r7, #18]
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4313      	orrs	r3, r2
 800138c:	617b      	str	r3, [r7, #20]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 800138e:	7cfb      	ldrb	r3, [r7, #19]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	3319      	adds	r3, #25
 8001396:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8001398:	7cbb      	ldrb	r3, [r7, #18]
 800139a:	2203      	movs	r2, #3
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4013      	ands	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->duration) << pos;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	78db      	ldrb	r3, [r3, #3]
 80013ac:	461a      	mov	r2, r3
 80013ae:	7cbb      	ldrb	r3, [r7, #18]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	697a      	ldr	r2, [r7, #20]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 80013ba:	7cfb      	ldrb	r3, [r7, #19]
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 80013c0:	7cbb      	ldrb	r3, [r7, #18]
 80013c2:	220f      	movs	r2, #15
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4013      	ands	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->mapped_input) << pos;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	7cbb      	ldrb	r3, [r7, #18]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4313      	orrs	r3, r2
 80013e0:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	601a      	str	r2, [r3, #0]
}
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <XMC_CCU4_SLICE_SetTimerCountingMode>:
  }
}

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
		                                                                          (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
 800140a:	f023 0201 	bic.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	e005      	b.n	8001420 <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	615a      	str	r2, [r3, #20]
  }
}
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop

0800142c <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const uint8_t div_val)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));

  fpc = slice->FPC;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001444:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8001446:	78fb      	ldrb	r3, [r7, #3]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4313      	orrs	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8001456:	78fa      	ldrb	r2, [r7, #3]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <XMC_CCU4_EnableShadowTransfer>:

/* Transfers value from shadow timer registers to actual timer registers */
void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	431a      	orrs	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	611a      	str	r2, [r3, #16]
}
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
 8001494:	4613      	mov	r3, r2
 8001496:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800149e:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	2b09      	cmp	r3, #9
 80014a4:	d82c      	bhi.n	8001500 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80014a6:	a201      	add	r2, pc, #4	; (adr r2, 80014ac <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80014a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ac:	080014d5 	.word	0x080014d5
 80014b0:	080014d5 	.word	0x080014d5
 80014b4:	080014df 	.word	0x080014df
 80014b8:	080014df 	.word	0x080014df
 80014bc:	08001501 	.word	0x08001501
 80014c0:	08001501 	.word	0x08001501
 80014c4:	08001501 	.word	0x08001501
 80014c8:	08001501 	.word	0x08001501
 80014cc:	080014e9 	.word	0x080014e9
 80014d0:	080014f5 	.word	0x080014f5
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80014d4:	2303      	movs	r3, #3
 80014d6:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
      break;
 80014dc:	e016      	b.n	800150c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80014de:	230c      	movs	r3, #12
 80014e0:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80014e2:	2302      	movs	r3, #2
 80014e4:	617b      	str	r3, [r7, #20]
      break;
 80014e6:	e011      	b.n	800150c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80014e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ec:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 80014ee:	2308      	movs	r3, #8
 80014f0:	617b      	str	r3, [r7, #20]
      break;
 80014f2:	e00b      	b.n	800150c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 80014f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014f8:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 80014fa:	230a      	movs	r3, #10
 80014fc:	617b      	str	r3, [r7, #20]
      break;
 80014fe:	e005      	b.n	800150c <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001500:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001504:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8001506:	230c      	movs	r3, #12
 8001508:	617b      	str	r3, [r7, #20]
      break;
 800150a:	bf00      	nop
  }
  
  srs &= ~mask; 
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	4013      	ands	r3, r2
 8001514:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 8001516:	78ba      	ldrb	r2, [r7, #2]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop

08001538 <XMC_CCU4_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU4 module from reset state */
void XMC_CCU4_lDeassertReset(XMC_CCU4_MODULE_t *const module)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
	}
  #else
	if (CCU40 == module)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <XMC_CCU4_lDeassertReset+0x24>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d103      	bne.n	8001550 <XMC_CCU4_lDeassertReset+0x18>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8001548:	2004      	movs	r0, #4
 800154a:	f7ff faaf 	bl	8000aac <XMC_SCU_RESET_DeassertPeripheralReset>
 800154e:	e002      	b.n	8001556 <XMC_CCU4_lDeassertReset+0x1e>
	}
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001550:	2008      	movs	r0, #8
 8001552:	f7ff faab 	bl	8000aac <XMC_SCU_RESET_DeassertPeripheralReset>
	}
  # endif
}
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	4000c000 	.word	0x4000c000

08001560 <XMC_CCU4_lUngateClock>:
#endif

#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
void XMC_CCU4_lUngateClock(XMC_CCU4_MODULE_t *const module)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  else
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
  }
#elif ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  if (CCU40 == module)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a06      	ldr	r2, [pc, #24]	; (8001584 <XMC_CCU4_lUngateClock+0x24>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d103      	bne.n	8001578 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8001570:	2004      	movs	r0, #4
 8001572:	f7ff fbe9 	bl	8000d48 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8001576:	e002      	b.n	800157e <XMC_CCU4_lUngateClock+0x1e>
  }
  else
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 8001578:	2008      	movs	r0, #8
 800157a:	f7ff fbe5 	bl	8000d48 <XMC_SCU_CLOCK_UngatePeripheralClock>
  if (CCU40 == module)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#endif
}
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	4000c000 	.word	0x4000c000

08001588 <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 8001594:	78f8      	ldrb	r0, [r7, #3]
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	4413      	add	r3, r2
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	00c3      	lsls	r3, r0, #3
 80015a8:	440b      	add	r3, r1
 80015aa:	609a      	str	r2, [r3, #8]
}
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop

080015b8 <XMC_DAC_CH_EnablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 80015c4:	78f8      	ldrb	r0, [r7, #3]
 80015c6:	78fb      	ldrb	r3, [r7, #3]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	4413      	add	r3, r2
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	00c3      	lsls	r3, r0, #3
 80015d8:	440b      	add	r3, r1
 80015da:	605a      	str	r2, [r3, #4]
}
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop

080015e8 <XMC_DAC_CH_DisablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 80015f4:	78f8      	ldrb	r0, [r7, #3]
 80015f6:	78fb      	ldrb	r3, [r7, #3]
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	00c3      	lsls	r3, r0, #3
 8001608:	440b      	add	r3, r1
 800160a:	605a      	str	r2, [r3, #4]
}
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop

08001618 <XMC_DAC_CH_SetRampStart>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	70fb      	strb	r3, [r7, #3]
 8001624:	4613      	mov	r3, r2
 8001626:	803b      	strh	r3, [r7, #0]
  dac->DACDATA[channel] = start;
 8001628:	78fb      	ldrb	r3, [r7, #3]
 800162a:	883a      	ldrh	r2, [r7, #0]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	3304      	adds	r3, #4
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	440b      	add	r3, r1
 8001634:	605a      	str	r2, [r3, #4]
}
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <XMC_DAC_CH_SetRampStop>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
 800164c:	4613      	mov	r3, r2
 800164e:	803b      	strh	r3, [r7, #0]
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69da      	ldr	r2, [r3, #28]
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4619      	mov	r1, r3
 800165a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800165e:	408b      	lsls	r3, r1
 8001660:	43db      	mvns	r3, r3
 8001662:	4013      	ands	r3, r2
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 8001664:	883a      	ldrh	r2, [r7, #0]
 8001666:	78f9      	ldrb	r1, [r7, #3]
 8001668:	0109      	lsls	r1, r1, #4
 800166a:	408a      	lsls	r2, r1
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	61da      	str	r2, [r3, #28]
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <XMC_DAC_CH_SetTrigger>:
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	460b      	mov	r3, r1
 8001686:	607a      	str	r2, [r7, #4]
 8001688:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 800168a:	7af8      	ldrb	r0, [r7, #11]
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	4413      	add	r3, r2
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	431a      	orrs	r2, r3
 800169e:	68f9      	ldr	r1, [r7, #12]
 80016a0:	00c3      	lsls	r3, r0, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	609a      	str	r2, [r3, #8]
                              trigger;
}
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	460b      	mov	r3, r1
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80016be:	7af8      	ldrb	r0, [r7, #11]
 80016c0:	7afb      	ldrb	r3, [r7, #11]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	4413      	add	r3, r2
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	68f9      	ldr	r1, [r7, #12]
 80016d4:	00c3      	lsls	r3, r0, #3
 80016d6:	440b      	add	r3, r1
 80016d8:	605a      	str	r2, [r3, #4]
                             mode;
}
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if(UC_SERIES != XMC45)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
 80016ec:	4804      	ldr	r0, [pc, #16]	; (8001700 <XMC_DAC_Enable+0x1c>)
 80016ee:	f7ff fb2b 	bl	8000d48 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <XMC_DAC_Enable+0x1c>)
 80016f4:	f7ff f9da 	bl	8000aac <XMC_SCU_RESET_DeassertPeripheralReset>
}
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	10000020 	.word	0x10000020

08001704 <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	460b      	mov	r3, r1
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f7ff ffe6 	bl	80016e4 <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 8001718:	7afb      	ldrb	r3, [r7, #11]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	68f9      	ldr	r1, [r7, #12]
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	440b      	add	r3, r1
 8001724:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6852      	ldr	r2, [r2, #4]
 800172c:	68f9      	ldr	r1, [r7, #12]
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 8001734:	7afb      	ldrb	r3, [r7, #11]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d804      	bhi.n	8001744 <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 800173a:	7afb      	ldrb	r3, [r7, #11]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff ff22 	bl	8001588 <XMC_DAC_CH_EnableOutput>
  }
}
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop

0800174c <XMC_DAC_CH_SetFrequency>:

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
                                            const uint8_t channel,
                                            const uint32_t frequency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	460b      	mov	r3, r1
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	72fb      	strb	r3, [r7, #11]
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 800175a:	f7ff f9c5 	bl	8000ae8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	613b      	str	r3, [r7, #16]

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	d802      	bhi.n	8001774 <XMC_DAC_CH_SetFrequency+0x28>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 800176e:	2304      	movs	r3, #4
 8001770:	75fb      	strb	r3, [r7, #23]
 8001772:	e016      	b.n	80017a2 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800177a:	d302      	bcc.n	8001782 <XMC_DAC_CH_SetFrequency+0x36>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 800177c:	2303      	movs	r3, #3
 800177e:	75fb      	strb	r3, [r7, #23]
 8001780:	e00f      	b.n	80017a2 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 8001782:	7af8      	ldrb	r0, [r7, #11]
 8001784:	7afb      	ldrb	r3, [r7, #11]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	4413      	add	r3, r2
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	0d1b      	lsrs	r3, r3, #20
 8001790:	051b      	lsls	r3, r3, #20
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	431a      	orrs	r2, r3
 8001796:	68f9      	ldr	r1, [r7, #12]
 8001798:	00c3      	lsls	r3, r0, #3
 800179a:	440b      	add	r3, r1
 800179c:	605a      	str	r2, [r3, #4]
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80017a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <XMC_DAC_CH_SetRampFrequency>:

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
                                                const uint8_t channel,
                                                const uint32_t frequency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	460b      	mov	r3, r1
 80017b6:	607a      	str	r2, [r7, #4]
 80017b8:	72fb      	strb	r3, [r7, #11]
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 80017ba:	7afb      	ldrb	r3, [r7, #11]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	3304      	adds	r3, #4
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	617b      	str	r3, [r7, #20]
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	7afa      	ldrb	r2, [r7, #11]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	40d3      	lsrs	r3, r2
 80017d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017d6:	613b      	str	r3, [r7, #16]

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	7afa      	ldrb	r2, [r7, #11]
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	4611      	mov	r1, r2
 80017ec:	461a      	mov	r2, r3
 80017ee:	f7ff ffad 	bl	800174c <XMC_DAC_CH_SetFrequency>
 80017f2:	4603      	mov	r3, r0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <XMC_DAC_CH_StartSingleValueMode>:

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001812:	f7ff ff4d 	bl	80016b0 <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <XMC_DAC_CH_StartDataMode>:
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
                                             const uint8_t channel,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	460b      	mov	r3, r1
 800182e:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001834:	7afb      	ldrb	r3, [r7, #11]
 8001836:	68f8      	ldr	r0, [r7, #12]
 8001838:	4619      	mov	r1, r3
 800183a:	2200      	movs	r2, #0
 800183c:	f7ff ff38 	bl	80016b0 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <XMC_DAC_CH_StartDataMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	4619      	mov	r1, r3
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	f7ff ff7d 	bl	800174c <XMC_DAC_CH_SetFrequency>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10c      	bne.n	8001876 <XMC_DAC_CH_StartDataMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	4619      	mov	r1, r3
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	f7ff ff0a 	bl	800167c <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 8001868:	7afb      	ldrb	r3, [r7, #11]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	4619      	mov	r1, r3
 800186e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001872:	f7ff ff1d 	bl	80016b0 <XMC_DAC_CH_SetMode>
  }

  return status;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <XMC_DAC_CH_StartRampMode>:
                                             const uint8_t channel,
                                             const uint16_t start,
                                             const uint16_t stop,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	4608      	mov	r0, r1
 800188a:	4611      	mov	r1, r2
 800188c:	461a      	mov	r2, r3
 800188e:	4603      	mov	r3, r0
 8001890:	72fb      	strb	r3, [r7, #11]
 8001892:	460b      	mov	r3, r1
 8001894:	813b      	strh	r3, [r7, #8]
 8001896:	4613      	mov	r3, r2
 8001898:	80fb      	strh	r3, [r7, #6]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 800189e:	7afb      	ldrb	r3, [r7, #11]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	4619      	mov	r1, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	f7ff ff03 	bl	80016b0 <XMC_DAC_CH_SetMode>

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 80018aa:	7afa      	ldrb	r2, [r7, #11]
 80018ac:	893b      	ldrh	r3, [r7, #8]
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	4611      	mov	r1, r2
 80018b2:	461a      	mov	r2, r3
 80018b4:	f7ff feb0 	bl	8001618 <XMC_DAC_CH_SetRampStart>
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 80018b8:	7afa      	ldrb	r2, [r7, #11]
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	f7ff febd 	bl	8001640 <XMC_DAC_CH_SetRampStop>
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	4619      	mov	r1, r3
 80018cc:	6a3a      	ldr	r2, [r7, #32]
 80018ce:	f7ff fed5 	bl	800167c <XMC_DAC_CH_SetTrigger>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80018d2:	6a3b      	ldr	r3, [r7, #32]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d107      	bne.n	80018e8 <XMC_DAC_CH_StartRampMode+0x68>
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	4619      	mov	r1, r3
 80018de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018e0:	f7ff ff64 	bl	80017ac <XMC_DAC_CH_SetRampFrequency>
 80018e4:	4603      	mov	r3, r0
 80018e6:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <XMC_DAC_CH_StartRampMode+0x7c>
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 80018ee:	7afb      	ldrb	r3, [r7, #11]
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	4619      	mov	r1, r3
 80018f4:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 80018f8:	f7ff feda 	bl	80016b0 <XMC_DAC_CH_SetMode>
  }

  return status;
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop

08001908 <XMC_DAC_CH_StartPatternMode>:
                                                const uint8_t channel,
                                                const uint8_t *const pattern,
                                                const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
                                                const XMC_DAC_CH_TRIGGER_t trigger,
                                                const uint32_t frequency)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	460b      	mov	r3, r1
 8001916:	72fb      	strb	r3, [r7, #11]
 8001918:	4613      	mov	r3, r2
 800191a:	72bb      	strb	r3, [r7, #10]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001920:	7afb      	ldrb	r3, [r7, #11]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	4619      	mov	r1, r3
 8001926:	2200      	movs	r2, #0
 8001928:	f7ff fec2 	bl	80016b0 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d109      	bne.n	8001946 <XMC_DAC_CH_StartPatternMode+0x3e>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	015b      	lsls	r3, r3, #5
 8001936:	7afa      	ldrb	r2, [r7, #11]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	4611      	mov	r1, r2
 800193c:	461a      	mov	r2, r3
 800193e:	f7ff ff05 	bl	800174c <XMC_DAC_CH_SetFrequency>
 8001942:	4603      	mov	r3, r0
 8001944:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 8001946:	7dfb      	ldrb	r3, [r7, #23]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d120      	bne.n	800198e <XMC_DAC_CH_StartPatternMode+0x86>
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 800194c:	7afb      	ldrb	r3, [r7, #11]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	4619      	mov	r1, r3
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	f000 f850 	bl	80019f8 <XMC_DAC_CH_SetPattern>
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 8001958:	7abb      	ldrb	r3, [r7, #10]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <XMC_DAC_CH_StartPatternMode+0x62>
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff fe28 	bl	80015b8 <XMC_DAC_CH_EnablePatternSignOutput>
 8001968:	e004      	b.n	8001974 <XMC_DAC_CH_StartPatternMode+0x6c>
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff fe3a 	bl	80015e8 <XMC_DAC_CH_DisablePatternSignOutput>
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	68f8      	ldr	r0, [r7, #12]
 8001978:	4619      	mov	r1, r3
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	f7ff fe7e 	bl	800167c <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 8001980:	7afb      	ldrb	r3, [r7, #11]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	4619      	mov	r1, r3
 8001986:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800198a:	f7ff fe91 	bl	80016b0 <XMC_DAC_CH_SetMode>
  }

  return status;
 800198e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <XMC_DAC_CH_StartNoiseMode>:
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
                                              const uint8_t channel,
                                              const XMC_DAC_CH_TRIGGER_t trigger,
                                              const uint32_t frequency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	607a      	str	r2, [r7, #4]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	460b      	mov	r3, r1
 80019a6:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80019ac:	7afb      	ldrb	r3, [r7, #11]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	4619      	mov	r1, r3
 80019b2:	2200      	movs	r2, #0
 80019b4:	f7ff fe7c 	bl	80016b0 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d107      	bne.n	80019ce <XMC_DAC_CH_StartNoiseMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 80019be:	7afb      	ldrb	r3, [r7, #11]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	4619      	mov	r1, r3
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	f7ff fec1 	bl	800174c <XMC_DAC_CH_SetFrequency>
 80019ca:	4603      	mov	r3, r0
 80019cc:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10c      	bne.n	80019ee <XMC_DAC_CH_StartNoiseMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	4619      	mov	r1, r3
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	f7ff fe4e 	bl	800167c <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 80019e0:	7afb      	ldrb	r3, [r7, #11]
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019ea:	f7ff fe61 	bl	80016b0 <XMC_DAC_CH_SetMode>
  }

  return status;
 80019ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <XMC_DAC_CH_SetPattern>:

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	460b      	mov	r3, r1
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	72fb      	strb	r3, [r7, #11]

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e010      	b.n	8001a34 <XMC_DAC_CH_SetPattern+0x3c>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4413      	add	r3, r2
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for(index = 1U; index < 6U; ++index)
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	3301      	adds	r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b05      	cmp	r3, #5
 8001a38:	d9eb      	bls.n	8001a12 <XMC_DAC_CH_SetPattern+0x1a>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 8001a3a:	7afa      	ldrb	r2, [r7, #11]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3204      	adds	r2, #4
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  temp = data[6U];
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3306      	adds	r3, #6
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001a4e:	2301      	movs	r3, #1
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e011      	b.n	8001a78 <XMC_DAC_CH_SetPattern+0x80>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3306      	adds	r3, #6
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	4613      	mov	r3, r2
 8001a64:	009b      	lsls	r3, r3, #2
 8001a66:	4413      	add	r3, r2
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for(index = 1U; index < 6U; ++index)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d9ea      	bls.n	8001a54 <XMC_DAC_CH_SetPattern+0x5c>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 8001a7e:	7afb      	ldrb	r3, [r7, #11]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	3304      	adds	r3, #4
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	605a      	str	r2, [r3, #4]
}
 8001a8c:	371c      	adds	r7, #28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop

08001a98 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	408b      	lsls	r3, r1
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001ac2:	78bb      	ldrb	r3, [r7, #2]
 8001ac4:	78f9      	ldrb	r1, [r7, #3]
 8001ac6:	0049      	lsls	r1, r1, #1
 8001ac8:	408b      	lsls	r3, r1
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001aee:	b2db      	uxtb	r3, r3
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f894 	bl	8001c54 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	791b      	ldrb	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d106      	bne.n	8001b42 <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	f000 f8c3 	bl	8001cc8 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <XMC_SPI_CH_Init+0x64>)
 8001b46:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8001b4e:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	791b      	ldrb	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d107      	bne.n	8001b68 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8001b5c:	f043 030b 	orr.w	r3, r3, #11
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	461a      	mov	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	88db      	ldrh	r3, [r3, #6]
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	073f0102 	.word	0x073f0102

08001b84 <XMC_SPI_CH_EnableSlaveSelect>:
  return status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <XMC_SPI_CH_Transmit>:
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	807b      	strh	r3, [r7, #2]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	019b      	lsls	r3, r3, #6
 8001bcc:	b2db      	uxtb	r3, r3

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001bda:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d114      	bne.n	8001c0c <XMC_SPI_CH_Transmit+0x5c>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 8001be2:	bf00      	nop
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff79 	bl	8001adc <XMC_USIC_CH_GetTransmitBufferStatus>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	b25b      	sxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	dbf7      	blt.n	8001be4 <XMC_SPI_CH_Transmit+0x34>
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bfa:	f7ff ff7f 	bl	8001afc <XMC_SPI_CH_ClearStatusFlag>
  
    channel->TBUF[mode] = data;
 8001bfe:	787a      	ldrb	r2, [r7, #1]
 8001c00:	8879      	ldrh	r1, [r7, #2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3220      	adds	r2, #32
 8001c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001c0a:	e005      	b.n	8001c18 <XMC_SPI_CH_Transmit+0x68>
  }
  else
  {
    channel->IN[mode] = data;
 8001c0c:	787a      	ldrb	r2, [r7, #1]
 8001c0e:	8879      	ldrh	r1, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3260      	adds	r2, #96	; 0x60
 8001c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop

08001c20 <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c2e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d103      	bne.n	8001c3e <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3a:	81fb      	strh	r3, [r7, #14]
 8001c3c:	e003      	b.n	8001c46 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001c44:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001c46:	89fb      	ldrh	r3, [r7, #14]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_CHECK_CH(channel));
  
  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <XMC_USIC_CH_Enable+0x5c>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d003      	beq.n	8001c6c <XMC_USIC_CH_Enable+0x18>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <XMC_USIC_CH_Enable+0x60>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d103      	bne.n	8001c74 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001c6c:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <XMC_USIC_CH_Enable+0x64>)
 8001c6e:	f7ff fa83 	bl	8001178 <XMC_USIC_Enable>
 8001c72:	e00a      	b.n	8001c8a <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <XMC_USIC_CH_Enable+0x68>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d003      	beq.n	8001c84 <XMC_USIC_CH_Enable+0x30>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <XMC_USIC_CH_Enable+0x6c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d102      	bne.n	8001c8a <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001c84:	480f      	ldr	r0, [pc, #60]	; (8001cc4 <XMC_USIC_CH_Enable+0x70>)
 8001c86:	f7ff fa77 	bl	8001178 <XMC_USIC_Enable>
  else
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }
  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001c90:	bf00      	nop
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f9      	beq.n	8001c92 <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	f023 020f 	bic.w	r2, r3, #15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40030000 	.word	0x40030000
 8001cb4:	40030200 	.word	0x40030200
 8001cb8:	40030008 	.word	0x40030008
 8001cbc:	48020000 	.word	0x48020000
 8001cc0:	48020200 	.word	0x48020200
 8001cc4:	48020008 	.word	0x48020008

08001cc8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08e      	sub	sp, #56	; 0x38
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b63      	cmp	r3, #99	; 0x63
 8001cd8:	d958      	bls.n	8001d8c <XMC_USIC_CH_SetBaudrate+0xc4>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d055      	beq.n	8001d8c <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8001ce0:	f7fe ff02 	bl	8000ae8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001ce8:	fba3 2302 	umull	r2, r3, r3, r2
 8001cec:	095b      	lsrs	r3, r3, #5
 8001cee:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <XMC_USIC_CH_SetBaudrate+0xd8>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8001d00:	2301      	movs	r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8001d04:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001d0a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8001d10:	e022      	b.n	8001d58 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8001d12:	6a3b      	ldr	r3, [r7, #32]
 8001d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d16:	fb02 f203 	mul.w	r2, r2, r3
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	fb01 f303 	mul.w	r3, r1, r3
 8001d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d26:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	0a9b      	lsrs	r3, r3, #10
 8001d2c:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d34:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d3c:	d209      	bcs.n	8001d52 <XMC_USIC_CH_SetBaudrate+0x8a>
 8001d3e:	697a      	ldr	r2, [r7, #20]
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d205      	bcs.n	8001d52 <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8001d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d54:	3b01      	subs	r3, #1
 8001d56:	633b      	str	r3, [r7, #48]	; 0x30
 8001d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1d9      	bne.n	8001d12 <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8001d6e:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	3a01      	subs	r2, #1
 8001d74:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001d76:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8001d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001d7e:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001d8a:	e002      	b.n	8001d92 <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 8001d92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3738      	adds	r7, #56	; 0x38
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	51eb851f 	.word	0x51eb851f
 8001da4:	fc0080ef 	.word	0xfc0080ef

08001da8 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	4613      	mov	r3, r2
 8001db6:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001dbe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8001dd0:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	0211      	lsls	r1, r2, #8
 8001dd6:	68ba      	ldr	r2, [r7, #8]
 8001dd8:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8001dda:	79fa      	ldrb	r2, [r7, #7]
 8001ddc:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8001dde:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 8001de0:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	f8ffc0c0 	.word	0xf8ffc0c0

08001df8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:


void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	460b      	mov	r3, r1
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001e0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001e1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001e24:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <XMC_USIC_CH_SetInterruptNodePointer>:


void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	460b      	mov	r3, r1
 8001e46:	607a      	str	r2, [r7, #4]
 8001e48:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	7afb      	ldrb	r3, [r7, #11]
 8001e50:	2107      	movs	r1, #7
 8001e52:	fa01 f303 	lsl.w	r3, r1, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001e62:	431a      	orrs	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001e88:	7afb      	ldrb	r3, [r7, #11]
 8001e8a:	2107      	movs	r1, #7
 8001e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 8001e94:	7afb      	ldrb	r3, [r7, #11]
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001eba:	783b      	ldrb	r3, [r7, #0]
 8001ebc:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 8001ec4:	887b      	ldrh	r3, [r7, #2]
 8001ec6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001eda:	78fb      	ldrb	r3, [r7, #3]
 8001edc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001eee:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	079b      	lsls	r3, r3, #30
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueEnableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR |= (uint32_t)((uint32_t)1 << VADC_G_ARBPR_ASEN0_Pos);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f3a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop

08001f50 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueDisableArbitrationSlot:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr));
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN0_Msk);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop

08001f74 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if (XMC_VADC_CLOCK_UNGATING_NEEDED ==  1U)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7fe fee5 	bl	8000d48 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if(XMC_VADC_DEASSERT_RESET_NEEDED == 1U)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7fe fd94 	bl	8000aac <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop

08001f88 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 8001f92:	f7ff ffef 	bl	8001f74 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop

08001fdc <XMC_VADC_GLOBAL_StartupCalibration>:
#endif
}

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
 8001ff8:	e016      	b.n	8002028 <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8001ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002002:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800200a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8002012:	bf00      	nop
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800201a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f8      	bne.n	8002014 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	3301      	adds	r3, #1
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d9e5      	bls.n	8001ffa <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
  while( ( (SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) == XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	08007ee0 	.word	0x08007ee0

0800203c <XMC_VADC_GROUP_Init>:
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	2300      	movs	r3, #0
 8002050:	f000 f828 	bl	80020a4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	6859      	ldr	r1, [r3, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	2300      	movs	r3, #0
 800205e:	f000 f821 	bl	80020a4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	2200      	movs	r2, #0
 800206a:	2301      	movs	r3, #1
 800206c:	f000 f81a 	bl	80020a4 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	2201      	movs	r2, #1
 8002078:	2301      	movs	r3, #1
 800207a:	f000 f813 	bl	80020a4 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	691a      	ldr	r2, [r3, #16]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	f7ff ff0a 	bl	8001eb0 <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop

080020a4 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b08d      	sub	sp, #52	; 0x34
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	4613      	mov	r3, r2
 80020b2:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d113      	bne.n	80020e2 <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 80020ba:	2308      	movs	r3, #8
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 80020be:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 80020c4:	2300      	movs	r3, #0
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 80020c8:	231f      	movs	r3, #31
 80020ca:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 80020cc:	7a3b      	ldrb	r3, [r7, #8]
 80020ce:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 80020d6:	7a7b      	ldrb	r3, [r7, #9]
 80020d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	76fb      	strb	r3, [r7, #27]
 80020e0:	e013      	b.n	800210a <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 80020e2:	2318      	movs	r3, #24
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 80020e6:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 80020ec:	2310      	movs	r3, #16
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 80020f0:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 80020f4:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 80020f6:	7abb      	ldrb	r3, [r7, #10]
 80020f8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 8002100:	7afb      	ldrb	r3, [r7, #11]
 8002102:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002106:	b2db      	uxtb	r3, r3
 8002108:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	3228      	adds	r2, #40	; 0x28
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	43db      	mvns	r3, r3
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4013      	ands	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 8002120:	7efa      	ldrb	r2, [r7, #27]
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4313      	orrs	r3, r2
 800212c:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	43db      	mvns	r3, r3
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 8002138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	3228      	adds	r2, #40	; 0x28
 800214c:	6979      	ldr	r1, [r7, #20]
 800214e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002152:	3734      	adds	r7, #52	; 0x34
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216e:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f023 0303 	bic.w	r3, r3, #3
 8002176:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	4313      	orrs	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop

08002194 <XMC_VADC_GROUP_QueueInit>:
}

#if (XMC_VADC_QUEUE_AVAILABLE == 1U)  
/* API to initialize queue request source */
void XMC_VADC_GROUP_QueueInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_QUEUE_CONFIG_t *config)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t          reg;

  XMC_ASSERT("XMC_VADC_GROUP_QueueInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Disable arbitration slot of the queue request source */
  XMC_VADC_GROUP_QueueDisableArbitrationSlot(group_ptr);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fed6 	bl	8001f50 <XMC_VADC_GROUP_QueueDisableArbitrationSlot>
  
  reg = group_ptr->ARBPR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Request Source priority */
  reg &= ~((uint32_t)VADC_G_ARBPR_PRIO0_Msk);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f023 0303 	bic.w	r3, r3, #3
 80021b2:	60fb      	str	r3, [r7, #12]
  reg |= (uint32_t) ((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO0_Pos);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	461a      	mov	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Conversion Start mode */
  if (XMC_VADC_STARTMODE_WFS != config->conv_start_mode)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <XMC_VADC_GROUP_QueueInit+0x48>
  {
    reg |= (uint32_t)(VADC_G_ARBPR_CSM0_Msk);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f043 0308 	orr.w	r3, r3, #8
 80021da:	60fb      	str	r3, [r7, #12]
  }

  group_ptr->ARBPR = reg;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84


  group_ptr->QCTRL0 = (uint32_t)((config->qctrl0)|(uint32_t)(VADC_G_QCTRL0_XTWC_Msk)|
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80021ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
                                                    (uint32_t)(VADC_G_QCTRL0_TMWC_Msk)|
                                                    (uint32_t)(VADC_G_QCTRL0_GTWC_Msk));

  /* Gating mode */
  group_ptr->QMR0 = ((uint32_t)(config->qmr0) | (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_G_QMR0_ENGT_Pos));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  if (XMC_VADC_STARTMODE_CNR == (config->conv_start_mode) )
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d107      	bne.n	8002222 <XMC_VADC_GROUP_QueueInit+0x8e>
  {
    group_ptr->QMR0 |= (uint32_t)((uint32_t)1 << VADC_G_QMR0_RPTDIS_Pos);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002218:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  }
  /* Enable arbitration slot for the queue request source */
  XMC_VADC_GROUP_QueueEnableArbitrationSlot(group_ptr);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fe82 	bl	8001f2c <XMC_VADC_GROUP_QueueEnableArbitrationSlot>

}
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop

08002230 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>:
  return ch_num;
}

/* Select a Service Request line for the request source event */
void XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_SR_t sr)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  uint32_t sevnp;

  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  sevnp = group_ptr->SEVNP;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8002242:	60fb      	str	r3, [r7, #12]

  sevnp &= ~((uint32_t)VADC_G_SEVNP_SEV0NP_Msk);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 030f 	bic.w	r3, r3, #15
 800224a:	60fb      	str	r3, [r7, #12]
  sevnp |= (uint32_t)((uint32_t)sr << VADC_G_SEVNP_SEV0NP_Pos);
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4313      	orrs	r3, r2
 8002252:	60fb      	str	r3, [r7, #12]

  group_ptr->SEVNP = sevnp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0

}
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop

08002268 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	7b1b      	ldrb	r3, [r3, #12]
 8002278:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2201      	movs	r2, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4013      	ands	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4313      	orrs	r3, r2
 800229e:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	7b5b      	ldrb	r3, [r3, #13]
 80022ac:	b25b      	sxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db29      	blt.n	8002306 <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d10a      	bne.n	80022d2 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 80022bc:	2308      	movs	r3, #8
 80022be:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80022d0:	e00c      	b.n	80022ec <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 80022d8:	2300      	movs	r3, #0
 80022da:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022e2:	f023 021f 	bic.w	r2, r3, #31
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	7b52      	ldrb	r2, [r2, #13]
 80022f6:	b251      	sxtb	r1, r2
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	431a      	orrs	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	431a      	orrs	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6819      	ldr	r1, [r3, #0]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	3280      	adds	r2, #128	; 0x80
 8002334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 8002338:	3724      	adds	r7, #36	; 0x24
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop

08002344 <XMC_VADC_GROUP_ChannelGetResultRegister>:
  group_ptr->CHCTR[ch_num] = chctr;
}

/* API to retrieve the result register bound with specified channel */
uint8_t XMC_VADC_GROUP_ChannelGetResultRegister(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelGetResultRegister:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  resreg = (uint8_t)((group_ptr->CHCTR[ch_num] & (uint32_t)VADC_G_CHCTR_RESREG_Msk) >> VADC_G_CHCTR_RESREG_Pos) ;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	3280      	adds	r2, #128	; 0x80
 8002354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002358:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800235c:	0c1b      	lsrs	r3, r3, #16
 800235e:	73fb      	strb	r3, [r7, #15]

  return resreg;
 8002360:	7bfb      	ldrb	r3, [r7, #15]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop

08002370 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60da      	str	r2, [r3, #12]
}
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
}
 80023be:	4618      	mov	r0, r3
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop

080023cc <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	60da      	str	r2, [r3, #12]
}
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	611a      	str	r2, [r3, #16]
}
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop

08002404 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f043 0202 	orr.w	r2, r3, #2
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	611a      	str	r2, [r3, #16]
}
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop

08002424 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 800244c:	887a      	ldrh	r2, [r7, #2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800246e:	78fb      	ldrb	r3, [r7, #3]
 8002470:	2101      	movs	r1, #1
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	431a      	orrs	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002490:	2300      	movs	r3, #0
 8002492:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f914 	bl	80026dc <TIMER_CCU4_lInit>
 80024b4:	4603      	mov	r3, r0
 80024b6:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop

080024c4 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d104      	bne.n	80024ea <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7ff ff71 	bl	80023cc <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e001      	b.n	80024f4 <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop

08002500 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f81d 	bl	8002548 <TIMER_GetTimerStatus>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d011      	beq.n	8002538 <TIMER_Stop+0x38>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff59 	bl	80023e4 <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
 8002536:	e001      	b.n	800253c <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800253c:	7bfb      	ldrb	r3, [r7, #15]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop

08002548 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff1e 	bl	80023a4 <XMC_CCU4_SLICE_IsTimerRunning>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop

08002578 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8002578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8002582:	2301      	movs	r3, #1
 8002584:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7ff ffde 	bl	8002548 <TIMER_GetTimerStatus>
 800258c:	4603      	mov	r3, r0
 800258e:	f083 0301 	eor.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d079      	beq.n	800268c <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d874      	bhi.n	800268c <TIMER_SetTimeInterval+0x114>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d36f      	bcc.n	800268c <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80025b0:	e002      	b.n	80025b8 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	3301      	adds	r3, #1
 80025b6:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	f1c2 020f 	rsb	r2, r2, #15
 80025c2:	fa23 f202 	lsr.w	r2, r3, r2
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d3f2      	bcc.n	80025b2 <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d15a      	bne.n	800268c <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69da      	ldr	r2, [r3, #28]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	b2d9      	uxtb	r1, r3
 80025ec:	7913      	ldrb	r3, [r2, #4]
 80025ee:	f361 0303 	bfi	r3, r1, #0, #4
 80025f2:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	461a      	mov	r2, r3
 8002600:	f04f 0300 	mov.w	r3, #0
 8002604:	fb02 fe01 	mul.w	lr, r2, r1
 8002608:	fb00 f603 	mul.w	r6, r0, r3
 800260c:	4476      	add	r6, lr
 800260e:	fba0 2302 	umull	r2, r3, r0, r2
 8002612:	18f1      	adds	r1, r6, r3
 8002614:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	69c9      	ldr	r1, [r1, #28]
 800261a:	7909      	ldrb	r1, [r1, #4]
 800261c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8002620:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002622:	f1c1 0620 	rsb	r6, r1, #32
 8002626:	f1a1 0020 	sub.w	r0, r1, #32
 800262a:	fa22 f401 	lsr.w	r4, r2, r1
 800262e:	fa03 f606 	lsl.w	r6, r3, r6
 8002632:	4334      	orrs	r4, r6
 8002634:	fa23 f000 	lsr.w	r0, r3, r0
 8002638:	4304      	orrs	r4, r0
 800263a:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 800263e:	4620      	mov	r0, r4
 8002640:	4629      	mov	r1, r5
 8002642:	a315      	add	r3, pc, #84	; (adr r3, 8002698 <TIMER_SetTimeInterval+0x120>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f005 f92c 	bl	80078a4 <__aeabi_uldivmod>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002650:	b292      	uxth	r2, r2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800265a:	2b01      	cmp	r3, #1
 800265c:	d905      	bls.n	800266a <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695a      	ldr	r2, [r3, #20]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	791b      	ldrb	r3, [r3, #4]
 8002674:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002678:	b2db      	uxtb	r3, r3
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f7fe fed5 	bl	800142c <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f876 	bl	8002774 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8002688:	2300      	movs	r3, #0
 800268a:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 800268c:	7dfb      	ldrb	r3, [r7, #23]
}
 800268e:	4618      	mov	r0, r3
 8002690:	371c      	adds	r7, #28
 8002692:	46bd      	mov	sp, r7
 8002694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002696:	bf00      	nop
 8002698:	05f5e100 	.word	0x05f5e100
 800269c:	00000000 	.word	0x00000000

080026a0 <TIMER_Clear>:

/*
 * Clear the timer
 */
TIMER_STATUS_t TIMER_Clear(TIMER_t *const handle_ptr)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Clear:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <TIMER_Clear+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <TIMER_Clear+0x26>
    {
      /* Clear the timer register */
      XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fe9f 	bl	8002404 <XMC_CCU4_SLICE_ClearTimer>
    {
      /* Clear the timer register */
      XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
    }
#endif
    status = TIMER_STATUS_SUCCESS;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e001      	b.n	80026d0 <TIMER_Clear+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop

080026dc <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fea7 	bl	800343c <GLOBAL_CCU4_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7e1b      	ldrb	r3, [r3, #24]
 80026fc:	4610      	mov	r0, r2
 80026fe:	4619      	mov	r1, r3
 8002700:	f7ff fe3c 	bl	800237c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695a      	ldr	r2, [r3, #20]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	f7fe fd82 	bl	8001218 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f82d 	bl	8002774 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00f      	beq.n	8002744 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695a      	ldr	r2, [r3, #20]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272e:	4610      	mov	r0, r2
 8002730:	2100      	movs	r1, #0
 8002732:	461a      	mov	r2, r3
 8002734:	f7fe fea8 	bl	8001488 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	4618      	mov	r0, r3
 800273e:	2100      	movs	r1, #0
 8002740:	f7ff fe8c 	bl	800245c <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fe5b 	bl	8002404 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	d004      	beq.n	800276a <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fe31 	bl	80023cc <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800276a:	7bfb      	ldrb	r3, [r7, #15]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7ff fe4c 	bl	8002424 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	4618      	mov	r0, r3
 8002792:	2100      	movs	r1, #0
 8002794:	f7ff fe54 	bl	8002440 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	f7fe fe5f 	bl	8001468 <XMC_CCU4_EnableShadowTransfer>
}
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop

080027f4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002806:	b2db      	uxtb	r3, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002820:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  channel->FMR |= (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	43db      	mvns	r3, r3
 8002890:	401a      	ands	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop

080028a4 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80028b2:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80028d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	bf14      	ite	ne
 80028de:	2301      	movne	r3, #1
 80028e0:	2300      	moveq	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80028fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf14      	ite	ne
 8002906:	2301      	movne	r3, #1
 8002908:	2300      	moveq	r3, #0
 800290a:	b2db      	uxtb	r3, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	43db      	mvns	r3, r3
 800292c:	401a      	ands	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop

08002940 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <XMC_SPI_CH_Receive>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetReceivedDaa()
 */
__STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  /* Transmit dummy data */
  XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	b2db      	uxtb	r3, r3
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002982:	461a      	mov	r2, r3
 8002984:	f7ff f914 	bl	8001bb0 <XMC_SPI_CH_Transmit>
}
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop

08002990 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Initialize the CPU APP */
  status = (SPI_MASTER_STATUS_t)SPI_MASTER_CPU_CTRL_Init(CPU_CTRL_HANDLE);
 8002998:	4809      	ldr	r0, [pc, #36]	; (80029c0 <SPI_MASTER_Init+0x30>)
 800299a:	f001 f837 	bl	8003a0c <CPU_CTRL_XMC4_Init>
 800299e:	4603      	mov	r3, r0
 80029a0:	73fb      	strb	r3, [r7, #15]

  if (SPI_MASTER_STATUS_SUCCESS == status)
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <SPI_MASTER_Init+0x24>
  {
    /* Configure the port registers and data input registers of SPI channel */
    handle->config->fptr_spi_master_config();
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4798      	blx	r3

    status = SPI_MASTER_STATUS_SUCCESS;
 80029b0:	2300      	movs	r3, #0
 80029b2:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	1fffcdc4 	.word	0x1fffcdc4

080029c4 <SPI_MASTER_Transmit>:

/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b088      	sub	sp, #32
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
                               of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 80029d0:	2302      	movs	r3, #2
 80029d2:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	617b      	str	r3, [r7, #20]

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d04c      	beq.n	8002a7a <SPI_MASTER_Transmit+0xb6>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d049      	beq.n	8002a7a <SPI_MASTER_Transmit+0xb6>
  {
    /*Check data pointer is valid or not*/
    if (false == runtime_handle->tx_busy)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	7f9b      	ldrb	r3, [r3, #30]
 80029ea:	f083 0301 	eor.w	r3, r3, #1
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d041      	beq.n	8002a78 <SPI_MASTER_Transmit+0xb4>
    {
	  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d902      	bls.n	8002a04 <SPI_MASTER_Transmit+0x40>
	  {
	    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80029fe:	2302      	movs	r3, #2
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e001      	b.n	8002a08 <SPI_MASTER_Transmit+0x44>
	  }
	  else
	  {
	    bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* Word length is 8-bits */
 8002a04:	2301      	movs	r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
	  }
      /* Obtain the address of data, size of data */
      runtime_handle->tx_data = dataptr;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	615a      	str	r2, [r3, #20]
      runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	461a      	mov	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	fa03 f202 	lsl.w	r2, r3, r2
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	601a      	str	r2, [r3, #0]
      /* Initialize to first index and set the busy flag */
      runtime_handle->tx_data_index = 0U;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	605a      	str	r2, [r3, #4]
      runtime_handle->tx_busy = true;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2201      	movs	r2, #1
 8002a28:	779a      	strb	r2, [r3, #30]

      /* Enable the transmit buffer event */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00c      	beq.n	8002a50 <SPI_MASTER_Transmit+0x8c>
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff32 	bl	80028a4 <XMC_USIC_CH_TXFIFO_Flush>
        XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002a4a:	f7ff ff05 	bl	8002858 <XMC_USIC_CH_TXFIFO_EnableEvent>
 8002a4e:	e006      	b.n	8002a5e <SPI_MASTER_Transmit+0x9a>
      }
      else
      {
        XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5a:	f7ff fea9 	bl	80027b0 <XMC_USIC_CH_EnableEvent>
      }

      status = SPI_MASTER_STATUS_SUCCESS;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	77fb      	strb	r3, [r7, #31]

      /* Trigger the transmit buffer interrupt */
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	f7ff fedd 	bl	8002830 <XMC_USIC_CH_TriggerServiceRequest>

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
  {
    /*Check data pointer is valid or not*/
    if (false == runtime_handle->tx_busy)
 8002a76:	e002      	b.n	8002a7e <SPI_MASTER_Transmit+0xba>
 8002a78:	e001      	b.n	8002a7e <SPI_MASTER_Transmit+0xba>
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	77fb      	strb	r3, [r7, #31]
  }
  return status;
 8002a7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3720      	adds	r7, #32
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <SPI_MASTER_lFIFORead>:
***********************************************************************************************************************/
/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, uint32_t bytes_per_word)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	817b      	strh	r3, [r7, #10]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002a9c:	e03d      	b.n	8002b1a <SPI_MASTER_lFIFORead+0x92>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d218      	bcs.n	8002adc <SPI_MASTER_lFIFORead+0x54>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f8b6 	bl	8001c20 <XMC_SPI_CH_GetReceivedData>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	817b      	strh	r3, [r7, #10]
	  memcpy((void *)&runtime_handle->rx_data[runtime_handle->rx_data_index], (void *)&data, bytes_per_word);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	699a      	ldr	r2, [r3, #24]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	441a      	add	r2, r3
 8002ac2:	f107 030a 	add.w	r3, r7, #10
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	f005 f9dc 	bl	8007e88 <memcpy>
	  (runtime_handle->rx_data_index)+= bytes_per_word;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691a      	ldr	r2, [r3, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d118      	bne.n	8002b1a <SPI_MASTER_lFIFORead+0x92>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2020 	strb.w	r2, [r3, #32]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD | \
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002b00:	f7ff ff0a 	bl	8002918 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                 (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
      if (handle->config->rx_cbhandler != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <SPI_MASTER_lFIFORead+0x90>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b14:	4798      	blx	r3
      }
      break;
 8002b16:	e00b      	b.n	8002b30 <SPI_MASTER_lFIFORead+0xa8>
 8002b18:	e00a      	b.n	8002b30 <SPI_MASTER_lFIFORead+0xa8>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff0e 	bl	8002940 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8002b24:	4603      	mov	r3, r0
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1b6      	bne.n	8002a9e <SPI_MASTER_lFIFORead+0x16>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop

08002b38 <SPI_MASTER_lTransmitHandler>:
/*
 * Transmit interrupt handler for the app.
 * This is a common interrupt handling function called for different instances of the app.
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word; /* This is to support the word length 8 and 16. Specify the number
                              of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	613b      	str	r3, [r7, #16]

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	f080 8089 	bcs.w	8002c66 <SPI_MASTER_lTransmitHandler+0x12e>
  {
	if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b08      	cmp	r3, #8
 8002b5c:	d902      	bls.n	8002b64 <SPI_MASTER_lTransmitHandler+0x2c>
	{
	  bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8002b5e:	2302      	movs	r3, #2
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e001      	b.n	8002b68 <SPI_MASTER_lTransmitHandler+0x30>
	}
	else
	{
	  bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* Word length is 8-bits */
 8002b64:	2301      	movs	r3, #1
 8002b66:	617b      	str	r3, [r7, #20]
	}
    data = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	81fb      	strh	r3, [r7, #14]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d045      	beq.n	8002c04 <SPI_MASTER_lTransmitHandler+0xcc>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002b78:	e038      	b.n	8002bec <SPI_MASTER_lTransmitHandler+0xb4>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d230      	bcs.n	8002be8 <SPI_MASTER_lTransmitHandler+0xb0>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <SPI_MASTER_lTransmitHandler+0x76>
          {
            XMC_SPI_CH_Receive(handle->channel, runtime_handle->spi_master_mode);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	7f1b      	ldrb	r3, [r3, #28]
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7ff fee4 	bl	8002968 <XMC_SPI_CH_Receive>
            (runtime_handle->tx_data_index)+= bytes_per_word;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	441a      	add	r2, r3
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	e01e      	b.n	8002bec <SPI_MASTER_lTransmitHandler+0xb4>
          }
          else
          {
		    memcpy((void *)&data, (void *)&runtime_handle->tx_data[runtime_handle->tx_data_index], bytes_per_word);
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f107 020e 	add.w	r2, r7, #14
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	f005 f961 	bl	8007e88 <memcpy>
			(runtime_handle->tx_data_index)+= bytes_per_word;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	441a      	add	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
			XMC_SPI_CH_Transmit(handle->channel, data, runtime_handle->spi_master_mode);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6819      	ldr	r1, [r3, #0]
 8002bd6:	89fa      	ldrh	r2, [r7, #14]
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	7f1b      	ldrb	r3, [r3, #28]
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	f7fe ffe5 	bl	8001bb0 <XMC_SPI_CH_Transmit>
 8002be6:	e001      	b.n	8002bec <SPI_MASTER_lTransmitHandler+0xb4>
          }
        }
        else
        {
          break;
 8002be8:	bf00      	nop
 8002bea:	e078      	b.n	8002cde <SPI_MASTER_lTransmitHandler+0x1a6>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fe69 	bl	80028c8 <XMC_USIC_CH_TXFIFO_IsFull>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f083 0301 	eor.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1bb      	bne.n	8002b7a <SPI_MASTER_lTransmitHandler+0x42>
 8002c02:	e06c      	b.n	8002cde <SPI_MASTER_lTransmitHandler+0x1a6>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
	  if (runtime_handle->tx_data_dummy == true)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00e      	beq.n	8002c2c <SPI_MASTER_lTransmitHandler+0xf4>
	  {
		XMC_SPI_CH_Receive(handle->channel, runtime_handle->spi_master_mode);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	7f1b      	ldrb	r3, [r3, #28]
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f7ff fea5 	bl	8002968 <XMC_SPI_CH_Receive>
		(runtime_handle->tx_data_index)+= bytes_per_word;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	441a      	add	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	e058      	b.n	8002cde <SPI_MASTER_lTransmitHandler+0x1a6>
	  }
	  else
	  {
		memcpy((void *)&data, (void *)&runtime_handle->tx_data[runtime_handle->tx_data_index], bytes_per_word);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4413      	add	r3, r2
 8002c36:	f107 020e 	add.w	r2, r7, #14
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	f005 f922 	bl	8007e88 <memcpy>
		(runtime_handle->tx_data_index)+=bytes_per_word;
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	441a      	add	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	605a      	str	r2, [r3, #4]
		XMC_SPI_CH_Transmit(handle->channel, data, runtime_handle->spi_master_mode);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	89fa      	ldrh	r2, [r7, #14]
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	7f1b      	ldrb	r3, [r3, #28]
 8002c5a:	4608      	mov	r0, r1
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f7fe ffa6 	bl	8001bb0 <XMC_SPI_CH_Transmit>
 8002c64:	e03b      	b.n	8002cde <SPI_MASTER_lTransmitHandler+0x1a6>
	  }
    }
  }
  else
  {
   if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fe40 	bl	80028f0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d033      	beq.n	8002cde <SPI_MASTER_lTransmitHandler+0x1a6>
   {
    /*Clear the flag*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d007      	beq.n	8002c92 <SPI_MASTER_lTransmitHandler+0x15a>
    {
      /*Clear the transmit FIFO event*/
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002c8c:	f7ff fdf6 	bl	800287c <XMC_USIC_CH_TXFIFO_DisableEvent>
 8002c90:	e006      	b.n	8002ca0 <SPI_MASTER_lTransmitHandler+0x168>
    }
    else
    {
      /*Clear the standard transmit event*/
      XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c9c:	f7ff fd98 	bl	80027d0 <XMC_USIC_CH_DisableEvent>
    }

    /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8002ca0:	bf00      	nop
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fda4 	bl	80027f4 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b80      	cmp	r3, #128	; 0x80
 8002cb0:	d0f7      	beq.n	8002ca2 <SPI_MASTER_lTransmitHandler+0x16a>
    {

    }

    /*All data is transmitted*/
    runtime_handle->tx_busy = false;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	779a      	strb	r2, [r3, #30]
    runtime_handle->tx_data = NULL;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	615a      	str	r2, [r3, #20]

    if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <SPI_MASTER_lTransmitHandler+0x1a6>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	7fdb      	ldrb	r3, [r3, #31]
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <SPI_MASTER_lTransmitHandler+0x1a6>
    {
      /*Execute the callback function provided in the SPI_MASTER app UI*/
      handle->config->tx_cbhandler();
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	4798      	blx	r3
    }
   }
  }
}
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the app.
 * This is a common interrupt handling function for different instances of the SPI_MASTER app.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word; /* This is to support the word length 8 and 16. Specify the number
                               of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	613b      	str	r3, [r7, #16]
  data = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	81fb      	strh	r3, [r7, #14]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d902      	bls.n	8002d06 <SPI_MASTER_lReceiveHandler+0x22>
  {
	  bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8002d00:	2302      	movs	r3, #2
 8002d02:	617b      	str	r3, [r7, #20]
 8002d04:	e001      	b.n	8002d0a <SPI_MASTER_lReceiveHandler+0x26>
  }
  else
  {
	  bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* Word length is 8-bits */
 8002d06:	2301      	movs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d013      	beq.n	8002d3e <SPI_MASTER_lReceiveHandler+0x5a>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	6979      	ldr	r1, [r7, #20]
 8002d1a:	f7ff feb5 	bl	8002a88 <SPI_MASTER_lFIFORead>
    /*Set the trigger limit if data still to be received*/
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	691a      	ldr	r2, [r3, #16]
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d27b      	bcs.n	8002e22 <SPI_MASTER_lReceiveHandler+0x13e>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, \
                               (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	691b      	ldr	r3, [r3, #16]
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
    /*Set the trigger limit if data still to be received*/
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, \
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	4619      	mov	r1, r3
 8002d38:	f000 f876 	bl	8002e28 <SPI_MASTER_lReconfigureRxFIFO>
 8002d3c:	e071      	b.n	8002e22 <SPI_MASTER_lReceiveHandler+0x13e>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fd66 	bl	8002814 <XMC_USIC_CH_GetReceiveBufferStatus>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d01e      	beq.n	8002d90 <SPI_MASTER_lReceiveHandler+0xac>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d218      	bcs.n	8002d90 <SPI_MASTER_lReceiveHandler+0xac>
      {
    	data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fe ff5c 	bl	8001c20 <XMC_SPI_CH_GetReceivedData>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	81fb      	strh	r3, [r7, #14]
		memcpy((void *)&runtime_handle->rx_data[runtime_handle->rx_data_index], (void *)&data, bytes_per_word);
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	699a      	ldr	r2, [r3, #24]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	441a      	add	r2, r3
 8002d76:	f107 030e 	add.w	r3, r7, #14
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	f005 f882 	bl	8007e88 <memcpy>
		(runtime_handle->rx_data_index)+= bytes_per_word;
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	441a      	add	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	611a      	str	r2, [r3, #16]

      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fd3d 	bl	8002814 <XMC_USIC_CH_GetReceiveBufferStatus>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d01e      	beq.n	8002de2 <SPI_MASTER_lReceiveHandler+0xfe>
    {
	  if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d218      	bcs.n	8002de2 <SPI_MASTER_lReceiveHandler+0xfe>
	  {
	    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe ff33 	bl	8001c20 <XMC_SPI_CH_GetReceivedData>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	81fb      	strh	r3, [r7, #14]
		memcpy((void *)&runtime_handle->rx_data[runtime_handle->rx_data_index], (void *)&data, bytes_per_word);
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	441a      	add	r2, r3
 8002dc8:	f107 030e 	add.w	r3, r7, #14
 8002dcc:	4610      	mov	r0, r2
 8002dce:	4619      	mov	r1, r3
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	f005 f859 	bl	8007e88 <memcpy>
		(runtime_handle->rx_data_index)+= bytes_per_word;
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	441a      	add	r2, r3
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	691a      	ldr	r2, [r3, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d119      	bne.n	8002e22 <SPI_MASTER_lReceiveHandler+0x13e>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      XMC_USIC_CH_DisableEvent(handle->channel,
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002df8:	f7ff fcea 	bl	80027d0 <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      /* Reception complete */
      runtime_handle->rx_busy = false;
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->rx_data = NULL;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]

      if (handle->config->rx_cbhandler != NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <SPI_MASTER_lReceiveHandler+0x13e>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e20:	4798      	blx	r3
      }
    }
  }
}
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d028      	beq.n	8002e90 <SPI_MASTER_lReconfigureRxFIFO+0x68>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d025      	beq.n	8002e90 <SPI_MASTER_lReconfigureRxFIFO+0x68>
  {
    fifo_size = (uint32_t)0x01 << handle->config->rx_fifo_size;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4093      	lsls	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b08      	cmp	r3, #8
 8002e5c:	d902      	bls.n	8002e64 <SPI_MASTER_lReconfigureRxFIFO+0x3c>
    {
    	/* Data size is divided by 2, to change the trigger limit according the word length */
    	data_size = (uint32_t)data_size >> 1U;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	085b      	lsrs	r3, r3, #1
 8002e62:	603b      	str	r3, [r7, #0]
    }

    /*If data size is more than FIFO size, configure the limit to the FIFO size*/
    if (data_size < fifo_size)
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d203      	bcs.n	8002e74 <SPI_MASTER_lReconfigureRxFIFO+0x4c>
    {
      ret_limit_val = data_size - 1U;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e002      	b.n	8002e7a <SPI_MASTER_lReconfigureRxFIFO+0x52>
    }
    else
    {
      ret_limit_val = fifo_size - 1U;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
    }

    /*Set the limit value*/
    XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	f7fe ffb4 	bl	8001df8 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop

08002e98 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea4:	0a1b      	lsrs	r3, r3, #8
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8002ebe:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <NVIC_EnableIRQ+0x2c>)
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	79fa      	ldrb	r2, [r7, #7]
 8002ec8:	f002 021f 	and.w	r2, r2, #31
 8002ecc:	2001      	movs	r0, #1
 8002ece:	fa00 f202 	lsl.w	r2, r0, r2
 8002ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100

08002ee4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	6039      	str	r1, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da0b      	bge.n	8002f10 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002ef8:	490d      	ldr	r1, [pc, #52]	; (8002f30 <NVIC_SetPriority+0x4c>)
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	3b04      	subs	r3, #4
 8002f02:	683a      	ldr	r2, [r7, #0]
 8002f04:	b2d2      	uxtb	r2, r2
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	761a      	strb	r2, [r3, #24]
 8002f0e:	e009      	b.n	8002f24 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002f10:	4908      	ldr	r1, [pc, #32]	; (8002f34 <NVIC_SetPriority+0x50>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	e000ed00 	.word	0xe000ed00
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f1c3 0307 	rsb	r3, r3, #7
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	bf28      	it	cs
 8002f56:	2306      	movcs	r3, #6
 8002f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	3306      	adds	r3, #6
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d902      	bls.n	8002f68 <NVIC_EncodePriority+0x30>
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	3b01      	subs	r3, #1
 8002f66:	e000      	b.n	8002f6a <NVIC_EncodePriority+0x32>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	461a      	mov	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8002f90:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3724      	adds	r7, #36	; 0x24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop

08002fa0 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
 8002fac:	4613      	mov	r3, r2
 8002fae:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002fb0:	78f8      	ldrb	r0, [r7, #3]
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	3306      	adds	r3, #6
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8002fc2:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	1d83      	adds	r3, r0, #6
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop

08002fdc <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fec:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop

08003008 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003018:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	3b01      	subs	r3, #1
 8003020:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop

08003034 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8003048:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 800304a:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop

08003060 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop

08003088 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	2101      	movs	r1, #1
 8003094:	f7ff ffe4 	bl	8003060 <XMC_USIC_CH_SetMode>
}
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop

080030a0 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop

080030c0 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 80030d8:	4313      	orrs	r3, r2
 80030da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	68b9      	ldr	r1, [r7, #8]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	f7ff ff99 	bl	8003034 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	4619      	mov	r1, r3
 800311a:	f7ff ff5f 	bl	8002fdc <XMC_USIC_CH_SetWordLength>
}
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4619      	mov	r1, r3
 8003136:	f7ff ff67 	bl	8003008 <XMC_USIC_CH_SetFrameLength>
}
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
 800314c:	4613      	mov	r3, r2
 800314e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = USIC_CH_DX0CR_INSW_Msk;
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	3306      	adds	r3, #6
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	2210      	movs	r2, #16
 800315c:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	78bb      	ldrb	r3, [r7, #2]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	4611      	mov	r1, r2
 8003166:	461a      	mov	r2, r3
 8003168:	f7ff ff1a 	bl	8002fa0 <XMC_USIC_CH_SetInputSource>
}
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop

08003174 <SPI_BGT_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static void SPI_BGT_lInit(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH1, &SPI_BGT_Channel_Config);
 8003178:	4837      	ldr	r0, [pc, #220]	; (8003258 <SPI_BGT_lInit+0xe4>)
 800317a:	4938      	ldr	r1, [pc, #224]	; (800325c <SPI_BGT_lInit+0xe8>)
 800317c:	f7fe fcce 	bl	8001b1c <XMC_SPI_CH_Init>

  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH1);
 8003180:	4835      	ldr	r0, [pc, #212]	; (8003258 <SPI_BGT_lInit+0xe4>)
 8003182:	f7ff ff8d 	bl	80030a0 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH1, (uint8_t)16);
 8003186:	4834      	ldr	r0, [pc, #208]	; (8003258 <SPI_BGT_lInit+0xe4>)
 8003188:	2110      	movs	r1, #16
 800318a:	f7ff ffbd 	bl	8003108 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH1, (uint8_t)16);
 800318e:	4832      	ldr	r0, [pc, #200]	; (8003258 <SPI_BGT_lInit+0xe4>)
 8003190:	2110      	movs	r1, #16
 8003192:	f7ff ffc7 	bl	8003124 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH1,
 8003196:	4830      	ldr	r0, [pc, #192]	; (8003258 <SPI_BGT_lInit+0xe4>)
 8003198:	2100      	movs	r1, #0
 800319a:	2200      	movs	r2, #0
 800319c:	f7ff ffa6 	bl	80030ec <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH1, 2U);
 80031a0:	482d      	ldr	r0, [pc, #180]	; (8003258 <SPI_BGT_lInit+0xe4>)
 80031a2:	2102      	movs	r1, #2
 80031a4:	f7ff ff8c 	bl	80030c0 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the data input lines */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 80031a8:	482b      	ldr	r0, [pc, #172]	; (8003258 <SPI_BGT_lInit+0xe4>)
 80031aa:	2100      	movs	r1, #0
 80031ac:	2201      	movs	r2, #1
 80031ae:	f7ff ffc7 	bl	8003140 <XMC_SPI_CH_SetInputSource>

  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH1);
 80031b2:	4829      	ldr	r0, [pc, #164]	; (8003258 <SPI_BGT_lInit+0xe4>)
 80031b4:	f7ff ff68 	bl	8003088 <XMC_SPI_CH_Start>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &SPI_BGT_MOSI0_Config.port_config);
 80031b8:	4829      	ldr	r0, [pc, #164]	; (8003260 <SPI_BGT_lInit+0xec>)
 80031ba:	2105      	movs	r1, #5
 80031bc:	4a29      	ldr	r2, [pc, #164]	; (8003264 <SPI_BGT_lInit+0xf0>)
 80031be:	f7fd fb4f 	bl	8000860 <XMC_GPIO_Init>

  /* Configure the Hardware control mode selected for the pin */
  XMC_GPIO_SetHardwareControl((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_HWCTRL_DISABLED);
 80031c2:	4827      	ldr	r0, [pc, #156]	; (8003260 <SPI_BGT_lInit+0xec>)
 80031c4:	2105      	movs	r1, #5
 80031c6:	2200      	movs	r2, #0
 80031c8:	f7fe fc66 	bl	8001a98 <XMC_GPIO_SetHardwareControl>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &SPI_BGT_SCLKOUT_Config.port_config);
 80031cc:	4824      	ldr	r0, [pc, #144]	; (8003260 <SPI_BGT_lInit+0xec>)
 80031ce:	2104      	movs	r1, #4
 80031d0:	4a25      	ldr	r2, [pc, #148]	; (8003268 <SPI_BGT_lInit+0xf4>)
 80031d2:	f7fd fb45 	bl	8000860 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)3, &SPI_BGT_SS_0_Config.port_config);
 80031d6:	4822      	ldr	r0, [pc, #136]	; (8003260 <SPI_BGT_lInit+0xec>)
 80031d8:	2103      	movs	r1, #3
 80031da:	4a24      	ldr	r2, [pc, #144]	; (800326c <SPI_BGT_lInit+0xf8>)
 80031dc:	f7fd fb40 	bl	8000860 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH1, XMC_SPI_CH_SLAVE_SELECT_0);
 80031e0:	481d      	ldr	r0, [pc, #116]	; (8003258 <SPI_BGT_lInit+0xe4>)
 80031e2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80031e6:	f7fe fccd 	bl	8001b84 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH1,
 80031ea:	481b      	ldr	r0, [pc, #108]	; (8003258 <SPI_BGT_lInit+0xe4>)
 80031ec:	2108      	movs	r1, #8
 80031ee:	2201      	movs	r2, #1
 80031f0:	f7fe fe24 	bl	8001e3c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH1,
 80031f4:	4818      	ldr	r0, [pc, #96]	; (8003258 <SPI_BGT_lInit+0xe4>)
 80031f6:	210c      	movs	r1, #12
 80031f8:	2201      	movs	r2, #1
 80031fa:	f7fe fe1f 	bl	8001e3c <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH1,
 80031fe:	4816      	ldr	r0, [pc, #88]	; (8003258 <SPI_BGT_lInit+0xe4>)
 8003200:	2100      	movs	r1, #0
 8003202:	2203      	movs	r2, #3
 8003204:	2301      	movs	r3, #1
 8003206:	f7fe fdcf 	bl	8001da8 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 800320a:	4813      	ldr	r0, [pc, #76]	; (8003258 <SPI_BGT_lInit+0xe4>)
 800320c:	2110      	movs	r1, #16
 800320e:	2202      	movs	r2, #2
 8003210:	f7fe fe30 	bl	8001e74 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_2);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)86, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 8003214:	f7ff fe40 	bl	8002e98 <NVIC_GetPriorityGrouping>
 8003218:	4603      	mov	r3, r0
 800321a:	4618      	mov	r0, r3
 800321c:	213f      	movs	r1, #63	; 0x3f
 800321e:	2200      	movs	r2, #0
 8003220:	f7ff fe8a 	bl	8002f38 <NVIC_EncodePriority>
 8003224:	4603      	mov	r3, r0
 8003226:	2056      	movs	r0, #86	; 0x56
 8003228:	4619      	mov	r1, r3
 800322a:	f7ff fe5b 	bl	8002ee4 <NVIC_SetPriority>
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)85, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 800322e:	f7ff fe33 	bl	8002e98 <NVIC_GetPriorityGrouping>
 8003232:	4603      	mov	r3, r0
 8003234:	4618      	mov	r0, r3
 8003236:	213e      	movs	r1, #62	; 0x3e
 8003238:	2200      	movs	r2, #0
 800323a:	f7ff fe7d 	bl	8002f38 <NVIC_EncodePriority>
 800323e:	4603      	mov	r3, r0
 8003240:	2055      	movs	r0, #85	; 0x55
 8003242:	4619      	mov	r1, r3
 8003244:	f7ff fe4e 	bl	8002ee4 <NVIC_SetPriority>

  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)86);
 8003248:	2056      	movs	r0, #86	; 0x56
 800324a:	f7ff fe33 	bl	8002eb4 <NVIC_EnableIRQ>
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)85);
 800324e:	2055      	movs	r0, #85	; 0x55
 8003250:	f7ff fe30 	bl	8002eb4 <NVIC_EnableIRQ>

}
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	40030200 	.word	0x40030200
 800325c:	1fffcc7c 	.word	0x1fffcc7c
 8003260:	48028200 	.word	0x48028200
 8003264:	1fffcc68 	.word	0x1fffcc68
 8003268:	08007ef8 	.word	0x08007ef8
 800326c:	08007f14 	.word	0x08007f14

08003270 <USIC0_2_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void SPI_BGT_tx_handler()
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_BGT);
 8003274:	4801      	ldr	r0, [pc, #4]	; (800327c <USIC0_2_IRQHandler+0xc>)
 8003276:	f7ff fc5f 	bl	8002b38 <SPI_MASTER_lTransmitHandler>
}
 800327a:	bd80      	pop	{r7, pc}
 800327c:	1fffcca8 	.word	0x1fffcca8

08003280 <USIC0_1_IRQHandler>:

/*Receive ISR*/
void SPI_BGT_rx_handler()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_BGT);
 8003284:	4801      	ldr	r0, [pc, #4]	; (800328c <USIC0_1_IRQHandler+0xc>)
 8003286:	f7ff fd2d 	bl	8002ce4 <SPI_MASTER_lReceiveHandler>
}
 800328a:	bd80      	pop	{r7, pc}
 800328c:	1fffcca8 	.word	0x1fffcca8

08003290 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <NVIC_GetPriorityGrouping+0x18>)
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800329c:	0a1b      	lsrs	r3, r3, #8
}
 800329e:	4618      	mov	r0, r3
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	4603      	mov	r3, r0
 80032b4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <NVIC_EnableIRQ+0x2c>)
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	79fa      	ldrb	r2, [r7, #7]
 80032c0:	f002 021f 	and.w	r2, r2, #31
 80032c4:	2001      	movs	r0, #1
 80032c6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100

080032dc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da0b      	bge.n	8003308 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80032f0:	490d      	ldr	r1, [pc, #52]	; (8003328 <NVIC_SetPriority+0x4c>)
 80032f2:	79fb      	ldrb	r3, [r7, #7]
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	3b04      	subs	r3, #4
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	b2d2      	uxtb	r2, r2
 80032fe:	0092      	lsls	r2, r2, #2
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	440b      	add	r3, r1
 8003304:	761a      	strb	r2, [r3, #24]
 8003306:	e009      	b.n	800331c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003308:	4908      	ldr	r1, [pc, #32]	; (800332c <NVIC_SetPriority+0x50>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	e000ed00 	.word	0xe000ed00
 800332c:	e000e100 	.word	0xe000e100

08003330 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003330:	b480      	push	{r7}
 8003332:	b089      	sub	sp, #36	; 0x24
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f1c3 0307 	rsb	r3, r3, #7
 800334a:	2b06      	cmp	r3, #6
 800334c:	bf28      	it	cs
 800334e:	2306      	movcs	r3, #6
 8003350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	3306      	adds	r3, #6
 8003356:	2b06      	cmp	r3, #6
 8003358:	d902      	bls.n	8003360 <NVIC_EncodePriority+0x30>
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3b01      	subs	r3, #1
 800335e:	e000      	b.n	8003362 <NVIC_EncodePriority+0x32>
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2201      	movs	r2, #1
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	461a      	mov	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	401a      	ands	r2, r3
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2101      	movs	r1, #1
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	3b01      	subs	r3, #1
 8003382:	4619      	mov	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8003388:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 800338a:	4618      	mov	r0, r3
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop

08003398 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b25b      	sxtb	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff ff80 	bl	80032ac <NVIC_EnableIRQ>
}
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop

080033b4 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);
 80033bc:	4816      	ldr	r0, [pc, #88]	; (8003418 <INTERRUPT_Init+0x64>)
 80033be:	f000 fb25 	bl	8003a0c <CPU_CTRL_XMC4_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	73fb      	strb	r3, [r7, #15]

  if (status == INTERRUPT_STATUS_SUCCESS)
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11e      	bne.n	800340a <INTERRUPT_Init+0x56>
  {
    NVIC_SetPriority(handler->node,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	781c      	ldrb	r4, [r3, #0]
 80033d0:	f7ff ff5e 	bl	8003290 <NVIC_GetPriorityGrouping>
 80033d4:	4601      	mov	r1, r0
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	785b      	ldrb	r3, [r3, #1]

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

  if (status == INTERRUPT_STATUS_SUCCESS)
  {
    NVIC_SetPriority(handler->node,
 80033da:	461a      	mov	r2, r3
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
                                         handler->subpriority));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	789b      	ldrb	r3, [r3, #2]

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

  if (status == INTERRUPT_STATUS_SUCCESS)
  {
    NVIC_SetPriority(handler->node,
 80033e0:	4608      	mov	r0, r1
 80033e2:	4611      	mov	r1, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	f7ff ffa3 	bl	8003330 <NVIC_EncodePriority>
 80033ea:	4602      	mov	r2, r0
 80033ec:	b263      	sxtb	r3, r4
 80033ee:	4618      	mov	r0, r3
 80033f0:	4611      	mov	r1, r2
 80033f2:	f7ff ff73 	bl	80032dc <NVIC_SetPriority>
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
                                         handler->subpriority));
    if (handler->enable_at_init == true)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	78db      	ldrb	r3, [r3, #3]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <INTERRUPT_Init+0x50>
    {
      INTERRUPT_Enable(handler);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffca 	bl	8003398 <INTERRUPT_Enable>
    }

    status = INTERRUPT_STATUS_SUCCESS;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <INTERRUPT_Init+0x5a>
  }
  else
  {
    status = INTERRUPT_STATUS_FAILURE;
 800340a:	2301      	movs	r3, #1
 800340c:	73fb      	strb	r3, [r7, #15]
  {
    status = INTERRUPT_STATUS_FAILURE;
  }
#endif

  return (status);
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	bd90      	pop	{r4, r7, pc}
 8003418:	1fffcdc4 	.word	0x1fffcdc4

0800341c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]
}
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop

0800343c <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7b5b      	ldrb	r3, [r3, #13]
 8003448:	f083 0301 	eor.w	r3, r3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00f      	beq.n	8003472 <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7b1b      	ldrb	r3, [r3, #12]
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	f7fd febf 	bl	80011e0 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff ffd8 	bl	800341c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	3310      	adds	r3, #16
 8003490:	4619      	mov	r1, r3
 8003492:	2301      	movs	r3, #1
 8003494:	408b      	lsls	r3, r1
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7c1b      	ldrb	r3, [r3, #16]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d149      	bne.n	800354c <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	4610      	mov	r0, r2
 80034c2:	4619      	mov	r1, r3
 80034c4:	f7fe fd60 	bl	8001f88 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	e02f      	b.n	800352e <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d6:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4608      	mov	r0, r1
 80034e4:	4619      	mov	r1, r3
 80034e6:	f7fe fda9 	bl	800203c <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	2103      	movs	r1, #3
 80034f8:	f7fe fe30 	bl	800215c <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003504:	7a1b      	ldrb	r3, [r3, #8]
 8003506:	f083 0301 	eor.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4618      	mov	r0, r3
 8003516:	68f9      	ldr	r1, [r7, #12]
 8003518:	f7ff ffb0 	bl	800347c <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	2200      	movs	r2, #0
 8003526:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	3301      	adds	r3, #1
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d9cc      	bls.n	80034ce <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	7c5b      	ldrb	r3, [r3, #17]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fe fd4b 	bl	8001fdc <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	741a      	strb	r2, [r3, #16]
  }
  return (handle_ptr->init_state);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	7c1b      	ldrb	r3, [r3, #16]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, handler->gpio_config);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	7a1a      	ldrb	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4608      	mov	r0, r1
 800356e:	4611      	mov	r1, r2
 8003570:	461a      	mov	r2, r3
 8003572:	f7fd f975 	bl	8000860 <XMC_GPIO_Init>

  return (DIGITAL_IO_STATUS_OK);
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8003586:	2300      	movs	r3, #0
 8003588:	71fb      	strb	r3, [r7, #7]
      

/** @Initialization of APPs Init Functions */


  if (init_status == DAVE_STATUS_SUCCESS)
 800358a:	79fb      	ldrb	r3, [r7, #7]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <DAVE_Init+0x1a>
  {
    /**  Initialization of DIGITAL_IO APP instance LED_RED */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_RED);
 8003590:	4838      	ldr	r0, [pc, #224]	; (8003674 <DAVE_Init+0xf4>)
 8003592:	f7ff ffe1 	bl	8003558 <DIGITAL_IO_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d104      	bne.n	80035aa <DAVE_Init+0x2a>
  {
    /**  Initialization of DIGITAL_IO APP instance LED_YELLOW */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_YELLOW);
 80035a0:	4835      	ldr	r0, [pc, #212]	; (8003678 <DAVE_Init+0xf8>)
 80035a2:	f7ff ffd9 	bl	8003558 <DIGITAL_IO_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <DAVE_Init+0x3a>
  {
    /**  Initialization of DIGITAL_IO APP instance LED_GREEN */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_GREEN);
 80035b0:	4832      	ldr	r0, [pc, #200]	; (800367c <DAVE_Init+0xfc>)
 80035b2:	f7ff ffd1 	bl	8003558 <DIGITAL_IO_Init>
 80035b6:	4603      	mov	r3, r0
 80035b8:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d104      	bne.n	80035ca <DAVE_Init+0x4a>
  {
    /**  Initialization of TIMER APP instance ONE_HZ_TIMER */
    init_status = (DAVE_STATUS_t)TIMER_Init(&ONE_HZ_TIMER);
 80035c0:	482f      	ldr	r0, [pc, #188]	; (8003680 <DAVE_Init+0x100>)
 80035c2:	f7fe ff61 	bl	8002488 <TIMER_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d104      	bne.n	80035da <DAVE_Init+0x5a>
  {
    /**  Initialization of INTERRUPT APP instance ONE_HZ_INT */
    init_status = (DAVE_STATUS_t)INTERRUPT_Init(&ONE_HZ_INT);
 80035d0:	482c      	ldr	r0, [pc, #176]	; (8003684 <DAVE_Init+0x104>)
 80035d2:	f7ff feef 	bl	80033b4 <INTERRUPT_Init>
 80035d6:	4603      	mov	r3, r0
 80035d8:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d104      	bne.n	80035ea <DAVE_Init+0x6a>
  {
    /**  Initialization of DIGITAL_IO APP instance LDO_BGT_EN */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LDO_BGT_EN);
 80035e0:	4829      	ldr	r0, [pc, #164]	; (8003688 <DAVE_Init+0x108>)
 80035e2:	f7ff ffb9 	bl	8003558 <DIGITAL_IO_Init>
 80035e6:	4603      	mov	r3, r0
 80035e8:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <DAVE_Init+0x7a>
  {
    /**  Initialization of DAC APP instance VCOARSE */
    init_status = (DAVE_STATUS_t)DAC_Init(&VCOARSE);
 80035f0:	4826      	ldr	r0, [pc, #152]	; (800368c <DAVE_Init+0x10c>)
 80035f2:	f000 f979 	bl	80038e8 <DAC_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d104      	bne.n	800360a <DAVE_Init+0x8a>
  {
    /**  Initialization of DAC APP instance VFINE */
    init_status = (DAVE_STATUS_t)DAC_Init(&VFINE);
 8003600:	4823      	ldr	r0, [pc, #140]	; (8003690 <DAVE_Init+0x110>)
 8003602:	f000 f971 	bl	80038e8 <DAC_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <DAVE_Init+0x9a>
  {
    /**  Initialization of SPI_MASTER APP instance SPI_BGT */
    init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_BGT);
 8003610:	4820      	ldr	r0, [pc, #128]	; (8003694 <DAVE_Init+0x114>)
 8003612:	f7ff f9bd 	bl	8002990 <SPI_MASTER_Init>
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <DAVE_Init+0xaa>
  {
    /**  Initialization of TIMER APP instance FS_ADC */
    init_status = (DAVE_STATUS_t)TIMER_Init(&FS_ADC);
 8003620:	481d      	ldr	r0, [pc, #116]	; (8003698 <DAVE_Init+0x118>)
 8003622:	f7fe ff31 	bl	8002488 <TIMER_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <DAVE_Init+0xba>
  {
    /**  Initialization of DIGITAL_IO APP instance Q2ONP22 */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Q2ONP22);
 8003630:	481a      	ldr	r0, [pc, #104]	; (800369c <DAVE_Init+0x11c>)
 8003632:	f7ff ff91 	bl	8003558 <DIGITAL_IO_Init>
 8003636:	4603      	mov	r3, r0
 8003638:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <DAVE_Init+0xca>
  {
    /**  Initialization of COUNTER APP instance Q2_FREQ_P22 */
    init_status = (DAVE_STATUS_t)COUNTER_Init(&Q2_FREQ_P22);
 8003640:	4817      	ldr	r0, [pc, #92]	; (80036a0 <DAVE_Init+0x120>)
 8003642:	f000 fb89 	bl	8003d58 <COUNTER_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800364a:	79fb      	ldrb	r3, [r7, #7]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d104      	bne.n	800365a <DAVE_Init+0xda>
  {
    /**  Initialization of ADC_QUEUE APP instance ADC_QUEUE_G0 */
    init_status = (DAVE_STATUS_t)ADC_QUEUE_Init(&ADC_QUEUE_G0);
 8003650:	4814      	ldr	r0, [pc, #80]	; (80036a4 <DAVE_Init+0x124>)
 8003652:	f003 fbaf 	bl	8006db4 <ADC_QUEUE_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <DAVE_Init+0xea>
  {
    /**  Initialization of ADC_QUEUE APP instance ADC_QUEUE_G1 */
    init_status = (DAVE_STATUS_t)ADC_QUEUE_Init(&ADC_QUEUE_G1);
 8003660:	4811      	ldr	r0, [pc, #68]	; (80036a8 <DAVE_Init+0x128>)
 8003662:	f003 fba7 	bl	8006db4 <ADC_QUEUE_Init>
 8003666:	4603      	mov	r3, r0
 8003668:	71fb      	strb	r3, [r7, #7]
  }  
 

  return init_status;
 800366a:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800366c:	4618      	mov	r0, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	1fffccfc 	.word	0x1fffccfc
 8003678:	1fffcd14 	.word	0x1fffcd14
 800367c:	1fffcd2c 	.word	0x1fffcd2c
 8003680:	1fffcc18 	.word	0x1fffcc18
 8003684:	08007fb4 	.word	0x08007fb4
 8003688:	1fffcd44 	.word	0x1fffcd44
 800368c:	1fffcd64 	.word	0x1fffcd64
 8003690:	1fffcd98 	.word	0x1fffcd98
 8003694:	1fffcca8 	.word	0x1fffcca8
 8003698:	1fffcc40 	.word	0x1fffcc40
 800369c:	1fffcd50 	.word	0x1fffcd50
 80036a0:	1fffce00 	.word	0x1fffce00
 80036a4:	1fffce08 	.word	0x1fffce08
 80036a8:	1fffce2c 	.word	0x1fffce2c

080036ac <XMC_DAC_EnableSimultaneousDataMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_DAC_DisableSimultaneousDataMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop

080036cc <XMC_DAC_CH_Write>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	70fb      	strb	r3, [r7, #3]
 80036d8:	4613      	mov	r3, r2
 80036da:	803b      	strh	r3, [r7, #0]
  dac->DACDATA[channel] = data;
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	883a      	ldrh	r2, [r7, #0]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	3304      	adds	r3, #4
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	605a      	str	r2, [r3, #4]
}
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	460b      	mov	r3, r1
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 8003702:	7af8      	ldrb	r0, [r7, #11]
 8003704:	7afb      	ldrb	r3, [r7, #11]
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	4413      	add	r3, r2
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	431a      	orrs	r2, r3
 8003716:	68f9      	ldr	r1, [r7, #12]
 8003718:	00c3      	lsls	r3, r0, #3
 800371a:	440b      	add	r3, r1
 800371c:	605a      	str	r2, [r3, #4]
                             mode;
}
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <XMC_DAC_CH_EnableEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableEvent()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
 8003734:	78f8      	ldrb	r0, [r7, #3]
 8003736:	78fb      	ldrb	r3, [r7, #3]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	00c3      	lsls	r3, r0, #3
 8003748:	440b      	add	r3, r1
 800374a:	605a      	str	r2, [r3, #4]
}
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <XMC_DAC_CH_SetOutputScale>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetOutputScale()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetOutputScale(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	70fb      	strb	r3, [r7, #3]
 8003764:	4613      	mov	r3, r2
 8003766:	70bb      	strb	r3, [r7, #2]
  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_MULDIV_Msk | DAC_DAC0CFG1_SCALE_Msk)) |
 8003768:	78f8      	ldrb	r0, [r7, #3]
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	4413      	add	r3, r2
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f023 020f 	bic.w	r2, r3, #15
 8003778:	78bb      	ldrb	r3, [r7, #2]
 800377a:	431a      	orrs	r2, r3
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	00c3      	lsls	r3, r0, #3
 8003780:	440b      	add	r3, r1
 8003782:	609a      	str	r2, [r3, #8]
                              scale;
}
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop

08003790 <DAC_ModeConfig>:
  XMC_DAC_CH_SetRampStop(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, stop_ramp);
}

/* This API will configure DAC mode depends upon the user configuration */
XMC_DAC_CH_STATUS_t DAC_ModeConfig(const DAC_t * const HandlePtr)
{
 8003790:	b5b0      	push	{r4, r5, r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
  XMC_DAC_CH_STATUS_t api_status = XMC_DAC_CH_STATUS_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	73fb      	strb	r3, [r7, #15]
  /* Initialize DAC configuration created by the user */
  if ( XMC_DAC_CH_MODE_PATTERN == HandlePtr->dac_mode )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80037a4:	d115      	bne.n	80037d2 <DAC_ModeConfig+0x42>
  {
    api_status = XMC_DAC_CH_StartPatternMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7c1c      	ldrb	r4, [r3, #16]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	9200      	str	r2, [sp, #0]
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	462a      	mov	r2, r5
 80037c6:	4623      	mov	r3, r4
 80037c8:	f7fe f89e 	bl	8001908 <XMC_DAC_CH_StartPatternMode>
 80037cc:	4603      	mov	r3, r0
 80037ce:	73fb      	strb	r3, [r7, #15]
 80037d0:	e085      	b.n	80038de <DAC_ModeConfig+0x14e>
    HandlePtr->dac_pat_table_ptr,HandlePtr->dac_sign_output,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else if ( XMC_DAC_CH_MODE_SINGLE == HandlePtr->dac_mode )
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037da:	d115      	bne.n	8003808 <DAC_ModeConfig+0x78>
  {
    api_status = XMC_DAC_CH_StartSingleValueMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	f7fe f807 	bl	80017fc <XMC_DAC_CH_StartSingleValueMode>
 80037ee:	4603      	mov	r3, r0
 80037f0:	73fb      	strb	r3, [r7, #15]
    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	2200      	movs	r2, #0
 8003802:	f7ff ff63 	bl	80036cc <XMC_DAC_CH_Write>
 8003806:	e06a      	b.n	80038de <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_DATA ==  HandlePtr->dac_mode )
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003810:	d125      	bne.n	800385e <DAC_ModeConfig+0xce>
  {
    api_status = XMC_DAC_CH_StartDataMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f7fd fffc 	bl	8001820 <XMC_DAC_CH_StartDataMode>
 8003828:	4603      	mov	r3, r0
 800382a:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
    if(1U == HandlePtr->dac_service_request)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d108      	bne.n	8003848 <DAC_ModeConfig+0xb8>
    {
      /* Enable Service Request */
      XMC_DAC_CH_EnableEvent(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	f7ff ff70 	bl	8003728 <XMC_DAC_CH_EnableEvent>
    }

    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003852:	4610      	mov	r0, r2
 8003854:	4619      	mov	r1, r3
 8003856:	2200      	movs	r2, #0
 8003858:	f7ff ff38 	bl	80036cc <XMC_DAC_CH_Write>
 800385c:	e03f      	b.n	80038de <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_RAMP == HandlePtr->dac_mode )
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8003866:	d125      	bne.n	80038b4 <DAC_ModeConfig+0x124>
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8b1d      	ldrh	r5, [r3, #24]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	8b5c      	ldrh	r4, [r3, #26]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	9200      	str	r2, [sp, #0]
 8003884:	9301      	str	r3, [sp, #4]
 8003886:	462a      	mov	r2, r5
 8003888:	4623      	mov	r3, r4
 800388a:	f7fd fff9 	bl	8001880 <XMC_DAC_CH_StartRampMode>
 800388e:	4603      	mov	r3, r0
 8003890:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	791b      	ldrb	r3, [r3, #4]
 80038a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80038a6:	b2db      	uxtb	r3, r3
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	f7ff ff53 	bl	8003758 <XMC_DAC_CH_SetOutputScale>
 80038b2:	e014      	b.n	80038de <DAC_ModeConfig+0x14e>
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
  }
  else if ( XMC_DAC_CH_MODE_NOISE == HandlePtr->dac_mode )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038bc:	d10d      	bne.n	80038da <DAC_ModeConfig+0x14a>
  {
    api_status = XMC_DAC_CH_StartNoiseMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6818      	ldr	r0, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	f7fe f862 	bl	8001998 <XMC_DAC_CH_StartNoiseMode>
 80038d4:	4603      	mov	r3, r0
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	e001      	b.n	80038de <DAC_ModeConfig+0x14e>
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else
  {
    /* DAC Mode Idle */
    api_status = XMC_DAC_CH_STATUS_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
  }
  return api_status;
 80038de:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bdb0      	pop	{r4, r5, r7, pc}

080038e8 <DAC_Init>:
    * This function initializes DAC
    * peripheral as per the user configurations
*/

DAC_STATUS_t DAC_Init(const DAC_t * const HandlePtr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  DAC_STATUS_t status = DAC_STATUS_SUCCESS;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]
  /*Assert variables.*/
  XMC_ASSERT(" DAC_Init: Passing argument DAC HandlePtr of type DAC_t is Null",
             (HandlePtr != (DAC_t *)NULL));

  /* Enable DAC module */
  XMC_DAC_CH_Init(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,HandlePtr->dac_config_ptr);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6819      	ldr	r1, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4608      	mov	r0, r1
 8003904:	4611      	mov	r1, r2
 8003906:	461a      	mov	r2, r3
 8003908:	f7fd fefc 	bl	8001704 <XMC_DAC_CH_Init>

  /* Configure DAC with user configured mode */
  api_status = DAC_ModeConfig(HandlePtr);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f7ff ff3f 	bl	8003790 <DAC_ModeConfig>
 8003912:	4603      	mov	r3, r0
 8003914:	73bb      	strb	r3, [r7, #14]

  /* Check if start after initialization is enabled */
  if(HandlePtr->dac_start_after_init == 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d109      	bne.n	8003934 <DAC_Init+0x4c>
  {
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, XMC_DAC_CH_MODE_IDLE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800392a:	4610      	mov	r0, r2
 800392c:	4619      	mov	r1, r3
 800392e:	2200      	movs	r2, #0
 8003930:	f7ff fee0 	bl	80036f4 <XMC_DAC_CH_SetMode>
  }

  if(1U == HandlePtr->dac_coupled)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800393a:	2b01      	cmp	r3, #1
 800393c:	d104      	bne.n	8003948 <DAC_Init+0x60>
  {
    /* Enable Simultaneous Data Mode */
    XMC_DAC_EnableSimultaneousDataMode(HandlePtr->dac_module_ptr);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff feb2 	bl	80036ac <XMC_DAC_EnableSimultaneousDataMode>
  }

  if(api_status != XMC_DAC_CH_STATUS_OK)
 8003948:	7bbb      	ldrb	r3, [r7, #14]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <DAC_Init+0x6a>
  {
    status = DAC_STATUS_FAILURE;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003952:	7bfb      	ldrb	r3, [r7, #15]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <DAC_SingleValue_SetValue_s16>:

/*
  * This API will set data value in Single Value Signed Mode.
*/
DAC_STATUS_t DAC_SingleValue_SetValue_s16(const DAC_t * const HandlePtr,int16_t Data)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	807b      	strh	r3, [r7, #2]
  DAC_STATUS_t status;
  int16_t temp_data = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	81bb      	strh	r3, [r7, #12]
  if((DAC_DATA_VALUE_MAX_SIGN >= Data) && (DAC_DATA_VALUE_MIN_SIGN < Data))
 800396c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003974:	da1e      	bge.n	80039b4 <DAC_SingleValue_SetValue_s16+0x58>
 8003976:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800397a:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 800397e:	dd19      	ble.n	80039b4 <DAC_SingleValue_SetValue_s16+0x58>
  {
    if(Data < 0)
 8003980:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003984:	2b00      	cmp	r3, #0
 8003986:	da05      	bge.n	8003994 <DAC_SingleValue_SetValue_s16+0x38>
    {
      temp_data = (0x1000 + Data);
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800398e:	b29b      	uxth	r3, r3
 8003990:	81bb      	strh	r3, [r7, #12]
 8003992:	e001      	b.n	8003998 <DAC_SingleValue_SetValue_s16+0x3c>
    }
    else
    {
      temp_data = Data;
 8003994:	887b      	ldrh	r3, [r7, #2]
 8003996:	81bb      	strh	r3, [r7, #12]
    }

    /* Update Corresponding CH Data register */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,(uint16_t)temp_data);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80039a2:	89bb      	ldrh	r3, [r7, #12]
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	f7ff fe8f 	bl	80036cc <XMC_DAC_CH_Write>
    status = DAC_STATUS_SUCCESS;
 80039ae:	2300      	movs	r3, #0
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	e001      	b.n	80039b8 <DAC_SingleValue_SetValue_s16+0x5c>
  }
  else
  {
    /* Data Values are out of range */
    status = DAC_STATUS_API_FAIL;
 80039b4:	2302      	movs	r3, #2
 80039b6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop

080039c4 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <NVIC_SetPriorityGrouping+0x44>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80039da:	68ba      	ldr	r2, [r7, #8]
 80039dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80039e0:	4013      	ands	r3, r2
 80039e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 80039ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039f4:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80039f6:	4a04      	ldr	r2, [pc, #16]	; (8003a08 <NVIC_SetPriorityGrouping+0x44>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	60d3      	str	r3, [r2, #12]
}
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <CPU_CTRL_XMC4_Init>:
/*
 * API to initialize the CPU_CTRL_XMC4 APP
 */

CPU_CTRL_XMC4_STATUS_t CPU_CTRL_XMC4_Init(CPU_CTRL_XMC4_t *const handler)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  CPU_CTRL_XMC4_STATUS_t status;

  if(handler->initialized == false)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	791b      	ldrb	r3, [r3, #4]
 8003a18:	f083 0301 	eor.w	r3, r3, #1
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00b      	beq.n	8003a3a <CPU_CTRL_XMC4_Init+0x2e>
  {
    NVIC_SetPriorityGrouping(handler->config->prigroup);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f7ff ffcb 	bl	80039c4 <NVIC_SetPriorityGrouping>

    handler->initialized = true;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	711a      	strb	r2, [r3, #4]

    status = CPU_CTRL_XMC4_STATUS_SUCCESS;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
 8003a38:	e001      	b.n	8003a3e <CPU_CTRL_XMC4_Init+0x32>
  }
  else
  {
    /* returning SUCCESS if APP is already initialized */
    status = CPU_CTRL_XMC4_STATUS_SUCCESS;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8003a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3710      	adds	r7, #16
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	78fb      	ldrb	r3, [r7, #3]
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	60da      	str	r2, [r3, #12]
}
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	60da      	str	r2, [r3, #12]
}
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	691b      	ldr	r3, [r3, #16]
 8003abc:	f043 0202 	orr.w	r2, r3, #2
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]
}
 8003ac4:	370c      	adds	r7, #12
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop

08003ad0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	460b      	mov	r3, r1
 8003ada:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8003adc:	887a      	ldrh	r2, [r7, #2]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 8003af8:	887a      	ldrh	r2, [r7, #2]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <XMC_CCU4_SLICE_GetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerValue().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  return((uint16_t)slice->TIMER);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	b29b      	uxth	r3, r3
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003b36:	78fb      	ldrb	r3, [r7, #3]
 8003b38:	2101      	movs	r1, #1
 8003b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <COUNTER_CCU4_lInit>:
		                    XMC_CCU8_SLICE_SR_ID_t sr_line);
#endif

#ifdef COUNTER_CCU4_USED
COUNTER_STATUS_t COUNTER_CCU4_lInit(COUNTER_CCU4_CONFIG_t *const handle_ptr)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  COUNTER_STATUS_t status;

  XMC_ASSERT("COUNTER_CCU4_lInit:Invalid handle_ptr", (handle_ptr != NULL))

  status = handle_ptr->state;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b5e:	73fb      	strb	r3, [r7, #15]

  if (COUNTER_STATUS_UNINITIALIZED == status)
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	f040 80b4 	bne.w	8003cd0 <COUNTER_CCU4_lInit+0x180>
  {
     status = (COUNTER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_handle);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fc65 	bl	800343c <GLOBAL_CCU4_Init>
 8003b72:	4603      	mov	r3, r0
 8003b74:	73fb      	strb	r3, [r7, #15]

     /* Select the count mode as Edge Aligned*/
     XMC_CCU4_SLICE_SetTimerCountingMode(handle_ptr->slice_ptr,XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f7fd fc39 	bl	80013f4 <XMC_CCU4_SLICE_SetTimerCountingMode>

     /* Configure the count operation for event-0*/
     XMC_CCU4_SLICE_CountConfig(handle_ptr->slice_ptr,XMC_CCU4_SLICE_EVENT_0);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	4618      	mov	r0, r3
 8003b88:	2101      	movs	r1, #1
 8003b8a:	f7fd fb7b 	bl	8001284 <XMC_CCU4_SLICE_CountConfig>

     /* Configure various parameters for the event-0*/
     XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->slice_ptr,XMC_CCU4_SLICE_EVENT_0, handle_ptr->event0_config);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	4610      	mov	r0, r2
 8003b98:	2101      	movs	r1, #1
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	f7fd fbc0 	bl	8001320 <XMC_CCU4_SLICE_ConfigureEvent>

     if ( XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->countdir_event)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7f9b      	ldrb	r3, [r3, #30]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <COUNTER_CCU4_lInit+0x76>
     {
       /* Configure the Event 1 for external count direction*/
       XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	f7fd fbb3 	bl	8001320 <XMC_CCU4_SLICE_ConfigureEvent>
    		                         handle_ptr->count_dir_event_config);

       /* Configure the external count direction for Event 1*/
       XMC_CCU4_SLICE_DirectionConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	f7fd fb93 	bl	80012ec <XMC_CCU4_SLICE_DirectionConfig>
     }
     if ( XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->gating_event)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7fdb      	ldrb	r3, [r3, #31]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d012      	beq.n	8003bf4 <COUNTER_CCU4_lInit+0xa4>
     {
       /* Configure the External Event 1 or 2 for external gating*/
       XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->slice_ptr,handle_ptr->gating_event,
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6899      	ldr	r1, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7fda      	ldrb	r2, [r3, #31]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	4608      	mov	r0, r1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	461a      	mov	r2, r3
 8003be0:	f7fd fb9e 	bl	8001320 <XMC_CCU4_SLICE_ConfigureEvent>
    		                         handle_ptr->gating_event_config);

       /* Configure the external gating level for the counter to slice Event 1*/
       XMC_CCU4_SLICE_GateConfig(handle_ptr->slice_ptr,handle_ptr->gating_event);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	7fdb      	ldrb	r3, [r3, #31]
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f7fd fb62 	bl	80012b8 <XMC_CCU4_SLICE_GateConfig>
     }

     /* Set the period register values */
     XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->slice_ptr,COUNTER_PERIOD_MAX_VALUE);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bfe:	f7ff ff67 	bl	8003ad0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

     /* Set the compare register values */
     XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->slice_ptr,handle_ptr->count_match_value);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689a      	ldr	r2, [r3, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8b9b      	ldrh	r3, [r3, #28]
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7ff ff6d 	bl	8003aec <XMC_CCU4_SLICE_SetTimerCompareMatch>

     /*Requesting the shadow transfer for the CCU4 slice  */
     XMC_CCU4_EnableShadowTransfer(handle_ptr->kernel_ptr,handle_ptr->shadow_mask);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685a      	ldr	r2, [r3, #4]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f7fd fc23 	bl	8001468 <XMC_CCU4_EnableShadowTransfer>

     /* Configure the Interrupts for the various events*/
     if (handle_ptr->intr_count_match != (bool)false)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d009      	beq.n	8003c40 <COUNTER_CCU4_lInit+0xf0>
     {
       /* Enable the count match event */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c36:	4610      	mov	r0, r2
 8003c38:	2102      	movs	r1, #2
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 f874 	bl	8003d28 <COUNTER_CC4_lEvtConfig>
    		                  handle_ptr->count_match_node_id);
     }

     if (handle_ptr->intr_count_rollover != (bool)false)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <COUNTER_CCU4_lInit+0x10e>
     {
       /* Enable the count rollover event */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c54:	4610      	mov	r0, r2
 8003c56:	2100      	movs	r1, #0
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f000 f865 	bl	8003d28 <COUNTER_CC4_lEvtConfig>
    		                  handle_ptr->count_rollover_node_id);
     }

     if (handle_ptr->intr_evt_edge_detect != (bool)false)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d009      	beq.n	8003c7c <COUNTER_CCU4_lInit+0x12c>
     {
       /* Enable the event edge detection */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c72:	4610      	mov	r0, r2
 8003c74:	2108      	movs	r1, #8
 8003c76:	461a      	mov	r2, r3
 8003c78:	f000 f856 	bl	8003d28 <COUNTER_CC4_lEvtConfig>
    		                  handle_ptr->event_edge_det_node_id);
     }

     if (handle_ptr->intr_event1_detect != (bool)false)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <COUNTER_CCU4_lInit+0x14a>
     {
       /* Enable the event generation for External Event-1 */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1, handle_ptr->event1_node_id);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c90:	4610      	mov	r0, r2
 8003c92:	2109      	movs	r1, #9
 8003c94:	461a      	mov	r2, r3
 8003c96:	f000 f847 	bl	8003d28 <COUNTER_CC4_lEvtConfig>
     }

     if (handle_ptr->intr_event2_detect != (bool)false)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d009      	beq.n	8003cb8 <COUNTER_CCU4_lInit+0x168>
     {
       /* Enable the event generation for External Event-2 */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2, handle_ptr->event2_node_id);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cae:	4610      	mov	r0, r2
 8003cb0:	210a      	movs	r1, #10
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	f000 f838 	bl	8003d28 <COUNTER_CC4_lEvtConfig>
     }

     handle_ptr->state = COUNTER_STATUS_SUCCESS;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

     /*if counter start after initialization  is needed */
     if ((bool) true == handle_ptr->init_start)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <COUNTER_CCU4_lInit+0x180>
     {
       COUNTER_CC4_lStart(handle_ptr);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f806 	bl	8003cdc <COUNTER_CC4_lStart>
     }
  }
  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop

08003cdc <COUNTER_CC4_lStart>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_CC4_lStart(COUNTER_CCU4_CONFIG_t *const handle_ptr)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("COUNTER_CC4_lStart:Invalid handle_ptr", (handle_ptr != NULL))
  if ((COUNTER_STATUS_SUCCESS == handle_ptr->state) &&
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d118      	bne.n	8003d20 <COUNTER_CC4_lStart+0x44>
      ((bool)false == XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->slice_ptr)))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff febc 	bl	8003a70 <XMC_CCU4_SLICE_IsTimerRunning>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f083 0301 	eor.w	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_CC4_lStart(COUNTER_CCU4_CONFIG_t *const handle_ptr)
{
  XMC_ASSERT("COUNTER_CC4_lStart:Invalid handle_ptr", (handle_ptr != NULL))
  if ((COUNTER_STATUS_SUCCESS == handle_ptr->state) &&
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00d      	beq.n	8003d20 <COUNTER_CC4_lStart+0x44>
      ((bool)false == XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->slice_ptr)))
  {
    /* Enable the clock for the counter slice*/
    XMC_CCU4_EnableClock(handle_ptr->kernel_ptr,handle_ptr->slice_number);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7ff fe99 	bl	8003a48 <XMC_CCU4_EnableClock>

    /* Start the counter operation*/
    XMC_CCU4_SLICE_StartTimer(handle_ptr->slice_ptr);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff febc 	bl	8003a98 <XMC_CCU4_SLICE_StartTimer>
  }
}
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop

08003d28 <COUNTER_CC4_lEvtConfig>:
  }
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_CC4_lEvtConfig(XMC_CCU4_SLICE_t *const slice_ptr,XMC_CCU4_SLICE_IRQ_ID_t event_id,
                            XMC_CCU4_SLICE_SR_ID_t sr_line)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
 8003d34:	4613      	mov	r3, r2
 8003d36:	70bb      	strb	r3, [r7, #2]
   /* Enable the event generation for event_id */
   XMC_CCU4_SLICE_EnableEvent(slice_ptr,event_id);
 8003d38:	78fb      	ldrb	r3, [r7, #3]
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	f7ff fef1 	bl	8003b24 <XMC_CCU4_SLICE_EnableEvent>

   /* Configure the SR line for the event*/
   XMC_CCU4_SLICE_SetInterruptNode(slice_ptr,event_id,sr_line);
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	78bb      	ldrb	r3, [r7, #2]
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	4611      	mov	r1, r2
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f7fd fb9c 	bl	8001488 <XMC_CCU4_SLICE_SetInterruptNode>
}
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop

08003d58 <COUNTER_Init>:

  return version;
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
COUNTER_STATUS_t COUNTER_Init(COUNTER_t *const handle_ptr)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  COUNTER_STATUS_t status;
  status = COUNTER_STATUS_FAILURE;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("COUNTER_Init:Invalid handle_ptr", (handle_ptr != NULL))
#ifdef COUNTER_CCU4_USED
  if (COUNTER_CCU4 == handle_ptr->counter_type)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <COUNTER_Init+0x22>
  {
    status = COUNTER_CCU4_lInit(handle_ptr->ccu4_handle);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff feed 	bl	8003b50 <COUNTER_CCU4_lInit>
 8003d76:	4603      	mov	r3, r0
 8003d78:	73fb      	strb	r3, [r7, #15]
  if (COUNTER_CCU8 == handle_ptr->counter_type)
  {
    status = COUNTER_CCU8_lInit(handle_ptr->ccu8_handle);
  }
#endif
  return status;
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <COUNTER_GetCurrentCount>:
#endif
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
uint16_t COUNTER_GetCurrentCount(COUNTER_t *const handle_ptr)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("COUNTER_GetEventCount:Invalid handle_ptr", (handle_ptr != NULL))

  uint16_t count_value;
  count_value = (uint16_t)0;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	81fb      	strh	r3, [r7, #14]
#ifdef COUNTER_CCU4_USED
  if (COUNTER_CCU4 == handle_ptr->counter_type)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d107      	bne.n	8003da8 <COUNTER_GetCurrentCount+0x24>
  {
    count_value = XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_handle->slice_ptr);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff feb2 	bl	8003b08 <XMC_CCU4_SLICE_GetTimerValue>
 8003da4:	4603      	mov	r3, r0
 8003da6:	81fb      	strh	r3, [r7, #14]
  if (COUNTER_CCU8 == handle_ptr->counter_type)
  {
    count_value = XMC_CCU8_SLICE_GetTimerValue(handle_ptr->ccu8_handle->slice_ptr);
  }
#endif
  return (count_value);
 8003da8:	89fb      	ldrh	r3, [r7, #14]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop

08003db4 <COUNTER_ResetCounter>:
  return (event_status);
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_ResetCounter(COUNTER_t *const handle_ptr)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("COUNTER_ResetCounter:Invalid handle_ptr", (handle_ptr != NULL))
#ifdef COUNTER_CCU4_USED
  if (COUNTER_CCU4 == handle_ptr->counter_type)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <COUNTER_ResetCounter+0x1c>
  {
    XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_handle->slice_ptr);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff fe70 	bl	8003ab0 <XMC_CCU4_SLICE_ClearTimer>
  if (COUNTER_CCU8 == handle_ptr->counter_type)
  {
    XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_handle->slice_ptr);
  }
#endif
}
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop

08003dd8 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 8003dd8:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8003dda:	2b01      	cmp	r3, #1
	IT       LS
 8003ddc:	bf98      	it	ls
	BXLS     lr
 8003dde:	4770      	bxls	lr
	PUSH     {r4-r9}
 8003de0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8003de4:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8003de6:	089b      	lsrs	r3, r3, #2

08003de8 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8003de8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8003dec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8003df0:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8003df2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 8003df6:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8003df8:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8003dfa:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8003dfc:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8003dfe:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8003e02:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8003e06:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8003e08:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8003e0c:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8003e10:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8003e14:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8003e18:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8003e1a:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8003e1e:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8003e22:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8003e24:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8003e28:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8003e2c:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8003e30:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8003e34:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 8003e36:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8003e38:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8003e3a:	d1d5      	bne.n	8003de8 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8003e3c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8003e40:	4770      	bx	lr

08003e42 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8003e42:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8003e44:	2b01      	cmp	r3, #1
	IT       LS
 8003e46:	bf98      	it	ls
	BXLS     lr
 8003e48:	4770      	bxls	lr
	PUSH     {r4-r9}
 8003e4a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8003e4e:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8003e50:	089b      	lsrs	r3, r3, #2

08003e52 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8003e52:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8003e56:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8003e5a:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8003e5c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8003e60:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8003e64:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8003e68:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8003e6c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8003e70:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8003e74:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8003e78:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8003e7a:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8003e7e:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8003e82:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8003e86:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8003e8a:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8003e8c:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8003e8e:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8003e90:	d1df      	bne.n	8003e52 <arm_bitreversal_16_0>
	POP      {r4-r9}
 8003e92:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8003e96:	4770      	bx	lr

08003e98 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b0a0      	sub	sp, #128	; 0x80
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8003ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	4413      	add	r3, r2
 8003eb0:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8003ebc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ebe:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8003ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8003ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	4413      	add	r3, r2
 8003ece:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8003ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ed6:	4413      	add	r3, r2
 8003ed8:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8003eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003edc:	089b      	lsrs	r3, r3, #2
 8003ede:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ee0:	e1b6      	b.n	8004250 <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8003efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8003f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8003f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8003f0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8003f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8003f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8003f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8003f24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8003f2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8003f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8003f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8003f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	1d1a      	adds	r2, r3, #4
 8003f46:	603a      	str	r2, [r7, #0]
 8003f48:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f4c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	603a      	str	r2, [r7, #0]
 8003f5e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	1d1a      	adds	r2, r3, #4
 8003f72:	603a      	str	r2, [r7, #0]
 8003f74:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003f78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f80:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	1d1a      	adds	r2, r3, #4
 8003f88:	603a      	str	r2, [r7, #0]
 8003f8a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003f8e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f96:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8003f9a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003f9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8003faa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003fae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8003fba:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003fbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fc6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8003fca:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003fce:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fd6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8003fda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fdc:	1d1a      	adds	r2, r3, #4
 8003fde:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fe0:	ed97 7a06 	vldr	s14, [r7, #24]
 8003fe4:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fec:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8003ff0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ff2:	1d1a      	adds	r2, r3, #4
 8003ff4:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ff6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ffa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004002:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8004006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004008:	1d1a      	adds	r2, r3, #4
 800400a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800400c:	ed97 7a08 	vldr	s14, [r7, #32]
 8004010:	edd7 7a04 	vldr	s15, [r7, #16]
 8004014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004018:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 800401c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004022:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004026:	edd7 7a05 	vldr	s15, [r7, #20]
 800402a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800402e:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8004032:	ed97 7a02 	vldr	s14, [r7, #8]
 8004036:	edd7 7a06 	vldr	s15, [r7, #24]
 800403a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800403e:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8004042:	ed97 7a03 	vldr	s14, [r7, #12]
 8004046:	edd7 7a07 	vldr	s15, [r7, #28]
 800404a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404e:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8004052:	ed97 7a04 	vldr	s14, [r7, #16]
 8004056:	edd7 7a08 	vldr	s15, [r7, #32]
 800405a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800405e:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8004062:	ed97 7a05 	vldr	s14, [r7, #20]
 8004066:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800406a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406e:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8004072:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004074:	1d1a      	adds	r2, r3, #4
 8004076:	673a      	str	r2, [r7, #112]	; 0x70
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800407c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800407e:	1d1a      	adds	r2, r3, #4
 8004080:	673a      	str	r2, [r7, #112]	; 0x70
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8004086:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800408a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8004096:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800409a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80040a6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80040aa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80040ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80040b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80040ba:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80040be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80040c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c8:	1d1a      	adds	r2, r3, #4
 80040ca:	677a      	str	r2, [r7, #116]	; 0x74
 80040cc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80040d0:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80040d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d8:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80040dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040de:	1d1a      	adds	r2, r3, #4
 80040e0:	677a      	str	r2, [r7, #116]	; 0x74
 80040e2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80040e6:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80040ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040ee:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80040f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80040f6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8004102:	ed97 7a03 	vldr	s14, [r7, #12]
 8004106:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800410a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8004112:	ed97 7a03 	vldr	s14, [r7, #12]
 8004116:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8004122:	ed97 7a02 	vldr	s14, [r7, #8]
 8004126:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8004132:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004134:	1d1a      	adds	r2, r3, #4
 8004136:	67ba      	str	r2, [r7, #120]	; 0x78
 8004138:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800413c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004144:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8004148:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414a:	1d1a      	adds	r2, r3, #4
 800414c:	67ba      	str	r2, [r7, #120]	; 0x78
 800414e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004152:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800415a:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 800415e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004160:	1d1a      	adds	r2, r3, #4
 8004162:	673a      	str	r2, [r7, #112]	; 0x70
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800416a:	1d1a      	adds	r2, r3, #4
 800416c:	673a      	str	r2, [r7, #112]	; 0x70
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8004172:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004176:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800417a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800417e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8004182:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004186:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800418a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800418e:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8004192:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004196:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800419a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800419e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80041a2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80041a6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80041aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ae:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 80041b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b4:	1d1a      	adds	r2, r3, #4
 80041b6:	677a      	str	r2, [r7, #116]	; 0x74
 80041b8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80041bc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80041c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c4:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80041c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041ca:	1d1a      	adds	r2, r3, #4
 80041cc:	677a      	str	r2, [r7, #116]	; 0x74
 80041ce:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041d2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80041d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041da:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 80041de:	ed97 7a04 	vldr	s14, [r7, #16]
 80041e2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80041e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ea:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80041ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80041f2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80041fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004202:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 800420e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004212:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800421e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004220:	1d1a      	adds	r2, r3, #4
 8004222:	67ba      	str	r2, [r7, #120]	; 0x78
 8004224:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004228:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800422c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004230:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8004234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	67ba      	str	r2, [r7, #120]	; 0x78
 800423a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800423e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8004242:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004246:	edc3 7a00 	vstr	s15, [r3]
    //    Initialize mid pointers
    pMid1 = p1 + L;
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 800424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424c:	3b01      	subs	r3, #1
 800424e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004252:	2b00      	cmp	r3, #0
 8004254:	f47f ae45 	bne.w	8003ee2 <arm_cfft_radix8by2_f32+0x4a>
        *pMid2++ = m0 - m1;
        *pMid2++ = m2 + m3;
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8004258:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	2302      	movs	r3, #2
 8004268:	f000 fee6 	bl	8005038 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 800426c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800426e:	b29a      	uxth	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004276:	4611      	mov	r1, r2
 8004278:	461a      	mov	r2, r3
 800427a:	2302      	movs	r3, #2
 800427c:	f000 fedc 	bl	8005038 <arm_radix8_butterfly_f32>
}
 8004280:	3780      	adds	r7, #128	; 0x80
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop

08004288 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b0ac      	sub	sp, #176	; 0xb0
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	085b      	lsrs	r3, r3, #1
 8004298:	b29b      	uxth	r3, r3
 800429a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800429e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80042ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80042b6:	4413      	add	r3, r2
 80042b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80042bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80042c6:	4413      	add	r3, r2
 80042c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80042d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042d4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80042d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042da:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80042dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042e0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80042e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042e6:	3b04      	subs	r3, #4
 80042e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80042ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042f0:	3b04      	subs	r3, #4
 80042f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80042f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042fa:	3b04      	subs	r3, #4
 80042fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8004300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800430a:	4413      	add	r3, r2
 800430c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004318:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800431c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004320:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8004328:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8004332:	2302      	movs	r3, #2
 8004334:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8004336:	2304      	movs	r3, #4
 8004338:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800433a:	2306      	movs	r3, #6
 800433c:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	ed93 7a00 	vldr	s14, [r3]
 8004344:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004348:	edd3 7a00 	vldr	s15, [r3]
 800434c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004350:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	ed93 7a00 	vldr	s14, [r3]
 800435a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004366:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	3304      	adds	r3, #4
 800436e:	ed93 7a00 	vldr	s14, [r3]
 8004372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004376:	3304      	adds	r3, #4
 8004378:	edd3 7a00 	vldr	s15, [r3]
 800437c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004380:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	3304      	adds	r3, #4
 8004388:	ed93 7a00 	vldr	s14, [r3]
 800438c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004390:	3304      	adds	r3, #4
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800439a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800439e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a2:	3304      	adds	r3, #4
 80043a4:	ed93 7a00 	vldr	s14, [r3]
 80043a8:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80043ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b4:	3304      	adds	r3, #4
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043be:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80043c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80043ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043d6:	edd3 7a00 	vldr	s15, [r3]
 80043da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80043e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e6:	edd3 7a00 	vldr	s15, [r3]
 80043ea:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80043ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f6:	edd3 7a00 	vldr	s15, [r3]
 80043fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043fe:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004402:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004406:	3304      	adds	r3, #4
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004410:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004414:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004418:	3304      	adds	r3, #4
 800441a:	edd3 7a00 	vldr	s15, [r3]
 800441e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004422:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800442a:	3304      	adds	r3, #4
 800442c:	edd3 7a00 	vldr	s15, [r3]
 8004430:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800443c:	3304      	adds	r3, #4
 800443e:	edd3 7a00 	vldr	s15, [r3]
 8004442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004446:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800444a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800444e:	ed93 7a00 	vldr	s14, [r3]
 8004452:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800445a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800445e:	edd3 7a00 	vldr	s15, [r3]
 8004462:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004466:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	1d1a      	adds	r2, r3, #4
 800446e:	603a      	str	r2, [r7, #0]
 8004470:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004474:	ed92 7a00 	vldr	s14, [r2]
 8004478:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800447c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004480:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004484:	edd2 7a00 	vldr	s15, [r2]
 8004488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800448c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	1d1a      	adds	r2, r3, #4
 8004494:	603a      	str	r2, [r7, #0]
 8004496:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800449a:	3204      	adds	r2, #4
 800449c:	ed92 7a00 	vldr	s14, [r2]
 80044a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80044a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80044ac:	3204      	adds	r2, #4
 80044ae:	edd2 7a00 	vldr	s15, [r2]
 80044b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044b6:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 80044ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044be:	1d1a      	adds	r2, r3, #4
 80044c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80044c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044c6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 80044c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044cc:	1d1a      	adds	r2, r3, #4
 80044ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80044d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 80044d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044da:	1d1a      	adds	r2, r3, #4
 80044dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044e0:	69fa      	ldr	r2, [r7, #28]
 80044e2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 80044e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e8:	1d1a      	adds	r2, r3, #4
 80044ea:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 80044f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044f6:	1d1a      	adds	r2, r3, #4
 80044f8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8004500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004504:	1d1a      	adds	r2, r3, #4
 8004506:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800450e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004516:	4413      	add	r3, r2
 8004518:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800451c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004524:	4413      	add	r3, r2
 8004526:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800452a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004532:	4413      	add	r3, r2
 8004534:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8004538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800453c:	3b02      	subs	r3, #2
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004544:	e31a      	b.n	8004b7c <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	ed93 7a00 	vldr	s14, [r3]
 800454c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004550:	edd3 7a00 	vldr	s15, [r3]
 8004554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004558:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	ed93 7a00 	vldr	s14, [r3]
 8004562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004566:	edd3 7a00 	vldr	s15, [r3]
 800456a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800456e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	ed93 7a00 	vldr	s14, [r3]
 800457a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800457e:	3304      	adds	r3, #4
 8004580:	edd3 7a00 	vldr	s15, [r3]
 8004584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004588:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	3304      	adds	r3, #4
 8004590:	ed93 7a00 	vldr	s14, [r3]
 8004594:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004598:	3304      	adds	r3, #4
 800459a:	edd3 7a00 	vldr	s15, [r3]
 800459e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80045a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045aa:	3304      	adds	r3, #4
 80045ac:	ed93 7a00 	vldr	s14, [r3]
 80045b0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80045b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045bc:	3304      	adds	r3, #4
 80045be:	edd3 7a00 	vldr	s15, [r3]
 80045c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 80045ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045ce:	edd3 7a00 	vldr	s15, [r3]
 80045d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80045d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045de:	edd3 7a00 	vldr	s15, [r3]
 80045e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 80045ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045ee:	edd3 7a00 	vldr	s15, [r3]
 80045f2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80045f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 800460a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800460e:	3304      	adds	r3, #4
 8004610:	edd3 7a00 	vldr	s15, [r3]
 8004614:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004618:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004620:	3304      	adds	r3, #4
 8004622:	edd3 7a00 	vldr	s15, [r3]
 8004626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800462a:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 800462e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004632:	3304      	adds	r3, #4
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800463c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004644:	3304      	adds	r3, #4
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464e:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004652:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004656:	ed93 7a00 	vldr	s14, [r3]
 800465a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800465e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004662:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004666:	edd3 7a00 	vldr	s15, [r3]
 800466a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466e:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	1d1a      	adds	r2, r3, #4
 8004676:	603a      	str	r2, [r7, #0]
 8004678:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800467c:	ed92 7a00 	vldr	s14, [r2]
 8004680:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004684:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004688:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800468c:	edd2 7a00 	vldr	s15, [r2]
 8004690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004694:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	603a      	str	r2, [r7, #0]
 800469e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80046a2:	3204      	adds	r2, #4
 80046a4:	ed92 7a00 	vldr	s14, [r2]
 80046a8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80046ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80046b4:	3204      	adds	r2, #4
 80046b6:	edd2 7a00 	vldr	s15, [r2]
 80046ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046be:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 80046c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046c6:	3b04      	subs	r3, #4
 80046c8:	ed93 7a00 	vldr	s14, [r3]
 80046cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046d0:	3b04      	subs	r3, #4
 80046d2:	edd3 7a00 	vldr	s15, [r3]
 80046d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 80046de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046e2:	3b04      	subs	r3, #4
 80046e4:	ed93 7a00 	vldr	s14, [r3]
 80046e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ec:	3b04      	subs	r3, #4
 80046ee:	edd3 7a00 	vldr	s15, [r3]
 80046f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 80046fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80046fe:	ed93 7a00 	vldr	s14, [r3]
 8004702:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004706:	edd3 7a00 	vldr	s15, [r3]
 800470a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800470e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8004712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004716:	ed93 7a00 	vldr	s14, [r3]
 800471a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800471e:	edd3 7a00 	vldr	s15, [r3]
 8004722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004726:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 800472a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800472e:	ed93 7a00 	vldr	s14, [r3]
 8004732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004736:	edd3 7a00 	vldr	s15, [r3]
 800473a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800473e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004746:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800474a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800474e:	ed93 7a00 	vldr	s14, [r3]
 8004752:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004756:	edd3 7a00 	vldr	s15, [r3]
 800475a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800475e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004762:	3b04      	subs	r3, #4
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	ee37 7a67 	vsub.f32	s14, s14, s15
 800476c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004770:	3b04      	subs	r3, #4
 8004772:	edd3 7a00 	vldr	s15, [r3]
 8004776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800477e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004782:	3b04      	subs	r3, #4
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800478c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004790:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004794:	3b04      	subs	r3, #4
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800479e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 80047a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047a6:	edd3 7a00 	vldr	s15, [r3]
 80047aa:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80047ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047b6:	edd3 7a00 	vldr	s15, [r3]
 80047ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047be:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 80047c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047c6:	ed93 7a00 	vldr	s14, [r3]
 80047ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047ce:	edd3 7a00 	vldr	s15, [r3]
 80047d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047d6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80047da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047de:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 80047e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80047e6:	3b04      	subs	r3, #4
 80047e8:	ed93 7a00 	vldr	s14, [r3]
 80047ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047f0:	3b04      	subs	r3, #4
 80047f2:	edd3 7a00 	vldr	s15, [r3]
 80047f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047fa:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80047fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004802:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8004806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800480a:	1f1a      	subs	r2, r3, #4
 800480c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004810:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004814:	ed92 7a00 	vldr	s14, [r2]
 8004818:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800481c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004820:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004824:	edd2 7a00 	vldr	s15, [r2]
 8004828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482c:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8004830:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004834:	1f1a      	subs	r2, r3, #4
 8004836:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800483a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800483e:	3a04      	subs	r2, #4
 8004840:	ed92 7a00 	vldr	s14, [r2]
 8004844:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004848:	ee37 7a27 	vadd.f32	s14, s14, s15
 800484c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004850:	3a04      	subs	r2, #4
 8004852:	edd2 7a00 	vldr	s15, [r2]
 8004856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800485a:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 800485e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004862:	1d1a      	adds	r2, r3, #4
 8004864:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 800486c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004870:	1d1a      	adds	r2, r3, #4
 8004872:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 800487a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800487e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 800488a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800488e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004896:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 800489a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800489e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 80048aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80048ae:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80048b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 80048ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048be:	1d1a      	adds	r2, r3, #4
 80048c0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80048c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80048c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80048cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048d0:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80048d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048d8:	1d1a      	adds	r2, r3, #4
 80048da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80048de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80048e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80048e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ea:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 80048ee:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80048f2:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80048f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 80048fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004902:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 800490e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8004912:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 800491e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8004922:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 800492e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004932:	1f1a      	subs	r2, r3, #4
 8004934:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004938:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800493c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004944:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 8004948:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800494c:	1f1a      	subs	r2, r3, #4
 800494e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004952:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004956:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800495a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800495e:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8004962:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800496a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8004972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800497a:	4413      	add	r3, r2
 800497c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8004980:	ed97 7a07 	vldr	s14, [r7, #28]
 8004984:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800498c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 8004990:	ed97 7a08 	vldr	s14, [r7, #32]
 8004994:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004998:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80049a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80049a4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80049b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80049b4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 80049c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049c4:	1d1a      	adds	r2, r3, #4
 80049c6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80049ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80049d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049d6:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 80049da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049de:	1d1a      	adds	r2, r3, #4
 80049e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049e4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80049e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80049ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049f0:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 80049f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80049f8:	eeb1 7a67 	vneg.f32	s14, s15
 80049fc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004a00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a04:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 8004a08:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004a0c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a14:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 8004a18:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004a1c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a24:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8004a28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8004a2c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004a30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8004a38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a3c:	1f1a      	subs	r2, r3, #4
 8004a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a42:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004a46:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a4e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8004a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004a56:	1f1a      	subs	r2, r3, #4
 8004a58:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a5c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004a60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a68:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 8004a6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8004a74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8004a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a84:	4413      	add	r3, r2
 8004a86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8004a8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004a8e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 8004a9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004a9e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 8004aaa:	ed97 7a04 	vldr	s14, [r7, #16]
 8004aae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8004aba:	ed97 7a03 	vldr	s14, [r7, #12]
 8004abe:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8004aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ace:	1d1a      	adds	r2, r3, #4
 8004ad0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004ad4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae0:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8004ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ae8:	1d1a      	adds	r2, r3, #4
 8004aea:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004aee:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004af2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afa:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8004afe:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b02:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b0a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8004b0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b12:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b1a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8004b1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004b22:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8004b2e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004b32:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b3a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8004b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b42:	1f1a      	subs	r2, r3, #4
 8004b44:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b48:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004b4c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b54:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8004b58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b5c:	1f1a      	subs	r2, r3, #4
 8004b5e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004b62:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004b66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b6e:	edc3 7a00 	vstr	s15, [r3]

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8004b72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b76:	3b01      	subs	r3, #1
 8004b78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f47f ace0 	bne.w	8004546 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	ed93 7a00 	vldr	s14, [r3]
 8004b8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b98:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	ed93 7a00 	vldr	s14, [r3]
 8004ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ba6:	edd3 7a00 	vldr	s15, [r3]
 8004baa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bae:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	ed93 7a00 	vldr	s14, [r3]
 8004bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	edd3 7a00 	vldr	s15, [r3]
 8004bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bc8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	3304      	adds	r3, #4
 8004bd0:	ed93 7a00 	vldr	s14, [r3]
 8004bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bd8:	3304      	adds	r3, #4
 8004bda:	edd3 7a00 	vldr	s15, [r3]
 8004bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004be2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004be6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bea:	3304      	adds	r3, #4
 8004bec:	ed93 7a00 	vldr	s14, [r3]
 8004bf0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8004bf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bf8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	edd3 7a00 	vldr	s15, [r3]
 8004c02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c06:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c0e:	edd3 7a00 	vldr	s15, [r3]
 8004c12:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c1e:	edd3 7a00 	vldr	s15, [r3]
 8004c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c26:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c3e:	edd3 7a00 	vldr	s15, [r3]
 8004c42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004c4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c4e:	3304      	adds	r3, #4
 8004c50:	edd3 7a00 	vldr	s15, [r3]
 8004c54:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004c58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c60:	3304      	adds	r3, #4
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6a:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004c6e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c72:	3304      	adds	r3, #4
 8004c74:	edd3 7a00 	vldr	s15, [r3]
 8004c78:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8004c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c84:	3304      	adds	r3, #4
 8004c86:	edd3 7a00 	vldr	s15, [r3]
 8004c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004c92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c96:	ed93 7a00 	vldr	s14, [r3]
 8004c9a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8004c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ca2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ca6:	edd3 7a00 	vldr	s15, [r3]
 8004caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cae:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	1d1a      	adds	r2, r3, #4
 8004cb6:	603a      	str	r2, [r7, #0]
 8004cb8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004cbc:	ed92 7a00 	vldr	s14, [r2]
 8004cc0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8004cc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cc8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004ccc:	edd2 7a00 	vldr	s15, [r2]
 8004cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cd4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	1d1a      	adds	r2, r3, #4
 8004cdc:	603a      	str	r2, [r7, #0]
 8004cde:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004ce2:	3204      	adds	r2, #4
 8004ce4:	ed92 7a00 	vldr	s14, [r2]
 8004ce8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004cec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004cf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004cf4:	3204      	adds	r2, #4
 8004cf6:	edd2 7a00 	vldr	s15, [r2]
 8004cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cfe:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8004d02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8004d0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8004d12:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004d16:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8004d22:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004d26:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8004d32:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8004d36:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8004d42:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8004d46:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d4e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8004d52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d56:	1d1a      	adds	r2, r3, #4
 8004d58:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d5c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004d60:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d68:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8004d6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d70:	1d1a      	adds	r2, r3, #4
 8004d72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004d76:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004d7a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d82:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8004d86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8004d8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004d96:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d9a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004da6:	ed97 7a08 	vldr	s14, [r7, #32]
 8004daa:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8004db6:	ed97 7a08 	vldr	s14, [r7, #32]
 8004dba:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dc2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8004dc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dca:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8004dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dda:	1d1a      	adds	r2, r3, #4
 8004ddc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004de0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004de4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dec:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8004df0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004dfa:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004dfe:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e06:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8004e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8004e12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8004e1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e1e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e26:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8004e2a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e2e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e36:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8004e3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e3e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8004e4a:	ed97 7a03 	vldr	s14, [r7, #12]
 8004e4e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8004e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e56:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8004e5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e5e:	1d1a      	adds	r2, r3, #4
 8004e60:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e64:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004e68:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e70:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e78:	1d1a      	adds	r2, r3, #4
 8004e7a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004e7e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004e82:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e8a:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8004e8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2304      	movs	r3, #4
 8004ea0:	f000 f8ca 	bl	8005038 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8004ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	f000 f8bf 	bl	8005038 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8004eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2304      	movs	r3, #4
 8004ecc:	f000 f8b4 	bl	8005038 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8004ed0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8004edc:	4611      	mov	r1, r2
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2304      	movs	r3, #4
 8004ee2:	f000 f8a9 	bl	8005038 <arm_radix8_butterfly_f32>
}
 8004ee6:	37b0      	adds	r7, #176	; 0xb0
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	4611      	mov	r1, r2
 8004ef8:	461a      	mov	r2, r3
 8004efa:	460b      	mov	r3, r1
 8004efc:	71fb      	strb	r3, [r7, #7]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d117      	bne.n	8004f3e <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	3304      	adds	r3, #4
 8004f12:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	e00d      	b.n	8004f36 <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	edd3 7a00 	vldr	s15, [r3]
 8004f20:	eef1 7a67 	vneg.f32	s15, s15
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	61bb      	str	r3, [r7, #24]

    if(ifftFlag == 1u)
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
        for(l=0; l<L; l++) 
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	3301      	adds	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d3ed      	bcc.n	8004f1a <arm_cfft_f32+0x2e>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L) 
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d024      	beq.n	8004f90 <arm_cfft_f32+0xa4>
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d80b      	bhi.n	8004f64 <arm_cfft_f32+0x78>
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d01f      	beq.n	8004f90 <arm_cfft_f32+0xa4>
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	d802      	bhi.n	8004f5a <arm_cfft_f32+0x6e>
 8004f54:	2b10      	cmp	r3, #16
 8004f56:	d016      	beq.n	8004f86 <arm_cfft_f32+0x9a>
 8004f58:	e02a      	b.n	8004fb0 <arm_cfft_f32+0xc4>
 8004f5a:	2b40      	cmp	r3, #64	; 0x40
 8004f5c:	d01d      	beq.n	8004f9a <arm_cfft_f32+0xae>
 8004f5e:	2b80      	cmp	r3, #128	; 0x80
 8004f60:	d011      	beq.n	8004f86 <arm_cfft_f32+0x9a>
 8004f62:	e025      	b.n	8004fb0 <arm_cfft_f32+0xc4>
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f68:	d00d      	beq.n	8004f86 <arm_cfft_f32+0x9a>
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f6e:	d803      	bhi.n	8004f78 <arm_cfft_f32+0x8c>
 8004f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f74:	d011      	beq.n	8004f9a <arm_cfft_f32+0xae>
 8004f76:	e01b      	b.n	8004fb0 <arm_cfft_f32+0xc4>
 8004f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7c:	d008      	beq.n	8004f90 <arm_cfft_f32+0xa4>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d00a      	beq.n	8004f9a <arm_cfft_f32+0xae>
 8004f84:	e014      	b.n	8004fb0 <arm_cfft_f32+0xc4>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	f7fe ff85 	bl	8003e98 <arm_cfft_radix8by2_f32>
        break;
 8004f8e:	e00f      	b.n	8004fb0 <arm_cfft_f32+0xc4>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	f7ff f978 	bl	8004288 <arm_cfft_radix8by4_f32>
        break;
 8004f98:	e00a      	b.n	8004fb0 <arm_cfft_f32+0xc4>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	68b8      	ldr	r0, [r7, #8]
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f000 f845 	bl	8005038 <arm_radix8_butterfly_f32>
        break;
 8004fae:	bf00      	nop
    }  

    if( bitReverseFlag )
 8004fb0:	79bb      	ldrb	r3, [r7, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d008      	beq.n	8004fc8 <arm_cfft_f32+0xdc>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	899a      	ldrh	r2, [r3, #12]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	68b8      	ldr	r0, [r7, #8]
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fe ff08 	bl	8003dd8 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d130      	bne.n	8005030 <arm_cfft_f32+0x144>
    {
        invL = 1.0f/(float32_t)L;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	ee07 3a90 	vmov	s15, r3
 8004fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8004fdc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8004fe0:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8004fe8:	2300      	movs	r3, #0
 8004fea:	61fb      	str	r3, [r7, #28]
 8004fec:	e01c      	b.n	8005028 <arm_cfft_f32+0x13c>
        {
            *pSrc++ *=   invL ;
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	1d1a      	adds	r2, r3, #4
 8004ff2:	61ba      	str	r2, [r7, #24]
 8004ff4:	ed93 7a00 	vldr	s14, [r3]
 8004ff8:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005000:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	edd3 7a00 	vldr	s15, [r3]
 800500a:	eeb1 7a67 	vneg.f32	s14, s15
 800500e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	3304      	adds	r3, #4
 8005020:	61bb      	str	r3, [r7, #24]
    if(ifftFlag == 1u)
    {
        invL = 1.0f/(float32_t)L;
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3301      	adds	r3, #1
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	d3de      	bcc.n	8004fee <arm_cfft_f32+0x102>
            *pSrc++ *=   invL ;
            *pSrc  = -(*pSrc) * invL;
            pSrc++;
        }
    }
}
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop

08005038 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8005038:	b480      	push	{r7}
 800503a:	b0bd      	sub	sp, #244	; 0xf4
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	607a      	str	r2, [r7, #4]
 8005042:	461a      	mov	r2, r3
 8005044:	460b      	mov	r3, r1
 8005046:	817b      	strh	r3, [r7, #10]
 8005048:	4613      	mov	r3, r2
 800504a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800504c:	4b09      	ldr	r3, [pc, #36]	; (8005074 <arm_radix8_butterfly_f32+0x3c>)
 800504e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8005058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8005060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005064:	08db      	lsrs	r3, r3, #3
 8005066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005070:	e002      	b.n	8005078 <arm_radix8_butterfly_f32+0x40>
 8005072:	bf00      	nop
 8005074:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8005078:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800507c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005080:	4413      	add	r3, r2
 8005082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8005086:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508e:	4413      	add	r3, r2
 8005090:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8005094:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800509c:	4413      	add	r3, r2
 800509e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80050a2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	4413      	add	r3, r2
 80050ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80050b0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b8:	4413      	add	r3, r2
 80050ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80050be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050c6:	4413      	add	r3, r2
 80050c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80050cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d4:	4413      	add	r3, r2
 80050d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80050da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	ed93 7a00 	vldr	s14, [r3]
 80050e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	edd3 7a00 	vldr	s15, [r3]
 80050f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050fa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80050fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	ed93 7a00 	vldr	s14, [r3]
 800510c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005110:	00db      	lsls	r3, r3, #3
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4413      	add	r3, r2
 8005116:	edd3 7a00 	vldr	s15, [r3]
 800511a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800511e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8005122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	ed93 7a00 	vldr	s14, [r3]
 8005130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4413      	add	r3, r2
 800513a:	edd3 7a00 	vldr	s15, [r3]
 800513e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005142:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8005146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	ed93 7a00 	vldr	s14, [r3]
 8005154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	edd3 7a00 	vldr	s15, [r3]
 8005162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005166:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800516a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800516e:	00db      	lsls	r3, r3, #3
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	ed93 7a00 	vldr	s14, [r3]
 8005178:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	4413      	add	r3, r2
 8005182:	edd3 7a00 	vldr	s15, [r3]
 8005186:	ee77 7a27 	vadd.f32	s15, s14, s15
 800518a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800518e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4413      	add	r3, r2
 8005198:	ed93 7a00 	vldr	s14, [r3]
 800519c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80051a0:	00db      	lsls	r3, r3, #3
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	4413      	add	r3, r2
 80051a6:	edd3 7a00 	vldr	s15, [r3]
 80051aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ae:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80051b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051b6:	00db      	lsls	r3, r3, #3
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	ed93 7a00 	vldr	s14, [r3]
 80051c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	4413      	add	r3, r2
 80051ca:	edd3 7a00 	vldr	s15, [r3]
 80051ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80051d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4413      	add	r3, r2
 80051e0:	ed93 7a00 	vldr	s14, [r3]
 80051e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4413      	add	r3, r2
 80051ee:	edd3 7a00 	vldr	s15, [r3]
 80051f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80051fa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80051fe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005206:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800520a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800520e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005216:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800521a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800521e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005226:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800522a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800522e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005236:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800523a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4413      	add	r3, r2
 8005244:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005248:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800524c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005250:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8005254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005262:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800526a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800526e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	3304      	adds	r3, #4
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4413      	add	r3, r2
 800527a:	ed93 7a00 	vldr	s14, [r3]
 800527e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	3304      	adds	r3, #4
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	4413      	add	r3, r2
 800528a:	edd3 7a00 	vldr	s15, [r3]
 800528e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005292:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005296:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	3304      	adds	r3, #4
 800529e:	68fa      	ldr	r2, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	ed93 7a00 	vldr	s14, [r3]
 80052a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	3304      	adds	r3, #4
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	edd3 7a00 	vldr	s15, [r3]
 80052b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ba:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80052be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	3304      	adds	r3, #4
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	ed93 7a00 	vldr	s14, [r3]
 80052ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	3304      	adds	r3, #4
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	edd3 7a00 	vldr	s15, [r3]
 80052de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80052e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	3304      	adds	r3, #4
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	4413      	add	r3, r2
 80052f2:	ed93 7a00 	vldr	s14, [r3]
 80052f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	3304      	adds	r3, #4
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4413      	add	r3, r2
 8005302:	edd3 7a00 	vldr	s15, [r3]
 8005306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800530a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800530e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	3304      	adds	r3, #4
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	ed93 7a00 	vldr	s14, [r3]
 800531e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	3304      	adds	r3, #4
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	4413      	add	r3, r2
 800532a:	edd3 7a00 	vldr	s15, [r3]
 800532e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005332:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005336:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	3304      	adds	r3, #4
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	ed93 7a00 	vldr	s14, [r3]
 8005346:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	3304      	adds	r3, #4
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4413      	add	r3, r2
 8005352:	edd3 7a00 	vldr	s15, [r3]
 8005356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800535a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800535e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	3304      	adds	r3, #4
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	ed93 7a00 	vldr	s14, [r3]
 800536e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	3304      	adds	r3, #4
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	edd3 7a00 	vldr	s15, [r3]
 800537e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005382:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	3304      	adds	r3, #4
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	ed93 7a00 	vldr	s14, [r3]
 8005396:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	3304      	adds	r3, #4
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4413      	add	r3, r2
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053aa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 80053ae:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053b2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 80053be:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053c2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80053ce:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80053d2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053da:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80053de:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80053e2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053ea:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80053ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	3304      	adds	r3, #4
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80053fe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005406:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800540a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800540e:	00db      	lsls	r3, r3, #3
 8005410:	3304      	adds	r3, #4
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800541a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800541e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005422:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8005426:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005434:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800543c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8005440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800544e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005456:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800545a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	3304      	adds	r3, #4
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800546a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800546e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005472:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3304      	adds	r3, #4
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	4413      	add	r3, r2
 8005482:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005486:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800548a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800548e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8005492:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005496:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800549a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800549e:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80054a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 80054aa:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80054ae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054b6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80054ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054be:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 80054c2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80054c6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80054ce:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80054d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 80054da:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80054de:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80054e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054e6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 80054ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ee:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 80054f2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80054f6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80054fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fe:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8005502:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005506:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800550a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8005512:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005516:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800551a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800551e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8005522:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005526:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800552a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800552e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8005532:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005536:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800553a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800553e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8005542:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005546:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800554a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800554e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8005552:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005556:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800555a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800555e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8005562:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005566:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800556a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800556e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8005572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	4413      	add	r3, r2
 800557c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005580:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005588:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800558c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4413      	add	r3, r2
 8005596:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800559a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800559e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055a2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 80055a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80055b4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055bc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 80055c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4413      	add	r3, r2
 80055ca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80055ce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 80055da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	3304      	adds	r3, #4
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4413      	add	r3, r2
 80055e6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80055ea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80055ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 80055f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	3304      	adds	r3, #4
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005606:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800560a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800560e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8005612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	3304      	adds	r3, #4
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005622:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800562e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005632:	00db      	lsls	r3, r3, #3
 8005634:	3304      	adds	r3, #4
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	4413      	add	r3, r2
 800563a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800563e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005646:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 800564a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800564e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005652:	4413      	add	r3, r2
 8005654:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8005658:	897a      	ldrh	r2, [r7, #10]
 800565a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800565e:	429a      	cmp	r2, r3
 8005660:	f63f ad0a 	bhi.w	8005078 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005668:	2b07      	cmp	r3, #7
 800566a:	d801      	bhi.n	8005670 <arm_radix8_butterfly_f32+0x638>
         break;
 800566c:	f000 bce2 	b.w	8006034 <arm_radix8_butterfly_f32+0xffc>
      
      ia1 = 0;
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8005676:	2301      	movs	r3, #1
 8005678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800567c:	893a      	ldrh	r2, [r7, #8]
 800567e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005682:	4413      	add	r3, r2
 8005684:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8005686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800568c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005692:	4413      	add	r3, r2
 8005694:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8005696:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800569a:	4413      	add	r3, r2
 800569c:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800569e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80056a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056a2:	4413      	add	r3, r2
 80056a4:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 80056a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80056a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056aa:	4413      	add	r3, r2
 80056ac:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 80056ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056b2:	4413      	add	r3, r2
 80056b4:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 80056b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056ba:	4413      	add	r3, r2
 80056bc:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 80056be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 80056cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	4413      	add	r3, r2
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 80056d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056da:	00db      	lsls	r3, r3, #3
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	4413      	add	r3, r2
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 80056e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 80056f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	4413      	add	r3, r2
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 80056fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	4413      	add	r3, r2
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8005708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	4413      	add	r3, r2
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8005714:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	3304      	adds	r3, #4
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	4413      	add	r3, r2
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8005724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	3304      	adds	r3, #4
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8005732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	3304      	adds	r3, #4
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8005740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	3304      	adds	r3, #4
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	4413      	add	r3, r2
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800574e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	3304      	adds	r3, #4
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	4413      	add	r3, r2
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800575c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	3304      	adds	r3, #4
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 800576a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800576c:	00db      	lsls	r3, r3, #3
 800576e:	3304      	adds	r3, #4
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	4413      	add	r3, r2
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8005780:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005788:	4413      	add	r3, r2
 800578a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800578e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005796:	4413      	add	r3, r2
 8005798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800579c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80057a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a4:	4413      	add	r3, r2
 80057a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 80057aa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	4413      	add	r3, r2
 80057b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 80057b8:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c0:	4413      	add	r3, r2
 80057c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 80057c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ce:	4413      	add	r3, r2
 80057d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 80057d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057dc:	4413      	add	r3, r2
 80057de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80057e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057e6:	00db      	lsls	r3, r3, #3
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	ed93 7a00 	vldr	s14, [r3]
 80057f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4413      	add	r3, r2
 80057fa:	edd3 7a00 	vldr	s15, [r3]
 80057fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005802:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8005806:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	ed93 7a00 	vldr	s14, [r3]
 8005814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	4413      	add	r3, r2
 800581e:	edd3 7a00 	vldr	s15, [r3]
 8005822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005826:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800582a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582e:	00db      	lsls	r3, r3, #3
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4413      	add	r3, r2
 8005834:	ed93 7a00 	vldr	s14, [r3]
 8005838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800583c:	00db      	lsls	r3, r3, #3
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	edd3 7a00 	vldr	s15, [r3]
 8005846:	ee77 7a27 	vadd.f32	s15, s14, s15
 800584a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800584e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	4413      	add	r3, r2
 8005858:	ed93 7a00 	vldr	s14, [r3]
 800585c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	edd3 7a00 	vldr	s15, [r3]
 800586a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800586e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005872:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005876:	00db      	lsls	r3, r3, #3
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	ed93 7a00 	vldr	s14, [r3]
 8005880:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4413      	add	r3, r2
 800588a:	edd3 7a00 	vldr	s15, [r3]
 800588e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005892:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005896:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4413      	add	r3, r2
 80058a0:	ed93 7a00 	vldr	s14, [r3]
 80058a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	edd3 7a00 	vldr	s15, [r3]
 80058b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058b6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80058ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4413      	add	r3, r2
 80058c4:	ed93 7a00 	vldr	s14, [r3]
 80058c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4413      	add	r3, r2
 80058d2:	edd3 7a00 	vldr	s15, [r3]
 80058d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058da:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80058de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4413      	add	r3, r2
 80058e8:	ed93 7a00 	vldr	s14, [r3]
 80058ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4413      	add	r3, r2
 80058f6:	edd3 7a00 	vldr	s15, [r3]
 80058fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058fe:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8005902:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005906:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800590a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800590e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8005912:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005916:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800591a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800591e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8005922:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005926:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800592a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800592e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8005932:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8005936:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800593a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800593e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8005942:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005950:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005958:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800595c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8005960:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005964:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005968:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800596c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	3304      	adds	r3, #4
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4413      	add	r3, r2
 8005978:	ed93 7a00 	vldr	s14, [r3]
 800597c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005980:	00db      	lsls	r3, r3, #3
 8005982:	3304      	adds	r3, #4
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	edd3 7a00 	vldr	s15, [r3]
 800598c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005990:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	3304      	adds	r3, #4
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	ed93 7a00 	vldr	s14, [r3]
 80059a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	3304      	adds	r3, #4
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	4413      	add	r3, r2
 80059b0:	edd3 7a00 	vldr	s15, [r3]
 80059b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80059bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059c0:	00db      	lsls	r3, r3, #3
 80059c2:	3304      	adds	r3, #4
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4413      	add	r3, r2
 80059c8:	ed93 7a00 	vldr	s14, [r3]
 80059cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	3304      	adds	r3, #4
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	edd3 7a00 	vldr	s15, [r3]
 80059dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80059e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	3304      	adds	r3, #4
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	ed93 7a00 	vldr	s14, [r3]
 80059f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80059f8:	00db      	lsls	r3, r3, #3
 80059fa:	3304      	adds	r3, #4
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	edd3 7a00 	vldr	s15, [r3]
 8005a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a08:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005a0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	3304      	adds	r3, #4
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4413      	add	r3, r2
 8005a18:	ed93 7a00 	vldr	s14, [r3]
 8005a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	3304      	adds	r3, #4
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	edd3 7a00 	vldr	s15, [r3]
 8005a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a30:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005a34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	ed93 7a00 	vldr	s14, [r3]
 8005a44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	edd3 7a00 	vldr	s15, [r3]
 8005a54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a58:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	3304      	adds	r3, #4
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	ed93 7a00 	vldr	s14, [r3]
 8005a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	3304      	adds	r3, #4
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	edd3 7a00 	vldr	s15, [r3]
 8005a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a80:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4413      	add	r3, r2
 8005a90:	ed93 7a00 	vldr	s14, [r3]
 8005a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	edd3 7a00 	vldr	s15, [r3]
 8005aa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aa8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8005aac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ab0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ab8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8005abc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ac0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8005acc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005ad0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad8:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8005adc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005ae0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ae4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ae8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8005aec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005af0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8005afc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005b00:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b08:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8005b0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	3304      	adds	r3, #4
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b24:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8005b28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005b2c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b34:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8005b38:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005b3c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8005b48:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005b4c:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8005b50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b54:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005b58:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b5c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b64:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005b68:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b74:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005b78:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8005b7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b84:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005b88:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b8c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b94:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005b98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ba6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bae:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8005bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	3304      	adds	r3, #4
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bc2:	edd7 7a04 	vldr	s15, [r7, #16]
 8005bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bca:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8005bce:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005bd2:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bda:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8005bde:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005be2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8005bee:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005bf2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bfa:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8005bfe:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005c02:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c0a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8005c0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c24:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8005c28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	3304      	adds	r3, #4
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4413      	add	r3, r2
 8005c34:	ed97 7a05 	vldr	s14, [r7, #20]
 8005c38:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c40:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8005c44:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c48:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c50:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005c54:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c58:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c60:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005c64:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005c68:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c70:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005c74:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005c78:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005c7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c80:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005c92:	edd7 7a06 	vldr	s15, [r7, #24]
 8005c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c9a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8005c9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005ca2:	00db      	lsls	r3, r3, #3
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4413      	add	r3, r2
 8005caa:	ed97 7a05 	vldr	s14, [r7, #20]
 8005cae:	edd7 7a04 	vldr	s15, [r7, #16]
 8005cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cb6:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005cba:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005cbe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cc6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8005cd2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005cd6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cde:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8005ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005cea:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005cee:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cf6:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8005cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8005d02:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8005d06:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005d0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d0e:	edd7 7a37 	vldr	s15, [r7, #220]	; 0xdc
 8005d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d16:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8005d1a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d1e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d26:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8005d2a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d2e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d36:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8005d3a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005d3e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d46:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8005d4a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005d4e:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d56:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005d5a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d66:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005d6a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005d6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005d72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d76:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005d7a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005d7e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d86:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005d8a:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8005d8e:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d96:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005d9a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005d9e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005daa:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8005dae:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005db6:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005dba:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005dbe:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005dca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005dce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005dda:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005dde:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005de6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005dea:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005dee:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005df2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8005dfa:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005dfe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e06:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8005e0a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8005e0e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e16:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8005e1a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e1e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e26:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8005e2a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e36:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8005e3a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8005e3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8005e4a:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8005e4e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e70:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005e74:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	ed97 7a05 	vldr	s14, [r7, #20]
 8005e84:	edd7 7a04 	vldr	s15, [r7, #16]
 8005e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e8c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8005e90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005e94:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8005ea0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ea4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005ea8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eac:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8005eb0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005eb4:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005eb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ebc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8005ec0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ec4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ecc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8005ed0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	ed97 7a07 	vldr	s14, [r7, #28]
 8005ede:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ee2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005eea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	ed97 7a05 	vldr	s14, [r7, #20]
 8005efa:	edd7 7a04 	vldr	s15, [r7, #16]
 8005efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f02:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8005f06:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f0a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f12:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8005f16:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005f1a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f22:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8005f26:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8005f2a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f32:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8005f36:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005f3a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f42:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8005f46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	ed97 7a07 	vldr	s14, [r7, #28]
 8005f54:	edd7 7a06 	vldr	s15, [r7, #24]
 8005f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f5c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8005f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	3304      	adds	r3, #4
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f78:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8005f7c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005f80:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f88:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8005f8c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005f90:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f98:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8005f9c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8005fa0:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8005fac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005fb0:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fb8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8005fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fca:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fd2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8005fd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	3304      	adds	r3, #4
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	ed97 7a05 	vldr	s14, [r7, #20]
 8005fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8005fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fee:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 8005ff2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 8006000:	897a      	ldrh	r2, [r7, #10]
 8006002:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006006:	429a      	cmp	r2, r3
 8006008:	f63f abba 	bhi.w	8005780 <arm_radix8_butterfly_f32+0x748>
         
         j++;
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006010:	3301      	adds	r3, #1
 8006012:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 8006016:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800601a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800601e:	429a      	cmp	r2, r3
 8006020:	f4ff ab2c 	bcc.w	800567c <arm_radix8_butterfly_f32+0x644>
      
      twidCoefModifier <<= 3;
 8006024:	893b      	ldrh	r3, [r7, #8]
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 800602a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800602e:	2b07      	cmp	r3, #7
 8006030:	f63f a812 	bhi.w	8005058 <arm_radix8_butterfly_f32+0x20>
}
 8006034:	37f4      	adds	r7, #244	; 0xf4
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop

08006040 <stage_rfft_f32>:
#include "CMSIS_DSP/cmsis_dsp.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8006040:	b480      	push	{r7}
 8006042:	b095      	sub	sp, #84	; 0x54
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	695b      	ldr	r3, [r3, #20]
 8006050:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;					
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	3b01      	subs	r3, #1
 8006060:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8006062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8006068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800606e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8006074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800607c:	1d1a      	adds	r2, r3, #4
 800607e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8006084:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006086:	1d1a      	adds	r2, r3, #4
 8006088:	64ba      	str	r2, [r7, #72]	; 0x48
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	62bb      	str	r3, [r7, #40]	; 0x28
   
   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800608e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006092:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800609a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
   
   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800609e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80060a2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80060a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060aa:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	1d1a      	adds	r2, r3, #4
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80060bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 80060c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	1d1a      	adds	r2, r3, #4
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80060d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80060da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 80060e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060e6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80060ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ec:	00db      	lsls	r3, r3, #3
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80060f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f6:	3308      	adds	r3, #8
 80060f8:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80060fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 8006100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 8006106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800610c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 8006112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006114:	1d1a      	adds	r2, r3, #4
 8006116:	64ba      	str	r2, [r7, #72]	; 0x48
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800611c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800611e:	1d1a      	adds	r2, r3, #4
 8006120:	64ba      	str	r2, [r7, #72]	; 0x48
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 8006126:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800612a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800612e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006132:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 8006136:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800613a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800613e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006142:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8006146:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800614a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800614e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006152:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8006156:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800615a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800615e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006162:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8006166:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800616a:	edd7 7a08 	vldr	s15, [r7, #32]
 800616e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006172:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8006176:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800617a:	edd7 7a08 	vldr	s15, [r7, #32]
 800617e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006182:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	1d1a      	adds	r2, r3, #4
 800618a:	607a      	str	r2, [r7, #4]
 800618c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006190:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006194:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006198:	edd7 7a07 	vldr	s15, [r7, #28]
 800619c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80061a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 80061ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061b0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1d1a      	adds	r2, r3, #4
 80061b8:	607a      	str	r2, [r7, #4]
 80061ba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80061be:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80061c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80061c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80061ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80061ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80061d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 80061da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80061de:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80061e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061e4:	3308      	adds	r3, #8
 80061e6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80061e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ea:	3b08      	subs	r3, #8
 80061ec:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80061ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f0:	3b01      	subs	r3, #1
 80061f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while(k > 0u);
 80061f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f47f af7f 	bne.w	80060fa <stage_rfft_f32+0xba>
}
 80061fc:	3754      	adds	r7, #84	; 0x54
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 8006208:	b480      	push	{r7}
 800620a:	b095      	sub	sp, #84	; 0x54
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;					
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	3b01      	subs	r3, #1
 8006228:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800622a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8006230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8006236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006238:	3308      	adds	r3, #8
 800623a:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1d1a      	adds	r2, r3, #4
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006246:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800624a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800624e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8006252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006256:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1d1a      	adds	r2, r3, #4
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006264:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800626c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 8006270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006274:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8006278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	68ba      	ldr	r2, [r7, #8]
 800627e:	4413      	add	r3, r2
 8006280:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8006282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006284:	3308      	adds	r3, #8
 8006286:	647b      	str	r3, [r7, #68]	; 0x44

   while(k > 0u)
 8006288:	e07c      	b.n	8006384 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800628a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8006290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8006296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800629c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 80062a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80062ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ae:	1d1a      	adds	r2, r3, #4
 80062b0:	64ba      	str	r2, [r7, #72]	; 0x48
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 80062b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80062ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80062be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 80062c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80062ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80062ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062d2:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80062d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80062da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e2:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80062e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80062ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80062ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f2:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80062f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80062fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006302:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8006306:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800630a:	edd7 7a08 	vldr	s15, [r7, #32]
 800630e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006312:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	1d1a      	adds	r2, r3, #4
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8006320:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006324:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006328:	edd7 7a07 	vldr	s15, [r7, #28]
 800632c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006330:	edd7 7a06 	vldr	s15, [r7, #24]
 8006334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006338:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 800633c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006340:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	1d1a      	adds	r2, r3, #4
 8006348:	607a      	str	r2, [r7, #4]
 800634a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800634e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006352:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006356:	edd7 7a05 	vldr	s15, [r7, #20]
 800635a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800635e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006366:	eeb6 7a00 	vmov.f32	s14, #96	; 0x60
 800636a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800636e:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8006372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006374:	3308      	adds	r3, #8
 8006376:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8006378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800637a:	3b08      	subs	r3, #8
 800637c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800637e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006380:	3b01      	subs	r3, #1
 8006382:	64fb      	str	r3, [r7, #76]	; 0x4c
   *pOut++ = 0.5f * ( xAR - xAI );

   pB  =  p + 2*k ;
   pA +=  2	   ;

   while(k > 0u)
 8006384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006386:	2b00      	cmp	r3, #0
 8006388:	f47f af7f 	bne.w	800628a <merge_rfft_f32+0x82>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 800638c:	3754      	adds	r7, #84	; 0x54
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop

08006398 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8a1b      	ldrh	r3, [r3, #16]
 80063ae:	085b      	lsrs	r3, r3, #1
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00c      	beq.n	80063d6 <arm_rfft_fast_f32+0x3e>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	68b9      	ldr	r1, [r7, #8]
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	f7ff ff21 	bl	8006208 <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 80063c6:	78fb      	ldrb	r3, [r7, #3]
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	461a      	mov	r2, r3
 80063ce:	2301      	movs	r3, #1
 80063d0:	f7fe fd8c 	bl	8004eec <arm_cfft_f32>
 80063d4:	e00b      	b.n	80063ee <arm_rfft_fast_f32+0x56>
   }
   else
   {
      /* Calculation of RFFT of input */
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 80063d6:	78fb      	ldrb	r3, [r7, #3]
 80063d8:	6978      	ldr	r0, [r7, #20]
 80063da:	68b9      	ldr	r1, [r7, #8]
 80063dc:	461a      	mov	r2, r3
 80063de:	2301      	movs	r3, #1
 80063e0:	f7fe fd84 	bl	8004eec <arm_cfft_f32>
   
      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	68b9      	ldr	r1, [r7, #8]
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	f7ff fe29 	bl	8006040 <stage_rfft_f32>
   }
}
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.   
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	460b      	mov	r3, r1
 80063fe:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 8006408:	887b      	ldrh	r3, [r7, #2]
 800640a:	085b      	lsrs	r3, r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	887a      	ldrh	r2, [r7, #2]
 8006416:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	2b80      	cmp	r3, #128	; 0x80
 800641e:	d050      	beq.n	80064c2 <arm_rfft_fast_init_f32+0xce>
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	dc06      	bgt.n	8006432 <arm_rfft_fast_init_f32+0x3e>
 8006424:	2b20      	cmp	r3, #32
 8006426:	d066      	beq.n	80064f6 <arm_rfft_fast_init_f32+0x102>
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d057      	beq.n	80064dc <arm_rfft_fast_init_f32+0xe8>
 800642c:	2b10      	cmp	r3, #16
 800642e:	d06f      	beq.n	8006510 <arm_rfft_fast_init_f32+0x11c>
 8006430:	e07b      	b.n	800652a <arm_rfft_fast_init_f32+0x136>
 8006432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006436:	d028      	beq.n	800648a <arm_rfft_fast_init_f32+0x96>
 8006438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800643c:	dc03      	bgt.n	8006446 <arm_rfft_fast_init_f32+0x52>
 800643e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006442:	d030      	beq.n	80064a6 <arm_rfft_fast_init_f32+0xb2>
 8006444:	e071      	b.n	800652a <arm_rfft_fast_init_f32+0x136>
 8006446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800644a:	d010      	beq.n	800646e <arm_rfft_fast_init_f32+0x7a>
 800644c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006450:	d16b      	bne.n	800652a <arm_rfft_fast_init_f32+0x136>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8006458:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a38      	ldr	r2, [pc, #224]	; (8006540 <arm_rfft_fast_init_f32+0x14c>)
 800645e:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4a38      	ldr	r2, [pc, #224]	; (8006544 <arm_rfft_fast_init_f32+0x150>)
 8006464:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a37      	ldr	r2, [pc, #220]	; (8006548 <arm_rfft_fast_init_f32+0x154>)
 800646a:	615a      	str	r2, [r3, #20]
    break;
 800646c:	e060      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  case 1024u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006474:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4a34      	ldr	r2, [pc, #208]	; (800654c <arm_rfft_fast_init_f32+0x158>)
 800647a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4a34      	ldr	r2, [pc, #208]	; (8006550 <arm_rfft_fast_init_f32+0x15c>)
 8006480:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a33      	ldr	r2, [pc, #204]	; (8006554 <arm_rfft_fast_init_f32+0x160>)
 8006486:	615a      	str	r2, [r3, #20]
    break;
 8006488:	e052      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  case 512u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006490:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4a30      	ldr	r2, [pc, #192]	; (8006558 <arm_rfft_fast_init_f32+0x164>)
 8006496:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	4a30      	ldr	r2, [pc, #192]	; (800655c <arm_rfft_fast_init_f32+0x168>)
 800649c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2f      	ldr	r2, [pc, #188]	; (8006560 <arm_rfft_fast_init_f32+0x16c>)
 80064a2:	615a      	str	r2, [r3, #20]
    break;
 80064a4:	e044      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  case 256u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80064ac:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <arm_rfft_fast_init_f32+0x170>)
 80064b2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	4a2c      	ldr	r2, [pc, #176]	; (8006568 <arm_rfft_fast_init_f32+0x174>)
 80064b8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2b      	ldr	r2, [pc, #172]	; (800656c <arm_rfft_fast_init_f32+0x178>)
 80064be:	615a      	str	r2, [r3, #20]
    break;
 80064c0:	e036      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  case 128u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	22d0      	movs	r2, #208	; 0xd0
 80064c6:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4a29      	ldr	r2, [pc, #164]	; (8006570 <arm_rfft_fast_init_f32+0x17c>)
 80064cc:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	4a28      	ldr	r2, [pc, #160]	; (8006574 <arm_rfft_fast_init_f32+0x180>)
 80064d2:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a28      	ldr	r2, [pc, #160]	; (8006578 <arm_rfft_fast_init_f32+0x184>)
 80064d8:	615a      	str	r2, [r3, #20]
    break;
 80064da:	e029      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  case 64u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2238      	movs	r2, #56	; 0x38
 80064e0:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	4a25      	ldr	r2, [pc, #148]	; (800657c <arm_rfft_fast_init_f32+0x188>)
 80064e6:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4a25      	ldr	r2, [pc, #148]	; (8006580 <arm_rfft_fast_init_f32+0x18c>)
 80064ec:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <arm_rfft_fast_init_f32+0x190>)
 80064f2:	615a      	str	r2, [r3, #20]
    break;
 80064f4:	e01c      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  case 32u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	2230      	movs	r2, #48	; 0x30
 80064fa:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	4a22      	ldr	r2, [pc, #136]	; (8006588 <arm_rfft_fast_init_f32+0x194>)
 8006500:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4a21      	ldr	r2, [pc, #132]	; (800658c <arm_rfft_fast_init_f32+0x198>)
 8006506:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a21      	ldr	r2, [pc, #132]	; (8006590 <arm_rfft_fast_init_f32+0x19c>)
 800650c:	615a      	str	r2, [r3, #20]
    break;
 800650e:	e00f      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	2214      	movs	r2, #20
 8006514:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <arm_rfft_fast_init_f32+0x1a0>)
 800651a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4a1e      	ldr	r2, [pc, #120]	; (8006598 <arm_rfft_fast_init_f32+0x1a4>)
 8006520:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a1d      	ldr	r2, [pc, #116]	; (800659c <arm_rfft_fast_init_f32+0x1a8>)
 8006526:	615a      	str	r2, [r3, #20]
    break;
 8006528:	e002      	b.n	8006530 <arm_rfft_fast_init_f32+0x13c>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 800652a:	23ff      	movs	r3, #255	; 0xff
 800652c:	73fb      	strb	r3, [r7, #15]
    break;
 800652e:	bf00      	nop
  }

  return (status);
 8006530:	7bfb      	ldrb	r3, [r7, #15]
 8006532:	b25b      	sxtb	r3, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	08011714 	.word	0x08011714
 8006544:	0800bf7c 	.word	0x0800bf7c
 8006548:	08017454 	.word	0x08017454
 800654c:	08010904 	.word	0x08010904
 8006550:	08009f7c 	.word	0x08009f7c
 8006554:	08015454 	.word	0x08015454
 8006558:	08010584 	.word	0x08010584
 800655c:	08008f7c 	.word	0x08008f7c
 8006560:	08014454 	.word	0x08014454
 8006564:	08010214 	.word	0x08010214
 8006568:	0800877c 	.word	0x0800877c
 800656c:	08013c54 	.word	0x08013c54
 8006570:	08010074 	.word	0x08010074
 8006574:	0800837c 	.word	0x0800837c
 8006578:	08013854 	.word	0x08013854
 800657c:	08010004 	.word	0x08010004
 8006580:	0800817c 	.word	0x0800817c
 8006584:	08013654 	.word	0x08013654
 8006588:	0800ffa4 	.word	0x0800ffa4
 800658c:	0800807c 	.word	0x0800807c
 8006590:	08013554 	.word	0x08013554
 8006594:	0800ff7c 	.word	0x0800ff7c
 8006598:	08007ffc 	.word	0x08007ffc
 800659c:	080134d4 	.word	0x080134d4

080065a0 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b08b      	sub	sp, #44	; 0x2c
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
 80065ac:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 80065b2:	2300      	movs	r3, #0
 80065b4:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	1d1a      	adds	r2, r3, #4
 80065ba:	60fa      	str	r2, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	089b      	lsrs	r3, r3, #2
 80065c6:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 80065c8:	e051      	b.n	800666e <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	1d1a      	adds	r2, r3, #4
 80065ce:	60fa      	str	r2, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	1d1a      	adds	r2, r3, #4
 80065d8:	60fa      	str	r2, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80065de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80065e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80065e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ee:	d504      	bpl.n	80065fa <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	3301      	adds	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1d1a      	adds	r2, r3, #4
 80065fe:	60fa      	str	r2, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8006604:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006608:	edd7 7a04 	vldr	s15, [r7, #16]
 800660c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006614:	d504      	bpl.n	8006620 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 800661a:	69bb      	ldr	r3, [r7, #24]
 800661c:	3302      	adds	r3, #2
 800661e:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	1d1a      	adds	r2, r3, #4
 8006624:	60fa      	str	r2, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800662a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800662e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800663a:	d504      	bpl.n	8006646 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	3303      	adds	r3, #3
 8006644:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8006646:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800664a:	edd7 7a04 	vldr	s15, [r7, #16]
 800664e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006656:	d504      	bpl.n	8006662 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	3304      	adds	r3, #4
 8006660:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	3304      	adds	r3, #4
 8006666:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	3b01      	subs	r3, #1
 800666c:	623b      	str	r3, [r7, #32]

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1aa      	bne.n	80065ca <arm_max_f32+0x2a>
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	3b01      	subs	r3, #1
 8006678:	f003 0303 	and.w	r3, r3, #3
 800667c:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800667e:	e016      	b.n	80066ae <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	1d1a      	adds	r2, r3, #4
 8006684:	60fa      	str	r2, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 800668a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800668e:	edd7 7a05 	vldr	s15, [r7, #20]
 8006692:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669a:	d505      	bpl.n	80066a8 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 80066a0:	68ba      	ldr	r2, [r7, #8]
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e5      	bne.n	8006680 <arm_max_f32+0xe0>
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b8:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	601a      	str	r2, [r3, #0]
}
 80066c0:	372c      	adds	r7, #44	; 0x2c
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop

080066cc <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b08b      	sub	sp, #44	; 0x2c
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 80066d8:	f04f 0300 	mov.w	r3, #0
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	089b      	lsrs	r3, r3, #2
 80066e2:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80066e4:	e036      	b.n	8006754 <arm_mean_f32+0x88>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	1d1a      	adds	r2, r3, #4
 80066ea:	60fa      	str	r2, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	1d1a      	adds	r2, r3, #4
 80066f4:	60fa      	str	r2, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1d1a      	adds	r2, r3, #4
 80066fe:	60fa      	str	r2, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	1d1a      	adds	r2, r3, #4
 8006708:	60fa      	str	r2, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	613b      	str	r3, [r7, #16]

    sum += in1;
 800670e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006712:	edd7 7a07 	vldr	s15, [r7, #28]
 8006716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800671a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in2;
 800671e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006722:	edd7 7a06 	vldr	s15, [r7, #24]
 8006726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800672a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in3;
 800672e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006732:	edd7 7a05 	vldr	s15, [r7, #20]
 8006736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800673a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sum += in4;
 800673e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006742:	edd7 7a04 	vldr	s15, [r7, #16]
 8006746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800674a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	3b01      	subs	r3, #1
 8006752:	623b      	str	r3, [r7, #32]
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1c5      	bne.n	80066e6 <arm_mean_f32+0x1a>
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006762:	e00d      	b.n	8006780 <arm_mean_f32+0xb4>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1d1a      	adds	r2, r3, #4
 8006768:	60fa      	str	r2, [r7, #12]
 800676a:	edd3 7a00 	vldr	s15, [r3]
 800676e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006776:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	3b01      	subs	r3, #1
 800677e:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d1ee      	bne.n	8006764 <arm_mean_f32+0x98>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	ee07 3a90 	vmov	s15, r3
 800678c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006790:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006794:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	edc3 7a00 	vstr	s15, [r3]
}
 800679e:	372c      	adds	r7, #44	; 0x2c
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <arm_cos_f32>:
 * @return cos(x).   
 */

float32_t arm_cos_f32(
  float32_t x)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b08b      	sub	sp, #44	; 0x2c
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 80067b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80067b4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800688c <arm_cos_f32+0xe4>
 80067b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067bc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x50
 80067c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80067c4:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80067c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80067cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067d0:	ee17 3a90 	vmov	r3, s15
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if(in < 0.0f)
 80067d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80067da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80067de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067e2:	d502      	bpl.n	80067ea <arm_cos_f32+0x42>
  {
    n--;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	3b01      	subs	r3, #1
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	ee07 3a90 	vmov	s15, r3
 80067f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067f4:	ed97 7a08 	vldr	s14, [r7, #32]
 80067f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067fc:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8006800:	edd7 7a08 	vldr	s15, [r7, #32]
 8006804:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006890 <arm_cos_f32+0xe8>
 8006808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800680c:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8006810:	edd7 7a07 	vldr	s15, [r7, #28]
 8006814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006818:	edc7 7a00 	vstr	s15, [r7]
 800681c:	883b      	ldrh	r3, [r7, #0]
 800681e:	b29b      	uxth	r3, r3
 8006820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006824:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8006826:	8b7b      	ldrh	r3, [r7, #26]
 8006828:	ee07 3a90 	vmov	s15, r3
 800682c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006830:	ed97 7a07 	vldr	s14, [r7, #28]
 8006834:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006838:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800683c:	8b7b      	ldrh	r3, [r7, #26]
 800683e:	4a15      	ldr	r2, [pc, #84]	; (8006894 <arm_cos_f32+0xec>)
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8006848:	8b7b      	ldrh	r3, [r7, #26]
 800684a:	3301      	adds	r3, #1
 800684c:	4a11      	ldr	r2, [pc, #68]	; (8006894 <arm_cos_f32+0xec>)
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8006856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800685a:	edd7 7a05 	vldr	s15, [r7, #20]
 800685e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006862:	edd7 7a04 	vldr	s15, [r7, #16]
 8006866:	ee27 7a27 	vmul.f32	s14, s14, s15
 800686a:	edd7 6a05 	vldr	s13, [r7, #20]
 800686e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800687a:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 800687e:	68bb      	ldr	r3, [r7, #8]
}
 8006880:	4618      	mov	r0, r3
 8006882:	372c      	adds	r7, #44	; 0x2c
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	3e22f983 	.word	0x3e22f983
 8006890:	44000000 	.word	0x44000000
 8006894:	0801b454 	.word	0x0801b454

08006898 <arm_abs_f32>:

void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8006898:	b480      	push	{r7}
 800689a:	b08b      	sub	sp, #44	; 0x2c
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;                  /* temporary variables */

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	089b      	lsrs	r3, r3, #2
 80068a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80068aa:	e03b      	b.n	8006924 <arm_abs_f32+0x8c>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    /* read sample from source */
    in1 = *pSrc;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	61fb      	str	r3, [r7, #28]
    in3 = *(pSrc + 2);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	61bb      	str	r3, [r7, #24]

    /* find absolute value */
    in1 = fabsf(in1);
 80068be:	edd7 7a08 	vldr	s15, [r7, #32]
 80068c2:	eef0 7ae7 	vabs.f32	s15, s15
 80068c6:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read sample from source */
    in4 = *(pSrc + 3);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	617b      	str	r3, [r7, #20]

    /* find absolute value */
    in2 = fabsf(in2);
 80068d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80068d4:	eef0 7ae7 	vabs.f32	s15, s15
 80068d8:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read sample from source */
    *pDst = in1;
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6a3a      	ldr	r2, [r7, #32]
 80068e0:	601a      	str	r2, [r3, #0]

    /* find absolute value */
    in3 = fabsf(in3);
 80068e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80068e6:	eef0 7ae7 	vabs.f32	s15, s15
 80068ea:	edc7 7a06 	vstr	s15, [r7, #24]

    /* find absolute value */
    in4 = fabsf(in4);
 80068ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80068f2:	eef0 7ae7 	vabs.f32	s15, s15
 80068f6:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store result to destination */
    *(pDst + 1) = in2;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	3304      	adds	r3, #4
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 2) = in3;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	3308      	adds	r3, #8
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 3) = in4;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	330c      	adds	r3, #12
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	601a      	str	r2, [r3, #0]


    /* Update source pointer to process next sampels */
    pSrc += 4u;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3310      	adds	r3, #16
 8006916:	60fb      	str	r3, [r7, #12]

    /* Update destination pointer to process next sampels */
    pDst += 4u;
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	3310      	adds	r3, #16
 800691c:	60bb      	str	r3, [r7, #8]

    /* Decrement the loop counter */
    blkCnt--;
 800691e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006920:	3b01      	subs	r3, #1
 8006922:	627b      	str	r3, [r7, #36]	; 0x24
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1c0      	bne.n	80068ac <arm_abs_f32+0x14>
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f003 0303 	and.w	r3, r3, #3
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #ifndef ARM_MATH_CM0_FAMILY   */

  while(blkCnt > 0u)
 8006932:	e00e      	b.n	8006952 <arm_abs_f32+0xba>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	1d1a      	adds	r2, r3, #4
 8006938:	60ba      	str	r2, [r7, #8]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	1d11      	adds	r1, r2, #4
 800693e:	60f9      	str	r1, [r7, #12]
 8006940:	edd2 7a00 	vldr	s15, [r2]
 8006944:	eef0 7ae7 	vabs.f32	s15, s15
 8006948:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	3b01      	subs	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #ifndef ARM_MATH_CM0_FAMILY   */

  while(blkCnt > 0u)
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	2b00      	cmp	r3, #0
 8006956:	d1ed      	bne.n	8006934 <arm_abs_f32+0x9c>
    *pDst++ = fabsf(*pSrc++);

    /* Decrement the loop counter */
    blkCnt--;
  }
}
 8006958:	372c      	adds	r7, #44	; 0x2c
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop

08006964 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8006964:	b480      	push	{r7}
 8006966:	b093      	sub	sp, #76	; 0x4c
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	089b      	lsrs	r3, r3, #2
 8006976:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006978:	e052      	b.n	8006a20 <arm_mult_f32+0xbc>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8006992:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8006996:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800699a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800699e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 80069ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80069b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80069b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c8:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 80069d0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80069d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80069d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069dc:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3304      	adds	r3, #4
 80069e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e6:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 80069e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80069ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80069f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f4:	edc7 7a05 	vstr	s15, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3308      	adds	r3, #8
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	330c      	adds	r3, #12
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4u;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3310      	adds	r3, #16
 8006a0c:	60fb      	str	r3, [r7, #12]
    pSrcB += 4u;
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	3310      	adds	r3, #16
 8006a12:	60bb      	str	r3, [r7, #8]
    pDst += 4u;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	3310      	adds	r3, #16
 8006a18:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8006a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	647b      	str	r3, [r7, #68]	; 0x44
  /* loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1a9      	bne.n	800697a <arm_mult_f32+0x16>
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006a2e:	e013      	b.n	8006a58 <arm_mult_f32+0xf4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	1d1a      	adds	r2, r3, #4
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	1d11      	adds	r1, r2, #4
 8006a3a:	60f9      	str	r1, [r7, #12]
 8006a3c:	ed92 7a00 	vldr	s14, [r2]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	1d11      	adds	r1, r2, #4
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	edd2 7a00 	vldr	s15, [r2]
 8006a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4e:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 8006a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a54:	3b01      	subs	r3, #1
 8006a56:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e8      	bne.n	8006a30 <arm_mult_f32+0xcc>
    *pDst++ = (*pSrcA++) * (*pSrcB++);

    /* Decrement the blockSize loop counter */
    blkCnt--;
  }
}
 8006a5e:	374c      	adds	r7, #76	; 0x4c
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <arm_offset_f32>:
void arm_offset_f32(
  float32_t * pSrc,
  float32_t offset,
  float32_t * pDst,
  uint32_t blockSize)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b08b      	sub	sp, #44	; 0x2c
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
 8006a74:	603b      	str	r3, [r7, #0]

/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	089b      	lsrs	r3, r3, #2
 8006a7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006a7c:	e043      	b.n	8006b06 <arm_offset_f32+0x9e>
  {
    /* C = A + offset */
    /* Add offset and then store the results in the destination buffer. */
    /* read samples from source */
    in1 = *pSrc;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	61fb      	str	r3, [r7, #28]

    /* add offset to input */
    in1 = in1 + offset;
 8006a8a:	ed97 7a08 	vldr	s14, [r7, #32]
 8006a8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a96:	edc7 7a08 	vstr	s15, [r7, #32]

    /* read samples from source */
    in3 = *(pSrc + 2);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	61bb      	str	r3, [r7, #24]

    /* add offset to input */
    in2 = in2 + offset;
 8006aa0:	ed97 7a07 	vldr	s14, [r7, #28]
 8006aa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8006aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aac:	edc7 7a07 	vstr	s15, [r7, #28]

    /* read samples from source */
    in4 = *(pSrc + 3);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	617b      	str	r3, [r7, #20]

    /* add offset to input */
    in3 = in3 + offset;
 8006ab6:	ed97 7a06 	vldr	s14, [r7, #24]
 8006aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8006abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac2:	edc7 7a06 	vstr	s15, [r7, #24]

    /* store result to destination */
    *pDst = in1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a3a      	ldr	r2, [r7, #32]
 8006aca:	601a      	str	r2, [r3, #0]

    /* add offset to input */
    in4 = in4 + offset;
 8006acc:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ad0:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ad8:	edc7 7a05 	vstr	s15, [r7, #20]

    /* store result to destination */
    *(pDst + 1) = in2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	69fa      	ldr	r2, [r7, #28]
 8006ae2:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 2) = in3;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 3) = in4;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	330c      	adds	r3, #12
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	601a      	str	r2, [r3, #0]

    /* update pointers to process next samples */
    pSrc += 4u;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	3310      	adds	r3, #16
 8006af8:	60fb      	str	r3, [r7, #12]
    pDst += 4u;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3310      	adds	r3, #16
 8006afe:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	3b01      	subs	r3, #1
 8006b04:	627b      	str	r3, [r7, #36]	; 0x24
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1b8      	bne.n	8006a7e <arm_offset_f32+0x16>
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	f003 0303 	and.w	r3, r3, #3
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006b14:	e010      	b.n	8006b38 <arm_offset_f32+0xd0>
  {
    /* C = A + offset */
    /* Add offset and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) + offset;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	1d1a      	adds	r2, r3, #4
 8006b1a:	607a      	str	r2, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	1d11      	adds	r1, r2, #4
 8006b20:	60f9      	str	r1, [r7, #12]
 8006b22:	ed92 7a00 	vldr	s14, [r2]
 8006b26:	edd7 7a02 	vldr	s15, [r7, #8]
 8006b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b2e:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement the loop counter */
    blkCnt--;
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	3b01      	subs	r3, #1
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1eb      	bne.n	8006b16 <arm_offset_f32+0xae>
    *pDst++ = (*pSrc++) + offset;

    /* Decrement the loop counter */
    blkCnt--;
  }
}
 8006b3e:	372c      	adds	r7, #44	; 0x2c
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <OSCHP_GetFrequency>:
  return (version);
}

/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8006b4c:	4b02      	ldr	r3, [pc, #8]	; (8006b58 <OSCHP_GetFrequency+0x10>)
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr
 8006b58:	00b71b00 	.word	0x00b71b00

08006b5c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0

  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8006b60:	480b      	ldr	r0, [pc, #44]	; (8006b90 <SystemCoreClockSetup+0x34>)
 8006b62:	f7f9 ff45 	bl	80009f0 <XMC_SCU_CLOCK_Init>
  /* RTC source clock*/
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8006b66:	2000      	movs	r0, #0
 8006b68:	f7fa f82a 	bl	8000bc0 <XMC_SCU_HIB_SetRtcClockSource>

  /* USB/SDMMC source clock*/
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	f7f9 ffdf 	bl	8000b30 <XMC_SCU_CLOCK_SetUsbClockSource>
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8006b72:	2004      	movs	r0, #4
 8006b74:	f7fa f8b0 	bl	8000cd8 <XMC_SCU_CLOCK_SetUsbClockDivider>

  XMC_SCU_CLOCK_StartUsbPll(2U, 64U);
 8006b78:	2002      	movs	r0, #2
 8006b7a:	2140      	movs	r1, #64	; 0x40
 8006b7c:	f7fa f902 	bl	8000d84 <XMC_SCU_CLOCK_StartUsbPll>

  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8006b80:	2000      	movs	r0, #0
 8006b82:	f7f9 ffe9 	bl	8000b58 <XMC_SCU_CLOCK_SetWdtClockSource>
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8006b86:	2001      	movs	r0, #1
 8006b88:	f7fa f8ba 	bl	8000d00 <XMC_SCU_CLOCK_SetWdtClockDivider>

}
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	0801bc58 	.word	0x0801bc58

08006b94 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8006b98:	4b04      	ldr	r3, [pc, #16]	; (8006bac <NVIC_GetPriorityGrouping+0x18>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ba0:	0a1b      	lsrs	r3, r3, #8
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8006bba:	4908      	ldr	r1, [pc, #32]	; (8006bdc <NVIC_EnableIRQ+0x2c>)
 8006bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc0:	095b      	lsrs	r3, r3, #5
 8006bc2:	79fa      	ldrb	r2, [r7, #7]
 8006bc4:	f002 021f 	and.w	r2, r2, #31
 8006bc8:	2001      	movs	r0, #1
 8006bca:	fa00 f202 	lsl.w	r2, r0, r2
 8006bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	e000e100 	.word	0xe000e100

08006be0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	4603      	mov	r3, r0
 8006be8:	6039      	str	r1, [r7, #0]
 8006bea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8006bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da0b      	bge.n	8006c0c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8006bf4:	490d      	ldr	r1, [pc, #52]	; (8006c2c <NVIC_SetPriority+0x4c>)
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	3b04      	subs	r3, #4
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	0092      	lsls	r2, r2, #2
 8006c04:	b2d2      	uxtb	r2, r2
 8006c06:	440b      	add	r3, r1
 8006c08:	761a      	strb	r2, [r3, #24]
 8006c0a:	e009      	b.n	8006c20 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8006c0c:	4908      	ldr	r1, [pc, #32]	; (8006c30 <NVIC_SetPriority+0x50>)
 8006c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	0092      	lsls	r2, r2, #2
 8006c18:	b2d2      	uxtb	r2, r2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c20:	370c      	adds	r7, #12
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	e000ed00 	.word	0xe000ed00
 8006c30:	e000e100 	.word	0xe000e100

08006c34 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b089      	sub	sp, #36	; 0x24
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f1c3 0307 	rsb	r3, r3, #7
 8006c4e:	2b06      	cmp	r3, #6
 8006c50:	bf28      	it	cs
 8006c52:	2306      	movcs	r3, #6
 8006c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	3306      	adds	r3, #6
 8006c5a:	2b06      	cmp	r3, #6
 8006c5c:	d902      	bls.n	8006c64 <NVIC_EncodePriority+0x30>
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	3b01      	subs	r3, #1
 8006c62:	e000      	b.n	8006c66 <NVIC_EncodePriority+0x32>
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	461a      	mov	r2, r3
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	401a      	ands	r2, r3
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2101      	movs	r1, #1
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	4619      	mov	r1, r3
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8006c8c:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3724      	adds	r7, #36	; 0x24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop

08006c9c <XMC_VADC_GROUP_QueueSetGatingMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_VADC_GROUP_QueueSelectGating();
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueSetGatingMode(XMC_VADC_GROUP_t *const group_ptr, XMC_VADC_GATEMODE_t mode_sel)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_QueueSetGatingMode:Wrong mode selected", (mode_sel <= XMC_VADC_GATEMODE_ACTIVELOW))

  /* Clear the existing gate configuration */
  group_ptr->QMR0 &= (uint32_t)(~((uint32_t) VADC_G_QMR0_ENGT_Msk));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006cae:	f023 0203 	bic.w	r2, r3, #3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  /* Set the new gating mode */
  group_ptr->QMR0 |= (uint32_t)((uint32_t)mode_sel << VADC_G_QMR0_ENGT_Pos);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop

08006cd4 <XMC_VADC_GROUP_QueueFlushEntries>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR> XMC_VADC_GROUP_QueueAbortSequence(0<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueFlushEntries(XMC_VADC_GROUP_t *const group_ptr)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Initiate flushing of the queue */
  group_ptr->QMR0 |= (uint32_t)VADC_G_QMR0_FLUSH_Msk;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8006ce2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

  while( !((group_ptr->QSR0)& (uint32_t)VADC_G_QSR0_EMPTY_Msk))
 8006cec:	bf00      	nop
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006cf4:	f003 0320 	and.w	r3, r3, #32
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f8      	beq.n	8006cee <XMC_VADC_GROUP_QueueFlushEntries+0x1a>
  {
    /* Wait until the queue is indeed flushed */
  }
}
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop

08006d08 <XMC_VADC_GROUP_QueueInsertChannel>:
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueRemoveChannel()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueInsertChannel(XMC_VADC_GROUP_t *const group_ptr,
                                                       const XMC_VADC_QUEUE_ENTRY_t entry)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_QueueInsertChannel:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  /* Insert the channel physically and get the length of the queue*/
  group_ptr->QINR0 = entry.qinr0;
 8006d12:	683a      	ldr	r2, [r7, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <XMC_VADC_GROUP_QueueClearReqSrcEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_QueueTriggerReqSrcEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_QueueClearReqSrcEvent(XMC_VADC_GROUP_t *const group_ptr)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_QueueClearReqSrcEvent:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->SEFCLR |= (uint32_t)VADC_G_SEFCLR_SEV0_Msk;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8006d32:	f043 0201 	orr.w	r2, r3, #1
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
}
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop

08006d48 <ADC_QUEUE_ResetListContents>:
  return version;
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* API to reset (De-Initialise) contents of all queue entries */
void ADC_QUEUE_ResetListContents(uint8_t instance_num)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("ADC_QUEUE_ResetListContents:Wrong Instance number",(instance_num < ADC_QUEUE_NUM_APPINSTANCES))

  /*
   * Now reset the contents of all the lists. Application later uses ADC_QUEUE_Insert() to initialise specific entries.
   */
  for (j = 0U; j < ADC_QUEUE_NUM_LISTS; j++)
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]
 8006d56:	e022      	b.n	8006d9e <ADC_QUEUE_ResetListContents+0x56>
  {
    for (k = 0U; k < ADC_QUEUE_NUM_CHANNELS; k++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	75bb      	strb	r3, [r7, #22]
 8006d5c:	e019      	b.n	8006d92 <ADC_QUEUE_ResetListContents+0x4a>
    {
      /* This points to the start of the channel related list*/
      list_start = adc_queue_list_ptrs[instance_num][j];
 8006d5e:	79fa      	ldrb	r2, [r7, #7]
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	4913      	ldr	r1, [pc, #76]	; (8006db0 <ADC_QUEUE_ResetListContents+0x68>)
 8006d64:	0052      	lsls	r2, r2, #1
 8006d66:	4413      	add	r3, r2
 8006d68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006d6c:	613b      	str	r3, [r7, #16]
      if ((ADC_QUEUE_ENTRY_t *)NULL != list_start)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00b      	beq.n	8006d8c <ADC_QUEUE_ResetListContents+0x44>
      {
    	/* for each channel related list which is not NULL initialize the channel to ADC_QUEUE_INVALID_CHANNEL*/
        node = list_start + k;
 8006d74:	7dba      	ldrb	r2, [r7, #22]
 8006d76:	4613      	mov	r3, r2
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	4413      	add	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	461a      	mov	r2, r3
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
        node->channel_number = ADC_QUEUE_INVALID_CHANNEL;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	22ff      	movs	r2, #255	; 0xff
 8006d8a:	715a      	strb	r2, [r3, #5]
  /*
   * Now reset the contents of all the lists. Application later uses ADC_QUEUE_Insert() to initialise specific entries.
   */
  for (j = 0U; j < ADC_QUEUE_NUM_LISTS; j++)
  {
    for (k = 0U; k < ADC_QUEUE_NUM_CHANNELS; k++)
 8006d8c:	7dbb      	ldrb	r3, [r7, #22]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	75bb      	strb	r3, [r7, #22]
 8006d92:	7dbb      	ldrb	r3, [r7, #22]
 8006d94:	2b07      	cmp	r3, #7
 8006d96:	d9e2      	bls.n	8006d5e <ADC_QUEUE_ResetListContents+0x16>
  XMC_ASSERT("ADC_QUEUE_ResetListContents:Wrong Instance number",(instance_num < ADC_QUEUE_NUM_APPINSTANCES))

  /*
   * Now reset the contents of all the lists. Application later uses ADC_QUEUE_Insert() to initialise specific entries.
   */
  for (j = 0U; j < ADC_QUEUE_NUM_LISTS; j++)
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	75fb      	strb	r3, [r7, #23]
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d9d9      	bls.n	8006d58 <ADC_QUEUE_ResetListContents+0x10>
        node = list_start + k;
        node->channel_number = ADC_QUEUE_INVALID_CHANNEL;
      }
    }
  }
}
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20001e9c 	.word	0x20001e9c

08006db4 <ADC_QUEUE_Init>:

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
ADC_QUEUE_STATUS_t ADC_QUEUE_Init(ADC_QUEUE_t *const handle_ptr)
{
 8006db4:	b590      	push	{r4, r7, lr}
 8006db6:	b085      	sub	sp, #20
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  ADC_QUEUE_STATUS_t status;

  XMC_ASSERT("ADC_QUEUE_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_QUEUE_UNINITIALIZED == handle_ptr->init_status)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	7f5b      	ldrb	r3, [r3, #29]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d163      	bne.n	8006e8c <ADC_QUEUE_Init+0xd8>
  {
    /*Initialization of APP 'GLOBAL_ADC'*/
    status = (ADC_QUEUE_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fc fb6d 	bl	80034a8 <GLOBAL_ADC_Init>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	73fb      	strb	r3, [r7, #15]
    {
      status = (ADC_QUEUE_STATUS_t)((uint32_t)status + (uint32_t)CPU_CTRL_XMC1_Init(CPU_CTRL_HANDLE));
    }
#endif
#ifdef ADC_QUEUE_CPU_4X
    if ((CPU_CTRL_XMC4_t *)NULL != handle_ptr->cpu_handle)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d007      	beq.n	8006dea <ADC_QUEUE_Init+0x36>
    {
      status = (ADC_QUEUE_STATUS_t)((uint32_t)status + (uint32_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE));
 8006dda:	482f      	ldr	r0, [pc, #188]	; (8006e98 <ADC_QUEUE_Init+0xe4>)
 8006ddc:	f7fc fe16 	bl	8003a0c <CPU_CTRL_XMC4_Init>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	4413      	add	r3, r2
 8006de8:	73fb      	strb	r3, [r7, #15]
    }
#endif

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68da      	ldr	r2, [r3, #12]
                                  XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	7fdb      	ldrb	r3, [r3, #31]
      status = (ADC_QUEUE_STATUS_t)((uint32_t)status + (uint32_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE));
    }
#endif

    /*Class Configuration*/
    XMC_VADC_GROUP_InputClassInit(handle_ptr->group_handle,handle_ptr->iclass_config_handle,
 8006df2:	461c      	mov	r4, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4610      	mov	r0, r2
 8006df8:	6819      	ldr	r1, [r3, #0]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	4623      	mov	r3, r4
 8006dfe:	f7fb f951 	bl	80020a4 <XMC_VADC_GROUP_InputClassInit>
                                  XMC_VADC_GROUP_CONV_STD,handle_ptr->iclass_num);

    /* Initialize the Queue hardware */
    XMC_VADC_GROUP_QueueInit(handle_ptr->group_handle,handle_ptr->queue_config_handle);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4610      	mov	r0, r2
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7fb f9c1 	bl	8002194 <XMC_VADC_GROUP_QueueInit>
  
    /* Configure the gating mode for queue*/
    XMC_VADC_GROUP_QueueSetGatingMode(handle_ptr->group_handle, handle_ptr->gating_mode);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	68da      	ldr	r2, [r3, #12]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	7c1b      	ldrb	r3, [r3, #16]
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	f7ff ff3d 	bl	8006c9c <XMC_VADC_GROUP_QueueSetGatingMode>

    /* Clear the internal data structure of queue APP */
    ADC_QUEUE_lInitializeListToDefaults(handle_ptr->instance_number);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7f9b      	ldrb	r3, [r3, #30]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 f900 	bl	800702c <ADC_QUEUE_lInitializeListToDefaults>
  
    /*Interrupt Configuration*/
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	699b      	ldr	r3, [r3, #24]
 8006e30:	7b1b      	ldrb	r3, [r3, #12]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d027      	beq.n	8006e86 <ADC_QUEUE_Init+0xd2>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	699b      	ldr	r3, [r3, #24]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	b2dc      	uxtb	r4, r3
 8006e3e:	f7ff fea9 	bl	8006b94 <NVIC_GetPriorityGrouping>
 8006e42:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8006e48:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
    if ((bool)true == handle_ptr->rs_intr_handle->interrupt_enable)
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id, handle_ptr->rs_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->rs_intr_handle->node_id,
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	4608      	mov	r0, r1
 8006e52:	4611      	mov	r1, r2
 8006e54:	461a      	mov	r2, r3
 8006e56:	f7ff feed 	bl	8006c34 <NVIC_EncodePriority>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	b263      	sxtb	r3, r4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	4611      	mov	r1, r2
 8006e62:	f7ff febd 	bl	8006be0 <NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->rs_intr_handle->priority,handle_ptr->rs_intr_handle->sub_priority));
#endif

      /* Connect RS Events to NVIC nodes */
      XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode(handle_ptr->group_handle,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	7f1b      	ldrb	r3, [r3, #28]
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7fb f9dd 	bl	8002230 <XMC_VADC_GROUP_QueueSetReqSrcEventInterruptNode>
                                                      (XMC_VADC_SR_t)handle_ptr->srv_req_node);

      /* Enable Interrupt */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->rs_intr_handle->node_id);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fe95 	bl	8006bb0 <NVIC_EnableIRQ>
    }
    handle_ptr->init_status = status;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	7bfa      	ldrb	r2, [r7, #15]
 8006e8a:	775a      	strb	r2, [r3, #29]
  }
  return (handle_ptr->init_status);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7f5b      	ldrb	r3, [r3, #29]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd90      	pop	{r4, r7, pc}
 8006e98:	1fffcdc4 	.word	0x1fffcdc4

08006e9c <ADC_QUEUE_InsertQueueEntry>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_InsertQueueEntry(ADC_QUEUE_t* handle_ptr, const ADC_QUEUE_ENTRY_t *entry)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]

  XMC_ASSERT("ADC_QUEUE_Insert:Invalid handle_ptr", (handle_ptr != NULL))
  XMC_ASSERT("ADC_QUEUE_Insert:Invalid queue entry", (entry != NULL))

  /* 1. Insert this entry into a list which is arranged on the basis of channel numbers */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_CH_INDEX];
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7f9b      	ldrb	r3, [r3, #30]
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4b16      	ldr	r3, [pc, #88]	; (8006f08 <ADC_QUEUE_InsertQueueEntry+0x6c>)
 8006eae:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8006eb2:	60fb      	str	r3, [r7, #12]
  node = node + (entry->channel_number);
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	795b      	ldrb	r3, [r3, #5]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4613      	mov	r3, r2
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	4413      	add	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t)); 
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	220c      	movs	r2, #12
 8006ed0:	f000 ffda 	bl	8007e88 <memcpy>

  /* Insert the same entry into a list which is arranged on the basis of the position of the channel in the queue */
  node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7f9b      	ldrb	r3, [r3, #30]
 8006ed8:	4a0b      	ldr	r2, [pc, #44]	; (8006f08 <ADC_QUEUE_InsertQueueEntry+0x6c>)
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]
  node = node + (entry->queue_position);
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	791b      	ldrb	r3, [r3, #4]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	4613      	mov	r3, r2
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
  memcpy((void *)node, (void *)entry, sizeof(ADC_QUEUE_ENTRY_t));
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	6839      	ldr	r1, [r7, #0]
 8006efc:	220c      	movs	r2, #12
 8006efe:	f000 ffc3 	bl	8007e88 <memcpy>

}
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20001e9c 	.word	0x20001e9c

08006f0c <ADC_QUEUE_AllEntriesInserted>:
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_AllEntriesInserted(ADC_QUEUE_t* handle_ptr)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t pos_index;
  
  XMC_ASSERT("ADC_QUEUE_AllEntriesInserted:Invalid handle_ptr", (handle_ptr != NULL))

  /* All entries have been submitted. The queue hardware may now be programmed in the right order. */
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	7f9b      	ldrb	r3, [r3, #30]
 8006f18:	4a26      	ldr	r2, [pc, #152]	; (8006fb4 <ADC_QUEUE_AllEntriesInserted+0xa8>)
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4413      	add	r3, r2
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	613b      	str	r3, [r7, #16]

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7ff fed4 	bl	8006cd4 <XMC_VADC_GROUP_QueueFlushEntries>

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	e039      	b.n	8006fa6 <ADC_QUEUE_AllEntriesInserted+0x9a>
  {
    node = start_node +  pos_index;
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4613      	mov	r3, r2
 8006f36:	005b      	lsls	r3, r3, #1
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4413      	add	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]
    
    if (ADC_QUEUE_INVALID_CHANNEL != node->channel_number)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	795b      	ldrb	r3, [r3, #5]
 8006f48:	2bff      	cmp	r3, #255	; 0xff
 8006f4a:	d029      	beq.n	8006fa0 <ADC_QUEUE_AllEntriesInserted+0x94>
    {
      /* Create a queue entry object for the LLD */
      entry.channel_num   = (uint8_t) node->channel_number;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	795b      	ldrb	r3, [r3, #5]
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	7a3b      	ldrb	r3, [r7, #8]
 8006f58:	f362 0304 	bfi	r3, r2, #0, #5
 8006f5c:	723b      	strb	r3, [r7, #8]
      entry.refill_needed = (uint32_t) node->refill_needed;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	79db      	ldrb	r3, [r3, #7]
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	7a3b      	ldrb	r3, [r7, #8]
 8006f6a:	f362 1345 	bfi	r3, r2, #5, #1
 8006f6e:	723b      	strb	r3, [r7, #8]
      entry.generate_interrupt = (uint32_t) node->rs_event_notification;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	7a5b      	ldrb	r3, [r3, #9]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	b2da      	uxtb	r2, r3
 8006f7a:	7a3b      	ldrb	r3, [r7, #8]
 8006f7c:	f362 1386 	bfi	r3, r2, #6, #1
 8006f80:	723b      	strb	r3, [r7, #8]
      entry.external_trigger   = (uint32_t)node->trigger_needed;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	799b      	ldrb	r3, [r3, #6]
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	7a3b      	ldrb	r3, [r7, #8]
 8006f8e:	f362 13c7 	bfi	r3, r2, #7, #1
 8006f92:	723b      	strb	r3, [r7, #8]
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	f7ff feb4 	bl	8006d08 <XMC_VADC_GROUP_QueueInsertChannel>
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];

  /* Flush any entries that are currently in the queue buffer*/
  XMC_VADC_GROUP_QueueFlushEntries(handle_ptr->group_handle);

  for (pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b07      	cmp	r3, #7
 8006faa:	d9c2      	bls.n	8006f32 <ADC_QUEUE_AllEntriesInserted+0x26>
      
      /* Request the LLD to insert the channel */
      XMC_VADC_GROUP_QueueInsertChannel(handle_ptr->group_handle, entry);
    }
  }
}
 8006fac:	3718      	adds	r7, #24
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20001e9c 	.word	0x20001e9c

08006fb8 <ADC_QUEUE_ReqSrcEventHandler>:
    }
  }
}
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
void ADC_QUEUE_ReqSrcEventHandler(ADC_QUEUE_t* handle_ptr)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  ADC_QUEUE_ENTRY_t *node;
  uint32_t pos_index;
  
  XMC_ASSERT("ADC_QUEUE_ReqSrcEventHandler:Invalid handle_ptr", (handle_ptr != NULL))

  XMC_VADC_GROUP_QueueClearReqSrcEvent(handle_ptr->group_handle);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fead 	bl	8006d24 <XMC_VADC_GROUP_QueueClearReqSrcEvent>
  
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	7f9b      	ldrb	r3, [r3, #30]
 8006fce:	4a12      	ldr	r2, [pc, #72]	; (8007018 <ADC_QUEUE_ReqSrcEventHandler+0x60>)
 8006fd0:	00db      	lsls	r3, r3, #3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	613b      	str	r3, [r7, #16]
  /* Iterate over all the valid entries and locate entries that requested a request source notification*/
  for ( pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	e016      	b.n	800700c <ADC_QUEUE_ReqSrcEventHandler+0x54>
  {
    node = start_node + pos_index;
 8006fde:	697a      	ldr	r2, [r7, #20]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	4413      	add	r3, r2
 8006fee:	60fb      	str	r3, [r7, #12]
    if (node->channel_number != ADC_QUEUE_INVALID_CHANNEL)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	795b      	ldrb	r3, [r3, #5]
 8006ff4:	2bff      	cmp	r3, #255	; 0xff
 8006ff6:	d006      	beq.n	8007006 <ADC_QUEUE_ReqSrcEventHandler+0x4e>
    {
      /*if a queue entry has requested a request source notification, invoke the callback*/
      if ((bool)true == node->rs_event_notification)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	7a5b      	ldrb	r3, [r3, #9]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <ADC_QUEUE_ReqSrcEventHandler+0x4e>
      {
        (node->adc_event_callback)();
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4798      	blx	r3

  XMC_VADC_GROUP_QueueClearReqSrcEvent(handle_ptr->group_handle);
  
  start_node = adc_queue_list_ptrs[handle_ptr->instance_number][ADC_QUEUE_POS_INDEX];
  /* Iterate over all the valid entries and locate entries that requested a request source notification*/
  for ( pos_index = 0U; pos_index < ADC_QUEUE_NUM_CHANNELS; pos_index++)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	3301      	adds	r3, #1
 800700a:	617b      	str	r3, [r7, #20]
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b07      	cmp	r3, #7
 8007010:	d9e5      	bls.n	8006fde <ADC_QUEUE_ReqSrcEventHandler+0x26>
      {
        (node->adc_event_callback)();
      }
    }
  }  
}
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	20001e9c 	.word	0x20001e9c

0800701c <VADC0_G0_0_IRQHandler>:

/**
 * This function invokes the Request source handler for ADC_QUEUE_G0
 */
void ADC_QUEUE_0_ReqSrcEventHandler(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  ADC_QUEUE_ReqSrcEventHandler(&ADC_QUEUE_G0);
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <VADC0_G0_0_IRQHandler+0xc>)
 8007022:	f7ff ffc9 	bl	8006fb8 <ADC_QUEUE_ReqSrcEventHandler>
}
 8007026:	bd80      	pop	{r7, pc}
 8007028:	1fffce08 	.word	0x1fffce08

0800702c <ADC_QUEUE_lInitializeListToDefaults>:



/* API generated to initialise list pointers and clear its contents*/
void ADC_QUEUE_lInitializeListToDefaults(uint8_t instance_num)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]

  /* Initialise list pointers of APP Instance- ADC_QUEUE_G0 */
  adc_queue_list_ptrs[0][0] = adc_queue_list_ch_index_0;
 8007036:	4b09      	ldr	r3, [pc, #36]	; (800705c <ADC_QUEUE_lInitializeListToDefaults+0x30>)
 8007038:	4a09      	ldr	r2, [pc, #36]	; (8007060 <ADC_QUEUE_lInitializeListToDefaults+0x34>)
 800703a:	601a      	str	r2, [r3, #0]
  adc_queue_list_ptrs[0][1] = adc_queue_list_pos_index_0;
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <ADC_QUEUE_lInitializeListToDefaults+0x30>)
 800703e:	4a09      	ldr	r2, [pc, #36]	; (8007064 <ADC_QUEUE_lInitializeListToDefaults+0x38>)
 8007040:	605a      	str	r2, [r3, #4]
 
  /* Initialise list pointers of APP Instance- ADC_QUEUE_G1 */
  adc_queue_list_ptrs[1][0] = adc_queue_list_ch_index_1;
 8007042:	4b06      	ldr	r3, [pc, #24]	; (800705c <ADC_QUEUE_lInitializeListToDefaults+0x30>)
 8007044:	4a08      	ldr	r2, [pc, #32]	; (8007068 <ADC_QUEUE_lInitializeListToDefaults+0x3c>)
 8007046:	609a      	str	r2, [r3, #8]
  adc_queue_list_ptrs[1][1] = adc_queue_list_pos_index_1;
 8007048:	4b04      	ldr	r3, [pc, #16]	; (800705c <ADC_QUEUE_lInitializeListToDefaults+0x30>)
 800704a:	4a08      	ldr	r2, [pc, #32]	; (800706c <ADC_QUEUE_lInitializeListToDefaults+0x40>)
 800704c:	60da      	str	r2, [r3, #12]
 
  /* Reset channels */
  ADC_QUEUE_ResetListContents(instance_num);
 800704e:	79fb      	ldrb	r3, [r7, #7]
 8007050:	4618      	mov	r0, r3
 8007052:	f7ff fe79 	bl	8006d48 <ADC_QUEUE_ResetListContents>
}
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20001e9c 	.word	0x20001e9c
 8007060:	20001f6c 	.word	0x20001f6c
 8007064:	20001fcc 	.word	0x20001fcc
 8007068:	20001f0c 	.word	0x20001f0c
 800706c:	20001eac 	.word	0x20001eac

08007070 <__aeabi_drsub>:
 8007070:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8007074:	e002      	b.n	800707c <__adddf3>
 8007076:	bf00      	nop

08007078 <__aeabi_dsub>:
 8007078:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800707c <__adddf3>:
 800707c:	b530      	push	{r4, r5, lr}
 800707e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8007082:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8007086:	ea94 0f05 	teq	r4, r5
 800708a:	bf08      	it	eq
 800708c:	ea90 0f02 	teqeq	r0, r2
 8007090:	bf1f      	itttt	ne
 8007092:	ea54 0c00 	orrsne.w	ip, r4, r0
 8007096:	ea55 0c02 	orrsne.w	ip, r5, r2
 800709a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800709e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80070a2:	f000 80e2 	beq.w	800726a <__adddf3+0x1ee>
 80070a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80070aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80070ae:	bfb8      	it	lt
 80070b0:	426d      	neglt	r5, r5
 80070b2:	dd0c      	ble.n	80070ce <__adddf3+0x52>
 80070b4:	442c      	add	r4, r5
 80070b6:	ea80 0202 	eor.w	r2, r0, r2
 80070ba:	ea81 0303 	eor.w	r3, r1, r3
 80070be:	ea82 0000 	eor.w	r0, r2, r0
 80070c2:	ea83 0101 	eor.w	r1, r3, r1
 80070c6:	ea80 0202 	eor.w	r2, r0, r2
 80070ca:	ea81 0303 	eor.w	r3, r1, r3
 80070ce:	2d36      	cmp	r5, #54	; 0x36
 80070d0:	bf88      	it	hi
 80070d2:	bd30      	pophi	{r4, r5, pc}
 80070d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80070d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80070dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80070e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80070e4:	d002      	beq.n	80070ec <__adddf3+0x70>
 80070e6:	4240      	negs	r0, r0
 80070e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80070ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80070f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80070f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80070f8:	d002      	beq.n	8007100 <__adddf3+0x84>
 80070fa:	4252      	negs	r2, r2
 80070fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007100:	ea94 0f05 	teq	r4, r5
 8007104:	f000 80a7 	beq.w	8007256 <__adddf3+0x1da>
 8007108:	f1a4 0401 	sub.w	r4, r4, #1
 800710c:	f1d5 0e20 	rsbs	lr, r5, #32
 8007110:	db0d      	blt.n	800712e <__adddf3+0xb2>
 8007112:	fa02 fc0e 	lsl.w	ip, r2, lr
 8007116:	fa22 f205 	lsr.w	r2, r2, r5
 800711a:	1880      	adds	r0, r0, r2
 800711c:	f141 0100 	adc.w	r1, r1, #0
 8007120:	fa03 f20e 	lsl.w	r2, r3, lr
 8007124:	1880      	adds	r0, r0, r2
 8007126:	fa43 f305 	asr.w	r3, r3, r5
 800712a:	4159      	adcs	r1, r3
 800712c:	e00e      	b.n	800714c <__adddf3+0xd0>
 800712e:	f1a5 0520 	sub.w	r5, r5, #32
 8007132:	f10e 0e20 	add.w	lr, lr, #32
 8007136:	2a01      	cmp	r2, #1
 8007138:	fa03 fc0e 	lsl.w	ip, r3, lr
 800713c:	bf28      	it	cs
 800713e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8007142:	fa43 f305 	asr.w	r3, r3, r5
 8007146:	18c0      	adds	r0, r0, r3
 8007148:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800714c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007150:	d507      	bpl.n	8007162 <__adddf3+0xe6>
 8007152:	f04f 0e00 	mov.w	lr, #0
 8007156:	f1dc 0c00 	rsbs	ip, ip, #0
 800715a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800715e:	eb6e 0101 	sbc.w	r1, lr, r1
 8007162:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007166:	d31b      	bcc.n	80071a0 <__adddf3+0x124>
 8007168:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800716c:	d30c      	bcc.n	8007188 <__adddf3+0x10c>
 800716e:	0849      	lsrs	r1, r1, #1
 8007170:	ea5f 0030 	movs.w	r0, r0, rrx
 8007174:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007178:	f104 0401 	add.w	r4, r4, #1
 800717c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007180:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8007184:	f080 809a 	bcs.w	80072bc <__adddf3+0x240>
 8007188:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800718c:	bf08      	it	eq
 800718e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007192:	f150 0000 	adcs.w	r0, r0, #0
 8007196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800719a:	ea41 0105 	orr.w	r1, r1, r5
 800719e:	bd30      	pop	{r4, r5, pc}
 80071a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80071a4:	4140      	adcs	r0, r0
 80071a6:	eb41 0101 	adc.w	r1, r1, r1
 80071aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80071ae:	f1a4 0401 	sub.w	r4, r4, #1
 80071b2:	d1e9      	bne.n	8007188 <__adddf3+0x10c>
 80071b4:	f091 0f00 	teq	r1, #0
 80071b8:	bf04      	itt	eq
 80071ba:	4601      	moveq	r1, r0
 80071bc:	2000      	moveq	r0, #0
 80071be:	fab1 f381 	clz	r3, r1
 80071c2:	bf08      	it	eq
 80071c4:	3320      	addeq	r3, #32
 80071c6:	f1a3 030b 	sub.w	r3, r3, #11
 80071ca:	f1b3 0220 	subs.w	r2, r3, #32
 80071ce:	da0c      	bge.n	80071ea <__adddf3+0x16e>
 80071d0:	320c      	adds	r2, #12
 80071d2:	dd08      	ble.n	80071e6 <__adddf3+0x16a>
 80071d4:	f102 0c14 	add.w	ip, r2, #20
 80071d8:	f1c2 020c 	rsb	r2, r2, #12
 80071dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80071e0:	fa21 f102 	lsr.w	r1, r1, r2
 80071e4:	e00c      	b.n	8007200 <__adddf3+0x184>
 80071e6:	f102 0214 	add.w	r2, r2, #20
 80071ea:	bfd8      	it	le
 80071ec:	f1c2 0c20 	rsble	ip, r2, #32
 80071f0:	fa01 f102 	lsl.w	r1, r1, r2
 80071f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80071f8:	bfdc      	itt	le
 80071fa:	ea41 010c 	orrle.w	r1, r1, ip
 80071fe:	4090      	lslle	r0, r2
 8007200:	1ae4      	subs	r4, r4, r3
 8007202:	bfa2      	ittt	ge
 8007204:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007208:	4329      	orrge	r1, r5
 800720a:	bd30      	popge	{r4, r5, pc}
 800720c:	ea6f 0404 	mvn.w	r4, r4
 8007210:	3c1f      	subs	r4, #31
 8007212:	da1c      	bge.n	800724e <__adddf3+0x1d2>
 8007214:	340c      	adds	r4, #12
 8007216:	dc0e      	bgt.n	8007236 <__adddf3+0x1ba>
 8007218:	f104 0414 	add.w	r4, r4, #20
 800721c:	f1c4 0220 	rsb	r2, r4, #32
 8007220:	fa20 f004 	lsr.w	r0, r0, r4
 8007224:	fa01 f302 	lsl.w	r3, r1, r2
 8007228:	ea40 0003 	orr.w	r0, r0, r3
 800722c:	fa21 f304 	lsr.w	r3, r1, r4
 8007230:	ea45 0103 	orr.w	r1, r5, r3
 8007234:	bd30      	pop	{r4, r5, pc}
 8007236:	f1c4 040c 	rsb	r4, r4, #12
 800723a:	f1c4 0220 	rsb	r2, r4, #32
 800723e:	fa20 f002 	lsr.w	r0, r0, r2
 8007242:	fa01 f304 	lsl.w	r3, r1, r4
 8007246:	ea40 0003 	orr.w	r0, r0, r3
 800724a:	4629      	mov	r1, r5
 800724c:	bd30      	pop	{r4, r5, pc}
 800724e:	fa21 f004 	lsr.w	r0, r1, r4
 8007252:	4629      	mov	r1, r5
 8007254:	bd30      	pop	{r4, r5, pc}
 8007256:	f094 0f00 	teq	r4, #0
 800725a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800725e:	bf06      	itte	eq
 8007260:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8007264:	3401      	addeq	r4, #1
 8007266:	3d01      	subne	r5, #1
 8007268:	e74e      	b.n	8007108 <__adddf3+0x8c>
 800726a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800726e:	bf18      	it	ne
 8007270:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8007274:	d029      	beq.n	80072ca <__adddf3+0x24e>
 8007276:	ea94 0f05 	teq	r4, r5
 800727a:	bf08      	it	eq
 800727c:	ea90 0f02 	teqeq	r0, r2
 8007280:	d005      	beq.n	800728e <__adddf3+0x212>
 8007282:	ea54 0c00 	orrs.w	ip, r4, r0
 8007286:	bf04      	itt	eq
 8007288:	4619      	moveq	r1, r3
 800728a:	4610      	moveq	r0, r2
 800728c:	bd30      	pop	{r4, r5, pc}
 800728e:	ea91 0f03 	teq	r1, r3
 8007292:	bf1e      	ittt	ne
 8007294:	2100      	movne	r1, #0
 8007296:	2000      	movne	r0, #0
 8007298:	bd30      	popne	{r4, r5, pc}
 800729a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800729e:	d105      	bne.n	80072ac <__adddf3+0x230>
 80072a0:	0040      	lsls	r0, r0, #1
 80072a2:	4149      	adcs	r1, r1
 80072a4:	bf28      	it	cs
 80072a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80072aa:	bd30      	pop	{r4, r5, pc}
 80072ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80072b0:	bf3c      	itt	cc
 80072b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80072b6:	bd30      	popcc	{r4, r5, pc}
 80072b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80072bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80072c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072c4:	f04f 0000 	mov.w	r0, #0
 80072c8:	bd30      	pop	{r4, r5, pc}
 80072ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80072ce:	bf1a      	itte	ne
 80072d0:	4619      	movne	r1, r3
 80072d2:	4610      	movne	r0, r2
 80072d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80072d8:	bf1c      	itt	ne
 80072da:	460b      	movne	r3, r1
 80072dc:	4602      	movne	r2, r0
 80072de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80072e2:	bf06      	itte	eq
 80072e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80072e8:	ea91 0f03 	teqeq	r1, r3
 80072ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80072f0:	bd30      	pop	{r4, r5, pc}
 80072f2:	bf00      	nop

080072f4 <__aeabi_ui2d>:
 80072f4:	f090 0f00 	teq	r0, #0
 80072f8:	bf04      	itt	eq
 80072fa:	2100      	moveq	r1, #0
 80072fc:	4770      	bxeq	lr
 80072fe:	b530      	push	{r4, r5, lr}
 8007300:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007304:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007308:	f04f 0500 	mov.w	r5, #0
 800730c:	f04f 0100 	mov.w	r1, #0
 8007310:	e750      	b.n	80071b4 <__adddf3+0x138>
 8007312:	bf00      	nop

08007314 <__aeabi_i2d>:
 8007314:	f090 0f00 	teq	r0, #0
 8007318:	bf04      	itt	eq
 800731a:	2100      	moveq	r1, #0
 800731c:	4770      	bxeq	lr
 800731e:	b530      	push	{r4, r5, lr}
 8007320:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8007324:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007328:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800732c:	bf48      	it	mi
 800732e:	4240      	negmi	r0, r0
 8007330:	f04f 0100 	mov.w	r1, #0
 8007334:	e73e      	b.n	80071b4 <__adddf3+0x138>
 8007336:	bf00      	nop

08007338 <__aeabi_f2d>:
 8007338:	0042      	lsls	r2, r0, #1
 800733a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800733e:	ea4f 0131 	mov.w	r1, r1, rrx
 8007342:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8007346:	bf1f      	itttt	ne
 8007348:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800734c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007350:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8007354:	4770      	bxne	lr
 8007356:	f092 0f00 	teq	r2, #0
 800735a:	bf14      	ite	ne
 800735c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007360:	4770      	bxeq	lr
 8007362:	b530      	push	{r4, r5, lr}
 8007364:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007368:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800736c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007370:	e720      	b.n	80071b4 <__adddf3+0x138>
 8007372:	bf00      	nop

08007374 <__aeabi_ul2d>:
 8007374:	ea50 0201 	orrs.w	r2, r0, r1
 8007378:	bf08      	it	eq
 800737a:	4770      	bxeq	lr
 800737c:	b530      	push	{r4, r5, lr}
 800737e:	f04f 0500 	mov.w	r5, #0
 8007382:	e00a      	b.n	800739a <__aeabi_l2d+0x16>

08007384 <__aeabi_l2d>:
 8007384:	ea50 0201 	orrs.w	r2, r0, r1
 8007388:	bf08      	it	eq
 800738a:	4770      	bxeq	lr
 800738c:	b530      	push	{r4, r5, lr}
 800738e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007392:	d502      	bpl.n	800739a <__aeabi_l2d+0x16>
 8007394:	4240      	negs	r0, r0
 8007396:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800739a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800739e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80073a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80073a6:	f43f aedc 	beq.w	8007162 <__adddf3+0xe6>
 80073aa:	f04f 0203 	mov.w	r2, #3
 80073ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80073b2:	bf18      	it	ne
 80073b4:	3203      	addne	r2, #3
 80073b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80073ba:	bf18      	it	ne
 80073bc:	3203      	addne	r2, #3
 80073be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80073c2:	f1c2 0320 	rsb	r3, r2, #32
 80073c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80073ca:	fa20 f002 	lsr.w	r0, r0, r2
 80073ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80073d2:	ea40 000e 	orr.w	r0, r0, lr
 80073d6:	fa21 f102 	lsr.w	r1, r1, r2
 80073da:	4414      	add	r4, r2
 80073dc:	e6c1      	b.n	8007162 <__adddf3+0xe6>
 80073de:	bf00      	nop

080073e0 <__aeabi_dmul>:
 80073e0:	b570      	push	{r4, r5, r6, lr}
 80073e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80073e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80073ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80073ee:	bf1d      	ittte	ne
 80073f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80073f4:	ea94 0f0c 	teqne	r4, ip
 80073f8:	ea95 0f0c 	teqne	r5, ip
 80073fc:	f000 f8de 	bleq	80075bc <__aeabi_dmul+0x1dc>
 8007400:	442c      	add	r4, r5
 8007402:	ea81 0603 	eor.w	r6, r1, r3
 8007406:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800740a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800740e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007412:	bf18      	it	ne
 8007414:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007418:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800741c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007420:	d038      	beq.n	8007494 <__aeabi_dmul+0xb4>
 8007422:	fba0 ce02 	umull	ip, lr, r0, r2
 8007426:	f04f 0500 	mov.w	r5, #0
 800742a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800742e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007432:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007436:	f04f 0600 	mov.w	r6, #0
 800743a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800743e:	f09c 0f00 	teq	ip, #0
 8007442:	bf18      	it	ne
 8007444:	f04e 0e01 	orrne.w	lr, lr, #1
 8007448:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800744c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007450:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007454:	d204      	bcs.n	8007460 <__aeabi_dmul+0x80>
 8007456:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800745a:	416d      	adcs	r5, r5
 800745c:	eb46 0606 	adc.w	r6, r6, r6
 8007460:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007464:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007468:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800746c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007470:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007474:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007478:	bf88      	it	hi
 800747a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800747e:	d81e      	bhi.n	80074be <__aeabi_dmul+0xde>
 8007480:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007484:	bf08      	it	eq
 8007486:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800748a:	f150 0000 	adcs.w	r0, r0, #0
 800748e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007492:	bd70      	pop	{r4, r5, r6, pc}
 8007494:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007498:	ea46 0101 	orr.w	r1, r6, r1
 800749c:	ea40 0002 	orr.w	r0, r0, r2
 80074a0:	ea81 0103 	eor.w	r1, r1, r3
 80074a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80074a8:	bfc2      	ittt	gt
 80074aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80074ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80074b2:	bd70      	popgt	{r4, r5, r6, pc}
 80074b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80074b8:	f04f 0e00 	mov.w	lr, #0
 80074bc:	3c01      	subs	r4, #1
 80074be:	f300 80ab 	bgt.w	8007618 <__aeabi_dmul+0x238>
 80074c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80074c6:	bfde      	ittt	le
 80074c8:	2000      	movle	r0, #0
 80074ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80074ce:	bd70      	pople	{r4, r5, r6, pc}
 80074d0:	f1c4 0400 	rsb	r4, r4, #0
 80074d4:	3c20      	subs	r4, #32
 80074d6:	da35      	bge.n	8007544 <__aeabi_dmul+0x164>
 80074d8:	340c      	adds	r4, #12
 80074da:	dc1b      	bgt.n	8007514 <__aeabi_dmul+0x134>
 80074dc:	f104 0414 	add.w	r4, r4, #20
 80074e0:	f1c4 0520 	rsb	r5, r4, #32
 80074e4:	fa00 f305 	lsl.w	r3, r0, r5
 80074e8:	fa20 f004 	lsr.w	r0, r0, r4
 80074ec:	fa01 f205 	lsl.w	r2, r1, r5
 80074f0:	ea40 0002 	orr.w	r0, r0, r2
 80074f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80074f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80074fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007500:	fa21 f604 	lsr.w	r6, r1, r4
 8007504:	eb42 0106 	adc.w	r1, r2, r6
 8007508:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800750c:	bf08      	it	eq
 800750e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	f1c4 040c 	rsb	r4, r4, #12
 8007518:	f1c4 0520 	rsb	r5, r4, #32
 800751c:	fa00 f304 	lsl.w	r3, r0, r4
 8007520:	fa20 f005 	lsr.w	r0, r0, r5
 8007524:	fa01 f204 	lsl.w	r2, r1, r4
 8007528:	ea40 0002 	orr.w	r0, r0, r2
 800752c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007530:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007534:	f141 0100 	adc.w	r1, r1, #0
 8007538:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800753c:	bf08      	it	eq
 800753e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	f1c4 0520 	rsb	r5, r4, #32
 8007548:	fa00 f205 	lsl.w	r2, r0, r5
 800754c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007550:	fa20 f304 	lsr.w	r3, r0, r4
 8007554:	fa01 f205 	lsl.w	r2, r1, r5
 8007558:	ea43 0302 	orr.w	r3, r3, r2
 800755c:	fa21 f004 	lsr.w	r0, r1, r4
 8007560:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007564:	fa21 f204 	lsr.w	r2, r1, r4
 8007568:	ea20 0002 	bic.w	r0, r0, r2
 800756c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007570:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007574:	bf08      	it	eq
 8007576:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	f094 0f00 	teq	r4, #0
 8007580:	d10f      	bne.n	80075a2 <__aeabi_dmul+0x1c2>
 8007582:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007586:	0040      	lsls	r0, r0, #1
 8007588:	eb41 0101 	adc.w	r1, r1, r1
 800758c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007590:	bf08      	it	eq
 8007592:	3c01      	subeq	r4, #1
 8007594:	d0f7      	beq.n	8007586 <__aeabi_dmul+0x1a6>
 8007596:	ea41 0106 	orr.w	r1, r1, r6
 800759a:	f095 0f00 	teq	r5, #0
 800759e:	bf18      	it	ne
 80075a0:	4770      	bxne	lr
 80075a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80075a6:	0052      	lsls	r2, r2, #1
 80075a8:	eb43 0303 	adc.w	r3, r3, r3
 80075ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80075b0:	bf08      	it	eq
 80075b2:	3d01      	subeq	r5, #1
 80075b4:	d0f7      	beq.n	80075a6 <__aeabi_dmul+0x1c6>
 80075b6:	ea43 0306 	orr.w	r3, r3, r6
 80075ba:	4770      	bx	lr
 80075bc:	ea94 0f0c 	teq	r4, ip
 80075c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80075c4:	bf18      	it	ne
 80075c6:	ea95 0f0c 	teqne	r5, ip
 80075ca:	d00c      	beq.n	80075e6 <__aeabi_dmul+0x206>
 80075cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80075d0:	bf18      	it	ne
 80075d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80075d6:	d1d1      	bne.n	800757c <__aeabi_dmul+0x19c>
 80075d8:	ea81 0103 	eor.w	r1, r1, r3
 80075dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80075e0:	f04f 0000 	mov.w	r0, #0
 80075e4:	bd70      	pop	{r4, r5, r6, pc}
 80075e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80075ea:	bf06      	itte	eq
 80075ec:	4610      	moveq	r0, r2
 80075ee:	4619      	moveq	r1, r3
 80075f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80075f4:	d019      	beq.n	800762a <__aeabi_dmul+0x24a>
 80075f6:	ea94 0f0c 	teq	r4, ip
 80075fa:	d102      	bne.n	8007602 <__aeabi_dmul+0x222>
 80075fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007600:	d113      	bne.n	800762a <__aeabi_dmul+0x24a>
 8007602:	ea95 0f0c 	teq	r5, ip
 8007606:	d105      	bne.n	8007614 <__aeabi_dmul+0x234>
 8007608:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800760c:	bf1c      	itt	ne
 800760e:	4610      	movne	r0, r2
 8007610:	4619      	movne	r1, r3
 8007612:	d10a      	bne.n	800762a <__aeabi_dmul+0x24a>
 8007614:	ea81 0103 	eor.w	r1, r1, r3
 8007618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800761c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007620:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007624:	f04f 0000 	mov.w	r0, #0
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800762e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007632:	bd70      	pop	{r4, r5, r6, pc}

08007634 <__aeabi_ddiv>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800763a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800763e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007642:	bf1d      	ittte	ne
 8007644:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007648:	ea94 0f0c 	teqne	r4, ip
 800764c:	ea95 0f0c 	teqne	r5, ip
 8007650:	f000 f8a7 	bleq	80077a2 <__aeabi_ddiv+0x16e>
 8007654:	eba4 0405 	sub.w	r4, r4, r5
 8007658:	ea81 0e03 	eor.w	lr, r1, r3
 800765c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007660:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007664:	f000 8088 	beq.w	8007778 <__aeabi_ddiv+0x144>
 8007668:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800766c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007670:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007674:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007678:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800767c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007680:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007684:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007688:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800768c:	429d      	cmp	r5, r3
 800768e:	bf08      	it	eq
 8007690:	4296      	cmpeq	r6, r2
 8007692:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007696:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800769a:	d202      	bcs.n	80076a2 <__aeabi_ddiv+0x6e>
 800769c:	085b      	lsrs	r3, r3, #1
 800769e:	ea4f 0232 	mov.w	r2, r2, rrx
 80076a2:	1ab6      	subs	r6, r6, r2
 80076a4:	eb65 0503 	sbc.w	r5, r5, r3
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80076ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80076b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80076b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80076ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80076be:	bf22      	ittt	cs
 80076c0:	1ab6      	subcs	r6, r6, r2
 80076c2:	4675      	movcs	r5, lr
 80076c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80076c8:	085b      	lsrs	r3, r3, #1
 80076ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80076ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80076d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80076d6:	bf22      	ittt	cs
 80076d8:	1ab6      	subcs	r6, r6, r2
 80076da:	4675      	movcs	r5, lr
 80076dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80076e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80076ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80076ee:	bf22      	ittt	cs
 80076f0:	1ab6      	subcs	r6, r6, r2
 80076f2:	4675      	movcs	r5, lr
 80076f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80076f8:	085b      	lsrs	r3, r3, #1
 80076fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80076fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8007702:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007706:	bf22      	ittt	cs
 8007708:	1ab6      	subcs	r6, r6, r2
 800770a:	4675      	movcs	r5, lr
 800770c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007710:	ea55 0e06 	orrs.w	lr, r5, r6
 8007714:	d018      	beq.n	8007748 <__aeabi_ddiv+0x114>
 8007716:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800771a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800771e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8007722:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007726:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800772a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800772e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007732:	d1c0      	bne.n	80076b6 <__aeabi_ddiv+0x82>
 8007734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007738:	d10b      	bne.n	8007752 <__aeabi_ddiv+0x11e>
 800773a:	ea41 0100 	orr.w	r1, r1, r0
 800773e:	f04f 0000 	mov.w	r0, #0
 8007742:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007746:	e7b6      	b.n	80076b6 <__aeabi_ddiv+0x82>
 8007748:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800774c:	bf04      	itt	eq
 800774e:	4301      	orreq	r1, r0
 8007750:	2000      	moveq	r0, #0
 8007752:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007756:	bf88      	it	hi
 8007758:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800775c:	f63f aeaf 	bhi.w	80074be <__aeabi_dmul+0xde>
 8007760:	ebb5 0c03 	subs.w	ip, r5, r3
 8007764:	bf04      	itt	eq
 8007766:	ebb6 0c02 	subseq.w	ip, r6, r2
 800776a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800776e:	f150 0000 	adcs.w	r0, r0, #0
 8007772:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007776:	bd70      	pop	{r4, r5, r6, pc}
 8007778:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800777c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007780:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007784:	bfc2      	ittt	gt
 8007786:	ebd4 050c 	rsbsgt	r5, r4, ip
 800778a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800778e:	bd70      	popgt	{r4, r5, r6, pc}
 8007790:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007794:	f04f 0e00 	mov.w	lr, #0
 8007798:	3c01      	subs	r4, #1
 800779a:	e690      	b.n	80074be <__aeabi_dmul+0xde>
 800779c:	ea45 0e06 	orr.w	lr, r5, r6
 80077a0:	e68d      	b.n	80074be <__aeabi_dmul+0xde>
 80077a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80077a6:	ea94 0f0c 	teq	r4, ip
 80077aa:	bf08      	it	eq
 80077ac:	ea95 0f0c 	teqeq	r5, ip
 80077b0:	f43f af3b 	beq.w	800762a <__aeabi_dmul+0x24a>
 80077b4:	ea94 0f0c 	teq	r4, ip
 80077b8:	d10a      	bne.n	80077d0 <__aeabi_ddiv+0x19c>
 80077ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80077be:	f47f af34 	bne.w	800762a <__aeabi_dmul+0x24a>
 80077c2:	ea95 0f0c 	teq	r5, ip
 80077c6:	f47f af25 	bne.w	8007614 <__aeabi_dmul+0x234>
 80077ca:	4610      	mov	r0, r2
 80077cc:	4619      	mov	r1, r3
 80077ce:	e72c      	b.n	800762a <__aeabi_dmul+0x24a>
 80077d0:	ea95 0f0c 	teq	r5, ip
 80077d4:	d106      	bne.n	80077e4 <__aeabi_ddiv+0x1b0>
 80077d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80077da:	f43f aefd 	beq.w	80075d8 <__aeabi_dmul+0x1f8>
 80077de:	4610      	mov	r0, r2
 80077e0:	4619      	mov	r1, r3
 80077e2:	e722      	b.n	800762a <__aeabi_dmul+0x24a>
 80077e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80077e8:	bf18      	it	ne
 80077ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80077ee:	f47f aec5 	bne.w	800757c <__aeabi_dmul+0x19c>
 80077f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80077f6:	f47f af0d 	bne.w	8007614 <__aeabi_dmul+0x234>
 80077fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80077fe:	f47f aeeb 	bne.w	80075d8 <__aeabi_dmul+0x1f8>
 8007802:	e712      	b.n	800762a <__aeabi_dmul+0x24a>

08007804 <__aeabi_d2f>:
 8007804:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007808:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800780c:	bf24      	itt	cs
 800780e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007812:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007816:	d90d      	bls.n	8007834 <__aeabi_d2f+0x30>
 8007818:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800781c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007820:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007824:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007828:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800782c:	bf08      	it	eq
 800782e:	f020 0001 	biceq.w	r0, r0, #1
 8007832:	4770      	bx	lr
 8007834:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007838:	d121      	bne.n	800787e <__aeabi_d2f+0x7a>
 800783a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800783e:	bfbc      	itt	lt
 8007840:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007844:	4770      	bxlt	lr
 8007846:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800784a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800784e:	f1c2 0218 	rsb	r2, r2, #24
 8007852:	f1c2 0c20 	rsb	ip, r2, #32
 8007856:	fa10 f30c 	lsls.w	r3, r0, ip
 800785a:	fa20 f002 	lsr.w	r0, r0, r2
 800785e:	bf18      	it	ne
 8007860:	f040 0001 	orrne.w	r0, r0, #1
 8007864:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007868:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800786c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007870:	ea40 000c 	orr.w	r0, r0, ip
 8007874:	fa23 f302 	lsr.w	r3, r3, r2
 8007878:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800787c:	e7cc      	b.n	8007818 <__aeabi_d2f+0x14>
 800787e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007882:	d107      	bne.n	8007894 <__aeabi_d2f+0x90>
 8007884:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007888:	bf1e      	ittt	ne
 800788a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800788e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007892:	4770      	bxne	lr
 8007894:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007898:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800789c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop

080078a4 <__aeabi_uldivmod>:
 80078a4:	b94b      	cbnz	r3, 80078ba <__aeabi_uldivmod+0x16>
 80078a6:	b942      	cbnz	r2, 80078ba <__aeabi_uldivmod+0x16>
 80078a8:	2900      	cmp	r1, #0
 80078aa:	bf08      	it	eq
 80078ac:	2800      	cmpeq	r0, #0
 80078ae:	d002      	beq.n	80078b6 <__aeabi_uldivmod+0x12>
 80078b0:	f04f 31ff 	mov.w	r1, #4294967295
 80078b4:	4608      	mov	r0, r1
 80078b6:	f000 b83b 	b.w	8007930 <__aeabi_idiv0>
 80078ba:	b082      	sub	sp, #8
 80078bc:	46ec      	mov	ip, sp
 80078be:	e92d 5000 	stmdb	sp!, {ip, lr}
 80078c2:	f000 f81d 	bl	8007900 <__gnu_uldivmod_helper>
 80078c6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80078ca:	b002      	add	sp, #8
 80078cc:	bc0c      	pop	{r2, r3}
 80078ce:	4770      	bx	lr

080078d0 <__gnu_ldivmod_helper>:
 80078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d4:	9c06      	ldr	r4, [sp, #24]
 80078d6:	4615      	mov	r5, r2
 80078d8:	4606      	mov	r6, r0
 80078da:	460f      	mov	r7, r1
 80078dc:	4698      	mov	r8, r3
 80078de:	f000 f829 	bl	8007934 <__divdi3>
 80078e2:	fb05 f301 	mul.w	r3, r5, r1
 80078e6:	fb00 3808 	mla	r8, r0, r8, r3
 80078ea:	fba5 2300 	umull	r2, r3, r5, r0
 80078ee:	1ab2      	subs	r2, r6, r2
 80078f0:	4443      	add	r3, r8
 80078f2:	eb67 0303 	sbc.w	r3, r7, r3
 80078f6:	e9c4 2300 	strd	r2, r3, [r4]
 80078fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078fe:	bf00      	nop

08007900 <__gnu_uldivmod_helper>:
 8007900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007904:	9c06      	ldr	r4, [sp, #24]
 8007906:	4690      	mov	r8, r2
 8007908:	4606      	mov	r6, r0
 800790a:	460f      	mov	r7, r1
 800790c:	461d      	mov	r5, r3
 800790e:	f000 f95f 	bl	8007bd0 <__udivdi3>
 8007912:	fb00 f505 	mul.w	r5, r0, r5
 8007916:	fba0 2308 	umull	r2, r3, r0, r8
 800791a:	fb08 5501 	mla	r5, r8, r1, r5
 800791e:	1ab2      	subs	r2, r6, r2
 8007920:	442b      	add	r3, r5
 8007922:	eb67 0303 	sbc.w	r3, r7, r3
 8007926:	e9c4 2300 	strd	r2, r3, [r4]
 800792a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800792e:	bf00      	nop

08007930 <__aeabi_idiv0>:
 8007930:	4770      	bx	lr
 8007932:	bf00      	nop

08007934 <__divdi3>:
 8007934:	2900      	cmp	r1, #0
 8007936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800793a:	f2c0 80a6 	blt.w	8007a8a <__divdi3+0x156>
 800793e:	2600      	movs	r6, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f2c0 809c 	blt.w	8007a7e <__divdi3+0x14a>
 8007946:	4688      	mov	r8, r1
 8007948:	4694      	mov	ip, r2
 800794a:	469e      	mov	lr, r3
 800794c:	4615      	mov	r5, r2
 800794e:	4604      	mov	r4, r0
 8007950:	460f      	mov	r7, r1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d13d      	bne.n	80079d2 <__divdi3+0x9e>
 8007956:	428a      	cmp	r2, r1
 8007958:	d959      	bls.n	8007a0e <__divdi3+0xda>
 800795a:	fab2 f382 	clz	r3, r2
 800795e:	b13b      	cbz	r3, 8007970 <__divdi3+0x3c>
 8007960:	f1c3 0220 	rsb	r2, r3, #32
 8007964:	409f      	lsls	r7, r3
 8007966:	fa20 f202 	lsr.w	r2, r0, r2
 800796a:	409d      	lsls	r5, r3
 800796c:	4317      	orrs	r7, r2
 800796e:	409c      	lsls	r4, r3
 8007970:	0c29      	lsrs	r1, r5, #16
 8007972:	0c22      	lsrs	r2, r4, #16
 8007974:	fbb7 fef1 	udiv	lr, r7, r1
 8007978:	b2a8      	uxth	r0, r5
 800797a:	fb01 771e 	mls	r7, r1, lr, r7
 800797e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8007982:	fb00 f30e 	mul.w	r3, r0, lr
 8007986:	42bb      	cmp	r3, r7
 8007988:	d90a      	bls.n	80079a0 <__divdi3+0x6c>
 800798a:	197f      	adds	r7, r7, r5
 800798c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8007990:	f080 8105 	bcs.w	8007b9e <__divdi3+0x26a>
 8007994:	42bb      	cmp	r3, r7
 8007996:	f240 8102 	bls.w	8007b9e <__divdi3+0x26a>
 800799a:	f1ae 0e02 	sub.w	lr, lr, #2
 800799e:	442f      	add	r7, r5
 80079a0:	1aff      	subs	r7, r7, r3
 80079a2:	b2a4      	uxth	r4, r4
 80079a4:	fbb7 f3f1 	udiv	r3, r7, r1
 80079a8:	fb01 7713 	mls	r7, r1, r3, r7
 80079ac:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80079b0:	fb00 f003 	mul.w	r0, r0, r3
 80079b4:	42b8      	cmp	r0, r7
 80079b6:	d908      	bls.n	80079ca <__divdi3+0x96>
 80079b8:	197f      	adds	r7, r7, r5
 80079ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80079be:	f080 80f0 	bcs.w	8007ba2 <__divdi3+0x26e>
 80079c2:	42b8      	cmp	r0, r7
 80079c4:	f240 80ed 	bls.w	8007ba2 <__divdi3+0x26e>
 80079c8:	3b02      	subs	r3, #2
 80079ca:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80079ce:	2200      	movs	r2, #0
 80079d0:	e003      	b.n	80079da <__divdi3+0xa6>
 80079d2:	428b      	cmp	r3, r1
 80079d4:	d90f      	bls.n	80079f6 <__divdi3+0xc2>
 80079d6:	2200      	movs	r2, #0
 80079d8:	4613      	mov	r3, r2
 80079da:	1c34      	adds	r4, r6, #0
 80079dc:	bf18      	it	ne
 80079de:	2401      	movne	r4, #1
 80079e0:	4260      	negs	r0, r4
 80079e2:	f04f 0500 	mov.w	r5, #0
 80079e6:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80079ea:	4058      	eors	r0, r3
 80079ec:	4051      	eors	r1, r2
 80079ee:	1900      	adds	r0, r0, r4
 80079f0:	4169      	adcs	r1, r5
 80079f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079f6:	fab3 f283 	clz	r2, r3
 80079fa:	2a00      	cmp	r2, #0
 80079fc:	f040 8086 	bne.w	8007b0c <__divdi3+0x1d8>
 8007a00:	428b      	cmp	r3, r1
 8007a02:	d302      	bcc.n	8007a0a <__divdi3+0xd6>
 8007a04:	4584      	cmp	ip, r0
 8007a06:	f200 80db 	bhi.w	8007bc0 <__divdi3+0x28c>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e7e5      	b.n	80079da <__divdi3+0xa6>
 8007a0e:	b912      	cbnz	r2, 8007a16 <__divdi3+0xe2>
 8007a10:	2301      	movs	r3, #1
 8007a12:	fbb3 f5f2 	udiv	r5, r3, r2
 8007a16:	fab5 f085 	clz	r0, r5
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d13b      	bne.n	8007a96 <__divdi3+0x162>
 8007a1e:	1b78      	subs	r0, r7, r5
 8007a20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007a24:	fa1f fc85 	uxth.w	ip, r5
 8007a28:	2201      	movs	r2, #1
 8007a2a:	fbb0 f8fe 	udiv	r8, r0, lr
 8007a2e:	0c21      	lsrs	r1, r4, #16
 8007a30:	fb0e 0718 	mls	r7, lr, r8, r0
 8007a34:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8007a38:	fb0c f308 	mul.w	r3, ip, r8
 8007a3c:	42bb      	cmp	r3, r7
 8007a3e:	d907      	bls.n	8007a50 <__divdi3+0x11c>
 8007a40:	197f      	adds	r7, r7, r5
 8007a42:	f108 31ff 	add.w	r1, r8, #4294967295
 8007a46:	d202      	bcs.n	8007a4e <__divdi3+0x11a>
 8007a48:	42bb      	cmp	r3, r7
 8007a4a:	f200 80bd 	bhi.w	8007bc8 <__divdi3+0x294>
 8007a4e:	4688      	mov	r8, r1
 8007a50:	1aff      	subs	r7, r7, r3
 8007a52:	b2a4      	uxth	r4, r4
 8007a54:	fbb7 f3fe 	udiv	r3, r7, lr
 8007a58:	fb0e 7713 	mls	r7, lr, r3, r7
 8007a5c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007a60:	fb0c fc03 	mul.w	ip, ip, r3
 8007a64:	45bc      	cmp	ip, r7
 8007a66:	d907      	bls.n	8007a78 <__divdi3+0x144>
 8007a68:	197f      	adds	r7, r7, r5
 8007a6a:	f103 31ff 	add.w	r1, r3, #4294967295
 8007a6e:	d202      	bcs.n	8007a76 <__divdi3+0x142>
 8007a70:	45bc      	cmp	ip, r7
 8007a72:	f200 80a7 	bhi.w	8007bc4 <__divdi3+0x290>
 8007a76:	460b      	mov	r3, r1
 8007a78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007a7c:	e7ad      	b.n	80079da <__divdi3+0xa6>
 8007a7e:	4252      	negs	r2, r2
 8007a80:	ea6f 0606 	mvn.w	r6, r6
 8007a84:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8007a88:	e75d      	b.n	8007946 <__divdi3+0x12>
 8007a8a:	4240      	negs	r0, r0
 8007a8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8007a90:	f04f 36ff 	mov.w	r6, #4294967295
 8007a94:	e754      	b.n	8007940 <__divdi3+0xc>
 8007a96:	f1c0 0220 	rsb	r2, r0, #32
 8007a9a:	fa24 f102 	lsr.w	r1, r4, r2
 8007a9e:	fa07 f300 	lsl.w	r3, r7, r0
 8007aa2:	4085      	lsls	r5, r0
 8007aa4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007aa8:	40d7      	lsrs	r7, r2
 8007aaa:	4319      	orrs	r1, r3
 8007aac:	fbb7 f2fe 	udiv	r2, r7, lr
 8007ab0:	0c0b      	lsrs	r3, r1, #16
 8007ab2:	fb0e 7712 	mls	r7, lr, r2, r7
 8007ab6:	fa1f fc85 	uxth.w	ip, r5
 8007aba:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007abe:	fb0c f702 	mul.w	r7, ip, r2
 8007ac2:	429f      	cmp	r7, r3
 8007ac4:	fa04 f400 	lsl.w	r4, r4, r0
 8007ac8:	d907      	bls.n	8007ada <__divdi3+0x1a6>
 8007aca:	195b      	adds	r3, r3, r5
 8007acc:	f102 30ff 	add.w	r0, r2, #4294967295
 8007ad0:	d274      	bcs.n	8007bbc <__divdi3+0x288>
 8007ad2:	429f      	cmp	r7, r3
 8007ad4:	d972      	bls.n	8007bbc <__divdi3+0x288>
 8007ad6:	3a02      	subs	r2, #2
 8007ad8:	442b      	add	r3, r5
 8007ada:	1bdf      	subs	r7, r3, r7
 8007adc:	b289      	uxth	r1, r1
 8007ade:	fbb7 f8fe 	udiv	r8, r7, lr
 8007ae2:	fb0e 7318 	mls	r3, lr, r8, r7
 8007ae6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007aea:	fb0c f708 	mul.w	r7, ip, r8
 8007aee:	429f      	cmp	r7, r3
 8007af0:	d908      	bls.n	8007b04 <__divdi3+0x1d0>
 8007af2:	195b      	adds	r3, r3, r5
 8007af4:	f108 31ff 	add.w	r1, r8, #4294967295
 8007af8:	d25c      	bcs.n	8007bb4 <__divdi3+0x280>
 8007afa:	429f      	cmp	r7, r3
 8007afc:	d95a      	bls.n	8007bb4 <__divdi3+0x280>
 8007afe:	f1a8 0802 	sub.w	r8, r8, #2
 8007b02:	442b      	add	r3, r5
 8007b04:	1bd8      	subs	r0, r3, r7
 8007b06:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8007b0a:	e78e      	b.n	8007a2a <__divdi3+0xf6>
 8007b0c:	f1c2 0320 	rsb	r3, r2, #32
 8007b10:	fa2c f103 	lsr.w	r1, ip, r3
 8007b14:	fa0e fe02 	lsl.w	lr, lr, r2
 8007b18:	fa20 f703 	lsr.w	r7, r0, r3
 8007b1c:	ea41 0e0e 	orr.w	lr, r1, lr
 8007b20:	fa08 f002 	lsl.w	r0, r8, r2
 8007b24:	fa28 f103 	lsr.w	r1, r8, r3
 8007b28:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8007b2c:	4338      	orrs	r0, r7
 8007b2e:	fbb1 f8f5 	udiv	r8, r1, r5
 8007b32:	0c03      	lsrs	r3, r0, #16
 8007b34:	fb05 1118 	mls	r1, r5, r8, r1
 8007b38:	fa1f f78e 	uxth.w	r7, lr
 8007b3c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007b40:	fb07 f308 	mul.w	r3, r7, r8
 8007b44:	428b      	cmp	r3, r1
 8007b46:	fa0c fc02 	lsl.w	ip, ip, r2
 8007b4a:	d909      	bls.n	8007b60 <__divdi3+0x22c>
 8007b4c:	eb11 010e 	adds.w	r1, r1, lr
 8007b50:	f108 39ff 	add.w	r9, r8, #4294967295
 8007b54:	d230      	bcs.n	8007bb8 <__divdi3+0x284>
 8007b56:	428b      	cmp	r3, r1
 8007b58:	d92e      	bls.n	8007bb8 <__divdi3+0x284>
 8007b5a:	f1a8 0802 	sub.w	r8, r8, #2
 8007b5e:	4471      	add	r1, lr
 8007b60:	1ac9      	subs	r1, r1, r3
 8007b62:	b280      	uxth	r0, r0
 8007b64:	fbb1 f3f5 	udiv	r3, r1, r5
 8007b68:	fb05 1113 	mls	r1, r5, r3, r1
 8007b6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007b70:	fb07 f703 	mul.w	r7, r7, r3
 8007b74:	428f      	cmp	r7, r1
 8007b76:	d908      	bls.n	8007b8a <__divdi3+0x256>
 8007b78:	eb11 010e 	adds.w	r1, r1, lr
 8007b7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8007b80:	d216      	bcs.n	8007bb0 <__divdi3+0x27c>
 8007b82:	428f      	cmp	r7, r1
 8007b84:	d914      	bls.n	8007bb0 <__divdi3+0x27c>
 8007b86:	3b02      	subs	r3, #2
 8007b88:	4471      	add	r1, lr
 8007b8a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007b8e:	1bc9      	subs	r1, r1, r7
 8007b90:	fba3 890c 	umull	r8, r9, r3, ip
 8007b94:	4549      	cmp	r1, r9
 8007b96:	d309      	bcc.n	8007bac <__divdi3+0x278>
 8007b98:	d005      	beq.n	8007ba6 <__divdi3+0x272>
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	e71d      	b.n	80079da <__divdi3+0xa6>
 8007b9e:	4696      	mov	lr, r2
 8007ba0:	e6fe      	b.n	80079a0 <__divdi3+0x6c>
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	e711      	b.n	80079ca <__divdi3+0x96>
 8007ba6:	4094      	lsls	r4, r2
 8007ba8:	4544      	cmp	r4, r8
 8007baa:	d2f6      	bcs.n	8007b9a <__divdi3+0x266>
 8007bac:	3b01      	subs	r3, #1
 8007bae:	e7f4      	b.n	8007b9a <__divdi3+0x266>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	e7ea      	b.n	8007b8a <__divdi3+0x256>
 8007bb4:	4688      	mov	r8, r1
 8007bb6:	e7a5      	b.n	8007b04 <__divdi3+0x1d0>
 8007bb8:	46c8      	mov	r8, r9
 8007bba:	e7d1      	b.n	8007b60 <__divdi3+0x22c>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	e78c      	b.n	8007ada <__divdi3+0x1a6>
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	e70a      	b.n	80079da <__divdi3+0xa6>
 8007bc4:	3b02      	subs	r3, #2
 8007bc6:	e757      	b.n	8007a78 <__divdi3+0x144>
 8007bc8:	f1a8 0802 	sub.w	r8, r8, #2
 8007bcc:	442f      	add	r7, r5
 8007bce:	e73f      	b.n	8007a50 <__divdi3+0x11c>

08007bd0 <__udivdi3>:
 8007bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d144      	bne.n	8007c62 <__udivdi3+0x92>
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	4615      	mov	r5, r2
 8007bdc:	4604      	mov	r4, r0
 8007bde:	d94f      	bls.n	8007c80 <__udivdi3+0xb0>
 8007be0:	fab2 f782 	clz	r7, r2
 8007be4:	460e      	mov	r6, r1
 8007be6:	b14f      	cbz	r7, 8007bfc <__udivdi3+0x2c>
 8007be8:	f1c7 0320 	rsb	r3, r7, #32
 8007bec:	40b9      	lsls	r1, r7
 8007bee:	fa20 f603 	lsr.w	r6, r0, r3
 8007bf2:	fa02 f507 	lsl.w	r5, r2, r7
 8007bf6:	430e      	orrs	r6, r1
 8007bf8:	fa00 f407 	lsl.w	r4, r0, r7
 8007bfc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007c00:	0c23      	lsrs	r3, r4, #16
 8007c02:	fbb6 f0fe 	udiv	r0, r6, lr
 8007c06:	b2af      	uxth	r7, r5
 8007c08:	fb0e 6110 	mls	r1, lr, r0, r6
 8007c0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007c10:	fb07 f100 	mul.w	r1, r7, r0
 8007c14:	4299      	cmp	r1, r3
 8007c16:	d909      	bls.n	8007c2c <__udivdi3+0x5c>
 8007c18:	195b      	adds	r3, r3, r5
 8007c1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8007c1e:	f080 80ec 	bcs.w	8007dfa <__udivdi3+0x22a>
 8007c22:	4299      	cmp	r1, r3
 8007c24:	f240 80e9 	bls.w	8007dfa <__udivdi3+0x22a>
 8007c28:	3802      	subs	r0, #2
 8007c2a:	442b      	add	r3, r5
 8007c2c:	1a5a      	subs	r2, r3, r1
 8007c2e:	b2a4      	uxth	r4, r4
 8007c30:	fbb2 f3fe 	udiv	r3, r2, lr
 8007c34:	fb0e 2213 	mls	r2, lr, r3, r2
 8007c38:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8007c3c:	fb07 f703 	mul.w	r7, r7, r3
 8007c40:	4297      	cmp	r7, r2
 8007c42:	d908      	bls.n	8007c56 <__udivdi3+0x86>
 8007c44:	1952      	adds	r2, r2, r5
 8007c46:	f103 31ff 	add.w	r1, r3, #4294967295
 8007c4a:	f080 80d8 	bcs.w	8007dfe <__udivdi3+0x22e>
 8007c4e:	4297      	cmp	r7, r2
 8007c50:	f240 80d5 	bls.w	8007dfe <__udivdi3+0x22e>
 8007c54:	3b02      	subs	r3, #2
 8007c56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c62:	428b      	cmp	r3, r1
 8007c64:	d847      	bhi.n	8007cf6 <__udivdi3+0x126>
 8007c66:	fab3 f683 	clz	r6, r3
 8007c6a:	2e00      	cmp	r6, #0
 8007c6c:	d148      	bne.n	8007d00 <__udivdi3+0x130>
 8007c6e:	428b      	cmp	r3, r1
 8007c70:	d302      	bcc.n	8007c78 <__udivdi3+0xa8>
 8007c72:	4282      	cmp	r2, r0
 8007c74:	f200 80cd 	bhi.w	8007e12 <__udivdi3+0x242>
 8007c78:	2001      	movs	r0, #1
 8007c7a:	4631      	mov	r1, r6
 8007c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c80:	b912      	cbnz	r2, 8007c88 <__udivdi3+0xb8>
 8007c82:	2501      	movs	r5, #1
 8007c84:	fbb5 f5f2 	udiv	r5, r5, r2
 8007c88:	fab5 f885 	clz	r8, r5
 8007c8c:	f1b8 0f00 	cmp.w	r8, #0
 8007c90:	d177      	bne.n	8007d82 <__udivdi3+0x1b2>
 8007c92:	1b4a      	subs	r2, r1, r5
 8007c94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007c98:	b2af      	uxth	r7, r5
 8007c9a:	2601      	movs	r6, #1
 8007c9c:	fbb2 f0fe 	udiv	r0, r2, lr
 8007ca0:	0c23      	lsrs	r3, r4, #16
 8007ca2:	fb0e 2110 	mls	r1, lr, r0, r2
 8007ca6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8007caa:	fb07 f300 	mul.w	r3, r7, r0
 8007cae:	428b      	cmp	r3, r1
 8007cb0:	d907      	bls.n	8007cc2 <__udivdi3+0xf2>
 8007cb2:	1949      	adds	r1, r1, r5
 8007cb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8007cb8:	d202      	bcs.n	8007cc0 <__udivdi3+0xf0>
 8007cba:	428b      	cmp	r3, r1
 8007cbc:	f200 80ba 	bhi.w	8007e34 <__udivdi3+0x264>
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	1ac9      	subs	r1, r1, r3
 8007cc4:	b2a4      	uxth	r4, r4
 8007cc6:	fbb1 f3fe 	udiv	r3, r1, lr
 8007cca:	fb0e 1113 	mls	r1, lr, r3, r1
 8007cce:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8007cd2:	fb07 f703 	mul.w	r7, r7, r3
 8007cd6:	42a7      	cmp	r7, r4
 8007cd8:	d908      	bls.n	8007cec <__udivdi3+0x11c>
 8007cda:	1964      	adds	r4, r4, r5
 8007cdc:	f103 32ff 	add.w	r2, r3, #4294967295
 8007ce0:	f080 808f 	bcs.w	8007e02 <__udivdi3+0x232>
 8007ce4:	42a7      	cmp	r7, r4
 8007ce6:	f240 808c 	bls.w	8007e02 <__udivdi3+0x232>
 8007cea:	3b02      	subs	r3, #2
 8007cec:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf6:	2600      	movs	r6, #0
 8007cf8:	4630      	mov	r0, r6
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d00:	f1c6 0420 	rsb	r4, r6, #32
 8007d04:	fa22 f504 	lsr.w	r5, r2, r4
 8007d08:	40b3      	lsls	r3, r6
 8007d0a:	432b      	orrs	r3, r5
 8007d0c:	fa20 fc04 	lsr.w	ip, r0, r4
 8007d10:	fa01 f706 	lsl.w	r7, r1, r6
 8007d14:	fa21 f504 	lsr.w	r5, r1, r4
 8007d18:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007d1c:	ea4c 0707 	orr.w	r7, ip, r7
 8007d20:	fbb5 f8fe 	udiv	r8, r5, lr
 8007d24:	0c39      	lsrs	r1, r7, #16
 8007d26:	fb0e 5518 	mls	r5, lr, r8, r5
 8007d2a:	fa1f fc83 	uxth.w	ip, r3
 8007d2e:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8007d32:	fb0c f108 	mul.w	r1, ip, r8
 8007d36:	42a9      	cmp	r1, r5
 8007d38:	fa02 f206 	lsl.w	r2, r2, r6
 8007d3c:	d904      	bls.n	8007d48 <__udivdi3+0x178>
 8007d3e:	18ed      	adds	r5, r5, r3
 8007d40:	f108 34ff 	add.w	r4, r8, #4294967295
 8007d44:	d367      	bcc.n	8007e16 <__udivdi3+0x246>
 8007d46:	46a0      	mov	r8, r4
 8007d48:	1a6d      	subs	r5, r5, r1
 8007d4a:	b2bf      	uxth	r7, r7
 8007d4c:	fbb5 f4fe 	udiv	r4, r5, lr
 8007d50:	fb0e 5514 	mls	r5, lr, r4, r5
 8007d54:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8007d58:	fb0c fc04 	mul.w	ip, ip, r4
 8007d5c:	458c      	cmp	ip, r1
 8007d5e:	d904      	bls.n	8007d6a <__udivdi3+0x19a>
 8007d60:	18c9      	adds	r1, r1, r3
 8007d62:	f104 35ff 	add.w	r5, r4, #4294967295
 8007d66:	d35c      	bcc.n	8007e22 <__udivdi3+0x252>
 8007d68:	462c      	mov	r4, r5
 8007d6a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007d6e:	ebcc 0101 	rsb	r1, ip, r1
 8007d72:	fba4 2302 	umull	r2, r3, r4, r2
 8007d76:	4299      	cmp	r1, r3
 8007d78:	d348      	bcc.n	8007e0c <__udivdi3+0x23c>
 8007d7a:	d044      	beq.n	8007e06 <__udivdi3+0x236>
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	2600      	movs	r6, #0
 8007d80:	e76c      	b.n	8007c5c <__udivdi3+0x8c>
 8007d82:	f1c8 0420 	rsb	r4, r8, #32
 8007d86:	fa01 f308 	lsl.w	r3, r1, r8
 8007d8a:	fa05 f508 	lsl.w	r5, r5, r8
 8007d8e:	fa20 f704 	lsr.w	r7, r0, r4
 8007d92:	40e1      	lsrs	r1, r4
 8007d94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007d98:	431f      	orrs	r7, r3
 8007d9a:	fbb1 f6fe 	udiv	r6, r1, lr
 8007d9e:	0c3a      	lsrs	r2, r7, #16
 8007da0:	fb0e 1116 	mls	r1, lr, r6, r1
 8007da4:	fa1f fc85 	uxth.w	ip, r5
 8007da8:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8007dac:	fb0c f206 	mul.w	r2, ip, r6
 8007db0:	429a      	cmp	r2, r3
 8007db2:	fa00 f408 	lsl.w	r4, r0, r8
 8007db6:	d907      	bls.n	8007dc8 <__udivdi3+0x1f8>
 8007db8:	195b      	adds	r3, r3, r5
 8007dba:	f106 31ff 	add.w	r1, r6, #4294967295
 8007dbe:	d237      	bcs.n	8007e30 <__udivdi3+0x260>
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d935      	bls.n	8007e30 <__udivdi3+0x260>
 8007dc4:	3e02      	subs	r6, #2
 8007dc6:	442b      	add	r3, r5
 8007dc8:	1a9b      	subs	r3, r3, r2
 8007dca:	b2bf      	uxth	r7, r7
 8007dcc:	fbb3 f0fe 	udiv	r0, r3, lr
 8007dd0:	fb0e 3310 	mls	r3, lr, r0, r3
 8007dd4:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8007dd8:	fb0c f100 	mul.w	r1, ip, r0
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d907      	bls.n	8007df0 <__udivdi3+0x220>
 8007de0:	195b      	adds	r3, r3, r5
 8007de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8007de6:	d221      	bcs.n	8007e2c <__udivdi3+0x25c>
 8007de8:	4299      	cmp	r1, r3
 8007dea:	d91f      	bls.n	8007e2c <__udivdi3+0x25c>
 8007dec:	3802      	subs	r0, #2
 8007dee:	442b      	add	r3, r5
 8007df0:	1a5a      	subs	r2, r3, r1
 8007df2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8007df6:	4667      	mov	r7, ip
 8007df8:	e750      	b.n	8007c9c <__udivdi3+0xcc>
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	e716      	b.n	8007c2c <__udivdi3+0x5c>
 8007dfe:	460b      	mov	r3, r1
 8007e00:	e729      	b.n	8007c56 <__udivdi3+0x86>
 8007e02:	4613      	mov	r3, r2
 8007e04:	e772      	b.n	8007cec <__udivdi3+0x11c>
 8007e06:	40b0      	lsls	r0, r6
 8007e08:	4290      	cmp	r0, r2
 8007e0a:	d2b7      	bcs.n	8007d7c <__udivdi3+0x1ac>
 8007e0c:	1e60      	subs	r0, r4, #1
 8007e0e:	2600      	movs	r6, #0
 8007e10:	e724      	b.n	8007c5c <__udivdi3+0x8c>
 8007e12:	4630      	mov	r0, r6
 8007e14:	e722      	b.n	8007c5c <__udivdi3+0x8c>
 8007e16:	42a9      	cmp	r1, r5
 8007e18:	d995      	bls.n	8007d46 <__udivdi3+0x176>
 8007e1a:	f1a8 0802 	sub.w	r8, r8, #2
 8007e1e:	441d      	add	r5, r3
 8007e20:	e792      	b.n	8007d48 <__udivdi3+0x178>
 8007e22:	458c      	cmp	ip, r1
 8007e24:	d9a0      	bls.n	8007d68 <__udivdi3+0x198>
 8007e26:	3c02      	subs	r4, #2
 8007e28:	4419      	add	r1, r3
 8007e2a:	e79e      	b.n	8007d6a <__udivdi3+0x19a>
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	e7df      	b.n	8007df0 <__udivdi3+0x220>
 8007e30:	460e      	mov	r6, r1
 8007e32:	e7c9      	b.n	8007dc8 <__udivdi3+0x1f8>
 8007e34:	3802      	subs	r0, #2
 8007e36:	4429      	add	r1, r5
 8007e38:	e743      	b.n	8007cc2 <__udivdi3+0xf2>
 8007e3a:	bf00      	nop

08007e3c <__libc_init_array>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <__libc_init_array+0x3c>)
 8007e40:	4c0e      	ldr	r4, [pc, #56]	; (8007e7c <__libc_init_array+0x40>)
 8007e42:	1ae4      	subs	r4, r4, r3
 8007e44:	10a4      	asrs	r4, r4, #2
 8007e46:	2500      	movs	r5, #0
 8007e48:	461e      	mov	r6, r3
 8007e4a:	42a5      	cmp	r5, r4
 8007e4c:	d004      	beq.n	8007e58 <__libc_init_array+0x1c>
 8007e4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e52:	4798      	blx	r3
 8007e54:	3501      	adds	r5, #1
 8007e56:	e7f8      	b.n	8007e4a <__libc_init_array+0xe>
 8007e58:	f7fa fa8a 	bl	8002370 <_init>
 8007e5c:	4c08      	ldr	r4, [pc, #32]	; (8007e80 <__libc_init_array+0x44>)
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <__libc_init_array+0x48>)
 8007e60:	1ae4      	subs	r4, r4, r3
 8007e62:	10a4      	asrs	r4, r4, #2
 8007e64:	2500      	movs	r5, #0
 8007e66:	461e      	mov	r6, r3
 8007e68:	42a5      	cmp	r5, r4
 8007e6a:	d004      	beq.n	8007e76 <__libc_init_array+0x3a>
 8007e6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007e70:	4798      	blx	r3
 8007e72:	3501      	adds	r5, #1
 8007e74:	e7f8      	b.n	8007e68 <__libc_init_array+0x2c>
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	08007ec0 	.word	0x08007ec0
 8007e7c:	08007ec0 	.word	0x08007ec0
 8007e80:	08007ec0 	.word	0x08007ec0
 8007e84:	08007ec0 	.word	0x08007ec0

08007e88 <memcpy>:
 8007e88:	b510      	push	{r4, lr}
 8007e8a:	1e43      	subs	r3, r0, #1
 8007e8c:	440a      	add	r2, r1
 8007e8e:	4291      	cmp	r1, r2
 8007e90:	d004      	beq.n	8007e9c <memcpy+0x14>
 8007e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9a:	e7f8      	b.n	8007e8e <memcpy+0x6>
 8007e9c:	bd10      	pop	{r4, pc}
	...

08007ea0 <__do_rfft_i_veneer>:
 8007ea0:	b401      	push	{r0}
 8007ea2:	4802      	ldr	r0, [pc, #8]	; (8007eac <__do_rfft_i_veneer+0xc>)
 8007ea4:	4684      	mov	ip, r0
 8007ea6:	bc01      	pop	{r0}
 8007ea8:	4760      	bx	ip
 8007eaa:	bf00      	nop
 8007eac:	1fffc975 	.word	0x1fffc975

08007eb0 <__do_rfft_q_veneer>:
 8007eb0:	b401      	push	{r0}
 8007eb2:	4802      	ldr	r0, [pc, #8]	; (8007ebc <__do_rfft_q_veneer+0xc>)
 8007eb4:	4684      	mov	ip, r0
 8007eb6:	bc01      	pop	{r0}
 8007eb8:	4760      	bx	ip
 8007eba:	bf00      	nop
 8007ebc:	1fffca25 	.word	0x1fffca25

Disassembly of section .ram_code:

1fffc800 <ADC_G0_ISR>:
// ADC ISR
//
// Read IFI_HG and IFQ_HG
//
void ADC_G0_ISR(void)
{
1fffc800:	b590      	push	{r4, r7, lr}
1fffc802:	b085      	sub	sp, #20
1fffc804:	af00      	add	r7, sp, #0
	static uint32_t idx = 0;
	XMC_VADC_RESULT_SIZE_t I_Input;
	uint32_t fullResult = 0;
1fffc806:	2300      	movs	r3, #0
1fffc808:	60bb      	str	r3, [r7, #8]
	uint8_t result_reg;
	uint8_t cnt;

	// Read IFI Plus sample
	result_reg = XMC_VADC_GROUP_ChannelGetResultRegister(ADC_QUEUE_G0.group_handle,ch_entry_G0_0.channel_number);
1fffc80a:	4b51      	ldr	r3, [pc, #324]	; (1fffc950 <__initial_sp+0x150>)
1fffc80c:	68da      	ldr	r2, [r3, #12]
1fffc80e:	4b51      	ldr	r3, [pc, #324]	; (1fffc954 <__initial_sp+0x154>)
1fffc810:	795b      	ldrb	r3, [r3, #5]
1fffc812:	4610      	mov	r0, r2
1fffc814:	4619      	mov	r1, r3
1fffc816:	f000 f9c7 	bl	1fffcba8 <__XMC_VADC_GROUP_ChannelGetResultRegister_veneer>
1fffc81a:	4603      	mov	r3, r0
1fffc81c:	71fb      	strb	r3, [r7, #7]
	I_Input = XMC_VADC_GROUP_GetResult(ADC_QUEUE_G0.group_handle,result_reg);
1fffc81e:	4b4c      	ldr	r3, [pc, #304]	; (1fffc950 <__initial_sp+0x150>)
1fffc820:	68da      	ldr	r2, [r3, #12]
1fffc822:	79fb      	ldrb	r3, [r7, #7]
1fffc824:	4610      	mov	r0, r2
1fffc826:	4619      	mov	r1, r3
1fffc828:	f000 f9ae 	bl	1fffcb88 <__XMC_VADC_GROUP_GetResult_veneer>
1fffc82c:	4603      	mov	r3, r0
1fffc82e:	81fb      	strh	r3, [r7, #14]
	ifi_adc_measurements[idx] = (float32_t)(I_Input)*3.3/4095.f;
1fffc830:	4b49      	ldr	r3, [pc, #292]	; (1fffc958 <__initial_sp+0x158>)
1fffc832:	681c      	ldr	r4, [r3, #0]
1fffc834:	89fb      	ldrh	r3, [r7, #14]
1fffc836:	ee07 3a90 	vmov	s15, r3
1fffc83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
1fffc83e:	ee17 0a90 	vmov	r0, s15
1fffc842:	f000 f951 	bl	1fffcae8 <____aeabi_f2d_veneer>
1fffc846:	4602      	mov	r2, r0
1fffc848:	460b      	mov	r3, r1
1fffc84a:	4610      	mov	r0, r2
1fffc84c:	4619      	mov	r1, r3
1fffc84e:	a33c      	add	r3, pc, #240	; (adr r3, 1fffc940 <__initial_sp+0x140>)
1fffc850:	e9d3 2300 	ldrd	r2, r3, [r3]
1fffc854:	f000 f940 	bl	1fffcad8 <____aeabi_dmul_veneer>
1fffc858:	4602      	mov	r2, r0
1fffc85a:	460b      	mov	r3, r1
1fffc85c:	4610      	mov	r0, r2
1fffc85e:	4619      	mov	r1, r3
1fffc860:	a339      	add	r3, pc, #228	; (adr r3, 1fffc948 <__initial_sp+0x148>)
1fffc862:	e9d3 2300 	ldrd	r2, r3, [r3]
1fffc866:	f000 f96f 	bl	1fffcb48 <____aeabi_ddiv_veneer>
1fffc86a:	4602      	mov	r2, r0
1fffc86c:	460b      	mov	r3, r1
1fffc86e:	4610      	mov	r0, r2
1fffc870:	4619      	mov	r1, r3
1fffc872:	f000 f951 	bl	1fffcb18 <____aeabi_d2f_veneer>
1fffc876:	4601      	mov	r1, r0
1fffc878:	4a38      	ldr	r2, [pc, #224]	; (1fffc95c <__initial_sp+0x15c>)
1fffc87a:	00a3      	lsls	r3, r4, #2
1fffc87c:	4413      	add	r3, r2
1fffc87e:	6019      	str	r1, [r3, #0]

	result_reg = XMC_VADC_GROUP_ChannelGetResultRegister(ADC_QUEUE_G1.group_handle,ch_entry_G1_0.channel_number);
1fffc880:	4b37      	ldr	r3, [pc, #220]	; (1fffc960 <__initial_sp+0x160>)
1fffc882:	68da      	ldr	r2, [r3, #12]
1fffc884:	4b37      	ldr	r3, [pc, #220]	; (1fffc964 <__initial_sp+0x164>)
1fffc886:	795b      	ldrb	r3, [r3, #5]
1fffc888:	4610      	mov	r0, r2
1fffc88a:	4619      	mov	r1, r3
1fffc88c:	f000 f98c 	bl	1fffcba8 <__XMC_VADC_GROUP_ChannelGetResultRegister_veneer>
1fffc890:	4603      	mov	r3, r0
1fffc892:	71fb      	strb	r3, [r7, #7]
	for (cnt =0; cnt <5; cnt++)
1fffc894:	2300      	movs	r3, #0
1fffc896:	737b      	strb	r3, [r7, #13]
1fffc898:	e010      	b.n	1fffc8bc <ADC_G0_ISR+0xbc>
	{
		fullResult = XMC_VADC_GROUP_GetDetailedResult(ADC_QUEUE_G1.group_handle,result_reg);
1fffc89a:	4b31      	ldr	r3, [pc, #196]	; (1fffc960 <__initial_sp+0x160>)
1fffc89c:	68da      	ldr	r2, [r3, #12]
1fffc89e:	79fb      	ldrb	r3, [r7, #7]
1fffc8a0:	4610      	mov	r0, r2
1fffc8a2:	4619      	mov	r1, r3
1fffc8a4:	f000 f940 	bl	1fffcb28 <__XMC_VADC_GROUP_GetDetailedResult_veneer>
1fffc8a8:	60b8      	str	r0, [r7, #8]
		if (fullResult & VADC_G_RES_VF_Msk)
1fffc8aa:	68bb      	ldr	r3, [r7, #8]
1fffc8ac:	2b00      	cmp	r3, #0
1fffc8ae:	da02      	bge.n	1fffc8b6 <ADC_G0_ISR+0xb6>
		{
			I_Input = (uint16_t)fullResult;
1fffc8b0:	68bb      	ldr	r3, [r7, #8]
1fffc8b2:	81fb      	strh	r3, [r7, #14]
			break;
1fffc8b4:	e005      	b.n	1fffc8c2 <ADC_G0_ISR+0xc2>
	result_reg = XMC_VADC_GROUP_ChannelGetResultRegister(ADC_QUEUE_G0.group_handle,ch_entry_G0_0.channel_number);
	I_Input = XMC_VADC_GROUP_GetResult(ADC_QUEUE_G0.group_handle,result_reg);
	ifi_adc_measurements[idx] = (float32_t)(I_Input)*3.3/4095.f;

	result_reg = XMC_VADC_GROUP_ChannelGetResultRegister(ADC_QUEUE_G1.group_handle,ch_entry_G1_0.channel_number);
	for (cnt =0; cnt <5; cnt++)
1fffc8b6:	7b7b      	ldrb	r3, [r7, #13]
1fffc8b8:	3301      	adds	r3, #1
1fffc8ba:	737b      	strb	r3, [r7, #13]
1fffc8bc:	7b7b      	ldrb	r3, [r7, #13]
1fffc8be:	2b04      	cmp	r3, #4
1fffc8c0:	d9eb      	bls.n	1fffc89a <ADC_G0_ISR+0x9a>
		{
			I_Input = (uint16_t)fullResult;
			break;
		}
	}
	ifq_adc_measurements[idx++] = (float32_t)(I_Input)*3.3/4095.f;
1fffc8c2:	4b25      	ldr	r3, [pc, #148]	; (1fffc958 <__initial_sp+0x158>)
1fffc8c4:	681c      	ldr	r4, [r3, #0]
1fffc8c6:	1c63      	adds	r3, r4, #1
1fffc8c8:	4a23      	ldr	r2, [pc, #140]	; (1fffc958 <__initial_sp+0x158>)
1fffc8ca:	6013      	str	r3, [r2, #0]
1fffc8cc:	89fb      	ldrh	r3, [r7, #14]
1fffc8ce:	ee07 3a90 	vmov	s15, r3
1fffc8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
1fffc8d6:	ee17 0a90 	vmov	r0, s15
1fffc8da:	f000 f905 	bl	1fffcae8 <____aeabi_f2d_veneer>
1fffc8de:	4602      	mov	r2, r0
1fffc8e0:	460b      	mov	r3, r1
1fffc8e2:	4610      	mov	r0, r2
1fffc8e4:	4619      	mov	r1, r3
1fffc8e6:	a316      	add	r3, pc, #88	; (adr r3, 1fffc940 <__initial_sp+0x140>)
1fffc8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
1fffc8ec:	f000 f8f4 	bl	1fffcad8 <____aeabi_dmul_veneer>
1fffc8f0:	4602      	mov	r2, r0
1fffc8f2:	460b      	mov	r3, r1
1fffc8f4:	4610      	mov	r0, r2
1fffc8f6:	4619      	mov	r1, r3
1fffc8f8:	a313      	add	r3, pc, #76	; (adr r3, 1fffc948 <__initial_sp+0x148>)
1fffc8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
1fffc8fe:	f000 f923 	bl	1fffcb48 <____aeabi_ddiv_veneer>
1fffc902:	4602      	mov	r2, r0
1fffc904:	460b      	mov	r3, r1
1fffc906:	4610      	mov	r0, r2
1fffc908:	4619      	mov	r1, r3
1fffc90a:	f000 f905 	bl	1fffcb18 <____aeabi_d2f_veneer>
1fffc90e:	4601      	mov	r1, r0
1fffc910:	4a15      	ldr	r2, [pc, #84]	; (1fffc968 <__initial_sp+0x168>)
1fffc912:	00a3      	lsls	r3, r4, #2
1fffc914:	4413      	add	r3, r2
1fffc916:	6019      	str	r1, [r3, #0]

	if (idx == NUM_SAMPLES)
1fffc918:	4b0f      	ldr	r3, [pc, #60]	; (1fffc958 <__initial_sp+0x158>)
1fffc91a:	681b      	ldr	r3, [r3, #0]
1fffc91c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
1fffc920:	d10b      	bne.n	1fffc93a <ADC_G0_ISR+0x13a>
	{
		idx = 0; 			  	// reset index counter
1fffc922:	4b0d      	ldr	r3, [pc, #52]	; (1fffc958 <__initial_sp+0x158>)
1fffc924:	2200      	movs	r2, #0
1fffc926:	601a      	str	r2, [r3, #0]
		TIMER_Stop(&FS_ADC);  	// shut down ADC while we process this data
1fffc928:	4810      	ldr	r0, [pc, #64]	; (1fffc96c <__initial_sp+0x16c>)
1fffc92a:	f000 f935 	bl	1fffcb98 <__TIMER_Stop_veneer>
		TIMER_Clear(&FS_ADC);
1fffc92e:	480f      	ldr	r0, [pc, #60]	; (1fffc96c <__initial_sp+0x16c>)
1fffc930:	f000 f8e2 	bl	1fffcaf8 <__TIMER_Clear_veneer>
		gBGTDataReadyFlag = 1; 	// Data is ready to be processed
1fffc934:	4b0e      	ldr	r3, [pc, #56]	; (1fffc970 <__initial_sp+0x170>)
1fffc936:	2201      	movs	r2, #1
1fffc938:	701a      	strb	r2, [r3, #0]
	}

}  // end of ADC_ISR()
1fffc93a:	3714      	adds	r7, #20
1fffc93c:	46bd      	mov	sp, r7
1fffc93e:	bd90      	pop	{r4, r7, pc}
1fffc940:	66666666 	.word	0x66666666
1fffc944:	400a6666 	.word	0x400a6666
1fffc948:	00000000 	.word	0x00000000
1fffc94c:	40affe00 	.word	0x40affe00
1fffc950:	1fffce08 	.word	0x1fffce08
1fffc954:	1fffcbe8 	.word	0x1fffcbe8
1fffc958:	1fffce6c 	.word	0x1fffce6c
1fffc95c:	1fffde9c 	.word	0x1fffde9c
1fffc960:	1fffce2c 	.word	0x1fffce2c
1fffc964:	1fffcbf4 	.word	0x1fffcbf4
1fffc968:	1fffce9c 	.word	0x1fffce9c
1fffc96c:	1fffcc40 	.word	0x1fffcc40
1fffc970:	1fffce5c 	.word	0x1fffce5c

1fffc974 <do_rfft_i>:
//  The Hanning window is then applied to the time domain buffer.
//  This buffer then is converted to frequency domain with the FFT.
//
//
void do_rfft_i()
{
1fffc974:	b580      	push	{r7, lr}
1fffc976:	b082      	sub	sp, #8
1fffc978:	af00      	add	r7, sp, #0
	float32_t i_mean = 0;
1fffc97a:	f04f 0300 	mov.w	r3, #0
1fffc97e:	607b      	str	r3, [r7, #4]

	arm_mean_f32(ifi_adc_measurements, NUM_SAMPLES, &i_mean); //Finds the mean
1fffc980:	1d3b      	adds	r3, r7, #4
1fffc982:	4820      	ldr	r0, [pc, #128]	; (1fffca04 <do_rfft_i+0x90>)
1fffc984:	f44f 6180 	mov.w	r1, #1024	; 0x400
1fffc988:	461a      	mov	r2, r3
1fffc98a:	f000 f8ed 	bl	1fffcb68 <__arm_mean_f32_veneer>
	arm_offset_f32(ifi_adc_measurements, -i_mean, i_adc_measurements, NUM_SAMPLES);  	//kills the offset
1fffc98e:	edd7 7a01 	vldr	s15, [r7, #4]
1fffc992:	eef1 7a67 	vneg.f32	s15, s15
1fffc996:	ee17 3a90 	vmov	r3, s15
1fffc99a:	481a      	ldr	r0, [pc, #104]	; (1fffca04 <do_rfft_i+0x90>)
1fffc99c:	4619      	mov	r1, r3
1fffc99e:	4a1a      	ldr	r2, [pc, #104]	; (1fffca08 <do_rfft_i+0x94>)
1fffc9a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
1fffc9a4:	f000 f8b0 	bl	1fffcb08 <__arm_offset_f32_veneer>

	arm_mult_f32(i_adc_measurements, hanning_window, i_adc_measurements, NUM_SAMPLES); 	//apply a hanning window
1fffc9a8:	4817      	ldr	r0, [pc, #92]	; (1fffca08 <do_rfft_i+0x94>)
1fffc9aa:	4918      	ldr	r1, [pc, #96]	; (1fffca0c <do_rfft_i+0x98>)
1fffc9ac:	4a16      	ldr	r2, [pc, #88]	; (1fffca08 <do_rfft_i+0x94>)
1fffc9ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
1fffc9b2:	f000 f911 	bl	1fffcbd8 <__arm_mult_f32_veneer>

	arm_rfft_fast_f32(&i_fftStructure, i_adc_measurements, i_fftResult, INVERT_FFT); 	//performs fft
1fffc9b6:	4816      	ldr	r0, [pc, #88]	; (1fffca10 <do_rfft_i+0x9c>)
1fffc9b8:	4913      	ldr	r1, [pc, #76]	; (1fffca08 <do_rfft_i+0x94>)
1fffc9ba:	4a16      	ldr	r2, [pc, #88]	; (1fffca14 <do_rfft_i+0xa0>)
1fffc9bc:	2300      	movs	r3, #0
1fffc9be:	f000 f8bb 	bl	1fffcb38 <__arm_rfft_fast_f32_veneer>

	arm_abs_f32(i_fftResult, i_fftResult, NUM_SAMPLES);
1fffc9c2:	4814      	ldr	r0, [pc, #80]	; (1fffca14 <do_rfft_i+0xa0>)
1fffc9c4:	4913      	ldr	r1, [pc, #76]	; (1fffca14 <do_rfft_i+0xa0>)
1fffc9c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
1fffc9ca:	f000 f8c5 	bl	1fffcb58 <__arm_abs_f32_veneer>

	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(i_fftResult, NUM_SAMPLES/2, &maxValue, &Index);
1fffc9ce:	4811      	ldr	r0, [pc, #68]	; (1fffca14 <do_rfft_i+0xa0>)
1fffc9d0:	f44f 7100 	mov.w	r1, #512	; 0x200
1fffc9d4:	4a10      	ldr	r2, [pc, #64]	; (1fffca18 <do_rfft_i+0xa4>)
1fffc9d6:	4b11      	ldr	r3, [pc, #68]	; (1fffca1c <do_rfft_i+0xa8>)
1fffc9d8:	f000 f8ee 	bl	1fffcbb8 <__arm_max_f32_veneer>

	if (maxValue > DOPPLER_EVENT_LVL )  // if the threshold is exceeded, we have a doppler event
1fffc9dc:	4b0e      	ldr	r3, [pc, #56]	; (1fffca18 <do_rfft_i+0xa4>)
1fffc9de:	edd3 7a00 	vldr	s15, [r3]
1fffc9e2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x2e
1fffc9e6:	eef4 7ac7 	vcmpe.f32	s15, s14
1fffc9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1fffc9ee:	dd03      	ble.n	1fffc9f8 <do_rfft_i+0x84>
		DIGITAL_IO_SetOutputHigh(&LED_YELLOW);
1fffc9f0:	480b      	ldr	r0, [pc, #44]	; (1fffca20 <do_rfft_i+0xac>)
1fffc9f2:	f000 f8e9 	bl	1fffcbc8 <__DIGITAL_IO_SetOutputHigh_veneer>
1fffc9f6:	e002      	b.n	1fffc9fe <do_rfft_i+0x8a>
	else
		DIGITAL_IO_SetOutputLow(&LED_YELLOW);
1fffc9f8:	4809      	ldr	r0, [pc, #36]	; (1fffca20 <do_rfft_i+0xac>)
1fffc9fa:	f000 f8bd 	bl	1fffcb78 <__DIGITAL_IO_SetOutputLow_veneer>

}  // end of do_rfft_i()
1fffc9fe:	3708      	adds	r7, #8
1fffca00:	46bd      	mov	sp, r7
1fffca02:	bd80      	pop	{r7, pc}
1fffca04:	1fffde9c 	.word	0x1fffde9c
1fffca08:	20000e9c 	.word	0x20000e9c
1fffca0c:	1fffee9c 	.word	0x1fffee9c
1fffca10:	1fffce84 	.word	0x1fffce84
1fffca14:	1ffffe9c 	.word	0x1ffffe9c
1fffca18:	1fffce64 	.word	0x1fffce64
1fffca1c:	1fffce68 	.word	0x1fffce68
1fffca20:	1fffcd14 	.word	0x1fffcd14

1fffca24 <do_rfft_q>:
//  The Hanning window is then applied to the time domain buffer.
//  This buffer then is converted to frequency domain with the FFT.
//
//
void do_rfft_q()
{
1fffca24:	b580      	push	{r7, lr}
1fffca26:	b082      	sub	sp, #8
1fffca28:	af00      	add	r7, sp, #0
	float32_t i_mean = 0;   // mean
1fffca2a:	f04f 0300 	mov.w	r3, #0
1fffca2e:	607b      	str	r3, [r7, #4]

	arm_mean_f32(ifq_adc_measurements, NUM_SAMPLES, &i_mean); //Finds the mean
1fffca30:	1d3b      	adds	r3, r7, #4
1fffca32:	4820      	ldr	r0, [pc, #128]	; (1fffcab4 <do_rfft_q+0x90>)
1fffca34:	f44f 6180 	mov.w	r1, #1024	; 0x400
1fffca38:	461a      	mov	r2, r3
1fffca3a:	f000 f895 	bl	1fffcb68 <__arm_mean_f32_veneer>
	arm_offset_f32(ifq_adc_measurements, -i_mean, i_adc_measurements, NUM_SAMPLES);  //kills the offset
1fffca3e:	edd7 7a01 	vldr	s15, [r7, #4]
1fffca42:	eef1 7a67 	vneg.f32	s15, s15
1fffca46:	ee17 3a90 	vmov	r3, s15
1fffca4a:	481a      	ldr	r0, [pc, #104]	; (1fffcab4 <do_rfft_q+0x90>)
1fffca4c:	4619      	mov	r1, r3
1fffca4e:	4a1a      	ldr	r2, [pc, #104]	; (1fffcab8 <do_rfft_q+0x94>)
1fffca50:	f44f 6380 	mov.w	r3, #1024	; 0x400
1fffca54:	f000 f858 	bl	1fffcb08 <__arm_offset_f32_veneer>

	arm_mult_f32(i_adc_measurements, hanning_window, i_adc_measurements, NUM_SAMPLES); //apply a hanning window
1fffca58:	4817      	ldr	r0, [pc, #92]	; (1fffcab8 <do_rfft_q+0x94>)
1fffca5a:	4918      	ldr	r1, [pc, #96]	; (1fffcabc <do_rfft_q+0x98>)
1fffca5c:	4a16      	ldr	r2, [pc, #88]	; (1fffcab8 <do_rfft_q+0x94>)
1fffca5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
1fffca62:	f000 f8b9 	bl	1fffcbd8 <__arm_mult_f32_veneer>

	arm_rfft_fast_f32(&i_fftStructure, i_adc_measurements, i_fftResult, INVERT_FFT); //performs fft
1fffca66:	4816      	ldr	r0, [pc, #88]	; (1fffcac0 <do_rfft_q+0x9c>)
1fffca68:	4913      	ldr	r1, [pc, #76]	; (1fffcab8 <do_rfft_q+0x94>)
1fffca6a:	4a16      	ldr	r2, [pc, #88]	; (1fffcac4 <do_rfft_q+0xa0>)
1fffca6c:	2300      	movs	r3, #0
1fffca6e:	f000 f863 	bl	1fffcb38 <__arm_rfft_fast_f32_veneer>

	arm_abs_f32(i_fftResult, i_fftResult, NUM_SAMPLES);
1fffca72:	4814      	ldr	r0, [pc, #80]	; (1fffcac4 <do_rfft_q+0xa0>)
1fffca74:	4913      	ldr	r1, [pc, #76]	; (1fffcac4 <do_rfft_q+0xa0>)
1fffca76:	f44f 6280 	mov.w	r2, #1024	; 0x400
1fffca7a:	f000 f86d 	bl	1fffcb58 <__arm_abs_f32_veneer>

	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(i_fftResult, NUM_SAMPLES/2, &maxValue, &Index);
1fffca7e:	4811      	ldr	r0, [pc, #68]	; (1fffcac4 <do_rfft_q+0xa0>)
1fffca80:	f44f 7100 	mov.w	r1, #512	; 0x200
1fffca84:	4a10      	ldr	r2, [pc, #64]	; (1fffcac8 <do_rfft_q+0xa4>)
1fffca86:	4b11      	ldr	r3, [pc, #68]	; (1fffcacc <do_rfft_q+0xa8>)
1fffca88:	f000 f896 	bl	1fffcbb8 <__arm_max_f32_veneer>

	if (maxValue > DOPPLER_EVENT_LVL )  // if the threshold is exceeded, we have a doppler event
1fffca8c:	4b0e      	ldr	r3, [pc, #56]	; (1fffcac8 <do_rfft_q+0xa4>)
1fffca8e:	edd3 7a00 	vldr	s15, [r3]
1fffca92:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x2e
1fffca96:	eef4 7ac7 	vcmpe.f32	s15, s14
1fffca9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1fffca9e:	dd03      	ble.n	1fffcaa8 <do_rfft_q+0x84>
		DIGITAL_IO_SetOutputLow(&LED_RED);
1fffcaa0:	480b      	ldr	r0, [pc, #44]	; (1fffcad0 <do_rfft_q+0xac>)
1fffcaa2:	f000 f869 	bl	1fffcb78 <__DIGITAL_IO_SetOutputLow_veneer>
1fffcaa6:	e002      	b.n	1fffcaae <do_rfft_q+0x8a>
	else
		DIGITAL_IO_SetOutputHigh(&LED_RED);
1fffcaa8:	4809      	ldr	r0, [pc, #36]	; (1fffcad0 <do_rfft_q+0xac>)
1fffcaaa:	f000 f88d 	bl	1fffcbc8 <__DIGITAL_IO_SetOutputHigh_veneer>

}  // end of do_rfft_q()
1fffcaae:	3708      	adds	r7, #8
1fffcab0:	46bd      	mov	sp, r7
1fffcab2:	bd80      	pop	{r7, pc}
1fffcab4:	1fffce9c 	.word	0x1fffce9c
1fffcab8:	20000e9c 	.word	0x20000e9c
1fffcabc:	1fffee9c 	.word	0x1fffee9c
1fffcac0:	1fffce84 	.word	0x1fffce84
1fffcac4:	1ffffe9c 	.word	0x1ffffe9c
1fffcac8:	1fffce64 	.word	0x1fffce64
1fffcacc:	1fffce68 	.word	0x1fffce68
1fffcad0:	1fffccfc 	.word	0x1fffccfc
1fffcad4:	f3af 8000 	nop.w

1fffcad8 <____aeabi_dmul_veneer>:
1fffcad8:	b401      	push	{r0}
1fffcada:	4802      	ldr	r0, [pc, #8]	; (1fffcae4 <____aeabi_dmul_veneer+0xc>)
1fffcadc:	4684      	mov	ip, r0
1fffcade:	bc01      	pop	{r0}
1fffcae0:	4760      	bx	ip
1fffcae2:	bf00      	nop
1fffcae4:	080073e1 	.word	0x080073e1

1fffcae8 <____aeabi_f2d_veneer>:
1fffcae8:	b401      	push	{r0}
1fffcaea:	4802      	ldr	r0, [pc, #8]	; (1fffcaf4 <____aeabi_f2d_veneer+0xc>)
1fffcaec:	4684      	mov	ip, r0
1fffcaee:	bc01      	pop	{r0}
1fffcaf0:	4760      	bx	ip
1fffcaf2:	bf00      	nop
1fffcaf4:	08007339 	.word	0x08007339

1fffcaf8 <__TIMER_Clear_veneer>:
1fffcaf8:	b401      	push	{r0}
1fffcafa:	4802      	ldr	r0, [pc, #8]	; (1fffcb04 <__TIMER_Clear_veneer+0xc>)
1fffcafc:	4684      	mov	ip, r0
1fffcafe:	bc01      	pop	{r0}
1fffcb00:	4760      	bx	ip
1fffcb02:	bf00      	nop
1fffcb04:	080026a1 	.word	0x080026a1

1fffcb08 <__arm_offset_f32_veneer>:
1fffcb08:	b401      	push	{r0}
1fffcb0a:	4802      	ldr	r0, [pc, #8]	; (1fffcb14 <__arm_offset_f32_veneer+0xc>)
1fffcb0c:	4684      	mov	ip, r0
1fffcb0e:	bc01      	pop	{r0}
1fffcb10:	4760      	bx	ip
1fffcb12:	bf00      	nop
1fffcb14:	08006a69 	.word	0x08006a69

1fffcb18 <____aeabi_d2f_veneer>:
1fffcb18:	b401      	push	{r0}
1fffcb1a:	4802      	ldr	r0, [pc, #8]	; (1fffcb24 <____aeabi_d2f_veneer+0xc>)
1fffcb1c:	4684      	mov	ip, r0
1fffcb1e:	bc01      	pop	{r0}
1fffcb20:	4760      	bx	ip
1fffcb22:	bf00      	nop
1fffcb24:	08007805 	.word	0x08007805

1fffcb28 <__XMC_VADC_GROUP_GetDetailedResult_veneer>:
1fffcb28:	b401      	push	{r0}
1fffcb2a:	4802      	ldr	r0, [pc, #8]	; (1fffcb34 <__XMC_VADC_GROUP_GetDetailedResult_veneer+0xc>)
1fffcb2c:	4684      	mov	ip, r0
1fffcb2e:	bc01      	pop	{r0}
1fffcb30:	4760      	bx	ip
1fffcb32:	bf00      	nop
1fffcb34:	08000489 	.word	0x08000489

1fffcb38 <__arm_rfft_fast_f32_veneer>:
1fffcb38:	b401      	push	{r0}
1fffcb3a:	4802      	ldr	r0, [pc, #8]	; (1fffcb44 <__arm_rfft_fast_f32_veneer+0xc>)
1fffcb3c:	4684      	mov	ip, r0
1fffcb3e:	bc01      	pop	{r0}
1fffcb40:	4760      	bx	ip
1fffcb42:	bf00      	nop
1fffcb44:	08006399 	.word	0x08006399

1fffcb48 <____aeabi_ddiv_veneer>:
1fffcb48:	b401      	push	{r0}
1fffcb4a:	4802      	ldr	r0, [pc, #8]	; (1fffcb54 <____aeabi_ddiv_veneer+0xc>)
1fffcb4c:	4684      	mov	ip, r0
1fffcb4e:	bc01      	pop	{r0}
1fffcb50:	4760      	bx	ip
1fffcb52:	bf00      	nop
1fffcb54:	08007635 	.word	0x08007635

1fffcb58 <__arm_abs_f32_veneer>:
1fffcb58:	b401      	push	{r0}
1fffcb5a:	4802      	ldr	r0, [pc, #8]	; (1fffcb64 <__arm_abs_f32_veneer+0xc>)
1fffcb5c:	4684      	mov	ip, r0
1fffcb5e:	bc01      	pop	{r0}
1fffcb60:	4760      	bx	ip
1fffcb62:	bf00      	nop
1fffcb64:	08006899 	.word	0x08006899

1fffcb68 <__arm_mean_f32_veneer>:
1fffcb68:	b401      	push	{r0}
1fffcb6a:	4802      	ldr	r0, [pc, #8]	; (1fffcb74 <__arm_mean_f32_veneer+0xc>)
1fffcb6c:	4684      	mov	ip, r0
1fffcb6e:	bc01      	pop	{r0}
1fffcb70:	4760      	bx	ip
1fffcb72:	bf00      	nop
1fffcb74:	080066cd 	.word	0x080066cd

1fffcb78 <__DIGITAL_IO_SetOutputLow_veneer>:
1fffcb78:	b401      	push	{r0}
1fffcb7a:	4802      	ldr	r0, [pc, #8]	; (1fffcb84 <__DIGITAL_IO_SetOutputLow_veneer+0xc>)
1fffcb7c:	4684      	mov	ip, r0
1fffcb7e:	bc01      	pop	{r0}
1fffcb80:	4760      	bx	ip
1fffcb82:	bf00      	nop
1fffcb84:	08000425 	.word	0x08000425

1fffcb88 <__XMC_VADC_GROUP_GetResult_veneer>:
1fffcb88:	b401      	push	{r0}
1fffcb8a:	4802      	ldr	r0, [pc, #8]	; (1fffcb94 <__XMC_VADC_GROUP_GetResult_veneer+0xc>)
1fffcb8c:	4684      	mov	ip, r0
1fffcb8e:	bc01      	pop	{r0}
1fffcb90:	4760      	bx	ip
1fffcb92:	bf00      	nop
1fffcb94:	080004a9 	.word	0x080004a9

1fffcb98 <__TIMER_Stop_veneer>:
1fffcb98:	b401      	push	{r0}
1fffcb9a:	4802      	ldr	r0, [pc, #8]	; (1fffcba4 <__TIMER_Stop_veneer+0xc>)
1fffcb9c:	4684      	mov	ip, r0
1fffcb9e:	bc01      	pop	{r0}
1fffcba0:	4760      	bx	ip
1fffcba2:	bf00      	nop
1fffcba4:	08002501 	.word	0x08002501

1fffcba8 <__XMC_VADC_GROUP_ChannelGetResultRegister_veneer>:
1fffcba8:	b401      	push	{r0}
1fffcbaa:	4802      	ldr	r0, [pc, #8]	; (1fffcbb4 <__XMC_VADC_GROUP_ChannelGetResultRegister_veneer+0xc>)
1fffcbac:	4684      	mov	ip, r0
1fffcbae:	bc01      	pop	{r0}
1fffcbb0:	4760      	bx	ip
1fffcbb2:	bf00      	nop
1fffcbb4:	08002345 	.word	0x08002345

1fffcbb8 <__arm_max_f32_veneer>:
1fffcbb8:	b401      	push	{r0}
1fffcbba:	4802      	ldr	r0, [pc, #8]	; (1fffcbc4 <__arm_max_f32_veneer+0xc>)
1fffcbbc:	4684      	mov	ip, r0
1fffcbbe:	bc01      	pop	{r0}
1fffcbc0:	4760      	bx	ip
1fffcbc2:	bf00      	nop
1fffcbc4:	080065a1 	.word	0x080065a1

1fffcbc8 <__DIGITAL_IO_SetOutputHigh_veneer>:
1fffcbc8:	b401      	push	{r0}
1fffcbca:	4802      	ldr	r0, [pc, #8]	; (1fffcbd4 <__DIGITAL_IO_SetOutputHigh_veneer+0xc>)
1fffcbcc:	4684      	mov	ip, r0
1fffcbce:	bc01      	pop	{r0}
1fffcbd0:	4760      	bx	ip
1fffcbd2:	bf00      	nop
1fffcbd4:	08000405 	.word	0x08000405

1fffcbd8 <__arm_mult_f32_veneer>:
1fffcbd8:	b401      	push	{r0}
1fffcbda:	4802      	ldr	r0, [pc, #8]	; (1fffcbe4 <__arm_mult_f32_veneer+0xc>)
1fffcbdc:	4684      	mov	ip, r0
1fffcbde:	bc01      	pop	{r0}
1fffcbe0:	4760      	bx	ip
1fffcbe2:	bf00      	nop
1fffcbe4:	08006965 	.word	0x08006965
