
S2GTWO_MD_SA_B01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009748  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08009748  0c009748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata       00013dd6  08009750  0c009750  00011750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 Stack         00000800  1fffc000  1fffc000  00034000  2**0
                  ALLOC
  4 .ram_code     00000210  1fffc800  0c01d530  0002c800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data         00000388  1fffca10  0c01d740  0002ca10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004c78  1fffcd98  0c01dac8  0002cd98  2**2
                  ALLOC
  7 .no_init      00000020  20005fc0  0c026cf0  0002cd98  2**2
                  ALLOC
  8 .debug_aranges 00001620  00000000  00000000  0002cd98  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00027468  00000000  00000000  0002e3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004bdd  00000000  00000000  00055820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000c786  00000000  00000000  0005a3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000058bc  00000000  00000000  00066b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000d754  00000000  00000000  0006c440  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b47a  00000000  00000000  00079b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001270  00000000  00000000  0008500e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000e18  00000000  00000000  0008627e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 c8 ff 1f 01 02 00 08 91 02 00 08 91 02 00 08     ................
 8000010:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 800002c:	91 02 00 08 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800003c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800004c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800005c:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 91 02 00 08 00 00 00 00 91 02 00 08     ................
 800007c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800008c:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 800009c:	91 02 00 08 91 02 00 08 91 02 00 08 00 00 00 00     ................
	...
 80000e8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80000f8:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000108:	91 02 00 08 89 7d 00 08 00 00 00 00 00 00 00 00     .....}..........
	...
 8000130:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 8000150:	91 02 00 08 91 02 00 08 00 00 00 00 00 00 00 00     ................
 8000160:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000170:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000180:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 8000190:	91 02 00 08 7d 38 00 08 91 02 00 08 6d 38 00 08     ....}8......m8..
 80001a0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
 80001b0:	91 02 00 08 91 02 00 08 91 02 00 08 91 02 00 08     ................
	...
 80001d8:	91 02 00 08 00 00 00 00 91 02 00 08 95 3b 00 08     .............;..
 80001e8:	00 00 00 00 91 02 00 08 00 00 00 00 00 00 00 00     ................
	...

08000200 <Reset_Handler>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000200:	f8df d06c 	ldr.w	sp, [pc, #108]	; 8000270 <__zero_table_end__>
	.align	1
    .thumb

 8000204:	481b      	ldr	r0, [pc, #108]	; (8000274 <__zero_table_end__+0x4>)
/* Reset Handler */
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1b      	ldr	r4, [pc, #108]	; (8000278 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1c      	ldr	r5, [pc, #112]	; (800027c <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b16      	ldr	r3, [pc, #88]	; (8000280 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c17      	ldr	r4, [pc, #92]	; (8000284 <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4812      	ldr	r0, [pc, #72]	; (8000288 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4812      	ldr	r0, [pc, #72]	; (800028c <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c01d740 	.word	0x0c01d740
 800024c:	1fffca10 	.word	0x1fffca10
 8000250:	00000388 	.word	0x00000388
 8000254:	0c01d530 	.word	0x0c01d530
 8000258:	1fffc800 	.word	0x1fffc800
 800025c:	00000210 	.word	0x00000210

08000260 <__copy_table_end__>:
 8000260:	1fffcd98 	.word	0x1fffcd98
 8000264:	00004c78 	.word	0x00004c78
 8000268:	20001a10 	.word	0x20001a10
 800026c:	00000000 	.word	0x00000000

08000270 <__zero_table_end__>:

    .size  __Vectors, . - __Vectors
/* ================== END OF VECTOR TABLE DEFINITION ======================= */

/* ================== START OF VECTOR ROUTINES ============================= */

 8000270:	1fffc800 	.word	0x1fffc800
	.align	1
    .thumb

 8000274:	08000295 	.word	0x08000295
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000278:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 800027c:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000280:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 8000284:	08000270 	.word	0x08000270
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000288:	080096c1 	.word	0x080096c1
    blx  r0
#endif

    ldr  r0, =main
 800028c:	08007a3d 	.word	0x08007a3d

08000290 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000290:	e7fe      	b.n	8000290 <BusFault_Handler>
	...

08000294 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8000294:	b598      	push	{r3, r4, r7, lr}
 8000296:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8000298:	4a08      	ldr	r2, [pc, #32]	; (80002bc <SystemInit+0x28>)
 800029a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800029e:	4614      	mov	r4, r2
 80002a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  memcpy(g_hrpwm_char_data, HRPWM_CHARDATA_LOC, 12);
 80002a6:	4b06      	ldr	r3, [pc, #24]	; (80002c0 <SystemInit+0x2c>)
 80002a8:	4a06      	ldr	r2, [pc, #24]	; (80002c4 <SystemInit+0x30>)
 80002aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80002ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  SystemCoreSetup();
 80002b0:	f000 f80a 	bl	80002c8 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b4:	f007 f878 	bl	80073a8 <SystemCoreClockSetup>
}
 80002b8:	bd98      	pop	{r3, r4, r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20005fc4 	.word	0x20005fc4
 80002c0:	20005fd4 	.word	0x20005fd4
 80002c4:	20000084 	.word	0x20000084

080002c8 <SystemCoreSetup>:

__WEAK void SystemCoreSetup(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b083      	sub	sp, #12
 80002cc:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002ce:	b672      	cpsid	i
  uint32_t temp;

  /* relocate vector table */
  __disable_irq();
  SCB->VTOR = (uint32_t)(&__Vectors);
 80002d0:	4b12      	ldr	r3, [pc, #72]	; (800031c <SystemCoreSetup+0x54>)
 80002d2:	4a13      	ldr	r2, [pc, #76]	; (8000320 <SystemCoreSetup+0x58>)
 80002d4:	609a      	str	r2, [r3, #8]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
 80002d6:	f3bf 8f4f 	dsb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80002da:	b662      	cpsie	i
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
                 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif

  /* Enable unaligned memory access - SCB_CCR.UNALIGN_TRP = 0 */
  SCB->CCR &= ~(SCB_CCR_UNALIGN_TRP_Msk);
 80002dc:	4a0f      	ldr	r2, [pc, #60]	; (800031c <SystemCoreSetup+0x54>)
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <SystemCoreSetup+0x54>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	f023 0308 	bic.w	r3, r3, #8
 80002e6:	6153      	str	r3, [r2, #20]

  temp = FLASH0->FCON;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <SystemCoreSetup+0x5c>)
 80002ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80002ee:	3314      	adds	r3, #20
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	f023 030f 	bic.w	r3, r3, #15
 80002fa:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8000304:	4b07      	ldr	r3, [pc, #28]	; (8000324 <SystemCoreSetup+0x5c>)
 8000306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800030a:	3314      	adds	r3, #20
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	601a      	str	r2, [r3, #0]
}
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000ed00 	.word	0xe000ed00
 8000320:	08000000 	.word	0x08000000
 8000324:	58001000 	.word	0x58001000

08000328 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 800032e:	4b2f      	ldr	r3, [pc, #188]	; (80003ec <SystemCoreClockUpdate+0xc4>)
 8000330:	68db      	ldr	r3, [r3, #12]
 8000332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000336:	2b00      	cmp	r3, #0
 8000338:	d03e      	beq.n	80003b8 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 800033a:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <SystemCoreClockUpdate+0xc8>)
 800033c:	68db      	ldr	r3, [r3, #12]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <SystemCoreClockUpdate+0xcc>)
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e002      	b.n	8000352 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 800034c:	f007 f822 	bl	8007394 <OSCHP_GetFrequency>
 8000350:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8000352:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <SystemCoreClockUpdate+0xc8>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 0304 	and.w	r3, r3, #4
 800035a:	2b00      	cmp	r3, #0
 800035c:	d020      	beq.n	80003a0 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 800035e:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <SystemCoreClockUpdate+0xc8>)
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000366:	0e1b      	lsrs	r3, r3, #24
 8000368:	3301      	adds	r3, #1
 800036a:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 800036c:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <SystemCoreClockUpdate+0xc8>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000374:	0a1b      	lsrs	r3, r3, #8
 8000376:	3301      	adds	r3, #1
 8000378:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <SystemCoreClockUpdate+0xc8>)
 800037c:	689b      	ldr	r3, [r3, #8]
 800037e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000382:	0c1b      	lsrs	r3, r3, #16
 8000384:	3301      	adds	r3, #1
 8000386:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8000388:	68bb      	ldr	r3, [r7, #8]
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	fb02 f303 	mul.w	r3, r2, r3
 8000390:	68fa      	ldr	r2, [r7, #12]
 8000392:	fbb2 f3f3 	udiv	r3, r2, r3
 8000396:	687a      	ldr	r2, [r7, #4]
 8000398:	fb02 f303 	mul.w	r3, r2, r3
 800039c:	60fb      	str	r3, [r7, #12]
 800039e:	e00d      	b.n	80003bc <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 80003a0:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemCoreClockUpdate+0xc8>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80003a8:	3301      	adds	r3, #1
 80003aa:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 80003ac:	68fa      	ldr	r2, [r7, #12]
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80003b4:	60fb      	str	r3, [r7, #12]
 80003b6:	e001      	b.n	80003bc <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <SystemCoreClockUpdate+0xcc>)
 80003ba:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 80003bc:	4b0b      	ldr	r3, [pc, #44]	; (80003ec <SystemCoreClockUpdate+0xc4>)
 80003be:	68db      	ldr	r3, [r3, #12]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	3301      	adds	r3, #1
 80003c4:	68fa      	ldr	r2, [r7, #12]
 80003c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80003ca:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 80003cc:	4b07      	ldr	r3, [pc, #28]	; (80003ec <SystemCoreClockUpdate+0xc4>)
 80003ce:	691b      	ldr	r3, [r3, #16]
 80003d0:	f003 0301 	and.w	r3, r3, #1
 80003d4:	3301      	adds	r3, #1
 80003d6:	68fa      	ldr	r2, [r7, #12]
 80003d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003dc:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 80003de:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <SystemCoreClockUpdate+0xd0>)
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	50004600 	.word	0x50004600
 80003f0:	50004710 	.word	0x50004710
 80003f4:	016e3600 	.word	0x016e3600
 80003f8:	20005fc0 	.word	0x20005fc0

080003fc <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	460b      	mov	r3, r1
 8000406:	607a      	str	r2, [r7, #4]
 8000408:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_CHECK_MODE(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800040a:	7afb      	ldrb	r3, [r7, #11]
 800040c:	089b      	lsrs	r3, r3, #2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	4618      	mov	r0, r3
 8000412:	7afb      	ldrb	r3, [r7, #11]
 8000414:	089b      	lsrs	r3, r3, #2
 8000416:	b2db      	uxtb	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	3204      	adds	r2, #4
 800041e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000422:	7afb      	ldrb	r3, [r7, #11]
 8000424:	f003 0303 	and.w	r3, r3, #3
 8000428:	00db      	lsls	r3, r3, #3
 800042a:	4619      	mov	r1, r3
 800042c:	23f8      	movs	r3, #248	; 0xf8
 800042e:	408b      	lsls	r3, r1
 8000430:	43db      	mvns	r3, r3
 8000432:	ea02 0103 	and.w	r1, r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	1d02      	adds	r2, r0, #4
 800043a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000442:	7afb      	ldrb	r3, [r7, #11]
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	4619      	mov	r1, r3
 8000448:	2303      	movs	r3, #3
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	401a      	ands	r2, r3
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	4a35      	ldr	r2, [pc, #212]	; (800052c <XMC_GPIO_Init+0x130>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d10a      	bne.n	8000472 <XMC_GPIO_Init+0x76>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000460:	7afb      	ldrb	r3, [r7, #11]
 8000462:	2101      	movs	r1, #1
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	43db      	mvns	r3, r3
 800046a:	401a      	ands	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	661a      	str	r2, [r3, #96]	; 0x60
 8000470:	e03c      	b.n	80004ec <XMC_GPIO_Init+0xf0>
  }
  else
  {
    /* Set output level */
    port->OMR = (uint32_t)config->output_level << pin;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	685a      	ldr	r2, [r3, #4]
 8000476:	7afb      	ldrb	r3, [r7, #11]
 8000478:	409a      	lsls	r2, r3
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	605a      	str	r2, [r3, #4]

    /* Set output driver strength */
    port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	08db      	lsrs	r3, r3, #3
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	7afb      	ldrb	r3, [r7, #11]
 8000488:	08db      	lsrs	r3, r3, #3
 800048a:	b2db      	uxtb	r3, r3
 800048c:	461a      	mov	r2, r3
 800048e:	68fb      	ldr	r3, [r7, #12]
 8000490:	3210      	adds	r2, #16
 8000492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000496:	7afb      	ldrb	r3, [r7, #11]
 8000498:	f003 0307 	and.w	r3, r3, #7
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	4619      	mov	r1, r3
 80004a0:	2307      	movs	r3, #7
 80004a2:	408b      	lsls	r3, r1
 80004a4:	43db      	mvns	r3, r3
 80004a6:	ea02 0103 	and.w	r1, r2, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	f100 0210 	add.w	r2, r0, #16
 80004b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80004b4:	7afb      	ldrb	r3, [r7, #11]
 80004b6:	08db      	lsrs	r3, r3, #3
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4618      	mov	r0, r3
 80004bc:	7afb      	ldrb	r3, [r7, #11]
 80004be:	08db      	lsrs	r3, r3, #3
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	3210      	adds	r2, #16
 80004c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	7a1b      	ldrb	r3, [r3, #8]
 80004d0:	4619      	mov	r1, r3
 80004d2:	7afb      	ldrb	r3, [r7, #11]
 80004d4:	f003 0307 	and.w	r3, r3, #7
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	fa01 f303 	lsl.w	r3, r1, r3
 80004de:	ea42 0103 	orr.w	r1, r2, r3
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	f100 0210 	add.w	r2, r0, #16
 80004e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80004ec:	7afb      	ldrb	r3, [r7, #11]
 80004ee:	089b      	lsrs	r3, r3, #2
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	4618      	mov	r0, r3
 80004f4:	7afb      	ldrb	r3, [r7, #11]
 80004f6:	089b      	lsrs	r3, r3, #2
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3204      	adds	r2, #4
 8000500:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	4619      	mov	r1, r3
 800050a:	7afb      	ldrb	r3, [r7, #11]
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	00db      	lsls	r3, r3, #3
 8000512:	fa01 f303 	lsl.w	r3, r1, r3
 8000516:	ea42 0103 	orr.w	r1, r2, r3
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	1d02      	adds	r2, r0, #4
 800051e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	48028e00 	.word	0x48028e00

08000530 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8000536:	681b      	ldr	r3, [r3, #0]
}
 8000538:	4618      	mov	r0, r3
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20005fc0 	.word	0x20005fc0

08000548 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_SCU_lDelay(uint32_t delay)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000550:	f7ff feea 	bl	8000328 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000554:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <XMC_SCU_lDelay+0x3c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <XMC_SCU_lDelay+0x40>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	0c9a      	lsrs	r2, r3, #18
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	fb02 f303 	mul.w	r3, r2, r3
 8000566:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	e003      	b.n	8000576 <XMC_SCU_lDelay+0x2e>

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800056e:	bf00      	nop
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	3301      	adds	r3, #1
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fa      	ldr	r2, [r7, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	429a      	cmp	r2, r3
 800057c:	d3f7      	bcc.n	800056e <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20005fc0 	.word	0x20005fc0
 8000588:	431bde83 	.word	0x431bde83

0800058c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af02      	add	r7, sp, #8
 8000592:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
		          (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
		         (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8000594:	2000      	movs	r0, #0
 8000596:	f000 f8a5 	bl	80006e4 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800059a:	f000 fa61 	bl	8000a60 <XMC_SCU_HIB_EnableHibernateDomain>
  if (config->enable_osculp == true)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	79db      	ldrb	r3, [r3, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <XMC_SCU_CLOCK_Init+0x1e>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 80005a6:	f000 fa85 	bl	8000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
  }
  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	7a5b      	ldrb	r3, [r3, #9]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f912 	bl	80007d8 <XMC_SCU_HIB_SetStandbyClockSource>

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a1b      	ldrb	r3, [r3, #8]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fa2b 	bl	8000a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	7c1b      	ldrb	r3, [r3, #16]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f926 	bl	8000814 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	7c5b      	ldrb	r3, [r3, #17]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f949 	bl	8000864 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7c9b      	ldrb	r3, [r3, #18]
 80005d6:	4618      	mov	r0, r3
 80005d8:	f000 f930 	bl	800083c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	7cdb      	ldrb	r3, [r3, #19]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 f953 	bl	800088c <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	799b      	ldrb	r3, [r3, #6]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <XMC_SCU_CLOCK_Init+0x66>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80005ee:	f000 fa9b 	bl	8000b28 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	78db      	ldrb	r3, [r3, #3]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d102      	bne.n	8000600 <XMC_SCU_CLOCK_Init+0x74>
  {
    XMC_SCU_CLOCK_DisableSystemPll();
 80005fa:	f000 fad5 	bl	8000ba8 <XMC_SCU_CLOCK_DisableSystemPll>
 80005fe:	e014      	b.n	800062a <XMC_SCU_CLOCK_Init+0x9e>
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000600:	f000 fac2 	bl	8000b88 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	8899      	ldrh	r1, [r3, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000610:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000616:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	4608      	mov	r0, r1
 8000620:	4611      	mov	r1, r2
 8000622:	462a      	mov	r2, r5
 8000624:	4623      	mov	r3, r4
 8000626:	f000 facf 	bl	8000bc8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	68db      	ldr	r3, [r3, #12]
 800062e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000632:	d103      	bne.n	800063c <XMC_SCU_CLOCK_Init+0xb0>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);    
 8000634:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000638:	f000 f854 	bl	80006e4 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800063c:	f7ff fe74 	bl	8000328 <SystemCoreClockUpdate>
}
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bdb0      	pop	{r4, r5, r7, pc}
 8000646:	bf00      	nop

08000648 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *set_peripheral_reset[index] |= (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	0f1b      	lsrs	r3, r3, #28
 8000654:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800065c:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRCLR0),
                                                         &(SCU_RESET->PRCLR1),
                                                         &(SCU_RESET->PRCLR2)};
#endif

  *clear_peripheral_reset[index] |= (uint32_t)mask;
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000666:	4906      	ldr	r1, [pc, #24]	; (8000680 <XMC_SCU_RESET_DeassertPeripheralReset+0x38>)
 8000668:	68fa      	ldr	r2, [r7, #12]
 800066a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800066e:	6811      	ldr	r1, [r2, #0]
 8000670:	68ba      	ldr	r2, [r7, #8]
 8000672:	430a      	orrs	r2, r1
 8000674:	601a      	str	r2, [r3, #0]
}
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	08009750 	.word	0x08009750

08000684 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	0f1b      	lsrs	r3, r3, #28
 8000690:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000698:	60bb      	str	r3, [r7, #8]
  static __I uint32_t *const clear_peripheral_reset[] = {&(SCU_RESET->PRSTAT0),
                                                         &(SCU_RESET->PRSTAT1),
                                                         &(SCU_RESET->PRSTAT2)};
#endif

  return (bool)(*clear_peripheral_reset[index] & mask);
 800069a:	4a09      	ldr	r2, [pc, #36]	; (80006c0 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x3c>)
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	4013      	ands	r3, r2
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	bf14      	ite	ne
 80006ac:	2301      	movne	r3, #1
 80006ae:	2300      	moveq	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	0800975c 	.word	0x0800975c

080006c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006c8:	f7ff ff32 	bl	8000530 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80006cc:	4602      	mov	r2, r0
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
 80006ce:	4b04      	ldr	r3, [pc, #16]	; (80006e0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80006d0:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	fa22 f303 	lsr.w	r3, r2, r3
         ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));  
}
 80006da:	4618      	mov	r0, r3
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	50004600 	.word	0x50004600

080006e4 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80006ec:	4906      	ldr	r1, [pc, #24]	; (8000708 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	50004600 	.word	0x50004600

0800070c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4313      	orrs	r3, r2
 8000722:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	50004600 	.word	0x50004600

08000734 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800073c:	4906      	ldr	r1, [pc, #24]	; (8000758 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4313      	orrs	r3, r2
 800074a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	50004600 	.word	0x50004600

0800075c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8000766:	88fb      	ldrh	r3, [r7, #6]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d108      	bne.n	800077e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800076c:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000770:	68db      	ldr	r3, [r3, #12]
 8000772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000776:	f023 0301 	bic.w	r3, r3, #1
 800077a:	60d3      	str	r3, [r2, #12]
 800077c:	e007      	b.n	800078e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	60d3      	str	r3, [r2, #12]
  }
}
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	50004710 	.word	0x50004710

0800079c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{ 
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007a6:	bf00      	nop
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f8      	bne.n	80007a8 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007b6:	4907      	ldr	r1, [pc, #28]	; (80007d4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004000 	.word	0x50004000
 80007d4:	50004300 	.word	0x50004300

080007d8 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007e2:	bf00      	nop
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80007e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d1f8      	bne.n	80007e4 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007f2:	4907      	ldr	r1, [pc, #28]	; (8000810 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80007fc:	79fb      	ldrb	r3, [r7, #7]
{
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80007fe:	4313      	orrs	r3, r2
 8000800:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	50004000 	.word	0x50004000
 8000810:	50004300 	.word	0x50004300

08000814 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800081c:	4906      	ldr	r1, [pc, #24]	; (8000838 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800082a:	4313      	orrs	r3, r2
 800082c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	50004600 	.word	0x50004600

0800083c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000848:	6a1b      	ldr	r3, [r3, #32]
 800084a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8000852:	4313      	orrs	r3, r2
 8000854:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	50004600 	.word	0x50004600

08000864 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800086c:	4906      	ldr	r1, [pc, #24]	; (8000888 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8000870:	691b      	ldr	r3, [r3, #16]
 8000872:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800087a:	4313      	orrs	r3, r2
 800087c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	50004600 	.word	0x50004600

0800088c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8000894:	4906      	ldr	r1, [pc, #24]	; (80008b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008a2:	4313      	orrs	r3, r2
 80008a4:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	50004600 	.word	0x50004600

080008b4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008bc:	4906      	ldr	r1, [pc, #24]	; (80008d8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008be:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008c0:	699b      	ldr	r3, [r3, #24]
 80008c2:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008ca:	4313      	orrs	r3, r2
 80008cc:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos); 
}
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	50004600 	.word	0x50004600

080008dc <XMC_SCU_CLOCK_SetWdtClockDivider>:
}
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008e4:	4906      	ldr	r1, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
		      (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 80008f2:	4313      	orrs	r3, r2
 80008f4:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	50004600 	.word	0x50004600

08000904 <XMC_SCU_CLOCK_EnableClock>:
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EXTCLKCR_ECKDIV_Pos);
}

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	6053      	str	r3, [r2, #4]
}
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	50004600 	.word	0x50004600

08000924 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *set_peripheral_gate[index] |= (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	0f1b      	lsrs	r3, r3, #28
 8000930:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000938:	60bb      	str	r3, [r7, #8]
  static __O uint32_t *const clear_peripheral_gate[] = {&(SCU_CLK->CGATCLR0),
                                                        &(SCU_CLK->CGATCLR1),
                                                        &(SCU_CLK->CGATCLR2)};
  *clear_peripheral_gate[index] |= (uint32_t)mask;
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000942:	4906      	ldr	r1, [pc, #24]	; (800095c <XMC_SCU_CLOCK_UngatePeripheralClock+0x38>)
 8000944:	68fa      	ldr	r2, [r7, #12]
 8000946:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800094a:	6811      	ldr	r1, [r2, #0]
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	430a      	orrs	r2, r1
 8000950:	601a      	str	r2, [r3, #0]
}
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	08009768 	.word	0x08009768

08000960 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	0f1b      	lsrs	r3, r3, #28
 800096c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000974:	60bb      	str	r3, [r7, #8]
  static __I uint32_t *const clear_peripheral_gate[] = {&(SCU_CLK->CGATSTAT0),
                                                        &(SCU_CLK->CGATSTAT1),
                                                        &(SCU_CLK->CGATSTAT2)};
  return (bool)(*clear_peripheral_gate[index] & mask);
 8000976:	4a09      	ldr	r2, [pc, #36]	; (800099c <XMC_SCU_CLOCK_IsPeripheralClockGated+0x3c>)
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4013      	ands	r3, r2
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf14      	ite	ne
 8000988:	2301      	movne	r3, #1
 800098a:	2300      	moveq	r3, #0
 800098c:	b2db      	uxtb	r3, r3
}
 800098e:	4618      	mov	r0, r3
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	08009774 	.word	0x08009774

080009a0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80009aa:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6153      	str	r3, [r2, #20]

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009b6:	4a16      	ldr	r2, [pc, #88]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009c2:	4913      	ldr	r1, [pc, #76]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	021a      	lsls	r2, r3, #8
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	3b01      	subs	r3, #1
 80009ce:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv -1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 80009d0:	4313      	orrs	r3, r2
 80009d2:	614b      	str	r3, [r1, #20]
                       (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 80009d4:	4a0e      	ldr	r2, [pc, #56]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009de:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f023 0310 	bic.w	r3, r3, #16
 80009ea:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f6:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 80009f8:	bf00      	nop
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <XMC_SCU_CLOCK_StartUsbPll+0x70>)
 80009fc:	691b      	ldr	r3, [r3, #16]
 80009fe:	f003 0304 	and.w	r3, r3, #4
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <XMC_SCU_CLOCK_StartUsbPll+0x5a>
  {
    /* wait for PLL Lock */
  }

}
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	50004710 	.word	0x50004710

08000a14 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
  SCU_PLL->USBPLLCON = (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk |
		                          SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000a1e:	4a0f      	ldr	r2, [pc, #60]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000a28:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d10e      	bne.n	8000a4e <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000a30:	4a0a      	ldr	r2, [pc, #40]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000a3a:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000a3c:	2064      	movs	r0, #100	; 0x64
 8000a3e:	f7ff fd83 	bl	8000548 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000a42:	4a06      	ldr	r2, [pc, #24]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a4c:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f7ff fd7a 	bl	8000548 <XMC_SCU_lDelay>
}
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	50004710 	.word	0x50004710

08000a60 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10c      	bne.n	8000a8a <XMC_SCU_HIB_EnableHibernateDomain+0x2a>
  {
    SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6053      	str	r3, [r2, #4]
    
    while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000a7c:	bf00      	nop
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <XMC_SCU_HIB_EnableHibernateDomain+0x4c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f9      	beq.n	8000a7e <XMC_SCU_HIB_EnableHibernateDomain+0x1e>
      /* wait until HIB domain is enabled */
    }    
  }
  
  /* Remove the reset only if HIB domain were in a state of reset */
  if((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d008      	beq.n	8000aa8 <XMC_SCU_HIB_EnableHibernateDomain+0x48>
  {
    SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa0:	6093      	str	r3, [r2, #8]
    XMC_SCU_lDelay(150U);
 8000aa2:	2096      	movs	r0, #150	; 0x96
 8000aa4:	f7ff fd50 	bl	8000548 <XMC_SCU_lDelay>
  }
}
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	50004200 	.word	0x50004200
 8000ab0:	50004400 	.word	0x50004400

08000ab4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:
  }
}

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  while((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_OSCULCTRL_Msk)
 8000ab8:	bf00      	nop
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000abc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1f8      	bne.n	8000aba <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6>
  {
    /* Wait until the update of OSCULCTRL register in hibernate domain is completed */
  }
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000ac8:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ad2:	61d3      	str	r3, [r2, #28]

  /* Check if the input clock is OK using OSCULP Oscillator Watchdog*/
  while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 8000ad4:	bf00      	nop
 8000ad6:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000ad8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d1f8      	bne.n	8000ad6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	60d3      	str	r3, [r2, #12]

  /* wait till clock is stable */
  do
  {
    while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCLR_Msk)
 8000af0:	bf00      	nop
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000af4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d1f8      	bne.n	8000af2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3e>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    SCU_HIBERNATE->HDCLR |= (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	6053      	str	r3, [r2, #4]

    XMC_SCU_lDelay(50U);
 8000b0c:	2032      	movs	r0, #50	; 0x32
 8000b0e:	f7ff fd1b 	bl	8000548 <XMC_SCU_lDelay>

  } while ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) != 0UL);
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x70>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d1e8      	bne.n	8000af0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x3c>

}
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	50004000 	.word	0x50004000
 8000b24:	50004300 	.word	0x50004300

08000b28 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  }
}

/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b36:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b38:	4d11      	ldr	r5, [pc, #68]	; (8000b80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x58>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000b42:	f024 0430 	bic.w	r4, r4, #48	; 0x30
		                          (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000b46:	f006 fc25 	bl	8007394 <OSCHP_GetFrequency>
 8000b4a:	4602      	mov	r2, r0
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x5c>)
 8000b4e:	fba3 2302 	umull	r2, r3, r3, r2
 8000b52:	0d1b      	lsrs	r3, r3, #20
 8000b54:	3b01      	subs	r3, #1
 8000b56:	041b      	lsls	r3, r3, #16
/* API to configure High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	606b      	str	r3, [r5, #4]
		                          (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000b66:	6053      	str	r3, [r2, #4]

  while ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) != XMC_SCU_PLL_PLLSTAT_OSC_USABLE)
 8000b68:	bf00      	nop
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x54>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000b72:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000b76:	d1f8      	bne.n	8000b6a <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x42>
  {
      /* wait till OSC_HP output frequency is usable */
  }
}
 8000b78:	bdb0      	pop	{r4, r5, r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	50004710 	.word	0x50004710
 8000b80:	50004700 	.word	0x50004700
 8000b84:	6b5fca6b 	.word	0x6b5fca6b

08000b88 <XMC_SCU_CLOCK_EnableSystemPll>:
{
  SCU_OSC->OSCHPCTRL |= (uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk;
}

void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b96:	f023 0302 	bic.w	r3, r3, #2
 8000b9a:	6053      	str	r3, [r2, #4]
}
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	50004710 	.word	0x50004710

08000ba8 <XMC_SCU_CLOCK_DisableSystemPll>:

void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000bac:	4a05      	ldr	r2, [pc, #20]	; (8000bc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	6053      	str	r3, [r2, #4]
}
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	50004710 	.word	0x50004710

08000bc8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60ba      	str	r2, [r7, #8]
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	81fb      	strh	r3, [r7, #14]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	737b      	strb	r3, [r7, #13]

  float vco_frequency;
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000bda:	89fb      	ldrh	r3, [r7, #14]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff fdbd 	bl	800075c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000be2:	7b7b      	ldrb	r3, [r7, #13]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	f040 8095 	bne.w	8000d14 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000bea:	89fb      	ldrh	r3, [r7, #14]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d108      	bne.n	8000c02 <XMC_SCU_CLOCK_StartSystemPll+0x3a>
    {
      vco_frequency = (float)OSCHP_GetFrequency();
 8000bf0:	f006 fbd0 	bl	8007394 <OSCHP_GetFrequency>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f008 f82c 	bl	8008c54 <__aeabi_ui2f>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e001      	b.n	8000c06 <XMC_SCU_CLOCK_StartSystemPll+0x3e>
    }
    else
    {
      vco_frequency = (float)OFI_FREQUENCY;
 8000c02:	4b51      	ldr	r3, [pc, #324]	; (8000d48 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000c04:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = (float)((vco_frequency * (float)ndiv) / (float)pdiv);
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f008 f824 	bl	8008c54 <__aeabi_ui2f>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4618      	mov	r0, r3
 8000c10:	6979      	ldr	r1, [r7, #20]
 8000c12:	f008 f877 	bl	8008d04 <__aeabi_fmul>
 8000c16:	4603      	mov	r3, r0
 8000c18:	461c      	mov	r4, r3
 8000c1a:	68b8      	ldr	r0, [r7, #8]
 8000c1c:	f008 f81a 	bl	8008c54 <__aeabi_ui2f>
 8000c20:	4603      	mov	r3, r0
 8000c22:	4620      	mov	r0, r4
 8000c24:	4619      	mov	r1, r3
 8000c26:	f008 f921 	bl	8008e6c <__aeabi_fdiv>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / OFI_FREQUENCY);
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f008 fa54 	bl	80090dc <__aeabi_f2uiz>
 8000c34:	4602      	mov	r2, r0
 8000c36:	4b45      	ldr	r3, [pc, #276]	; (8000d4c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000c38:	fba3 2302 	umull	r2, r3, r3, r2
 8000c3c:	0d5b      	lsrs	r3, r3, #21
 8000c3e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000c40:	4a43      	ldr	r2, [pc, #268]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c42:	4b43      	ldr	r3, [pc, #268]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f043 0301 	orr.w	r3, r3, #1
 8000c4a:	6053      	str	r3, [r2, #4]

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c4c:	4a40      	ldr	r2, [pc, #256]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c4e:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c58:	493d      	ldr	r1, [pc, #244]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	; (8000d54 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000c60:	4013      	ands	r3, r2
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	3a01      	subs	r2, #1
 8000c66:	0212      	lsls	r2, r2, #8
 8000c68:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	3b01      	subs	r3, #1
 8000c6e:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000c70:	431a      	orrs	r2, r3
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]
    		                       SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                   ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                   ((pdiv - 1UL)<< SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000c7c:	4a34      	ldr	r2, [pc, #208]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c86:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000c88:	4a31      	ldr	r2, [pc, #196]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f023 0310 	bic.w	r3, r3, #16
 8000c92:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000c94:	4a2e      	ldr	r2, [pc, #184]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000ca0:	bf00      	nop
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d0f9      	beq.n	8000ca2 <XMC_SCU_CLOCK_StartSystemPll+0xda>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000cae:	4a28      	ldr	r2, [pc, #160]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb0:	4b27      	ldr	r3, [pc, #156]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f023 0301 	bic.w	r3, r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000cba:	bf00      	nop
 8000cbc:	4b24      	ldr	r3, [pc, #144]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f9      	bne.n	8000cbc <XMC_SCU_CLOCK_StartSystemPll+0xf4>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 60000000UL);
 8000cc8:	6978      	ldr	r0, [r7, #20]
 8000cca:	f008 fa07 	bl	80090dc <__aeabi_f2uiz>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd8:	0a9b      	lsrs	r3, r3, #10
 8000cda:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d202      	bcs.n	8000cea <XMC_SCU_CLOCK_StartSystemPll+0x122>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000ce4:	6938      	ldr	r0, [r7, #16]
 8000ce6:	f000 f83b 	bl	8000d60 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (uint32_t)((uint32_t)vco_frequency / 90000000UL);
 8000cea:	6978      	ldr	r0, [r7, #20]
 8000cec:	f008 f9f6 	bl	80090dc <__aeabi_f2uiz>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	09db      	lsrs	r3, r3, #7
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000cfa:	0adb      	lsrs	r3, r3, #11
 8000cfc:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d202      	bcs.n	8000d0c <XMC_SCU_CLOCK_StartSystemPll+0x144>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000d06:	6938      	ldr	r0, [r7, #16]
 8000d08:	f000 f82a 	bl	8000d60 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000d0e:	f000 f827 	bl	8000d60 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000d12:	e015      	b.n	8000d40 <XMC_SCU_CLOCK_StartSystemPll+0x178>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d14:	490e      	ldr	r1, [pc, #56]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d20:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000d22:	4313      	orrs	r3, r2
 8000d24:	608b      	str	r3, [r1, #8]
                       ((kdiv -1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d32:	bf00      	nop
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0f9      	beq.n	8000d34 <XMC_SCU_CLOCK_StartSystemPll+0x16c>
    {
      /* wait for prescaler mode */
    }
  }
}
 8000d40:	371c      	adds	r7, #28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd90      	pop	{r4, r7, pc}
 8000d46:	bf00      	nop
 8000d48:	4bb71b00 	.word	0x4bb71b00
 8000d4c:	165e9f81 	.word	0x165e9f81
 8000d50:	50004710 	.word	0x50004710
 8000d54:	f08080ff 	.word	0xf08080ff
 8000d58:	011e54c7 	.word	0x011e54c7
 8000d5c:	00bee32f 	.word	0x00bee32f

08000d60 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
{
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d68:	4907      	ldr	r1, [pc, #28]	; (8000d88 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d6a:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x28>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3b01      	subs	r3, #1
 8000d76:	041b      	lsls	r3, r3, #16
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
                     ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  XMC_SCU_lDelay(50U);
 8000d7c:	2032      	movs	r0, #50	; 0x32
 8000d7e:	f7ff fbe3 	bl	8000548 <XMC_SCU_lDelay>
}
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	50004710 	.word	0x50004710

08000d8c <XMC_USIC_Enable>:
 * @brief API to enable the USIC driver
 * @retval void
 *
 */
void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a0c      	ldr	r2, [pc, #48]	; (8000dc8 <XMC_USIC_Enable+0x3c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d108      	bne.n	8000dae <XMC_USIC_Enable+0x22>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8000d9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000da0:	f7ff fdc0 	bl	8000924 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8000da4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000da8:	f7ff fc4e 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8000dac:	e009      	b.n	8000dc2 <XMC_USIC_Enable+0x36>
  }
#if defined(USIC1)  
  else if (usic == USIC1)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a06      	ldr	r2, [pc, #24]	; (8000dcc <XMC_USIC_Enable+0x40>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d105      	bne.n	8000dc2 <XMC_USIC_Enable+0x36>
  {
#if(UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <XMC_USIC_Enable+0x44>)
 8000db8:	f7ff fdb4 	bl	8000924 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif	
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <XMC_USIC_Enable+0x44>)
 8000dbe:	f7ff fc43 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif  
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40030008 	.word	0x40030008
 8000dcc:	48020008 	.word	0x48020008
 8000dd0:	10000080 	.word	0x10000080

08000dd4 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));

# if (UC_FAMILY == XMC4)
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8000ddc:	2010      	movs	r0, #16
 8000dde:	f7ff fd91 	bl	8000904 <XMC_SCU_CLOCK_EnableClock>

  /* De-assert CCU4 module */
  XMC_CCU4_lDeassertReset(module);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f9b2 	bl	800114c <XMC_CCU4_lDeassertReset>
# endif

# if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
  /* Disable CCU4 clock gating */
  XMC_CCU4_lUngateClock(module);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 f9c3 	bl	8001174 <XMC_CCU4_lUngateClock>
# endif

}
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <XMC_CCU4_Init>:

}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ffe7 	bl	8000dd4 <XMC_CCU4_EnableModule>

  gctrl = module->GCTRL;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e12:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8000e14:	78fb      	ldrb	r3, [r7, #3]
 8000e16:	039b      	lsls	r3, r3, #14
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
  
  module->GCTRL = gctrl;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop

08000e2c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
		                            const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	795b      	ldrb	r3, [r3, #5]
 8000e42:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	051a      	lsls	r2, r3, #20
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	791b      	ldrb	r3, [r3, #4]
 8000e52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	461a      	mov	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	795b      	ldrb	r3, [r3, #5]
 8000e62:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	795b      	ldrb	r3, [r3, #5]
 8000e72:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	791b      	ldrb	r3, [r3, #4]
 8000e82:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	461a      	mov	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <XMC_CCU4_SLICE_CountConfig>:
  slice->TC = tc;
}

/* API to configure the slice count function */
void XMC_CCU4_SLICE_CountConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CountConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));

  /* Bind the event with the count function */
  cmc = slice->CMC;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_CNTS_Msk);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eb0:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_CNTS_Pos;
 8000eb2:	78fb      	ldrb	r3, [r7, #3]
 8000eb4:	039b      	lsls	r3, r3, #14
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	605a      	str	r2, [r3, #4]
}
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <XMC_CCU4_SLICE_GateConfig>:

/* API to configure slice gate function */
void XMC_CCU4_SLICE_GateConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GateConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the gate function */
  cmc = slice->CMC;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_GATES_Msk);
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ee4:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_GATES_Pos;
 8000ee6:	78fb      	ldrb	r3, [r7, #3]
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]

  slice->CMC = cmc;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	605a      	str	r2, [r3, #4]
}
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <XMC_CCU4_SLICE_DirectionConfig>:
  slice->CMC = cmc;
}

/* API to configure direction function */
void XMC_CCU4_SLICE_DirectionConfig(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_EVENT_t event)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	460b      	mov	r3, r1
 8000f0a:	70fb      	strb	r3, [r7, #3]
  
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_DirectionConfig:Invalid Event ID", XMC_CCU4_SLICE_CHECK_EVENT_ID(event));
  
  /* Bind the event with the direction function */
  cmc = slice->CMC;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	60fb      	str	r3, [r7, #12]
  cmc &= ~((uint32_t) CCU4_CC4_CMC_UDS_Msk);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f18:	60fb      	str	r3, [r7, #12]
  cmc |= ((uint32_t) event) << CCU4_CC4_CMC_UDS_Pos;
 8000f1a:	78fb      	ldrb	r3, [r7, #3]
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
  
  slice->CMC = cmc;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	605a      	str	r2, [r3, #4]
}
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <XMC_CCU4_SLICE_ConfigureEvent>:

/* API to configure a slice trigger event */
void XMC_CCU4_SLICE_ConfigureEvent(XMC_CCU4_SLICE_t *const slice,
		                               const XMC_CCU4_SLICE_EVENT_t event,
                                   const XMC_CCU4_SLICE_EVENT_CONFIG_t *const config)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	607a      	str	r2, [r7, #4]
 8000f40:	72fb      	strb	r3, [r7, #11]
             ((config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_HIGH) ||\
              (config->level == XMC_CCU4_SLICE_EVENT_LEVEL_SENSITIVITY_ACTIVE_LOW)));
  XMC_ASSERT("XMC_CCU4_SLICE_ConfigureEvent:Invalid Debounce Period", 
             XMC_CCU4_SLICE_CHECK_EVENT_FILTER(config->duration));
  
  ins = slice->INS;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	617b      	str	r3, [r7, #20]
  
  /* Calculate offset with reference to event */
  offset = ((uint8_t) event) - 1U;
 8000f48:	7afb      	ldrb	r3, [r7, #11]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	74fb      	strb	r3, [r7, #19]

  /* First, configure the edge sensitivity */
  pos = ((uint8_t) CCU4_CC4_INS_EV0EM_Pos) + (uint8_t)(offset << 1U);
 8000f4e:	7cfb      	ldrb	r3, [r7, #19]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3310      	adds	r3, #16
 8000f56:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_EDGE_CONFIG_MASK) << pos);
 8000f58:	7cbb      	ldrb	r3, [r7, #18]
 8000f5a:	2203      	movs	r2, #3
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->edge) << pos;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	785b      	ldrb	r3, [r3, #1]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	7cbb      	ldrb	r3, [r7, #18]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	617b      	str	r3, [r7, #20]
  
  /* Next, the level */
  pos = ((uint8_t) CCU4_CC4_INS_EV0LM_Pos) + offset;
 8000f7a:	7cfb      	ldrb	r3, [r7, #19]
 8000f7c:	3316      	adds	r3, #22
 8000f7e:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_LEVEL_CONFIG_MASK) << pos);
 8000f80:	7cbb      	ldrb	r3, [r7, #18]
 8000f82:	2201      	movs	r2, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->level) << pos;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	461a      	mov	r2, r3
 8000f96:	7cbb      	ldrb	r3, [r7, #18]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
  
  /* Next, the debounce filter */
  pos = ((uint8_t) CCU4_CC4_INS_LPF0M_Pos) + (uint8_t)(offset << 1U);
 8000fa2:	7cfb      	ldrb	r3, [r7, #19]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	3319      	adds	r3, #25
 8000faa:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_FILTER_CONFIG_MASK) << pos);
 8000fac:	7cbb      	ldrb	r3, [r7, #18]
 8000fae:	2203      	movs	r2, #3
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->duration) << pos;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	78db      	ldrb	r3, [r3, #3]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	7cbb      	ldrb	r3, [r7, #18]
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]

  /* Finally the input */
  pos = ((uint8_t) CCU4_CC4_INS_EV0IS_Pos) + (uint8_t)(offset << 2U);
 8000fce:	7cfb      	ldrb	r3, [r7, #19]
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	74bb      	strb	r3, [r7, #18]
  ins &= ~(((uint32_t) XMC_CCU4_SLICE_EVENT_INPUT_CONFIG_MASK) << pos);
 8000fd4:	7cbb      	ldrb	r3, [r7, #18]
 8000fd6:	220f      	movs	r2, #15
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	617b      	str	r3, [r7, #20]
  ins |= ((uint32_t) config->mapped_input) << pos;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	7cbb      	ldrb	r3, [r7, #18]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	617b      	str	r3, [r7, #20]

  slice->INS = ins;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	601a      	str	r2, [r3, #0]
}
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <XMC_CCU4_SLICE_SetTimerCountingMode>:
  }
}

/* Programs timer counting mode */
void XMC_CCU4_SLICE_SetTimerCountingMode(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_TIMER_COUNT_MODE_t mode)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCountingMode:Invalid Timer Count Mode", ((mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA) ||\
		                                                                          (mode == XMC_CCU4_SLICE_TIMER_COUNT_MODE_CA)));
  
  if (XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA == mode)
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <XMC_CCU4_SLICE_SetTimerCountingMode+0x20>
  {
    slice->TC &= ~((uint32_t) CCU4_CC4_TC_TCM_Msk);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	f023 0201 	bic.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	615a      	str	r2, [r3, #20]
 8001026:	e005      	b.n	8001034 <XMC_CCU4_SLICE_SetTimerCountingMode+0x2c>
  }
  else
  {
    slice->TC |= (uint32_t) CCU4_CC4_TC_TCM_Msk;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	695b      	ldr	r3, [r3, #20]
 800102c:	f043 0201 	orr.w	r2, r3, #1
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	615a      	str	r2, [r3, #20]
  }
}
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const uint8_t div_val)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));

  fpc = slice->FPC;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001058:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	021b      	lsls	r3, r3, #8
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	629a      	str	r2, [r3, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 800106a:	78fa      	ldrb	r2, [r7, #3]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop

0800107c <XMC_CCU4_EnableShadowTransfer>:

/* Transfers value from shadow timer registers to actual timer registers */
void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GCSS |= (uint32_t)shadow_transfer_msk;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	431a      	orrs	r2, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	611a      	str	r2, [r3, #16]
}
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
 80010a8:	4613      	mov	r3, r2
 80010aa:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80010b2:	60fb      	str	r3, [r7, #12]
  
  switch(event)
 80010b4:	78fb      	ldrb	r3, [r7, #3]
 80010b6:	2b09      	cmp	r3, #9
 80010b8:	d82c      	bhi.n	8001114 <XMC_CCU4_SLICE_SetInterruptNode+0x78>
 80010ba:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <XMC_CCU4_SLICE_SetInterruptNode+0x24>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	080010e9 	.word	0x080010e9
 80010c4:	080010e9 	.word	0x080010e9
 80010c8:	080010f3 	.word	0x080010f3
 80010cc:	080010f3 	.word	0x080010f3
 80010d0:	08001115 	.word	0x08001115
 80010d4:	08001115 	.word	0x08001115
 80010d8:	08001115 	.word	0x08001115
 80010dc:	08001115 	.word	0x08001115
 80010e0:	080010fd 	.word	0x080010fd
 80010e4:	08001109 	.word	0x08001109
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 80010e8:	2303      	movs	r3, #3
 80010ea:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
      break;
 80010f0:	e016      	b.n	8001120 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 80010f2:	230c      	movs	r3, #12
 80010f4:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
      break;
 80010fa:	e011      	b.n	8001120 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 80010fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001100:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8001102:	2308      	movs	r3, #8
 8001104:	617b      	str	r3, [r7, #20]
      break;
 8001106:	e00b      	b.n	8001120 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8001108:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800110c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800110e:	230a      	movs	r3, #10
 8001110:	617b      	str	r3, [r7, #20]
      break;
 8001112:	e005      	b.n	8001120 <XMC_CCU4_SLICE_SetInterruptNode+0x84>

    default:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8001114:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001118:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800111a:	230c      	movs	r3, #12
 800111c:	617b      	str	r3, [r7, #20]
      break;
 800111e:	bf00      	nop
  }
  
  srs &= ~mask; 
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  srs |= (uint32_t)sr << pos;
 800112a:	78ba      	ldrb	r2, [r7, #2]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
  slice->SRS = srs;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <XMC_CCU4_lDeassertReset>:
}

#if (UC_FAMILY == XMC4)
/* De-asserts CCU4 module from reset state */
void XMC_CCU4_lDeassertReset(XMC_CCU4_MODULE_t *const module)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
	}
  #else
	if (CCU40 == module)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a06      	ldr	r2, [pc, #24]	; (8001170 <XMC_CCU4_lDeassertReset+0x24>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d103      	bne.n	8001164 <XMC_CCU4_lDeassertReset+0x18>
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800115c:	2004      	movs	r0, #4
 800115e:	f7ff fa73 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
 8001162:	e002      	b.n	800116a <XMC_CCU4_lDeassertReset+0x1e>
	}
	else
	{
	  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8001164:	2008      	movs	r0, #8
 8001166:	f7ff fa6f 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
	}
  # endif
}
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	4000c000 	.word	0x4000c000

08001174 <XMC_CCU4_lUngateClock>:
#endif

#if ((UC_SERIES == XMC44) || (UC_SERIES == XMC42) || (UC_SERIES == XMC41) || (UC_FAMILY == XMC1))
void XMC_CCU4_lUngateClock(XMC_CCU4_MODULE_t *const module)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  else
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
  }
#elif ((UC_SERIES == XMC42) || (UC_SERIES == XMC41))
  if (CCU40 == module)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a06      	ldr	r2, [pc, #24]	; (8001198 <XMC_CCU4_lUngateClock+0x24>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d103      	bne.n	800118c <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 8001184:	2004      	movs	r0, #4
 8001186:	f7ff fbcd 	bl	8000924 <XMC_SCU_CLOCK_UngatePeripheralClock>
 800118a:	e002      	b.n	8001192 <XMC_CCU4_lUngateClock+0x1e>
  }
  else
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 800118c:	2008      	movs	r0, #8
 800118e:	f7ff fbc9 	bl	8000924 <XMC_SCU_CLOCK_UngatePeripheralClock>
  if (CCU40 == module)
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
  }
#endif
}
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	4000c000 	.word	0x4000c000

0800119c <XMC_DAC_CH_EnableOutput>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableOutput(), XMC_DAC_CH_IsOutputEnabled()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableOutput(XMC_DAC_t *const dac, const uint8_t channel)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].high |= DAC_DAC0CFG1_ANAEN_Msk;
 80011a8:	78f8      	ldrb	r0, [r7, #3]
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	00c3      	lsls	r3, r0, #3
 80011bc:	440b      	add	r3, r1
 80011be:	609a      	str	r2, [r3, #8]
}
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <XMC_DAC_CH_EnablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_DisablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SIGNEN_Msk;
 80011d8:	78f8      	ldrb	r0, [r7, #3]
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	00c3      	lsls	r3, r0, #3
 80011ec:	440b      	add	r3, r1
 80011ee:	605a      	str	r2, [r3, #4]
}
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop

080011fc <XMC_DAC_CH_DisablePatternSignOutput>:
 * XMC_DAC_CH_StartPatternMode(), XMC_DAC_CH_EnablePatternSignOutput()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_DisablePatternSignOutput(XMC_DAC_t *const dac,
                                                     const uint8_t channel)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].low &= ~DAC_DAC0CFG0_SIGNEN_Msk;
 8001208:	78f8      	ldrb	r0, [r7, #3]
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	4413      	add	r3, r2
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001218:	6879      	ldr	r1, [r7, #4]
 800121a:	00c3      	lsls	r3, r0, #3
 800121c:	440b      	add	r3, r1
 800121e:	605a      	str	r2, [r3, #4]
}
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <XMC_DAC_CH_SetRampStart>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStart(), XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStop()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStart(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t start)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	70fb      	strb	r3, [r7, #3]
 8001238:	4613      	mov	r3, r2
 800123a:	803b      	strh	r3, [r7, #0]
  dac->DACDATA[channel] = start;
 800123c:	78fb      	ldrb	r3, [r7, #3]
 800123e:	883a      	ldrh	r2, [r7, #0]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	3304      	adds	r3, #4
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	605a      	str	r2, [r3, #4]
}
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <XMC_DAC_CH_SetRampStop>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	70fb      	strb	r3, [r7, #3]
 8001260:	4613      	mov	r3, r2
 8001262:	803b      	strh	r3, [r7, #0]
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69da      	ldr	r2, [r3, #28]
 8001268:	78fb      	ldrb	r3, [r7, #3]
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4619      	mov	r1, r3
 800126e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001272:	408b      	lsls	r3, r1
 8001274:	43db      	mvns	r3, r3
 8001276:	4013      	ands	r3, r2
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
 8001278:	883a      	ldrh	r2, [r7, #0]
 800127a:	78f9      	ldrb	r1, [r7, #3]
 800127c:	0109      	lsls	r1, r1, #4
 800127e:	408a      	lsls	r2, r1
 * XMC_DAC_CH_GetRampStop(), XMC_DAC_CH_SetRampStart()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetRampStop(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t stop)
{
  dac->DAC01DATA = (dac->DAC01DATA & ~(DAC_DAC01DATA_DATA0_Msk << (channel * DAC_DAC01DATA_DATA1_Pos))) |
 8001280:	431a      	orrs	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	61da      	str	r2, [r3, #28]
               (stop << (channel * DAC_DAC01DATA_DATA1_Pos));
}
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <XMC_DAC_CH_SetTrigger>:
 * \par
 * Channel \a channel trigger source is selected by \a TRIGSEL bit-field of \a DAC0CFG1 register (for channel 0) / DAC1CFG1 register(for channel 1).
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetTrigger(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_TRIGGER_t trigger)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	460b      	mov	r3, r1
 800129a:	607a      	str	r2, [r7, #4]
 800129c:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_TRIGSEL_Msk | DAC_DAC0CFG1_TRIGMOD_Msk)) |
 800129e:	7af8      	ldrb	r0, [r7, #11]
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	4413      	add	r3, r2
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f423 22ce 	bic.w	r2, r3, #421888	; 0x67000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68f9      	ldr	r1, [r7, #12]
 80012b4:	00c3      	lsls	r3, r0, #3
 80012b6:	440b      	add	r3, r1
 80012b8:	609a      	str	r2, [r3, #8]
                              trigger;
}
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	460b      	mov	r3, r1
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 80012d2:	7af8      	ldrb	r0, [r7, #11]
 80012d4:	7afb      	ldrb	r3, [r7, #11]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	431a      	orrs	r2, r3
 80012e6:	68f9      	ldr	r1, [r7, #12]
 80012e8:	00c3      	lsls	r3, r0, #3
 80012ea:	440b      	add	r3, r1
 80012ec:	605a      	str	r2, [r3, #4]
                             mode;
}
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <XMC_DAC_Enable>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* API to enable the DAC module */
void XMC_DAC_Enable(XMC_DAC_t *const dac)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  XMC_UNUSED_ARG(dac);
  
#if(UC_SERIES != XMC45)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_DAC);
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <XMC_DAC_Enable+0x1c>)
 8001302:	f7ff fb0f 	bl	8000924 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_DAC);
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <XMC_DAC_Enable+0x1c>)
 8001308:	f7ff f99e 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
}
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	10000020 	.word	0x10000020

08001318 <XMC_DAC_CH_Init>:
  return (status);
}

/* API to initialize DAC channel configuration */
void XMC_DAC_CH_Init(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_CONFIG_t *const config)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	460b      	mov	r3, r1
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_Enable(dac);
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f7ff ffe6 	bl	80012f8 <XMC_DAC_Enable>

  dac->DACCFG[channel].low = config->cfg0;
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	68f9      	ldr	r1, [r7, #12]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	440b      	add	r3, r1
 8001338:	605a      	str	r2, [r3, #4]
  dac->DACCFG[channel].high = config->cfg1;
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6852      	ldr	r2, [r2, #4]
 8001340:	68f9      	ldr	r1, [r7, #12]
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	440b      	add	r3, r1
 8001346:	609a      	str	r2, [r3, #8]
  if (channel < XMC_DAC_NO_CHANNELS)
 8001348:	7afb      	ldrb	r3, [r7, #11]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d804      	bhi.n	8001358 <XMC_DAC_CH_Init+0x40>
  {
    XMC_DAC_CH_EnableOutput(dac, channel);
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff ff22 	bl	800119c <XMC_DAC_CH_EnableOutput>
  }
}
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <XMC_DAC_CH_SetFrequency>:

/* API to set the waveform frequency except in Ramp and Pattern generation mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetFrequency(XMC_DAC_t *const dac,
                                            const uint8_t channel,
                                            const uint32_t frequency)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	460b      	mov	r3, r1
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	72fb      	strb	r3, [r7, #11]
  uint32_t divider;
  XMC_DAC_CH_STATUS_t status;

  XMC_ASSERT("XMC_DAC_CH_SetFrequency: frequency must be greater than zero", frequency > 0U);

  divider = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / frequency;
 800136e:	f7ff f9a9 	bl	80006c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8001372:	4602      	mov	r2, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	613b      	str	r3, [r7, #16]

  if (divider < XMC_DAC_MIN_FREQ_DIVIDER)
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	2b0f      	cmp	r3, #15
 8001380:	d802      	bhi.n	8001388 <XMC_DAC_CH_SetFrequency+0x28>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2HIGH;
 8001382:	2304      	movs	r3, #4
 8001384:	75fb      	strb	r3, [r7, #23]
 8001386:	e016      	b.n	80013b6 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else if (divider >= XMC_DAC_MAX_FREQ_DIVIDER)
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800138e:	d302      	bcc.n	8001396 <XMC_DAC_CH_SetFrequency+0x36>
  {
    status = XMC_DAC_CH_STATUS_ERROR_FREQ2LOW;
 8001390:	2303      	movs	r3, #3
 8001392:	75fb      	strb	r3, [r7, #23]
 8001394:	e00f      	b.n	80013b6 <XMC_DAC_CH_SetFrequency+0x56>
  }
  else {
    dac->DACCFG[channel].low = (dac->DACCFG[channel].low & (uint32_t)(~DAC_DAC0CFG0_FREQ_Msk)) |
 8001396:	7af8      	ldrb	r0, [r7, #11]
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	4413      	add	r3, r2
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	0d1b      	lsrs	r3, r3, #20
 80013a4:	051b      	lsls	r3, r3, #20
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	431a      	orrs	r2, r3
 80013aa:	68f9      	ldr	r1, [r7, #12]
 80013ac:	00c3      	lsls	r3, r0, #3
 80013ae:	440b      	add	r3, r1
 80013b0:	605a      	str	r2, [r3, #4]
                               (divider << DAC_DAC0CFG0_FREQ_Pos);
    status = XMC_DAC_CH_STATUS_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80013b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <XMC_DAC_CH_SetRampFrequency>:

/* API to set the waveform frequency in Ramp Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_SetRampFrequency(XMC_DAC_t *const dac,
                                                const uint8_t channel,
                                                const uint32_t frequency)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	460b      	mov	r3, r1
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	72fb      	strb	r3, [r7, #11]
  uint32_t stop;
  uint32_t start;

  start = dac->DACDATA[channel];
 80013ce:	7afb      	ldrb	r3, [r7, #11]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	3304      	adds	r3, #4
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	617b      	str	r3, [r7, #20]
  stop = (dac->DAC01DATA >> (channel * DAC_DAC01DATA_DATA1_Pos)) & (uint32_t)DAC_DAC01DATA_DATA0_Msk;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	7afa      	ldrb	r2, [r7, #11]
 80013e2:	0112      	lsls	r2, r2, #4
 80013e4:	40d3      	lsrs	r3, r2
 80013e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013ea:	613b      	str	r3, [r7, #16]

  return XMC_DAC_CH_SetFrequency(dac, channel, frequency * ((stop - start) + 1U));
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	fb02 f303 	mul.w	r3, r2, r3
 80013fa:	7afa      	ldrb	r2, [r7, #11]
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	f7ff ffad 	bl	8001360 <XMC_DAC_CH_SetFrequency>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <XMC_DAC_CH_StartSingleValueMode>:

/* API to start the operation in Single Value Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartSingleValueMode(XMC_DAC_t *const dac, const uint8_t channel)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartSingleValueMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_SINGLE);
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4619      	mov	r1, r3
 8001422:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001426:	f7ff ff4d 	bl	80012c4 <XMC_DAC_CH_SetMode>

  return XMC_DAC_CH_STATUS_OK;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <XMC_DAC_CH_StartDataMode>:
/* API to start the operation in Data Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartDataMode(XMC_DAC_t *const dac,
                                             const uint8_t channel,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	460b      	mov	r3, r1
 8001442:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001444:	2300      	movs	r3, #0
 8001446:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartDataMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001448:	7afb      	ldrb	r3, [r7, #11]
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	4619      	mov	r1, r3
 800144e:	2200      	movs	r2, #0
 8001450:	f7ff ff38 	bl	80012c4 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d107      	bne.n	800146a <XMC_DAC_CH_StartDataMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 800145a:	7afb      	ldrb	r3, [r7, #11]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	4619      	mov	r1, r3
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	f7ff ff7d 	bl	8001360 <XMC_DAC_CH_SetFrequency>
 8001466:	4603      	mov	r3, r0
 8001468:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10c      	bne.n	800148a <XMC_DAC_CH_StartDataMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001470:	7afb      	ldrb	r3, [r7, #11]
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	4619      	mov	r1, r3
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	f7ff ff0a 	bl	8001290 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_DATA);
 800147c:	7afb      	ldrb	r3, [r7, #11]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	4619      	mov	r1, r3
 8001482:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001486:	f7ff ff1d 	bl	80012c4 <XMC_DAC_CH_SetMode>
  }

  return status;
 800148a:	7dfb      	ldrb	r3, [r7, #23]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <XMC_DAC_CH_StartRampMode>:
                                             const uint8_t channel,
                                             const uint16_t start,
                                             const uint16_t stop,
                                             const XMC_DAC_CH_TRIGGER_t trigger,
                                             const uint32_t frequency)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	4608      	mov	r0, r1
 800149e:	4611      	mov	r1, r2
 80014a0:	461a      	mov	r2, r3
 80014a2:	4603      	mov	r3, r0
 80014a4:	72fb      	strb	r3, [r7, #11]
 80014a6:	460b      	mov	r3, r1
 80014a8:	813b      	strh	r3, [r7, #8]
 80014aa:	4613      	mov	r3, r2
 80014ac:	80fb      	strh	r3, [r7, #6]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartRampMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80014b2:	7afb      	ldrb	r3, [r7, #11]
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	4619      	mov	r1, r3
 80014b8:	2200      	movs	r2, #0
 80014ba:	f7ff ff03 	bl	80012c4 <XMC_DAC_CH_SetMode>

  XMC_DAC_CH_SetRampStart(dac, channel, start);
 80014be:	7afa      	ldrb	r2, [r7, #11]
 80014c0:	893b      	ldrh	r3, [r7, #8]
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	4611      	mov	r1, r2
 80014c6:	461a      	mov	r2, r3
 80014c8:	f7ff feb0 	bl	800122c <XMC_DAC_CH_SetRampStart>
  XMC_DAC_CH_SetRampStop(dac, channel, stop);
 80014cc:	7afa      	ldrb	r2, [r7, #11]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	f7ff febd 	bl	8001254 <XMC_DAC_CH_SetRampStop>
  XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80014da:	7afb      	ldrb	r3, [r7, #11]
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	4619      	mov	r1, r3
 80014e0:	6a3a      	ldr	r2, [r7, #32]
 80014e2:	f7ff fed5 	bl	8001290 <XMC_DAC_CH_SetTrigger>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d107      	bne.n	80014fc <XMC_DAC_CH_StartRampMode+0x68>
  {
    status = XMC_DAC_CH_SetRampFrequency(dac, channel, frequency);
 80014ec:	7afb      	ldrb	r3, [r7, #11]
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	4619      	mov	r1, r3
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	f7ff ff64 	bl	80013c0 <XMC_DAC_CH_SetRampFrequency>
 80014f8:	4603      	mov	r3, r0
 80014fa:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80014fc:	7dfb      	ldrb	r3, [r7, #23]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d106      	bne.n	8001510 <XMC_DAC_CH_StartRampMode+0x7c>
  {
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_RAMP);
 8001502:	7afb      	ldrb	r3, [r7, #11]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	4619      	mov	r1, r3
 8001508:	f44f 02a0 	mov.w	r2, #5242880	; 0x500000
 800150c:	f7ff feda 	bl	80012c4 <XMC_DAC_CH_SetMode>
  }

  return status;
 8001510:	7dfb      	ldrb	r3, [r7, #23]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3718      	adds	r7, #24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop

0800151c <XMC_DAC_CH_StartPatternMode>:
                                                const uint8_t channel,
                                                const uint8_t *const pattern,
                                                const XMC_DAC_CH_PATTERN_SIGN_OUTPUT_t sign_output,
                                                const XMC_DAC_CH_TRIGGER_t trigger,
                                                const uint32_t frequency)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	461a      	mov	r2, r3
 8001528:	460b      	mov	r3, r1
 800152a:	72fb      	strb	r3, [r7, #11]
 800152c:	4613      	mov	r3, r2
 800152e:	72bb      	strb	r3, [r7, #10]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 8001530:	2300      	movs	r3, #0
 8001532:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartPatternMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	68f8      	ldr	r0, [r7, #12]
 8001538:	4619      	mov	r1, r3
 800153a:	2200      	movs	r2, #0
 800153c:	f7ff fec2 	bl	80012c4 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d109      	bne.n	800155a <XMC_DAC_CH_StartPatternMode+0x3e>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency * XMC_DAC_SAMPLES_PER_PERIOD);
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	015b      	lsls	r3, r3, #5
 800154a:	7afa      	ldrb	r2, [r7, #11]
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	4611      	mov	r1, r2
 8001550:	461a      	mov	r2, r3
 8001552:	f7ff ff05 	bl	8001360 <XMC_DAC_CH_SetFrequency>
 8001556:	4603      	mov	r3, r0
 8001558:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d120      	bne.n	80015a2 <XMC_DAC_CH_StartPatternMode+0x86>
  {
    XMC_DAC_CH_SetPattern(dac, channel, pattern);
 8001560:	7afb      	ldrb	r3, [r7, #11]
 8001562:	68f8      	ldr	r0, [r7, #12]
 8001564:	4619      	mov	r1, r3
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	f000 f850 	bl	800160c <XMC_DAC_CH_SetPattern>
    if (XMC_DAC_CH_PATTERN_SIGN_OUTPUT_ENABLED == sign_output)
 800156c:	7abb      	ldrb	r3, [r7, #10]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d105      	bne.n	800157e <XMC_DAC_CH_StartPatternMode+0x62>
    {
      XMC_DAC_CH_EnablePatternSignOutput(dac, channel);
 8001572:	7afb      	ldrb	r3, [r7, #11]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fe28 	bl	80011cc <XMC_DAC_CH_EnablePatternSignOutput>
 800157c:	e004      	b.n	8001588 <XMC_DAC_CH_StartPatternMode+0x6c>
    }
    else
    {
      XMC_DAC_CH_DisablePatternSignOutput(dac, channel);
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fe3a 	bl	80011fc <XMC_DAC_CH_DisablePatternSignOutput>
    }
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	4619      	mov	r1, r3
 800158e:	6a3a      	ldr	r2, [r7, #32]
 8001590:	f7ff fe7e 	bl	8001290 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_PATTERN);
 8001594:	7afb      	ldrb	r3, [r7, #11]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800159e:	f7ff fe91 	bl	80012c4 <XMC_DAC_CH_SetMode>
  }

  return status;
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <XMC_DAC_CH_StartNoiseMode>:
/* API to start the operation in Noise Mode. */
XMC_DAC_CH_STATUS_t XMC_DAC_CH_StartNoiseMode(XMC_DAC_t *const dac,
                                              const uint8_t channel,
                                              const XMC_DAC_CH_TRIGGER_t trigger,
                                              const uint32_t frequency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	607a      	str	r2, [r7, #4]
 80015b6:	603b      	str	r3, [r7, #0]
 80015b8:	460b      	mov	r3, r1
 80015ba:	72fb      	strb	r3, [r7, #11]
  XMC_DAC_CH_STATUS_t status = XMC_DAC_CH_STATUS_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	75fb      	strb	r3, [r7, #23]

  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_StartNoiseMode: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_IDLE);
 80015c0:	7afb      	ldrb	r3, [r7, #11]
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	4619      	mov	r1, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	f7ff fe7c 	bl	80012c4 <XMC_DAC_CH_SetMode>

  if (trigger == XMC_DAC_CH_TRIGGER_INTERNAL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d107      	bne.n	80015e2 <XMC_DAC_CH_StartNoiseMode+0x36>
  {
    status = XMC_DAC_CH_SetFrequency(dac, channel, frequency);
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	68f8      	ldr	r0, [r7, #12]
 80015d6:	4619      	mov	r1, r3
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	f7ff fec1 	bl	8001360 <XMC_DAC_CH_SetFrequency>
 80015de:	4603      	mov	r3, r0
 80015e0:	75fb      	strb	r3, [r7, #23]
  }

  if (status == XMC_DAC_CH_STATUS_OK)
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d10c      	bne.n	8001602 <XMC_DAC_CH_StartNoiseMode+0x56>
  {
    XMC_DAC_CH_SetTrigger(dac, channel, trigger);
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	4619      	mov	r1, r3
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	f7ff fe4e 	bl	8001290 <XMC_DAC_CH_SetTrigger>
    XMC_DAC_CH_SetMode(dac, channel, XMC_DAC_CH_MODE_NOISE);
 80015f4:	7afb      	ldrb	r3, [r7, #11]
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80015fe:	f7ff fe61 	bl	80012c4 <XMC_DAC_CH_SetMode>
  }

  return status;
 8001602:	7dfb      	ldrb	r3, [r7, #23]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <XMC_DAC_CH_SetPattern>:

/* API to write the pattern data table. */
void XMC_DAC_CH_SetPattern(XMC_DAC_t *const dac, uint8_t channel, const uint8_t *const data)
{
 800160c:	b480      	push	{r7}
 800160e:	b087      	sub	sp, #28
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	460b      	mov	r3, r1
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	72fb      	strb	r3, [r7, #11]

  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001620:	2301      	movs	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e010      	b.n	8001648 <XMC_DAC_CH_SetPattern+0x3c>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4619      	mov	r1, r3
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4613      	mov	r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	4413      	add	r3, r2
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac parameter not valid\n", XMC_DAC_IS_DAC_VALID(dac));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: channel parameter not valid\n", XMC_DAC_IS_CHANNEL_VALID(channel));
  XMC_ASSERT("XMC_DAC_CH_SetPattern: dac module not enabled\n", XMC_DAC_IsEnabled(dac));

  temp = data[0U];
  for(index = 1U; index < 6U; ++index)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b05      	cmp	r3, #5
 800164c:	d9eb      	bls.n	8001626 <XMC_DAC_CH_SetPattern+0x1a>
  {
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;
 800164e:	7afa      	ldrb	r2, [r7, #11]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3204      	adds	r2, #4
 8001654:	6939      	ldr	r1, [r7, #16]
 8001656:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

  temp = data[6U];
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3306      	adds	r3, #6
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	613b      	str	r3, [r7, #16]
  for(index = 1U; index < 6U; ++index)
 8001662:	2301      	movs	r3, #1
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e011      	b.n	800168c <XMC_DAC_CH_SetPattern+0x80>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3306      	adds	r3, #6
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	4619      	mov	r1, r3
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4313      	orrs	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
    temp |= (uint32_t)data[index] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].low = temp;

  temp = data[6U];
  for(index = 1U; index < 6U; ++index)
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d9ea      	bls.n	8001668 <XMC_DAC_CH_SetPattern+0x5c>
  {
    temp |= (uint32_t)data[index + 6U] << (index * XMC_DAC_DAC0PATL_PAT_BITSIZE);
  }
  dac->DACPAT[channel].high = temp;
 8001692:	7afb      	ldrb	r3, [r7, #11]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	3304      	adds	r3, #4
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4413      	add	r3, r2
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	605a      	str	r2, [r3, #4]
}
 80016a0:	371c      	adds	r7, #28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop

080016ac <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop

080016c8 <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop

080016e4 <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop

08001700 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 800170e:	4618      	mov	r0, r3
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop

0800171c <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop

08001738 <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 8001746:	4618      	mov	r0, r3
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f803 	bl	8001768 <XMC_DMA_Enable>
}
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
#if (UC_SERIES != XMC45)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8001770:	4806      	ldr	r0, [pc, #24]	; (800178c <XMC_DMA_Enable+0x24>)
 8001772:	f7ff f8d7 	bl	8000924 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <XMC_DMA_Enable+0x24>)
 8001778:	f7fe ff66 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
  }
#endif

  dma->DMACFGREG = 0x1U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000010 	.word	0x20000010

08001790 <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8001798:	481e      	ldr	r0, [pc, #120]	; (8001814 <XMC_DMA_IsEnabled+0x84>)
 800179a:	f7fe ff73 	bl	8000684 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bf14      	ite	ne
 80017a4:	2301      	movne	r3, #1
 80017a6:	2300      	moveq	r3, #0
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f083 0301 	eor.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	73fb      	strb	r3, [r7, #15]
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	73fb      	strb	r3, [r7, #15]
#if (UC_SERIES != XMC45)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00a      	beq.n	80017d6 <XMC_DMA_IsEnabled+0x46>
 80017c0:	4814      	ldr	r0, [pc, #80]	; (8001814 <XMC_DMA_IsEnabled+0x84>)
 80017c2:	f7ff f8cd 	bl	8000960 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <XMC_DMA_IsEnabled+0x46>
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <XMC_DMA_IsEnabled+0x48>
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	7bfb      	ldrb	r3, [r7, #15]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d00f      	beq.n	8001808 <XMC_DMA_IsEnabled+0x78>
  {
    status = status && (dma->DMACFGREG != 0U);
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <XMC_DMA_IsEnabled+0x6c>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <XMC_DMA_IsEnabled+0x6c>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <XMC_DMA_IsEnabled+0x6e>
 80017fc:	2300      	movs	r3, #0
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000010 	.word	0x20000010

08001818 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
 8001824:	4613      	mov	r3, r2
 8001826:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8001828:	480f      	ldr	r0, [pc, #60]	; (8001868 <XMC_DMA_EnableRequestLine+0x50>)
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <XMC_DMA_EnableRequestLine+0x50>)
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4619      	mov	r1, r3
 8001834:	230f      	movs	r3, #15
 8001836:	408b      	lsls	r3, r1
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 800183c:	78bb      	ldrb	r3, [r7, #2]
 800183e:	78f9      	ldrb	r1, [r7, #3]
 8001840:	0089      	lsls	r1, r1, #2
 8001842:	408b      	lsls	r3, r1
{
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8001844:	4313      	orrs	r3, r2
 8001846:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 8001848:	4907      	ldr	r1, [pc, #28]	; (8001868 <XMC_DMA_EnableRequestLine+0x50>)
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <XMC_DMA_EnableRequestLine+0x50>)
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	2001      	movs	r0, #1
 8001856:	fa00 f303 	lsl.w	r3, r0, r3
 800185a:	4313      	orrs	r3, r2
 800185c:	610b      	str	r3, [r1, #16]
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
  }
#endif
}
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	50004900 	.word	0x50004900

0800186c <XMC_DMA_CH_Enable>:
#endif
}

/* Enable DMA channel */
void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	f240 1201 	movw	r2, #257	; 0x101
 800187e:	409a      	lsls	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <XMC_DMA_CH_Disable>:

/* Disable DMA channel */
void XMC_DMA_CH_Disable(XMC_DMA_t *const dma, const uint8_t channel)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x100UL << channel);
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a2:	409a      	lsls	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
  while((dma->CHENREG & (uint32_t)(0x1UL << channel)) != 0U)
 80018aa:	bf00      	nop
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	f003 0301 	and.w	r3, r3, #1
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1f5      	bne.n	80018ac <XMC_DMA_CH_Disable+0x1c>
  {
    /* wait until channel is disabled */
  }
}
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop

080018cc <XMC_DMA_CH_IsEnabled>:

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	fa22 f303 	lsr.w	r3, r2, r3
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	bf14      	ite	ne
 80018ec:	2301      	movne	r3, #1
 80018ee:	2300      	moveq	r3, #0
 80018f0:	b2db      	uxtb	r3, r3
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop

08001900 <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	460b      	mov	r3, r1
 800190a:	607a      	str	r2, [r7, #4]
 800190c:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff3e 	bl	8001790 <XMC_DMA_IsEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 81db 	beq.w	8001cd2 <XMC_DMA_CH_Init+0x3d2>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff ffd3 	bl	80018cc <XMC_DMA_CH_IsEnabled>
 8001926:	4603      	mov	r3, r0
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	f000 81cc 	beq.w	8001ccc <XMC_DMA_CH_Init+0x3cc>
    {
      dma->CH[channel].SAR = config->src_addr;
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6852      	ldr	r2, [r2, #4]
 800193a:	68f9      	ldr	r1, [r7, #12]
 800193c:	2058      	movs	r0, #88	; 0x58
 800193e:	fb00 f303 	mul.w	r3, r0, r3
 8001942:	440b      	add	r3, r1
 8001944:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	6892      	ldr	r2, [r2, #8]
 800194c:	68f9      	ldr	r1, [r7, #12]
 800194e:	2058      	movs	r0, #88	; 0x58
 8001950:	fb00 f303 	mul.w	r3, r0, r3
 8001954:	440b      	add	r3, r1
 8001956:	3308      	adds	r3, #8
 8001958:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 800195a:	7afb      	ldrb	r3, [r7, #11]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	68d2      	ldr	r2, [r2, #12]
 8001960:	4610      	mov	r0, r2
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	2158      	movs	r1, #88	; 0x58
 8001966:	fb01 f303 	mul.w	r3, r1, r3
 800196a:	4413      	add	r3, r2
 800196c:	3310      	adds	r3, #16
 800196e:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8001970:	7afb      	ldrb	r3, [r7, #11]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	8b12      	ldrh	r2, [r2, #24]
 8001976:	4610      	mov	r0, r2
 8001978:	68fa      	ldr	r2, [r7, #12]
 800197a:	2158      	movs	r1, #88	; 0x58
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3318      	adds	r3, #24
 8001984:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	2058      	movs	r0, #88	; 0x58
 8001990:	fb00 f303 	mul.w	r3, r0, r3
 8001994:	440b      	add	r3, r1
 8001996:	3318      	adds	r3, #24
 8001998:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 800199a:	7afb      	ldrb	r3, [r7, #11]
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	7ed2      	ldrb	r2, [r2, #27]
 80019a0:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 80019a4:	68f9      	ldr	r1, [r7, #12]
 80019a6:	2058      	movs	r0, #88	; 0x58
 80019a8:	fb00 f303 	mul.w	r3, r0, r3
 80019ac:	440b      	add	r3, r1
 80019ae:	3340      	adds	r3, #64	; 0x40
 80019b0:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4aa6      	ldr	r2, [pc, #664]	; (8001c50 <XMC_DMA_CH_Init+0x350>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d116      	bne.n	80019e8 <XMC_DMA_CH_Init+0xe8>
 80019ba:	7afb      	ldrb	r3, [r7, #11]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d813      	bhi.n	80019e8 <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6912      	ldr	r2, [r2, #16]
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	2058      	movs	r0, #88	; 0x58
 80019ca:	fb00 f303 	mul.w	r3, r0, r3
 80019ce:	440b      	add	r3, r1
 80019d0:	3348      	adds	r3, #72	; 0x48
 80019d2:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6952      	ldr	r2, [r2, #20]
 80019da:	68f9      	ldr	r1, [r7, #12]
 80019dc:	2058      	movs	r0, #88	; 0x58
 80019de:	fb00 f303 	mul.w	r3, r0, r3
 80019e2:	440b      	add	r3, r1
 80019e4:	3350      	adds	r3, #80	; 0x50
 80019e6:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	8c1b      	ldrh	r3, [r3, #32]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d144      	bne.n	8001a7a <XMC_DMA_CH_Init+0x17a>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	789b      	ldrb	r3, [r3, #2]
 80019f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d006      	beq.n	8001a0c <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	789b      	ldrb	r3, [r3, #2]
 8001a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a06:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8001a08:	2b30      	cmp	r3, #48	; 0x30
 8001a0a:	d136      	bne.n	8001a7a <XMC_DMA_CH_Init+0x17a>
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	75bb      	strb	r3, [r7, #22]
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a1e:	091b      	lsrs	r3, r3, #4
 8001a20:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	7afa      	ldrb	r2, [r7, #11]
 8001a26:	68f9      	ldr	r1, [r7, #12]
 8001a28:	2058      	movs	r0, #88	; 0x58
 8001a2a:	fb00 f202 	mul.w	r2, r0, r2
 8001a2e:	440a      	add	r2, r1
 8001a30:	3240      	adds	r2, #64	; 0x40
 8001a32:	6851      	ldr	r1, [r2, #4]
 8001a34:	7dba      	ldrb	r2, [r7, #22]
 8001a36:	02d2      	lsls	r2, r2, #11
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	68f9      	ldr	r1, [r7, #12]
 8001a3c:	2058      	movs	r0, #88	; 0x58
 8001a3e:	fb00 f303 	mul.w	r3, r0, r3
 8001a42:	440b      	add	r3, r1
 8001a44:	3340      	adds	r3, #64	; 0x40
 8001a46:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8001a48:	7dba      	ldrb	r2, [r7, #22]
 8001a4a:	7d7b      	ldrb	r3, [r7, #21]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	f7ff fee1 	bl	8001818 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
 8001a58:	7afa      	ldrb	r2, [r7, #11]
 8001a5a:	68f9      	ldr	r1, [r7, #12]
 8001a5c:	2058      	movs	r0, #88	; 0x58
 8001a5e:	fb00 f202 	mul.w	r2, r0, r2
 8001a62:	440a      	add	r2, r1
 8001a64:	3240      	adds	r2, #64	; 0x40
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	2058      	movs	r0, #88	; 0x58
 8001a70:	fb00 f303 	mul.w	r3, r0, r3
 8001a74:	440b      	add	r3, r1
 8001a76:	3340      	adds	r3, #64	; 0x40
 8001a78:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	8b9b      	ldrh	r3, [r3, #28]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d142      	bne.n	8001b08 <XMC_DMA_CH_Init+0x208>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	789b      	ldrb	r3, [r3, #2]
 8001a86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d006      	beq.n	8001a9e <XMC_DMA_CH_Init+0x19e>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	789b      	ldrb	r3, [r3, #2]
 8001a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a98:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8001a9a:	2b30      	cmp	r3, #48	; 0x30
 8001a9c:	d134      	bne.n	8001b08 <XMC_DMA_CH_Init+0x208>
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	7f9b      	ldrb	r3, [r3, #30]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	75bb      	strb	r3, [r7, #22]
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7f9b      	ldrb	r3, [r3, #30]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	7afa      	ldrb	r2, [r7, #11]
 8001ab4:	68f9      	ldr	r1, [r7, #12]
 8001ab6:	2058      	movs	r0, #88	; 0x58
 8001ab8:	fb00 f202 	mul.w	r2, r0, r2
 8001abc:	440a      	add	r2, r1
 8001abe:	3240      	adds	r2, #64	; 0x40
 8001ac0:	6851      	ldr	r1, [r2, #4]
 8001ac2:	7dba      	ldrb	r2, [r7, #22]
 8001ac4:	01d2      	lsls	r2, r2, #7
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	68f9      	ldr	r1, [r7, #12]
 8001aca:	2058      	movs	r0, #88	; 0x58
 8001acc:	fb00 f303 	mul.w	r3, r0, r3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	3340      	adds	r3, #64	; 0x40
 8001ad4:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8001ad6:	7dba      	ldrb	r2, [r7, #22]
 8001ad8:	7d7b      	ldrb	r3, [r7, #21]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	4611      	mov	r1, r2
 8001ade:	461a      	mov	r2, r3
 8001ae0:	f7ff fe9a 	bl	8001818 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
 8001ae6:	7afa      	ldrb	r2, [r7, #11]
 8001ae8:	68f9      	ldr	r1, [r7, #12]
 8001aea:	2058      	movs	r0, #88	; 0x58
 8001aec:	fb00 f202 	mul.w	r2, r0, r2
 8001af0:	440a      	add	r2, r1
 8001af2:	3240      	adds	r2, #64	; 0x40
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001afa:	68f9      	ldr	r1, [r7, #12]
 8001afc:	2058      	movs	r0, #88	; 0x58
 8001afe:	fb00 f303 	mul.w	r3, r0, r3
 8001b02:	440b      	add	r3, r1
 8001b04:	3340      	adds	r3, #64	; 0x40
 8001b06:	601a      	str	r2, [r3, #0]
        }
      }
      
      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	221f      	movs	r2, #31
 8001b10:	f000 f916 	bl	8001d40 <XMC_DMA_CH_ClearEventStatus>
                                                           (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                                           (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e9b      	ldrb	r3, [r3, #26]
 8001b18:	2b08      	cmp	r3, #8
 8001b1a:	f200 80d3 	bhi.w	8001cc4 <XMC_DMA_CH_Init+0x3c4>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <XMC_DMA_CH_Init+0x224>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001cc5 	.word	0x08001cc5
 8001b28:	08001b49 	.word	0x08001b49
 8001b2c:	08001b6f 	.word	0x08001b6f
 8001b30:	08001b95 	.word	0x08001b95
 8001b34:	08001bbb 	.word	0x08001bbb
 8001b38:	08001be1 	.word	0x08001be1
 8001b3c:	08001c2b 	.word	0x08001c2b
 8001b40:	08001c55 	.word	0x08001c55
 8001b44:	08001c9f 	.word	0x08001c9f
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	7afa      	ldrb	r2, [r7, #11]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	2058      	movs	r0, #88	; 0x58
 8001b50:	fb00 f202 	mul.w	r2, r0, r2
 8001b54:	440a      	add	r2, r1
 8001b56:	3240      	adds	r2, #64	; 0x40
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b5e:	68f9      	ldr	r1, [r7, #12]
 8001b60:	2058      	movs	r0, #88	; 0x58
 8001b62:	fb00 f303 	mul.w	r3, r0, r3
 8001b66:	440b      	add	r3, r1
 8001b68:	3340      	adds	r3, #64	; 0x40
 8001b6a:	601a      	str	r2, [r3, #0]
          break;
 8001b6c:	e0ab      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8001b6e:	7afb      	ldrb	r3, [r7, #11]
 8001b70:	7afa      	ldrb	r2, [r7, #11]
 8001b72:	68f9      	ldr	r1, [r7, #12]
 8001b74:	2058      	movs	r0, #88	; 0x58
 8001b76:	fb00 f202 	mul.w	r2, r0, r2
 8001b7a:	440a      	add	r2, r1
 8001b7c:	3240      	adds	r2, #64	; 0x40
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	2058      	movs	r0, #88	; 0x58
 8001b88:	fb00 f303 	mul.w	r3, r0, r3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	3340      	adds	r3, #64	; 0x40
 8001b90:	601a      	str	r2, [r3, #0]
          break;
 8001b92:	e098      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 8001b94:	7afb      	ldrb	r3, [r7, #11]
 8001b96:	7afa      	ldrb	r2, [r7, #11]
 8001b98:	68f9      	ldr	r1, [r7, #12]
 8001b9a:	2058      	movs	r0, #88	; 0x58
 8001b9c:	fb00 f202 	mul.w	r2, r0, r2
 8001ba0:	440a      	add	r2, r1
 8001ba2:	3240      	adds	r2, #64	; 0x40
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	2058      	movs	r0, #88	; 0x58
 8001bae:	fb00 f303 	mul.w	r3, r0, r3
 8001bb2:	440b      	add	r3, r1
 8001bb4:	3340      	adds	r3, #64	; 0x40
 8001bb6:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 8001bb8:	e085      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8001bba:	7afb      	ldrb	r3, [r7, #11]
 8001bbc:	7afa      	ldrb	r2, [r7, #11]
 8001bbe:	68f9      	ldr	r1, [r7, #12]
 8001bc0:	2058      	movs	r0, #88	; 0x58
 8001bc2:	fb00 f202 	mul.w	r2, r0, r2
 8001bc6:	440a      	add	r2, r1
 8001bc8:	3218      	adds	r2, #24
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	2058      	movs	r0, #88	; 0x58
 8001bd4:	fb00 f303 	mul.w	r3, r0, r3
 8001bd8:	440b      	add	r3, r1
 8001bda:	3318      	adds	r3, #24
 8001bdc:	601a      	str	r2, [r3, #0]
          break;
 8001bde:	e072      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8001be0:	7afb      	ldrb	r3, [r7, #11]
 8001be2:	7afa      	ldrb	r2, [r7, #11]
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	2058      	movs	r0, #88	; 0x58
 8001be8:	fb00 f202 	mul.w	r2, r0, r2
 8001bec:	440a      	add	r2, r1
 8001bee:	3240      	adds	r2, #64	; 0x40
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	2058      	movs	r0, #88	; 0x58
 8001bfa:	fb00 f303 	mul.w	r3, r0, r3
 8001bfe:	440b      	add	r3, r1
 8001c00:	3340      	adds	r3, #64	; 0x40
 8001c02:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8001c04:	7afb      	ldrb	r3, [r7, #11]
 8001c06:	7afa      	ldrb	r2, [r7, #11]
 8001c08:	68f9      	ldr	r1, [r7, #12]
 8001c0a:	2058      	movs	r0, #88	; 0x58
 8001c0c:	fb00 f202 	mul.w	r2, r0, r2
 8001c10:	440a      	add	r2, r1
 8001c12:	3218      	adds	r2, #24
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001c1a:	68f9      	ldr	r1, [r7, #12]
 8001c1c:	2058      	movs	r0, #88	; 0x58
 8001c1e:	fb00 f303 	mul.w	r3, r0, r3
 8001c22:	440b      	add	r3, r1
 8001c24:	3318      	adds	r3, #24
 8001c26:	601a      	str	r2, [r3, #0]
          break;
 8001c28:	e04d      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8001c2a:	7afb      	ldrb	r3, [r7, #11]
 8001c2c:	7afa      	ldrb	r2, [r7, #11]
 8001c2e:	68f9      	ldr	r1, [r7, #12]
 8001c30:	2058      	movs	r0, #88	; 0x58
 8001c32:	fb00 f202 	mul.w	r2, r0, r2
 8001c36:	440a      	add	r2, r1
 8001c38:	3218      	adds	r2, #24
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	2058      	movs	r0, #88	; 0x58
 8001c44:	fb00 f303 	mul.w	r3, r0, r3
 8001c48:	440b      	add	r3, r1
 8001c4a:	3318      	adds	r3, #24
 8001c4c:	601a      	str	r2, [r3, #0]
          break;
 8001c4e:	e03a      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>
 8001c50:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	7afa      	ldrb	r2, [r7, #11]
 8001c58:	68f9      	ldr	r1, [r7, #12]
 8001c5a:	2058      	movs	r0, #88	; 0x58
 8001c5c:	fb00 f202 	mul.w	r2, r0, r2
 8001c60:	440a      	add	r2, r1
 8001c62:	3240      	adds	r2, #64	; 0x40
 8001c64:	6812      	ldr	r2, [r2, #0]
 8001c66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c6a:	68f9      	ldr	r1, [r7, #12]
 8001c6c:	2058      	movs	r0, #88	; 0x58
 8001c6e:	fb00 f303 	mul.w	r3, r0, r3
 8001c72:	440b      	add	r3, r1
 8001c74:	3340      	adds	r3, #64	; 0x40
 8001c76:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	7afa      	ldrb	r2, [r7, #11]
 8001c7c:	68f9      	ldr	r1, [r7, #12]
 8001c7e:	2058      	movs	r0, #88	; 0x58
 8001c80:	fb00 f202 	mul.w	r2, r0, r2
 8001c84:	440a      	add	r2, r1
 8001c86:	3218      	adds	r2, #24
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c8e:	68f9      	ldr	r1, [r7, #12]
 8001c90:	2058      	movs	r0, #88	; 0x58
 8001c92:	fb00 f303 	mul.w	r3, r0, r3
 8001c96:	440b      	add	r3, r1
 8001c98:	3318      	adds	r3, #24
 8001c9a:	601a      	str	r2, [r3, #0]
          break;
 8001c9c:	e013      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
 8001ca0:	7afa      	ldrb	r2, [r7, #11]
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	2058      	movs	r0, #88	; 0x58
 8001ca6:	fb00 f202 	mul.w	r2, r0, r2
 8001caa:	440a      	add	r2, r1
 8001cac:	3218      	adds	r2, #24
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	2058      	movs	r0, #88	; 0x58
 8001cb8:	fb00 f303 	mul.w	r3, r0, r3
 8001cbc:	440b      	add	r3, r1
 8001cbe:	3318      	adds	r3, #24
 8001cc0:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 8001cc2:	e000      	b.n	8001cc6 <XMC_DMA_CH_Init+0x3c6>

        default:
          break;
 8001cc4:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	75fb      	strb	r3, [r7, #23]
 8001cca:	e004      	b.n	8001cd6 <XMC_DMA_CH_Init+0x3d6>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	75fb      	strb	r3, [r7, #23]
 8001cd0:	e001      	b.n	8001cd6 <XMC_DMA_CH_Init+0x3d6>
    }
  }
  else 
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	e01c      	b.n	8001d2e <XMC_DMA_CH_EnableEvent+0x4e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d011      	beq.n	8001d28 <XMC_DMA_CH_EnableEvent+0x48>
    {
      dma->MASKCHEV[event_idx * 2UL] |= ((uint32_t)0x101UL << channel);
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005a      	lsls	r2, r3, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	0059      	lsls	r1, r3, #1
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	31c4      	adds	r1, #196	; 0xc4
 8001d10:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f240 1001 	movw	r0, #257	; 0x101
 8001d1a:	fa00 f303 	lsl.w	r3, r0, r3
 8001d1e:	4319      	orrs	r1, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	32c4      	adds	r2, #196	; 0xc4
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d9df      	bls.n	8001cf4 <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] |= ((uint32_t)0x101UL << channel);
    }
  }
}
 8001d34:	371c      	adds	r7, #28
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e013      	b.n	8001d7c <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	005a      	lsls	r2, r3, #1
 8001d68:	7afb      	ldrb	r3, [r7, #11]
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	4099      	lsls	r1, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	32ce      	adds	r2, #206	; 0xce
 8001d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for(event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d9e8      	bls.n	8001d54 <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CFGL &= (uint32_t)~(GPDMA0_CH_CFGL_RELOAD_SRC_Msk | GPDMA0_CH_CFGL_RELOAD_DST_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	460b      	mov	r3, r1
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    dma0_event_handlers[channel] = event_handler;
 8001d9a:	7afb      	ldrb	r3, [r7, #11]
 8001d9c:	4904      	ldr	r1, [pc, #16]	; (8001db0 <XMC_DMA_CH_SetEventHandler+0x24>)
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  else
  {
    dma1_event_handlers[channel] = event_handler;
  }
#endif
}
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	1fffcdd0 	.word	0x1fffcdd0

08001db4 <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 8001dbc:	4b7c      	ldr	r3, [pc, #496]	; (8001fb0 <XMC_DMA_IRQHandler+0x1fc>)
 8001dbe:	61bb      	str	r3, [r7, #24]
  {
    dma_event_handlers = dma1_event_handlers;
  }
#endif
  
  event = XMC_DMA_GetEventStatus(dma);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fc73 	bl	80016ac <XMC_DMA_GetEventStatus>
 8001dc6:	6178      	str	r0, [r7, #20]
  channel = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d02a      	beq.n	8001e2c <XMC_DMA_IRQHandler+0x78>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff fcae 	bl	8001738 <XMC_DMA_GetChannelsErrorStatus>
 8001ddc:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8001dde:	e021      	b.n	8001e24 <XMC_DMA_IRQHandler+0x70>
    {
      mask = (uint32_t)1U << channel;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d014      	beq.n	8001e1e <XMC_DMA_IRQHandler+0x6a>
      {
        event_handler = dma_event_handlers[channel];
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	60fb      	str	r3, [r7, #12]

        /* Call user callback to handle event */
        if (event_handler != NULL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <XMC_DMA_IRQHandler+0x58>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2010      	movs	r0, #16
 8001e0a:	4798      	blx	r3
        }

        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4619      	mov	r1, r3
 8001e14:	2210      	movs	r2, #16
 8001e16:	f7ff ff93 	bl	8001d40 <XMC_DMA_CH_ClearEventStatus>
        
        break;
 8001e1a:	bf00      	nop
 8001e1c:	e0c5      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
      }
      ++channel;
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d1da      	bne.n	8001de0 <XMC_DMA_IRQHandler+0x2c>
 8001e2a:	e0be      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d02a      	beq.n	8001e8c <XMC_DMA_IRQHandler+0xd8>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f7ff fc46 	bl	80016c8 <XMC_DMA_GetChannelsTransferCompleteStatus>
 8001e3c:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8001e3e:	e021      	b.n	8001e84 <XMC_DMA_IRQHandler+0xd0>
    {
      mask = (uint32_t)1U << channel;
 8001e40:	2201      	movs	r2, #1
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d014      	beq.n	8001e7e <XMC_DMA_IRQHandler+0xca>
      {
        event_handler = dma_event_handlers[channel];
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]

        /* Call user callback to handle event */
        if (event_handler != NULL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <XMC_DMA_IRQHandler+0xb8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2001      	movs	r0, #1
 8001e6a:	4798      	blx	r3
        }

        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE | 
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4619      	mov	r1, r3
 8001e74:	220f      	movs	r2, #15
 8001e76:	f7ff ff63 	bl	8001d40 <XMC_DMA_CH_ClearEventStatus>
                                                                      (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
																	  
        break;
 8001e7a:	bf00      	nop
 8001e7c:	e095      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
      }
      ++channel;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1da      	bne.n	8001e40 <XMC_DMA_IRQHandler+0x8c>
 8001e8a:	e08e      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d02a      	beq.n	8001eec <XMC_DMA_IRQHandler+0x138>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fc24 	bl	80016e4 <XMC_DMA_GetChannelsBlockCompleteStatus>
 8001e9c:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8001e9e:	e021      	b.n	8001ee4 <XMC_DMA_IRQHandler+0x130>
    {
      mask = (uint32_t)1U << channel;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d014      	beq.n	8001ede <XMC_DMA_IRQHandler+0x12a>
      {
        event_handler = dma_event_handlers[channel];
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4413      	add	r3, r2
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	60fb      	str	r3, [r7, #12]

        /* Call user callback to handle event */
        if (event_handler != NULL)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d002      	beq.n	8001ecc <XMC_DMA_IRQHandler+0x118>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2002      	movs	r0, #2
 8001eca:	4798      	blx	r3
        }

        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	220e      	movs	r2, #14
 8001ed6:	f7ff ff33 	bl	8001d40 <XMC_DMA_CH_ClearEventStatus>
                                                                      (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE | 
                                                                      (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));
        break;
 8001eda:	bf00      	nop
 8001edc:	e065      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
      }
      ++channel;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1da      	bne.n	8001ea0 <XMC_DMA_IRQHandler+0xec>
 8001eea:	e05e      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02a      	beq.n	8001f4c <XMC_DMA_IRQHandler+0x198>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff fc02 	bl	8001700 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 8001efc:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8001efe:	e021      	b.n	8001f44 <XMC_DMA_IRQHandler+0x190>
    {
      mask = (uint32_t)1U << channel;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d014      	beq.n	8001f3e <XMC_DMA_IRQHandler+0x18a>
      {
        event_handler = dma_event_handlers[channel];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	60fb      	str	r3, [r7, #12]

        /* Call user callback to handle event */
        if (event_handler != NULL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d002      	beq.n	8001f2c <XMC_DMA_IRQHandler+0x178>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2004      	movs	r0, #4
 8001f2a:	4798      	blx	r3
        }

        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	4619      	mov	r1, r3
 8001f34:	2204      	movs	r2, #4
 8001f36:	f7ff ff03 	bl	8001d40 <XMC_DMA_CH_ClearEventStatus>
        
        break;
 8001f3a:	bf00      	nop
 8001f3c:	e035      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
      }
      ++channel;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3301      	adds	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1da      	bne.n	8001f00 <XMC_DMA_IRQHandler+0x14c>
 8001f4a:	e02e      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d029      	beq.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fbe0 	bl	800171c <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 8001f5c:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8001f5e:	e021      	b.n	8001fa4 <XMC_DMA_IRQHandler+0x1f0>
    {
      mask = (uint32_t)1U << channel;
 8001f60:	2201      	movs	r2, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d014      	beq.n	8001f9e <XMC_DMA_IRQHandler+0x1ea>
      {
        event_handler = dma_event_handlers[channel];
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]

        /* Call user callback to handle event */
        if (event_handler != NULL)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <XMC_DMA_IRQHandler+0x1d8>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2008      	movs	r0, #8
 8001f8a:	4798      	blx	r3
        }
        
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	4619      	mov	r1, r3
 8001f94:	2208      	movs	r2, #8
 8001f96:	f7ff fed3 	bl	8001d40 <XMC_DMA_CH_ClearEventStatus>

        break;
 8001f9a:	bf00      	nop
 8001f9c:	e005      	b.n	8001faa <XMC_DMA_IRQHandler+0x1f6>
      }
      ++channel;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1da      	bne.n	8001f60 <XMC_DMA_IRQHandler+0x1ac>
  else
  {
    /* no active interrupt was found? */
  }

}
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	1fffcdd0 	.word	0x1fffcdd0

08001fb4 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4619      	mov	r1, r3
 8001fce:	2303      	movs	r3, #3
 8001fd0:	408b      	lsls	r3, r1
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001fde:	78bb      	ldrb	r3, [r7, #2]
 8001fe0:	78f9      	ldrb	r1, [r7, #3]
 8001fe2:	0049      	lsls	r1, r1, #1
 8001fe4:	408b      	lsls	r3, r1
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	675a      	str	r2, [r3, #116]	; 0x74
}
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800200a:	b2db      	uxtb	r3, r3
}
 800200c:	4618      	mov	r0, r3
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <XMC_SPI_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetStatusFlag()
 */
__STATIC_INLINE void XMC_SPI_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <XMC_SPI_CH_Init>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/
 
/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  XMC_USIC_CH_Enable(channel);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f894 	bl	8002170 <XMC_USIC_CH_Enable>
  
  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	791b      	ldrb	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <XMC_SPI_CH_Init+0x26>
  {
    /* Configure baud rate */
    (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING); 
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	4619      	mov	r1, r3
 8002058:	2202      	movs	r2, #2
 800205a:	f000 f8c3 	bl	80021e4 <XMC_USIC_CH_SetBaudrate>
  }
  
  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a0e      	ldr	r2, [pc, #56]	; (800209c <XMC_SPI_CH_Init+0x64>)
 8002062:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800206a:	639a      	str	r2, [r3, #56]	; 0x38
                  (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	791b      	ldrb	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d107      	bne.n	8002084 <XMC_SPI_CH_Init+0x4c>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                           USIC_CH_PCR_SSCMode_SELCTR_Msk |
                           (uint32_t)config->selo_inversion |
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	795b      	ldrb	r3, [r3, #5]
                  USIC_CH_TCSR_TDSSM_Msk);

  if(config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8002078:	f043 030b 	orr.w	r3, r3, #11
 800207c:	b2db      	uxtb	r3, r3
 800207e:	461a      	mov	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
                           (uint32_t)config->selo_inversion |
                           USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f04f 32ff 	mov.w	r2, #4294967295
 800208a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	88db      	ldrh	r3, [r3, #6]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	073f0102 	.word	0x073f0102

080020a0 <XMC_SPI_CH_EnableSlaveSelect>:
  return status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ae:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <XMC_SPI_CH_Transmit>:
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
}

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	019b      	lsls	r3, r3, #6
 80020e8:	b2db      	uxtb	r3, r3

/* Puts the data into FIFO if FIFO mode is enabled or else into standard buffers, by setting the proper mode. */
void XMC_SPI_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data, const XMC_SPI_CH_MODE_t mode)
{

  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);


  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020f6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d114      	bne.n	8002128 <XMC_SPI_CH_Transmit+0x5c>
  {
    while((uint32_t)XMC_USIC_CH_GetTransmitBufferStatus(channel) & (uint32_t)XMC_USIC_CH_TBUF_STATUS_BUSY)
 80020fe:	bf00      	nop
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff79 	bl	8001ff8 <XMC_USIC_CH_GetTransmitBufferStatus>
 8002106:	4603      	mov	r3, r0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	b25b      	sxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	dbf7      	blt.n	8002100 <XMC_SPI_CH_Transmit+0x34>
    {
    }
  
    XMC_SPI_CH_ClearStatusFlag(channel, (uint32_t)XMC_SPI_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002116:	f7ff ff7f 	bl	8002018 <XMC_SPI_CH_ClearStatusFlag>
  
    channel->TBUF[mode] = data;
 800211a:	787a      	ldrb	r2, [r7, #1]
 800211c:	8879      	ldrh	r1, [r7, #2]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3220      	adds	r2, #32
 8002122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002126:	e005      	b.n	8002134 <XMC_SPI_CH_Transmit+0x68>
  }
  else
  {
    channel->IN[mode] = data;
 8002128:	787a      	ldrb	r2, [r7, #1]
 800212a:	8879      	ldrh	r1, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3260      	adds	r2, #96	; 0x60
 8002130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop

0800213c <XMC_SPI_CH_GetReceivedData>:

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800214a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002156:	81fb      	strh	r3, [r7, #14]
 8002158:	e003      	b.n	8002162 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8002160:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8002162:	89fb      	ldrh	r3, [r7, #14]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_CHECK_CH(channel));
  
  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a14      	ldr	r2, [pc, #80]	; (80021cc <XMC_USIC_CH_Enable+0x5c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <XMC_USIC_CH_Enable+0x18>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <XMC_USIC_CH_Enable+0x60>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d103      	bne.n	8002190 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8002188:	4812      	ldr	r0, [pc, #72]	; (80021d4 <XMC_USIC_CH_Enable+0x64>)
 800218a:	f7fe fdff 	bl	8000d8c <XMC_USIC_Enable>
 800218e:	e00a      	b.n	80021a6 <XMC_USIC_CH_Enable+0x36>
  }
#if defined(USIC1)
  else if((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <XMC_USIC_CH_Enable+0x68>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d003      	beq.n	80021a0 <XMC_USIC_CH_Enable+0x30>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a10      	ldr	r2, [pc, #64]	; (80021dc <XMC_USIC_CH_Enable+0x6c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d102      	bne.n	80021a6 <XMC_USIC_CH_Enable+0x36>
  {
    XMC_USIC_Enable(XMC_USIC1);
 80021a0:	480f      	ldr	r0, [pc, #60]	; (80021e0 <XMC_USIC_CH_Enable+0x70>)
 80021a2:	f7fe fdf3 	bl	8000d8c <XMC_USIC_Enable>
  else
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }
  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2203      	movs	r2, #3
 80021aa:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80021ac:	bf00      	nop
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f9      	beq.n	80021ae <XMC_USIC_CH_Enable+0x3e>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f023 020f 	bic.w	r2, r3, #15
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40030000 	.word	0x40030000
 80021d0:	40030200 	.word	0x40030200
 80021d4:	40030008 	.word	0x40030008
 80021d8:	48020000 	.word	0x48020000
 80021dc:	48020200 	.word	0x48020200
 80021e0:	48020008 	.word	0x48020008

080021e4 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08e      	sub	sp, #56	; 0x38
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  
  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	2b63      	cmp	r3, #99	; 0x63
 80021f4:	d958      	bls.n	80022a8 <XMC_USIC_CH_SetBaudrate+0xc4>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d055      	beq.n	80022a8 <XMC_USIC_CH_SetBaudrate+0xc4>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80021fc:	f7fe fa62 	bl	80006c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002200:	4602      	mov	r2, r0
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002204:	fba3 2302 	umull	r2, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4a2b      	ldr	r2, [pc, #172]	; (80022bc <XMC_USIC_CH_SetBaudrate+0xd8>)
 8002210:	fba2 2303 	umull	r2, r3, r2, r3
 8002214:	095b      	lsrs	r3, r3, #5
 8002216:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1U;
 8002218:	2301      	movs	r3, #1
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8002220:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002224:	627b      	str	r3, [r7, #36]	; 0x24

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 8002226:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800222a:	633b      	str	r3, [r7, #48]	; 0x30
 800222c:	e022      	b.n	8002274 <XMC_USIC_CH_SetBaudrate+0x90>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 800222e:	6a3b      	ldr	r3, [r7, #32]
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	fb02 f203 	mul.w	r2, r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	0a9b      	lsrs	r3, r3, #10
 8002248:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002250:	617b      	str	r3, [r7, #20]

      if ((pdiv_int < 1024U) && (pdiv_frac < pdiv_frac_min))
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002258:	d209      	bcs.n	800226e <XMC_USIC_CH_SetBaudrate+0x8a>
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	429a      	cmp	r2, r3
 8002260:	d205      	bcs.n	800226e <XMC_USIC_CH_SetBaudrate+0x8a>
      {
        pdiv_frac_min = pdiv_frac;
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 800226a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for(clock_divider = 1023U; clock_divider > 0U; --clock_divider)
 800226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002270:	3b01      	subs	r3, #1
 8002272:	633b      	str	r3, [r7, #48]	; 0x30
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1d9      	bne.n	800222e <XMC_USIC_CH_SetBaudrate+0x4a>
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 800227a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	611a      	str	r2, [r3, #16]
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	695a      	ldr	r2, [r3, #20]
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <XMC_USIC_CH_SetBaudrate+0xdc>)
 800228a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	3a01      	subs	r2, #1
 8002290:	0292      	lsls	r2, r2, #10
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8002292:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8002294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002296:	3b01      	subs	r3, #1
 8002298:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800229a:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   (clock_divider_min << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
                    
    status = XMC_USIC_CH_STATUS_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80022a6:	e002      	b.n	80022ae <XMC_USIC_CH_SetBaudrate+0xca>
  }
  else 
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  return status;
 80022ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3738      	adds	r7, #56	; 0x38
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	51eb851f 	.word	0x51eb851f
 80022c0:	fc0080ef 	.word	0xfc0080ef

080022c4 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80022da:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 80022ec:	4013      	ands	r3, r2
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	0211      	lsls	r1, r2, #8
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	4311      	orrs	r1, r2
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80022f6:	79fa      	ldrb	r2, [r7, #7]
 80022f8:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80022fa:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
 80022fc:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                                                           USIC_CH_TBCTR_DPTR_Msk |
                                                           USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                   (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                   ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	f8ffc0c0 	.word	0xf8ffc0c0

08002314 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>:


void XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(XMC_USIC_CH_t *const channel,
                                            const XMC_USIC_CH_FIFO_SIZE_t size,
                                            const uint32_t limit)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	460b      	mov	r3, r1
 800231e:	607a      	str	r2, [r7, #4]
 8002320:	72fb      	strb	r3, [r7, #11]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002328:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002338:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	021b      	lsls	r3, r3, #8
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8002340:	431a      	orrs	r2, r3
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
 8002342:	7afb      	ldrb	r3, [r7, #11]
 8002344:	061b      	lsls	r3, r3, #24
                                            const uint32_t limit)
{
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  channel->RBCTR = (uint32_t)((uint32_t)(channel->RBCTR & (uint32_t)~USIC_CH_RBCTR_LIMIT_Msk) |
 8002346:	431a      	orrs	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                   (limit << USIC_CH_RBCTR_LIMIT_Pos) |
                   ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos));
}
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <XMC_USIC_CH_SetInterruptNodePointer>:


void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	460b      	mov	r3, r1
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	699a      	ldr	r2, [r3, #24]
 800236a:	7afb      	ldrb	r3, [r7, #11]
 800236c:	2107      	movs	r1, #7
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43db      	mvns	r3, r3
 8002374:	401a      	ands	r2, r3
                  (service_request << (uint32_t)interrupt_node));
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                         const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
                                         const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800237e:	431a      	orrs	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	619a      	str	r2, [r3, #24]
                  (service_request << (uint32_t)interrupt_node));
}
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	460b      	mov	r3, r1
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80023a4:	7afb      	ldrb	r3, [r7, #11]
 80023a6:	2107      	movs	r1, #7
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
                   (service_request << (uint32_t)interrupt_node));
 80023b0:	7afb      	ldrb	r3, [r7, #11]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
                                                const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
                                                const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80023b8:	431a      	orrs	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (service_request << (uint32_t)interrupt_node));
}
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop

080023cc <XMC_VADC_GROUP_ExternalMuxControlInit>:
 * \par<b>Related APIs:</b><BR>
 * None
 */
__STATIC_INLINE void XMC_VADC_GROUP_ExternalMuxControlInit(XMC_VADC_GROUP_t *const group_ptr,
                                                           const XMC_VADC_GROUP_EMUXCFG_t emux_cfg)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80023d6:	783b      	ldrb	r3, [r7, #0]
 80023d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
 80023e0:	887b      	ldrh	r3, [r7, #2]
 80023e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	041b      	lsls	r3, r3, #16
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68fa      	ldr	r2, [r7, #12]
 80023f2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	071a      	lsls	r2, r3, #28
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002406:	b2db      	uxtb	r3, r3
 8002408:	069b      	lsls	r3, r3, #26

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 800240a:	431a      	orrs	r2, r3
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	075b      	lsls	r3, r3, #29

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
 8002416:	4313      	orrs	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
 800241a:	78fb      	ldrb	r3, [r7, #3]
 800241c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	079b      	lsls	r3, r3, #30
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8d3 21f0 	ldr.w	r2, [r3, #496]	; 0x1f0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002456:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop

0800246c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop

08002490 <XMC_VADC_GLOBAL_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/*API to enable the VADC Module*/
void XMC_VADC_GLOBAL_EnableModule(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
#endif

#if (XMC_VADC_CLOCK_UNGATING_NEEDED ==  1U)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
 8002494:	2001      	movs	r0, #1
 8002496:	f7fe fa45 	bl	8000924 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif

#if(XMC_VADC_DEASSERT_RESET_NEEDED == 1U)
  /* Reset the Hardware */
  XMC_SCU_RESET_DeassertPeripheralReset((XMC_SCU_PERIPHERAL_RESET_t)XMC_SCU_PERIPHERAL_RESET_VADC );
 800249a:	2001      	movs	r0, #1
 800249c:	f7fe f8d4 	bl	8000648 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop

080024a4 <XMC_VADC_GLOBAL_Init>:
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t reg;
#endif
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();
 80024ae:	f7ff ffef 	bl	8002490 <XMC_VADC_GLOBAL_EnableModule>

  global_ptr->CLC = (uint32_t)(config->clc);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	601a      	str	r2, [r3, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop

080024f8 <XMC_VADC_GLOBAL_InputClassInit>:

/* API to Set the Global IClass registers*/
void XMC_VADC_GLOBAL_InputClassInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	4613      	mov	r3, r2
 8002506:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
 8002508:	79fb      	ldrb	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d109      	bne.n	8002522 <XMC_VADC_GLOBAL_InputClassInit+0x2a>
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	f240 731f 	movw	r3, #1823	; 0x71f
 8002514:	4013      	ands	r3, r2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	3128      	adds	r1, #40	; 0x28
 800251c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002520:	e007      	b.n	8002532 <XMC_VADC_GLOBAL_InputClassInit+0x3a>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <XMC_VADC_GLOBAL_InputClassInit+0x44>)
 8002526:	4013      	ands	r3, r2
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6839      	ldr	r1, [r7, #0]
 800252c:	3128      	adds	r1, #40	; 0x28
 800252e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
#endif
}
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	071f0000 	.word	0x071f0000

08002540 <XMC_VADC_GLOBAL_StartupCalibration>:

/* API to enable startup calibration feature */
void XMC_VADC_GLOBAL_StartupCalibration(XMC_VADC_GLOBAL_t *const global_ptr)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800254e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e016      	b.n	800258c <XMC_VADC_GLOBAL_StartupCalibration+0x4c>
  {
    group_ptr = g_xmc_vadc_group_array[i];
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	4a0e      	ldr	r2, [pc, #56]	; (800259c <XMC_VADC_GLOBAL_StartupCalibration+0x5c>)
 8002562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002566:	60bb      	str	r3, [r7, #8]
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800256e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d007      	beq.n	8002586 <XMC_VADC_GLOBAL_StartupCalibration+0x46>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
 8002576:	bf00      	nop
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f8      	bne.n	8002578 <XMC_VADC_GLOBAL_StartupCalibration+0x38>

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	3301      	adds	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d9e5      	bls.n	800255e <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
  while( ( (SHS0->SHSCFG) & (uint32_t)SHS_SHSCFG_STATE_Msk) == XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	08009780 	.word	0x08009780

080025a0 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	70fb      	strb	r3, [r7, #3]
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
 80025ac:	78fb      	ldrb	r3, [r7, #3]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d903      	bls.n	80025ba <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1a>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
 80025b2:	78fb      	ldrb	r3, [r7, #3]
 80025b4:	3b04      	subs	r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	e001      	b.n	80025be <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x1e>
  }
  else
  {
    node = (uint32_t)sr;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	60fb      	str	r3, [r7, #12]
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80025c4:	f023 020f 	bic.w	r2, r3, #15
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <XMC_VADC_GROUP_Init>:

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GROUP_Init:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  /* Program the input classes */
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2300      	movs	r3, #0
 80025fc:	f000 f828 	bl	8002650 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	2300      	movs	r3, #0
 800260a:	f000 f821 	bl	8002650 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	6899      	ldr	r1, [r3, #8]
 8002614:	2200      	movs	r2, #0
 8002616:	2301      	movs	r3, #1
 8002618:	f000 f81a 	bl	8002650 <XMC_VADC_GROUP_InputClassInit>
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	2201      	movs	r2, #1
 8002624:	2301      	movs	r3, #1
 8002626:	f000 f813 	bl	8002650 <XMC_VADC_GROUP_InputClassInit>

  group_ptr->ARBCFG = config->g_arbcfg;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	691a      	ldr	r2, [r3, #16]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  group_ptr->BOUND = config->g_bound;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	f7ff fec2 	bl	80023cc <XMC_VADC_GROUP_ExternalMuxControlInit>

}
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop

08002650 <XMC_VADC_GROUP_InputClassInit>:

/* API to program conversion characteristics */
void XMC_VADC_GROUP_InputClassInit(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CLASS_t config,
                                          const XMC_VADC_GROUP_CONV_t conv_type, const uint32_t set_num)
{
 8002650:	b480      	push	{r7}
 8002652:	b08d      	sub	sp, #52	; 0x34
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	603b      	str	r3, [r7, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	71fb      	strb	r3, [r7, #7]

  /* 
   * Obtain the mask and position macros of the parameters based on what is being requested - Standard channels vs
   * external mux channels.
   */
  if (XMC_VADC_GROUP_CONV_STD == conv_type)
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d113      	bne.n	800268e <XMC_VADC_GROUP_InputClassInit+0x3e>
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
 8002666:	2308      	movs	r3, #8
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
 800266a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
 8002674:	231f      	movs	r3, #31
 8002676:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sample_time_std_conv;
 8002678:	7a3b      	ldrb	r3, [r7, #8]
 800267a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800267e:	b2db      	uxtb	r3, r3
 8002680:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_standard;
 8002682:	7a7b      	ldrb	r3, [r7, #9]
 8002684:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	76fb      	strb	r3, [r7, #27]
 800268c:	e013      	b.n	80026b6 <XMC_VADC_GROUP_InputClassInit+0x66>
  }
  else
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CME_Pos;
 800268e:	2318      	movs	r3, #24
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CME_Msk;
 8002692:	f04f 63e0 	mov.w	r3, #117440512	; 0x7000000
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCE_Pos;
 8002698:	2310      	movs	r3, #16
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCE_Msk;
 800269c:	f44f 13f8 	mov.w	r3, #2031616	; 0x1f0000
 80026a0:	623b      	str	r3, [r7, #32]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
 80026a2:	7abb      	ldrb	r3, [r7, #10]
 80026a4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	61fb      	str	r3, [r7, #28]
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
 80026ac:	7afb      	ldrb	r3, [r7, #11]
 80026ae:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	76fb      	strb	r3, [r7, #27]
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	3228      	adds	r2, #40	; 0x28
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	617b      	str	r3, [r7, #20]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	43db      	mvns	r3, r3
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
 80026cc:	7efa      	ldrb	r2, [r7, #27]
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	617b      	str	r3, [r7, #20]
  conv_class &= ~(sample_time_mask);
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	43db      	mvns	r3, r3
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4013      	ands	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]
  group_ptr->ICLASS[set_num] = conv_class;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	3228      	adds	r2, #40	; 0x28
 80026f8:	6979      	ldr	r1, [r7, #20]
 80026fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80026fe:	3734      	adds	r7, #52	; 0x34
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <XMC_VADC_GROUP_SetPowerMode>:

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800271a:	60fb      	str	r3, [r7, #12]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0303 	bic.w	r3, r3, #3
 8002722:	60fb      	str	r3, [r7, #12]
  arbcfg |= (uint32_t)power_mode;
 8002724:	78fb      	ldrb	r3, [r7, #3]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]

  group_ptr->ARBCFG = arbcfg;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop

08002740 <XMC_VADC_GLOBAL_BackgroundInit>:
}
#endif /* XMC_VADC_GSCAN_AVAILABLE */

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]
 800274e:	e009      	b.n	8002764 <XMC_VADC_GLOBAL_BackgroundInit+0x24>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8002750:	7dfb      	ldrb	r3, [r7, #23]
 8002752:	4a39      	ldr	r2, [pc, #228]	; (8002838 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff fe87 	bl	800246c <XMC_VADC_GROUP_BackgroundDisableArbitrationSlot>
  #endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundInit:Wrong Module Pointer", (global_ptr == VADC))

  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 800275e:	7dfb      	ldrb	r3, [r7, #23]
 8002760:	3301      	adds	r3, #1
 8002762:	75fb      	strb	r3, [r7, #23]
 8002764:	7dfb      	ldrb	r3, [r7, #23]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d9f2      	bls.n	8002750 <XMC_VADC_GLOBAL_BackgroundInit+0x10>
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  if (XMC_VADC_STARTMODE_WFS != config->conv_start_mode)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <XMC_VADC_GLOBAL_BackgroundInit+0x42>
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
 800277c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002780:	613b      	str	r3, [r7, #16]
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]
 8002786:	e021      	b.n	80027cc <XMC_VADC_GLOBAL_BackgroundInit+0x8c>
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
 8002788:	7dfb      	ldrb	r3, [r7, #23]
 800278a:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800278c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002794:	60fb      	str	r3, [r7, #12]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279c:	60fb      	str	r3, [r7, #12]

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  
    /* Program the start mode */
    reg |= conv_start_mask;
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

    g_xmc_vadc_group_array[i]->ARBPR = reg;
 80027b8:	7dfb      	ldrb	r3, [r7, #23]
 80027ba:	4a1f      	ldr	r2, [pc, #124]	; (8002838 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 80027bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (XMC_VADC_STARTMODE_WFS != config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 80027c6:	7dfb      	ldrb	r3, [r7, #23]
 80027c8:	3301      	adds	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d9da      	bls.n	8002788 <XMC_VADC_GLOBAL_BackgroundInit+0x48>
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f043 0201 	orr.w	r2, r3, #1
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (config->conv_start_mode))
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d107      	bne.n	8002810 <XMC_VADC_GLOBAL_BackgroundInit+0xd0>
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002806:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002810:	2300      	movs	r3, #0
 8002812:	75fb      	strb	r3, [r7, #23]
 8002814:	e009      	b.n	800282a <XMC_VADC_GLOBAL_BackgroundInit+0xea>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	4a07      	ldr	r2, [pc, #28]	; (8002838 <XMC_VADC_GLOBAL_BackgroundInit+0xf8>)
 800281a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fe12 	bl	8002448 <XMC_VADC_GROUP_BackgroundEnableArbitrationSlot>
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
  }
#endif
  
  #if (XMC_VADC_GROUP_AVAILABLE ==1U)
  for(i=(uint8_t)0; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
 8002824:	7dfb      	ldrb	r3, [r7, #23]
 8002826:	3301      	adds	r3, #1
 8002828:	75fb      	strb	r3, [r7, #23]
 800282a:	7dfb      	ldrb	r3, [r7, #23]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d9f2      	bls.n	8002816 <XMC_VADC_GLOBAL_BackgroundInit+0xd6>
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	08009780 	.word	0x08009780

0800283c <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	; 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7b1b      	ldrb	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	617b      	str	r3, [r7, #20]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2201      	movs	r2, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4013      	ands	r3, r2
 8002864:	617b      	str	r3, [r7, #20]
  ch_assign |= (uint32_t)(prio << ch_num);
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	4313      	orrs	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
  group_ptr->CHASS = ch_assign;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7b5b      	ldrb	r3, [r3, #13]
 8002880:	b25b      	sxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	db29      	blt.n	80028da <XMC_VADC_GROUP_ChannelInit+0x9e>
  {
    mask = (uint32_t)0;
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
    if ((uint32_t)1 == ch_num)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10a      	bne.n	80028a6 <XMC_VADC_GROUP_ChannelInit+0x6a>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
 8002890:	2308      	movs	r3, #8
 8002892:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800289a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80028a4:	e00c      	b.n	80028c0 <XMC_VADC_GROUP_ChannelInit+0x84>
    }
    else if ((uint32_t)0 == ch_num)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <XMC_VADC_GROUP_ChannelInit+0x84>
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028b6:	f023 021f 	bic.w	r2, r3, #31
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	7b52      	ldrb	r2, [r2, #13]
 80028ca:	b251      	sxtb	r1, r2
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	431a      	orrs	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  group_ptr->BFL |= config->bfl;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6819      	ldr	r1, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	68ba      	ldr	r2, [r7, #8]
 8002906:	3280      	adds	r2, #128	; 0x80
 8002908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop

08002918 <XMC_VADC_GROUP_SetResultInterruptNode>:

/* API to select a service request line (NVIC Node) for result event of specified unit of result hardware */
void XMC_VADC_GROUP_SetResultInterruptNode(XMC_VADC_GROUP_t *const group_ptr,
                                           const uint32_t res_reg,
                                           const XMC_VADC_SR_t sr)
{
 8002918:	b480      	push	{r7}
 800291a:	b087      	sub	sp, #28
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	4613      	mov	r3, r2
 8002924:	71fb      	strb	r3, [r7, #7]

  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))
  XMC_ASSERT("XMC_VADC_GROUP_SetResultInterruptNode:Wrong Service Request", ((sr)  <= XMC_VADC_SR_SHARED_SR3))

  if (res_reg <= 7U)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b07      	cmp	r3, #7
 800292a:	d818      	bhi.n	800295e <XMC_VADC_GROUP_SetResultInterruptNode+0x46>
  {
    route_mask  = group_ptr->REVNP0;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8002932:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (res_reg * (uint32_t)4) ));
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	461a      	mov	r2, r3
 800293a:	230f      	movs	r3, #15
 800293c:	4093      	lsls	r3, r2
 800293e:	43db      	mvns	r3, r3
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	4013      	ands	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << (res_reg * (uint32_t)4));
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	4093      	lsls	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP0 = route_mask;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 800295c:	e01e      	b.n	800299c <XMC_VADC_GROUP_SetResultInterruptNode+0x84>
  }
  else
  {
    route_mask = group_ptr->REVNP1;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8002964:	617b      	str	r3, [r7, #20]
    route_mask &= ~((uint32_t)((uint32_t)15 << (( res_reg - (uint32_t)8) * (uint32_t)4) ));
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800296c:	3b08      	subs	r3, #8
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	461a      	mov	r2, r3
 8002972:	230f      	movs	r3, #15
 8002974:	4093      	lsls	r3, r2
 8002976:	43db      	mvns	r3, r3
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	4013      	ands	r3, r2
 800297c:	617b      	str	r3, [r7, #20]
    route_mask |= (uint32_t)((uint32_t)sr << ((res_reg - (uint32_t)8) * (uint32_t)4));
 800297e:	79fa      	ldrb	r2, [r7, #7]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002986:	3b08      	subs	r3, #8
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]
    group_ptr->REVNP1 = route_mask;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  }
}
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop

080029a8 <_init>:
 while(1){}
}

/* Init */
__attribute__((weak)) void _init(void)
{}
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	2101      	movs	r1, #1
 80029c8:	fa01 f303 	lsl.w	r3, r1, r3
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	60da      	str	r2, [r3, #12]
}
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	bf14      	ite	ne
 80029f0:	2301      	movne	r3, #1
 80029f2:	2300      	moveq	r3, #0
 80029f4:	b2db      	uxtb	r3, r3
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop

08002a04 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	60da      	str	r2, [r3, #12]
}
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	611a      	str	r2, [r3, #16]
}
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop

08002a3c <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f043 0202 	orr.w	r2, r3, #2
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	611a      	str	r2, [r3, #16]
}
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop

08002a5c <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	460b      	mov	r3, r1
 8002a66:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 8002a68:	887a      	ldrh	r2, [r7, #2]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 8002a84:	887a      	ldrh	r2, [r7, #2]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <TIMER_Init+0x30>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f8f6 	bl	8002cd8 <TIMER_CCU4_lInit>
 8002aec:	4603      	mov	r3, r0
 8002aee:	73fb      	strb	r3, [r7, #15]
      status = TIMER_CCU8_lInit(handle_ptr);
    }
#endif
  }

  return (status);
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop

08002afc <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00c      	beq.n	8002b28 <TIMER_Start+0x2c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d104      	bne.n	8002b22 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff ff71 	bl	8002a04 <XMC_CCU4_SLICE_StartTimer>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73fb      	strb	r3, [r7, #15]
 8002b26:	e001      	b.n	8002b2c <TIMER_Start+0x30>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop

08002b38 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f81d 	bl	8002b80 <TIMER_GetTimerStatus>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d011      	beq.n	8002b70 <TIMER_Stop+0x38>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <TIMER_Stop+0x38>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff ff59 	bl	8002a1c <XMC_CCU4_SLICE_StopTimer>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e001      	b.n	8002b74 <TIMER_Stop+0x3c>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop

08002b80 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff ff1e 	bl	80029dc <XMC_CCU4_SLICE_IsTimerRunning>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	73fb      	strb	r3, [r7, #15]
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
  }
#endif

  return (status);
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop

08002bb0 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	b087      	sub	sp, #28
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ffde 	bl	8002b80 <TIMER_GetTimerStatus>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f083 0301 	eor.w	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d079      	beq.n	8002cc4 <TIMER_SetTimeInterval+0x114>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d874      	bhi.n	8002cc4 <TIMER_SetTimeInterval+0x114>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d36f      	bcc.n	8002cc4 <TIMER_SetTimeInterval+0x114>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002be8:	e002      	b.n	8002bf0 <TIMER_SetTimeInterval+0x40>
      {
        lprescaler++;
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	3301      	adds	r3, #1
 8002bee:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	f1c2 020f 	rsb	r2, r2, #15
 8002bfa:	fa23 f202 	lsr.w	r2, r3, r2
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d3f2      	bcc.n	8002bea <TIMER_SetTimeInterval+0x3a>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d15a      	bne.n	8002cc4 <TIMER_SetTimeInterval+0x114>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	b2d9      	uxtb	r1, r3
 8002c24:	7913      	ldrb	r3, [r2, #4]
 8002c26:	f361 0303 	bfi	r3, r1, #0, #4
 8002c2a:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f04f 0100 	mov.w	r1, #0
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	461a      	mov	r2, r3
 8002c38:	f04f 0300 	mov.w	r3, #0
 8002c3c:	fb02 fe01 	mul.w	lr, r2, r1
 8002c40:	fb00 f603 	mul.w	r6, r0, r3
 8002c44:	4476      	add	r6, lr
 8002c46:	fba0 2302 	umull	r2, r3, r0, r2
 8002c4a:	18f1      	adds	r1, r6, r3
 8002c4c:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	69c9      	ldr	r1, [r1, #28]
 8002c52:	7909      	ldrb	r1, [r1, #4]
 8002c54:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8002c58:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002c5a:	f1c1 0620 	rsb	r6, r1, #32
 8002c5e:	f1a1 0020 	sub.w	r0, r1, #32
 8002c62:	fa22 f401 	lsr.w	r4, r2, r1
 8002c66:	fa03 f606 	lsl.w	r6, r3, r6
 8002c6a:	4334      	orrs	r4, r6
 8002c6c:	fa23 f000 	lsr.w	r0, r3, r0
 8002c70:	4304      	orrs	r4, r0
 8002c72:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8002c76:	4620      	mov	r0, r4
 8002c78:	4629      	mov	r1, r5
 8002c7a:	a315      	add	r3, pc, #84	; (adr r3, 8002cd0 <TIMER_SetTimeInterval+0x120>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f006 fa4c 	bl	800911c <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	845a      	strh	r2, [r3, #34]	; 0x22
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d905      	bls.n	8002ca2 <TIMER_SetTimeInterval+0xf2>
        {
          (handle_ptr->period_value)--;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	845a      	strh	r2, [r3, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	695a      	ldr	r2, [r3, #20]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	791b      	ldrb	r3, [r3, #4]
 8002cac:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f7fe f9c3 	bl	8001040 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f858 	bl	8002d70 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	75fb      	strb	r3, [r7, #23]
        status = TIMER_STATUS_SUCCESS;
      }
#endif
    }
  }
  return (status);
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	05f5e100 	.word	0x05f5e100
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 ff6d 	bl	8003bc4 <GLOBAL_CCU4_Init>
 8002cea:	4603      	mov	r3, r0
 8002cec:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7e1b      	ldrb	r3, [r3, #24]
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f7ff fe5a 	bl	80029b4 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	69db      	ldr	r3, [r3, #28]
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f7fe f88e 	bl	8000e2c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f82d 	bl	8002d70 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00f      	beq.n	8002d40 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	695a      	ldr	r2, [r3, #20]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f7fe f9b4 	bl	800109c <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	f7ff feaa 	bl	8002a94 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fe79 	bl	8002a3c <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff fe4f 	bl	8002a04 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7ff fe6a 	bl	8002a5c <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	2100      	movs	r1, #0
 8002d90:	f7ff fe72 	bl	8002a78 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	689a      	ldr	r2, [r3, #8]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f7fe f96b 	bl	800107c <XMC_CCU4_EnableShadowTransfer>
}
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <XMC_USIC_CH_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
*/
__STATIC_INLINE void XMC_USIC_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~event;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	401a      	ands	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop

08002df0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002e02:	b2db      	uxtb	r3, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <XMC_USIC_CH_GetReceiveBufferStatus>:
 * can be read from RBUF.
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_GetTransmitBufferStatus() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_USIC_CH_GetReceiveBufferStatus(XMC_USIC_CH_t *const channel)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return ((uint32_t) (channel->RBUFSR & (USIC_CH_RBUFSR_RDV0_Msk | USIC_CH_RBUFSR_RDV1_Msk)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  channel->FMR |= (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <XMC_USIC_CH_TXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetEvent(), XMC_USIC_CH_TXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  channel->TBCTR &= (uint32_t)~event;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop

08002ea0 <XMC_USIC_CH_TXFIFO_Flush>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  channel->TRBSCR |= (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8002eae:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop

08002ec4 <XMC_USIC_CH_TXFIFO_IsFull>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002ed2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <XMC_USIC_CH_TXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <XMC_USIC_CH_RXFIFO_DisableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_GetEvent(), XMC_USIC_CH_RXFIFO_EnableEvent() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_RXFIFO_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  channel->RBCTR &= (uint32_t)~event;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	401a      	ands	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop

08002f3c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <XMC_SPI_CH_Receive>:
 * 
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_GetReceivedDaa()
 */
__STATIC_INLINE void XMC_SPI_CH_Receive(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	70fb      	strb	r3, [r7, #3]
  /* Transmit dummy data */
  XMC_SPI_CH_Transmit(channel, (uint16_t)0xffffU, (XMC_SPI_CH_MODE_t)((uint16_t)mode & 0xfffbU));
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f023 0304 	bic.w	r3, r3, #4
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f7e:	461a      	mov	r2, r3
 8002f80:	f7ff f8a4 	bl	80020cc <XMC_SPI_CH_Transmit>
}
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop

08002f8c <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Initialize the CPU APP */
  status = (SPI_MASTER_STATUS_t)SPI_MASTER_CPU_CTRL_Init(CPU_CTRL_HANDLE);
 8002f94:	4809      	ldr	r0, [pc, #36]	; (8002fbc <SPI_MASTER_Init+0x30>)
 8002f96:	f001 f943 	bl	8004220 <CPU_CTRL_XMC4_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	73fb      	strb	r3, [r7, #15]

  if (SPI_MASTER_STATUS_SUCCESS == status)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <SPI_MASTER_Init+0x24>
  {
    /* Configure the port registers and data input registers of SPI channel */
    handle->config->fptr_spi_master_config();
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4798      	blx	r3

    status = SPI_MASTER_STATUS_SUCCESS;
 8002fac:	2300      	movs	r3, #0
 8002fae:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	1fffcc4c 	.word	0x1fffcc4c

08002fc0 <SPI_MASTER_Transmit>:

/*
 * Transmit the number of data words specified.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
                               of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  XMC_ASSERT("SPI_MASTER_Transmit:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_BUSY;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d04c      	beq.n	8003076 <SPI_MASTER_Transmit+0xb6>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d049      	beq.n	8003076 <SPI_MASTER_Transmit+0xb6>
  {
    /*Check data pointer is valid or not*/
    if (false == runtime_handle->tx_busy)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	7f9b      	ldrb	r3, [r3, #30]
 8002fe6:	f083 0301 	eor.w	r3, r3, #1
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d041      	beq.n	8003074 <SPI_MASTER_Transmit+0xb4>
    {
	  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d902      	bls.n	8003000 <SPI_MASTER_Transmit+0x40>
	  {
	    bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	e001      	b.n	8003004 <SPI_MASTER_Transmit+0x44>
	  }
	  else
	  {
	    bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* Word length is 8-bits */
 8003000:	2301      	movs	r3, #1
 8003002:	61bb      	str	r3, [r7, #24]
	  }
      /* Obtain the address of data, size of data */
      runtime_handle->tx_data = dataptr;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	615a      	str	r2, [r3, #20]
      runtime_handle->tx_data_count = (uint32_t)count << (bytes_per_word - 1U);
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	3b01      	subs	r3, #1
 800300e:	461a      	mov	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	fa03 f202 	lsl.w	r2, r3, r2
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	601a      	str	r2, [r3, #0]
      /* Initialize to first index and set the busy flag */
      runtime_handle->tx_data_index = 0U;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
      runtime_handle->tx_busy = true;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2201      	movs	r2, #1
 8003024:	779a      	strb	r2, [r3, #30]

      /* Enable the transmit buffer event */
      if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <SPI_MASTER_Transmit+0x8c>
      {
        /* Flush the Transmit FIFO */
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff ff32 	bl	8002ea0 <XMC_USIC_CH_TXFIFO_Flush>
        XMC_USIC_CH_TXFIFO_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003046:	f7ff ff05 	bl	8002e54 <XMC_USIC_CH_TXFIFO_EnableEvent>
 800304a:	e006      	b.n	800305a <SPI_MASTER_Transmit+0x9a>
      }
      else
      {
        XMC_USIC_CH_EnableEvent(handle->channel,(uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4618      	mov	r0, r3
 8003052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003056:	f7ff fea9 	bl	8002dac <XMC_USIC_CH_EnableEvent>
      }

      status = SPI_MASTER_STATUS_SUCCESS;
 800305a:	2300      	movs	r3, #0
 800305c:	77fb      	strb	r3, [r7, #31]

      /* Trigger the transmit buffer interrupt */
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800306a:	4610      	mov	r0, r2
 800306c:	4619      	mov	r1, r3
 800306e:	f7ff fedd 	bl	8002e2c <XMC_USIC_CH_TriggerServiceRequest>

  /* Check whether SPI channel is free or not */
  if ((dataptr != NULL) && (count > 0U))
  {
    /*Check data pointer is valid or not*/
    if (false == runtime_handle->tx_busy)
 8003072:	e002      	b.n	800307a <SPI_MASTER_Transmit+0xba>
 8003074:	e001      	b.n	800307a <SPI_MASTER_Transmit+0xba>
      XMC_USIC_CH_TriggerServiceRequest(handle->channel, (uint32_t)handle->config->tx_sr);
    }
  }
  else
  {
    status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8003076:	2303      	movs	r3, #3
 8003078:	77fb      	strb	r3, [r7, #31]
  }
  return status;
 800307a:	7ffb      	ldrb	r3, [r7, #31]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <SPI_MASTER_lFIFORead>:
***********************************************************************************************************************/
/*
 * Read the data from FIFO until it becomes empty.
 */
void SPI_MASTER_lFIFORead(const SPI_MASTER_t * const handle, uint32_t bytes_per_word)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  uint16_t data;

  runtime_handle = handle->runtime;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60fb      	str	r3, [r7, #12]
  data = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	817b      	strh	r3, [r7, #10]

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8003098:	e03d      	b.n	8003116 <SPI_MASTER_lFIFORead+0x92>
  {
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	691a      	ldr	r2, [r3, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d218      	bcs.n	80030d8 <SPI_MASTER_lFIFORead+0x54>
    {
      data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f846 	bl	800213c <XMC_SPI_CH_GetReceivedData>
 80030b0:	4603      	mov	r3, r0
 80030b2:	817b      	strh	r3, [r7, #10]
	  memcpy((void *)&runtime_handle->rx_data[runtime_handle->rx_data_index], (void *)&data, bytes_per_word);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	441a      	add	r2, r3
 80030be:	f107 030a 	add.w	r3, r7, #10
 80030c2:	4610      	mov	r0, r2
 80030c4:	4619      	mov	r1, r3
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	f006 fb20 	bl	800970c <memcpy>
	  (runtime_handle->rx_data_index)+= bytes_per_word;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	611a      	str	r2, [r3, #16]
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691a      	ldr	r2, [r3, #16]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d118      	bne.n	8003116 <SPI_MASTER_lFIFORead+0x92>
    {
      /*Reception complete*/
      runtime_handle->rx_busy = false;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2020 	strb.w	r2, [r3, #32]
      /*Disable both standard receive and alternative receive FIFO events*/
      XMC_USIC_CH_RXFIFO_DisableEvent(handle->channel,(uint32_t)((uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_STANDARD | \
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80030fc:	f7ff ff0a 	bl	8002f14 <XMC_USIC_CH_RXFIFO_DisableEvent>
                                                                 (uint32_t)XMC_USIC_CH_RXFIFO_EVENT_CONF_ALTERNATE));
      if (handle->config->rx_cbhandler != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <SPI_MASTER_lFIFORead+0x90>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003110:	4798      	blx	r3
      }
      break;
 8003112:	e00b      	b.n	800312c <SPI_MASTER_lFIFORead+0xa8>
 8003114:	e00a      	b.n	800312c <SPI_MASTER_lFIFORead+0xa8>

  runtime_handle = handle->runtime;
  data = 0U;

  /* When Receive FIFO is enabled*/
  while (XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel) == false)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff0e 	bl	8002f3c <XMC_USIC_CH_RXFIFO_IsEmpty>
 8003120:	4603      	mov	r3, r0
 8003122:	f083 0301 	eor.w	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1b6      	bne.n	800309a <SPI_MASTER_lFIFORead+0x16>
        handle->config->rx_cbhandler();
      }
      break;
    }
  }
}
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop

08003134 <SPI_MASTER_lTransmitHandler>:
/*
 * Transmit interrupt handler for the app.
 * This is a common interrupt handling function called for different instances of the app.
 */
void SPI_MASTER_lTransmitHandler(const SPI_MASTER_t * const handle)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word; /* This is to support the word length 8 and 16. Specify the number
                              of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle = handle->runtime;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	613b      	str	r3, [r7, #16]

  if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	f080 8089 	bcs.w	8003262 <SPI_MASTER_lTransmitHandler+0x12e>
  {
	if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b08      	cmp	r3, #8
 8003158:	d902      	bls.n	8003160 <SPI_MASTER_lTransmitHandler+0x2c>
	{
	  bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 800315a:	2302      	movs	r3, #2
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e001      	b.n	8003164 <SPI_MASTER_lTransmitHandler+0x30>
	}
	else
	{
	  bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* Word length is 8-bits */
 8003160:	2301      	movs	r3, #1
 8003162:	617b      	str	r3, [r7, #20]
	}
    data = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	81fb      	strh	r3, [r7, #14]
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003170:	2b00      	cmp	r3, #0
 8003172:	d045      	beq.n	8003200 <SPI_MASTER_lTransmitHandler+0xcc>
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 8003174:	e038      	b.n	80031e8 <SPI_MASTER_lTransmitHandler+0xb4>
      {
        if (runtime_handle->tx_data_index < runtime_handle->tx_data_count)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d230      	bcs.n	80031e4 <SPI_MASTER_lTransmitHandler+0xb0>
        {
          /*Load the FIFO byte by byte till either FIFO is full or all data is loaded*/
          if (runtime_handle->tx_data_dummy == true)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00e      	beq.n	80031aa <SPI_MASTER_lTransmitHandler+0x76>
          {
            XMC_SPI_CH_Receive(handle->channel, runtime_handle->spi_master_mode);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	7f1b      	ldrb	r3, [r3, #28]
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	f7ff fee4 	bl	8002f64 <XMC_SPI_CH_Receive>
            (runtime_handle->tx_data_index)+= bytes_per_word;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	441a      	add	r2, r3
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	e01e      	b.n	80031e8 <SPI_MASTER_lTransmitHandler+0xb4>
          }
          else
          {
		    memcpy((void *)&data, (void *)&runtime_handle->tx_data[runtime_handle->tx_data_index], bytes_per_word);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	f107 020e 	add.w	r2, r7, #14
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	f006 faa5 	bl	800970c <memcpy>
			(runtime_handle->tx_data_index)+= bytes_per_word;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	441a      	add	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	605a      	str	r2, [r3, #4]
			XMC_SPI_CH_Transmit(handle->channel, data, runtime_handle->spi_master_mode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	89fa      	ldrh	r2, [r7, #14]
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	7f1b      	ldrb	r3, [r3, #28]
 80031d8:	4608      	mov	r0, r1
 80031da:	4611      	mov	r1, r2
 80031dc:	461a      	mov	r2, r3
 80031de:	f7fe ff75 	bl	80020cc <XMC_SPI_CH_Transmit>
 80031e2:	e001      	b.n	80031e8 <SPI_MASTER_lTransmitHandler+0xb4>
          }
        }
        else
        {
          break;
 80031e4:	bf00      	nop
 80031e6:	e078      	b.n	80032da <SPI_MASTER_lTransmitHandler+0x1a6>
    data = 0U;
    /*When Transmit FIFO is enabled*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
    {
      /*Fill the transmit FIFO */
      while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == false)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fe69 	bl	8002ec4 <XMC_USIC_CH_TXFIFO_IsFull>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f083 0301 	eor.w	r3, r3, #1
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1bb      	bne.n	8003176 <SPI_MASTER_lTransmitHandler+0x42>
 80031fe:	e06c      	b.n	80032da <SPI_MASTER_lTransmitHandler+0x1a6>
        }
      }
    }
    else/*When Transmit FIFO is disabled*/
    {
	  if (runtime_handle->tx_data_dummy == true)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00e      	beq.n	8003228 <SPI_MASTER_lTransmitHandler+0xf4>
	  {
		XMC_SPI_CH_Receive(handle->channel, runtime_handle->spi_master_mode);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	7f1b      	ldrb	r3, [r3, #28]
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f7ff fea5 	bl	8002f64 <XMC_SPI_CH_Receive>
		(runtime_handle->tx_data_index)+= bytes_per_word;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	441a      	add	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	605a      	str	r2, [r3, #4]
 8003226:	e058      	b.n	80032da <SPI_MASTER_lTransmitHandler+0x1a6>
	  }
	  else
	  {
		memcpy((void *)&data, (void *)&runtime_handle->tx_data[runtime_handle->tx_data_index], bytes_per_word);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	4413      	add	r3, r2
 8003232:	f107 020e 	add.w	r2, r7, #14
 8003236:	4610      	mov	r0, r2
 8003238:	4619      	mov	r1, r3
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	f006 fa66 	bl	800970c <memcpy>
		(runtime_handle->tx_data_index)+=bytes_per_word;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	441a      	add	r2, r3
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	605a      	str	r2, [r3, #4]
		XMC_SPI_CH_Transmit(handle->channel, data, runtime_handle->spi_master_mode);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	89fa      	ldrh	r2, [r7, #14]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	7f1b      	ldrb	r3, [r3, #28]
 8003256:	4608      	mov	r0, r1
 8003258:	4611      	mov	r1, r2
 800325a:	461a      	mov	r2, r3
 800325c:	f7fe ff36 	bl	80020cc <XMC_SPI_CH_Transmit>
 8003260:	e03b      	b.n	80032da <SPI_MASTER_lTransmitHandler+0x1a6>
	  }
    }
  }
  else
  {
   if (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == true)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff fe40 	bl	8002eec <XMC_USIC_CH_TXFIFO_IsEmpty>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d033      	beq.n	80032da <SPI_MASTER_lTransmitHandler+0x1a6>
   {
    /*Clear the flag*/
    if ((uint32_t)handle->config->tx_fifo_size > 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <SPI_MASTER_lTransmitHandler+0x15a>
    {
      /*Clear the transmit FIFO event*/
      XMC_USIC_CH_TXFIFO_DisableEvent(handle->channel,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003288:	f7ff fdf6 	bl	8002e78 <XMC_USIC_CH_TXFIFO_DisableEvent>
 800328c:	e006      	b.n	800329c <SPI_MASTER_lTransmitHandler+0x168>
    }
    else
    {
      /*Clear the standard transmit event*/
      XMC_USIC_CH_DisableEvent(handle->channel, (uint32_t)XMC_USIC_CH_EVENT_TRANSMIT_BUFFER);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003298:	f7ff fd98 	bl	8002dcc <XMC_USIC_CH_DisableEvent>
    }

    /*Wait for the transmit buffer to be free to ensure that all data is transmitted*/
    while (XMC_USIC_CH_GetTransmitBufferStatus(handle->channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800329c:	bf00      	nop
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fda4 	bl	8002df0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b80      	cmp	r3, #128	; 0x80
 80032ac:	d0f7      	beq.n	800329e <SPI_MASTER_lTransmitHandler+0x16a>
    {

    }

    /*All data is transmitted*/
    runtime_handle->tx_busy = false;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2200      	movs	r2, #0
 80032b2:	779a      	strb	r2, [r3, #30]
    runtime_handle->tx_data = NULL;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]

    if ((handle->config->tx_cbhandler != NULL) && (runtime_handle->rx_busy == false))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <SPI_MASTER_lTransmitHandler+0x1a6>
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	7fdb      	ldrb	r3, [r3, #31]
 80032c8:	f083 0301 	eor.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <SPI_MASTER_lTransmitHandler+0x1a6>
    {
      /*Execute the callback function provided in the SPI_MASTER app UI*/
      handle->config->tx_cbhandler();
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4798      	blx	r3
    }
   }
  }
}
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <SPI_MASTER_lReceiveHandler>:
/*
 * Receive interrupt handler for the app.
 * This is a common interrupt handling function for different instances of the SPI_MASTER app.
 */
void SPI_MASTER_lReceiveHandler(const SPI_MASTER_t * const handle)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint16_t data; /* Data to be loaded into the TBUF */
  uint32_t bytes_per_word; /* This is to support the word length 8 and 16. Specify the number
                               of bytes for the configured word length */
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	613b      	str	r3, [r7, #16]
  data = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	81fb      	strh	r3, [r7, #14]

  if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d902      	bls.n	8003302 <SPI_MASTER_lReceiveHandler+0x22>
  {
	  bytes_per_word = SPI_MASTER_2_BYTES_PER_WORD; /* Word length is 16-bits */
 80032fc:	2302      	movs	r3, #2
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e001      	b.n	8003306 <SPI_MASTER_lReceiveHandler+0x26>
  }
  else
  {
	  bytes_per_word = SPI_MASTER_1_BYTE_PER_WORD; /* Word length is 8-bits */
 8003302:	2301      	movs	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
  }

  if ((uint32_t)handle->config->rx_fifo_size > 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800330e:	2b00      	cmp	r3, #0
 8003310:	d013      	beq.n	800333a <SPI_MASTER_lReceiveHandler+0x5a>
  {
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	6979      	ldr	r1, [r7, #20]
 8003316:	f7ff feb5 	bl	8003084 <SPI_MASTER_lFIFORead>
    /*Set the trigger limit if data still to be received*/
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	429a      	cmp	r2, r3
 8003324:	d27b      	bcs.n	800341e <SPI_MASTER_lReceiveHandler+0x13e>
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, \
                               (uint32_t)(runtime_handle->rx_data_count - runtime_handle->rx_data_index));
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	691b      	ldr	r3, [r3, #16]
    /* read the FIFO */
    SPI_MASTER_lFIFORead(handle, bytes_per_word);
    /*Set the trigger limit if data still to be received*/
    if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
    {
      SPI_MASTER_lReconfigureRxFIFO(handle, \
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	4619      	mov	r1, r3
 8003334:	f000 f876 	bl	8003424 <SPI_MASTER_lReconfigureRxFIFO>
 8003338:	e071      	b.n	800341e <SPI_MASTER_lReceiveHandler+0x13e>
    }
  }
  else
  {
    /* When RxFIFO is disabled */
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID0) != 0U )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fd66 	bl	8002e10 <XMC_USIC_CH_GetReceiveBufferStatus>
 8003344:	4603      	mov	r3, r0
 8003346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01e      	beq.n	800338c <SPI_MASTER_lReceiveHandler+0xac>
    {
      if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	429a      	cmp	r2, r3
 8003358:	d218      	bcs.n	800338c <SPI_MASTER_lReceiveHandler+0xac>
      {
    	data = XMC_SPI_CH_GetReceivedData(handle->channel);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe feec 	bl	800213c <XMC_SPI_CH_GetReceivedData>
 8003364:	4603      	mov	r3, r0
 8003366:	81fb      	strh	r3, [r7, #14]
		memcpy((void *)&runtime_handle->rx_data[runtime_handle->rx_data_index], (void *)&data, bytes_per_word);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	699a      	ldr	r2, [r3, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	441a      	add	r2, r3
 8003372:	f107 030e 	add.w	r3, r7, #14
 8003376:	4610      	mov	r0, r2
 8003378:	4619      	mov	r1, r3
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	f006 f9c6 	bl	800970c <memcpy>
		(runtime_handle->rx_data_index)+= bytes_per_word;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	441a      	add	r2, r3
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	611a      	str	r2, [r3, #16]

      }
    }
    if ((XMC_USIC_CH_GetReceiveBufferStatus(handle->channel) & (uint32_t)XMC_USIC_CH_RBUF_STATUS_DATA_VALID1) != 0U)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fd3d 	bl	8002e10 <XMC_USIC_CH_GetReceiveBufferStatus>
 8003396:	4603      	mov	r3, r0
 8003398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d01e      	beq.n	80033de <SPI_MASTER_lReceiveHandler+0xfe>
    {
	  if (runtime_handle->rx_data_index < runtime_handle->rx_data_count)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	691a      	ldr	r2, [r3, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d218      	bcs.n	80033de <SPI_MASTER_lReceiveHandler+0xfe>
	  {
	    data = XMC_SPI_CH_GetReceivedData(handle->channel);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fec3 	bl	800213c <XMC_SPI_CH_GetReceivedData>
 80033b6:	4603      	mov	r3, r0
 80033b8:	81fb      	strh	r3, [r7, #14]
		memcpy((void *)&runtime_handle->rx_data[runtime_handle->rx_data_index], (void *)&data, bytes_per_word);
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	441a      	add	r2, r3
 80033c4:	f107 030e 	add.w	r3, r7, #14
 80033c8:	4610      	mov	r0, r2
 80033ca:	4619      	mov	r1, r3
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	f006 f99d 	bl	800970c <memcpy>
		(runtime_handle->rx_data_index)+= bytes_per_word;
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	441a      	add	r2, r3
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	611a      	str	r2, [r3, #16]
      }
    }

    if (runtime_handle->rx_data_index == runtime_handle->rx_data_count)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d119      	bne.n	800341e <SPI_MASTER_lReceiveHandler+0x13e>
    {
      /* Disable both standard receive and alternative receive FIFO events */
      XMC_USIC_CH_DisableEvent(handle->channel,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80033f4:	f7ff fcea 	bl	8002dcc <XMC_USIC_CH_DisableEvent>
          (uint32_t)((uint32_t)XMC_USIC_CH_EVENT_ALTERNATIVE_RECEIVE | (uint32_t)XMC_USIC_CH_EVENT_STANDARD_RECEIVE));

      /* Reception complete */
      runtime_handle->rx_busy = false;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2200      	movs	r2, #0
 80033fc:	77da      	strb	r2, [r3, #31]
      runtime_handle->tx_data_dummy = false;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2020 	strb.w	r2, [r3, #32]
      runtime_handle->rx_data = NULL;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	2200      	movs	r2, #0
 800340a:	619a      	str	r2, [r3, #24]

      if (handle->config->rx_cbhandler != NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <SPI_MASTER_lReceiveHandler+0x13e>
      {
        /* Execute the 'End of reception' callback function */
        handle->config->rx_cbhandler();
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341c:	4798      	blx	r3
      }
    }
  }
}
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <SPI_MASTER_lReconfigureRxFIFO>:

/*
 * This function configures the FIFO settings
 */
static void SPI_MASTER_lReconfigureRxFIFO(const SPI_MASTER_t * const handle, uint32_t data_size)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t fifo_size;
  uint32_t ret_limit_val;

  if (((uint32_t)handle->config->rx_fifo_size > 0U) && (data_size > 0U))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003436:	2b00      	cmp	r3, #0
 8003438:	d028      	beq.n	800348c <SPI_MASTER_lReconfigureRxFIFO+0x68>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d025      	beq.n	800348c <SPI_MASTER_lReconfigureRxFIFO+0x68>
  {
    fifo_size = (uint32_t)0x01 << handle->config->rx_fifo_size;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003448:	461a      	mov	r2, r3
 800344a:	2301      	movs	r3, #1
 800344c:	4093      	lsls	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]

    if (handle->runtime->word_length > SPI_MASTER_WORD_LENGTH_8_BIT)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b08      	cmp	r3, #8
 8003458:	d902      	bls.n	8003460 <SPI_MASTER_lReconfigureRxFIFO+0x3c>
    {
    	/* Data size is divided by 2, to change the trigger limit according the word length */
    	data_size = (uint32_t)data_size >> 1U;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	603b      	str	r3, [r7, #0]
    }

    /*If data size is more than FIFO size, configure the limit to the FIFO size*/
    if (data_size < fifo_size)
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	d203      	bcs.n	8003470 <SPI_MASTER_lReconfigureRxFIFO+0x4c>
    {
      ret_limit_val = data_size - 1U;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	3b01      	subs	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	e002      	b.n	8003476 <SPI_MASTER_lReconfigureRxFIFO+0x52>
    }
    else
    {
      ret_limit_val = fifo_size - 1U;
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	3b01      	subs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
    }

    /*Set the limit value*/
    XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, ret_limit_val);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	f7fe ff44 	bl	8002314 <XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit>
  }
}
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop

08003494 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003494:	b480      	push	{r7}
 8003496:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8003498:	4b04      	ldr	r3, [pc, #16]	; (80034ac <NVIC_GetPriorityGrouping+0x18>)
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034a0:	0a1b      	lsrs	r3, r3, #8
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000ed00 	.word	0xe000ed00

080034b0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	4603      	mov	r3, r0
 80034b8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80034ba:	4908      	ldr	r1, [pc, #32]	; (80034dc <NVIC_EnableIRQ+0x2c>)
 80034bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	79fa      	ldrb	r2, [r7, #7]
 80034c4:	f002 021f 	and.w	r2, r2, #31
 80034c8:	2001      	movs	r0, #1
 80034ca:	fa00 f202 	lsl.w	r2, r0, r2
 80034ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	e000e100 	.word	0xe000e100

080034e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	4603      	mov	r3, r0
 80034e8:	6039      	str	r1, [r7, #0]
 80034ea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da0b      	bge.n	800350c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80034f4:	490d      	ldr	r1, [pc, #52]	; (800352c <NVIC_SetPriority+0x4c>)
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	3b04      	subs	r3, #4
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	0092      	lsls	r2, r2, #2
 8003504:	b2d2      	uxtb	r2, r2
 8003506:	440b      	add	r3, r1
 8003508:	761a      	strb	r2, [r3, #24]
 800350a:	e009      	b.n	8003520 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800350c:	4908      	ldr	r1, [pc, #32]	; (8003530 <NVIC_SetPriority+0x50>)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	0092      	lsls	r2, r2, #2
 8003518:	b2d2      	uxtb	r2, r2
 800351a:	440b      	add	r3, r1
 800351c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	e000ed00 	.word	0xe000ed00
 8003530:	e000e100 	.word	0xe000e100

08003534 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f1c3 0307 	rsb	r3, r3, #7
 800354e:	2b06      	cmp	r3, #6
 8003550:	bf28      	it	cs
 8003552:	2306      	movcs	r3, #6
 8003554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3306      	adds	r3, #6
 800355a:	2b06      	cmp	r3, #6
 800355c:	d902      	bls.n	8003564 <NVIC_EncodePriority+0x30>
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3b01      	subs	r3, #1
 8003562:	e000      	b.n	8003566 <NVIC_EncodePriority+0x32>
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2201      	movs	r2, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	3b01      	subs	r3, #1
 8003572:	461a      	mov	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	401a      	ands	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f303 	lsl.w	r3, r1, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	4619      	mov	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 800358c:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 800358e:	4618      	mov	r0, r3
 8003590:	3724      	adds	r7, #36	; 0x24
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop

0800359c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	460b      	mov	r3, r1
 80035a6:	70fb      	strb	r3, [r7, #3]
 80035a8:	4613      	mov	r3, r2
 80035aa:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80035ac:	78f8      	ldrb	r0, [r7, #3]
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	3306      	adds	r3, #6
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f023 0207 	bic.w	r2, r3, #7
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80035be:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80035c0:	431a      	orrs	r2, r3
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	1d83      	adds	r3, r0, #6
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	605a      	str	r2, [r3, #4]
                         ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop

080035d8 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80035f2:	431a      	orrs	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop

08003604 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	3b01      	subs	r3, #1
 800361c:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop

08003630 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 * 
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8003644:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
 8003646:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                           const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	615a      	str	r2, [r3, #20]
                                             USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	f023 020f 	bic.w	r2, r3, #15
 8003670:	78fb      	ldrb	r3, [r7, #3]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop

08003684 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	2101      	movs	r1, #1
 8003690:	f7ff ffe4 	bl	800365c <XMC_USIC_CH_SetMode>
}
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop

0800369c <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a8:	f043 0201 	orr.w	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80036b0:	370c      	adds	r7, #12
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
								   USIC_CH_BRG_PCTQ_Msk)) |
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel,uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	615a      	str	r2, [r3, #20]
								   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
                                                          const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	f7ff ff99 	bl	8003630 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                       (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	4619      	mov	r1, r3
 8003716:	f7ff ff5f 	bl	80035d8 <XMC_USIC_CH_SetWordLength>
}
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4619      	mov	r1, r3
 8003732:	f7ff ff67 	bl	8003604 <XMC_USIC_CH_SetFrameLength>
}
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
                                               const XMC_SPI_CH_INPUT_t input,
                                               const uint8_t source)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	70fb      	strb	r3, [r7, #3]
 8003748:	4613      	mov	r3, r2
 800374a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = USIC_CH_DX0CR_INSW_Msk;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	3306      	adds	r3, #6
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4413      	add	r3, r2
 8003756:	2210      	movs	r2, #16
 8003758:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	78bb      	ldrb	r3, [r7, #2]
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	4611      	mov	r1, r2
 8003762:	461a      	mov	r2, r3
 8003764:	f7ff ff1a 	bl	800359c <XMC_USIC_CH_SetInputSource>
}
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop

08003770 <SPI_BGT_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static void SPI_BGT_lInit(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH1, &SPI_BGT_Channel_Config);
 8003774:	4837      	ldr	r0, [pc, #220]	; (8003854 <SPI_BGT_lInit+0xe4>)
 8003776:	4938      	ldr	r1, [pc, #224]	; (8003858 <SPI_BGT_lInit+0xe8>)
 8003778:	f7fe fc5e 	bl	8002038 <XMC_SPI_CH_Init>

  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH1);
 800377c:	4835      	ldr	r0, [pc, #212]	; (8003854 <SPI_BGT_lInit+0xe4>)
 800377e:	f7ff ff8d 	bl	800369c <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH1, (uint8_t)16);
 8003782:	4834      	ldr	r0, [pc, #208]	; (8003854 <SPI_BGT_lInit+0xe4>)
 8003784:	2110      	movs	r1, #16
 8003786:	f7ff ffbd 	bl	8003704 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH1, (uint8_t)16);
 800378a:	4832      	ldr	r0, [pc, #200]	; (8003854 <SPI_BGT_lInit+0xe4>)
 800378c:	2110      	movs	r1, #16
 800378e:	f7ff ffc7 	bl	8003720 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH1,
 8003792:	4830      	ldr	r0, [pc, #192]	; (8003854 <SPI_BGT_lInit+0xe4>)
 8003794:	2100      	movs	r1, #0
 8003796:	2200      	movs	r2, #0
 8003798:	f7ff ffa6 	bl	80036e8 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_0_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH1, 2U);
 800379c:	482d      	ldr	r0, [pc, #180]	; (8003854 <SPI_BGT_lInit+0xe4>)
 800379e:	2102      	movs	r1, #2
 80037a0:	f7ff ff8c 	bl	80036bc <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the data input lines */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH1, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 80037a4:	482b      	ldr	r0, [pc, #172]	; (8003854 <SPI_BGT_lInit+0xe4>)
 80037a6:	2100      	movs	r1, #0
 80037a8:	2201      	movs	r2, #1
 80037aa:	f7ff ffc7 	bl	800373c <XMC_SPI_CH_SetInputSource>

  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH1);
 80037ae:	4829      	ldr	r0, [pc, #164]	; (8003854 <SPI_BGT_lInit+0xe4>)
 80037b0:	f7ff ff68 	bl	8003684 <XMC_SPI_CH_Start>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &SPI_BGT_MOSI0_Config.port_config);
 80037b4:	4829      	ldr	r0, [pc, #164]	; (800385c <SPI_BGT_lInit+0xec>)
 80037b6:	2105      	movs	r1, #5
 80037b8:	4a29      	ldr	r2, [pc, #164]	; (8003860 <SPI_BGT_lInit+0xf0>)
 80037ba:	f7fc fe1f 	bl	80003fc <XMC_GPIO_Init>

  /* Configure the Hardware control mode selected for the pin */
  XMC_GPIO_SetHardwareControl((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_HWCTRL_DISABLED);
 80037be:	4827      	ldr	r0, [pc, #156]	; (800385c <SPI_BGT_lInit+0xec>)
 80037c0:	2105      	movs	r1, #5
 80037c2:	2200      	movs	r2, #0
 80037c4:	f7fe fbf6 	bl	8001fb4 <XMC_GPIO_SetHardwareControl>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &SPI_BGT_SCLKOUT_Config.port_config);
 80037c8:	4824      	ldr	r0, [pc, #144]	; (800385c <SPI_BGT_lInit+0xec>)
 80037ca:	2104      	movs	r1, #4
 80037cc:	4a25      	ldr	r2, [pc, #148]	; (8003864 <SPI_BGT_lInit+0xf4>)
 80037ce:	f7fc fe15 	bl	80003fc <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)3, &SPI_BGT_SS_0_Config.port_config);
 80037d2:	4822      	ldr	r0, [pc, #136]	; (800385c <SPI_BGT_lInit+0xec>)
 80037d4:	2103      	movs	r1, #3
 80037d6:	4a24      	ldr	r2, [pc, #144]	; (8003868 <SPI_BGT_lInit+0xf8>)
 80037d8:	f7fc fe10 	bl	80003fc <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH1, XMC_SPI_CH_SLAVE_SELECT_0);
 80037dc:	481d      	ldr	r0, [pc, #116]	; (8003854 <SPI_BGT_lInit+0xe4>)
 80037de:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80037e2:	f7fe fc5d 	bl	80020a0 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH1,
 80037e6:	481b      	ldr	r0, [pc, #108]	; (8003854 <SPI_BGT_lInit+0xe4>)
 80037e8:	2108      	movs	r1, #8
 80037ea:	2201      	movs	r2, #1
 80037ec:	f7fe fdb4 	bl	8002358 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH1,
 80037f0:	4818      	ldr	r0, [pc, #96]	; (8003854 <SPI_BGT_lInit+0xe4>)
 80037f2:	210c      	movs	r1, #12
 80037f4:	2201      	movs	r2, #1
 80037f6:	f7fe fdaf 	bl	8002358 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  /* Configure transmit FIFO settings */
  XMC_USIC_CH_TXFIFO_Configure(XMC_SPI0_CH1,
 80037fa:	4816      	ldr	r0, [pc, #88]	; (8003854 <SPI_BGT_lInit+0xe4>)
 80037fc:	2100      	movs	r1, #0
 80037fe:	2203      	movs	r2, #3
 8003800:	2301      	movs	r3, #1
 8003802:	f7fe fd5f 	bl	80022c4 <XMC_USIC_CH_TXFIFO_Configure>
                               (XMC_USIC_CH_FIFO_SIZE_t)XMC_USIC_CH_FIFO_SIZE_8WORDS,
                               1U);

  /* Configure the service interrupt nodes for standard transmit FIFO events */
               
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_SPI0_CH1,
 8003806:	4813      	ldr	r0, [pc, #76]	; (8003854 <SPI_BGT_lInit+0xe4>)
 8003808:	2110      	movs	r1, #16
 800380a:	2203      	movs	r2, #3
 800380c:	f7fe fdc0 	bl	8002390 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
                                             XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
                                             (uint32_t)SPI_MASTER_SR_ID_3);
  /* Set priority of the Transmit interrupt */
  NVIC_SetPriority((IRQn_Type)87, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 63U, 0U));
 8003810:	f7ff fe40 	bl	8003494 <NVIC_GetPriorityGrouping>
 8003814:	4603      	mov	r3, r0
 8003816:	4618      	mov	r0, r3
 8003818:	213f      	movs	r1, #63	; 0x3f
 800381a:	2200      	movs	r2, #0
 800381c:	f7ff fe8a 	bl	8003534 <NVIC_EncodePriority>
 8003820:	4603      	mov	r3, r0
 8003822:	2057      	movs	r0, #87	; 0x57
 8003824:	4619      	mov	r1, r3
 8003826:	f7ff fe5b 	bl	80034e0 <NVIC_SetPriority>
  /* Set priority of the Receive interrupt */
  NVIC_SetPriority((IRQn_Type)85, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 62U, 0U));
 800382a:	f7ff fe33 	bl	8003494 <NVIC_GetPriorityGrouping>
 800382e:	4603      	mov	r3, r0
 8003830:	4618      	mov	r0, r3
 8003832:	213e      	movs	r1, #62	; 0x3e
 8003834:	2200      	movs	r2, #0
 8003836:	f7ff fe7d 	bl	8003534 <NVIC_EncodePriority>
 800383a:	4603      	mov	r3, r0
 800383c:	2055      	movs	r0, #85	; 0x55
 800383e:	4619      	mov	r1, r3
 8003840:	f7ff fe4e 	bl	80034e0 <NVIC_SetPriority>

  /* Enable Transmit interrupt */
  NVIC_EnableIRQ((IRQn_Type)87);
 8003844:	2057      	movs	r0, #87	; 0x57
 8003846:	f7ff fe33 	bl	80034b0 <NVIC_EnableIRQ>
  /* Enable Receive interrupt */
  NVIC_EnableIRQ((IRQn_Type)85);
 800384a:	2055      	movs	r0, #85	; 0x55
 800384c:	f7ff fe30 	bl	80034b0 <NVIC_EnableIRQ>

}
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40030200 	.word	0x40030200
 8003858:	1fffca7c 	.word	0x1fffca7c
 800385c:	48028200 	.word	0x48028200
 8003860:	1fffca68 	.word	0x1fffca68
 8003864:	08009798 	.word	0x08009798
 8003868:	080097b4 	.word	0x080097b4

0800386c <USIC0_3_IRQHandler>:
/*Interrupt handlers*/
/*Transmit ISR*/
void SPI_BGT_tx_handler()
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  SPI_MASTER_lTransmitHandler(&SPI_BGT);
 8003870:	4801      	ldr	r0, [pc, #4]	; (8003878 <USIC0_3_IRQHandler+0xc>)
 8003872:	f7ff fc5f 	bl	8003134 <SPI_MASTER_lTransmitHandler>
}
 8003876:	bd80      	pop	{r7, pc}
 8003878:	1fffcaa8 	.word	0x1fffcaa8

0800387c <USIC0_1_IRQHandler>:

/*Receive ISR*/
void SPI_BGT_rx_handler()
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  SPI_MASTER_lReceiveHandler(&SPI_BGT);
 8003880:	4801      	ldr	r0, [pc, #4]	; (8003888 <USIC0_1_IRQHandler+0xc>)
 8003882:	f7ff fd2d 	bl	80032e0 <SPI_MASTER_lReceiveHandler>
}
 8003886:	bd80      	pop	{r7, pc}
 8003888:	1fffcaa8 	.word	0x1fffcaa8

0800388c <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8003890:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <NVIC_GetPriorityGrouping+0x18>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003898:	0a1b      	lsrs	r3, r3, #8
}
 800389a:	4618      	mov	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	e000ed00 	.word	0xe000ed00

080038a8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80038b2:	4908      	ldr	r1, [pc, #32]	; (80038d4 <NVIC_EnableIRQ+0x2c>)
 80038b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	79fa      	ldrb	r2, [r7, #7]
 80038bc:	f002 021f 	and.w	r2, r2, #31
 80038c0:	2001      	movs	r0, #1
 80038c2:	fa00 f202 	lsl.w	r2, r0, r2
 80038c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	e000e100 	.word	0xe000e100

080038d8 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	4603      	mov	r3, r0
 80038e0:	6039      	str	r1, [r7, #0]
 80038e2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80038e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da0b      	bge.n	8003904 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80038ec:	490d      	ldr	r1, [pc, #52]	; (8003924 <NVIC_SetPriority+0x4c>)
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	3b04      	subs	r3, #4
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	440b      	add	r3, r1
 8003900:	761a      	strb	r2, [r3, #24]
 8003902:	e009      	b.n	8003918 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003904:	4908      	ldr	r1, [pc, #32]	; (8003928 <NVIC_SetPriority+0x50>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	0092      	lsls	r2, r2, #2
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	440b      	add	r3, r1
 8003914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000ed00 	.word	0xe000ed00
 8003928:	e000e100 	.word	0xe000e100

0800392c <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800392c:	b480      	push	{r7}
 800392e:	b089      	sub	sp, #36	; 0x24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	f1c3 0307 	rsb	r3, r3, #7
 8003946:	2b06      	cmp	r3, #6
 8003948:	bf28      	it	cs
 800394a:	2306      	movcs	r3, #6
 800394c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3306      	adds	r3, #6
 8003952:	2b06      	cmp	r3, #6
 8003954:	d902      	bls.n	800395c <NVIC_EncodePriority+0x30>
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3b01      	subs	r3, #1
 800395a:	e000      	b.n	800395e <NVIC_EncodePriority+0x32>
 800395c:	2300      	movs	r3, #0
 800395e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	2201      	movs	r2, #1
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	461a      	mov	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	401a      	ands	r2, r3
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2101      	movs	r1, #1
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	4619      	mov	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8003984:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8003986:	4618      	mov	r0, r3
 8003988:	3724      	adds	r7, #36	; 0x24
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff80 	bl	80038a8 <NVIC_EnableIRQ>
}
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop

080039b0 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 80039b0:	b590      	push	{r4, r7, lr}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);
 80039b8:	4816      	ldr	r0, [pc, #88]	; (8003a14 <INTERRUPT_Init+0x64>)
 80039ba:	f000 fc31 	bl	8004220 <CPU_CTRL_XMC4_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	73fb      	strb	r3, [r7, #15]

  if (status == INTERRUPT_STATUS_SUCCESS)
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11e      	bne.n	8003a06 <INTERRUPT_Init+0x56>
  {
    NVIC_SetPriority(handler->node,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	781c      	ldrb	r4, [r3, #0]
 80039cc:	f7ff ff5e 	bl	800388c <NVIC_GetPriorityGrouping>
 80039d0:	4601      	mov	r1, r0
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	785b      	ldrb	r3, [r3, #1]

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

  if (status == INTERRUPT_STATUS_SUCCESS)
  {
    NVIC_SetPriority(handler->node,
 80039d6:	461a      	mov	r2, r3
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
                                         handler->subpriority));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	789b      	ldrb	r3, [r3, #2]

  status = (INTERRUPT_STATUS_t)CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

  if (status == INTERRUPT_STATUS_SUCCESS)
  {
    NVIC_SetPriority(handler->node,
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	f7ff ffa3 	bl	800392c <NVIC_EncodePriority>
 80039e6:	4602      	mov	r2, r0
 80039e8:	b263      	sxtb	r3, r4
 80039ea:	4618      	mov	r0, r3
 80039ec:	4611      	mov	r1, r2
 80039ee:	f7ff ff73 	bl	80038d8 <NVIC_SetPriority>
                     NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                         handler->priority,
                                         handler->subpriority));
    if (handler->enable_at_init == true)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	78db      	ldrb	r3, [r3, #3]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <INTERRUPT_Init+0x50>
    {
      INTERRUPT_Enable(handler);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7ff ffca 	bl	8003994 <INTERRUPT_Enable>
    }

    status = INTERRUPT_STATUS_SUCCESS;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e001      	b.n	8003a0a <INTERRUPT_Init+0x5a>
  }
  else
  {
    status = INTERRUPT_STATUS_FAILURE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
  {
    status = INTERRUPT_STATUS_FAILURE;
  }
#endif

  return (status);
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd90      	pop	{r4, r7, pc}
 8003a14:	1fffcc4c 	.word	0x1fffcc4c

08003a18 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <NVIC_GetPriorityGrouping+0x18>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a24:	0a1b      	lsrs	r3, r3, #8
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	e000ed00 	.word	0xe000ed00

08003a34 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8003a3e:	4908      	ldr	r1, [pc, #32]	; (8003a60 <NVIC_EnableIRQ+0x2c>)
 8003a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a44:	095b      	lsrs	r3, r3, #5
 8003a46:	79fa      	ldrb	r2, [r7, #7]
 8003a48:	f002 021f 	and.w	r2, r2, #31
 8003a4c:	2001      	movs	r0, #1
 8003a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100

08003a64 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	6039      	str	r1, [r7, #0]
 8003a6e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8003a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	da0b      	bge.n	8003a90 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8003a78:	490d      	ldr	r1, [pc, #52]	; (8003ab0 <NVIC_SetPriority+0x4c>)
 8003a7a:	79fb      	ldrb	r3, [r7, #7]
 8003a7c:	f003 030f 	and.w	r3, r3, #15
 8003a80:	3b04      	subs	r3, #4
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	761a      	strb	r2, [r3, #24]
 8003a8e:	e009      	b.n	8003aa4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8003a90:	4908      	ldr	r1, [pc, #32]	; (8003ab4 <NVIC_SetPriority+0x50>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	0092      	lsls	r2, r2, #2
 8003a9c:	b2d2      	uxtb	r2, r2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	e000ed00 	.word	0xe000ed00
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	f1c3 0307 	rsb	r3, r3, #7
 8003ad2:	2b06      	cmp	r3, #6
 8003ad4:	bf28      	it	cs
 8003ad6:	2306      	movcs	r3, #6
 8003ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	3306      	adds	r3, #6
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <NVIC_EncodePriority+0x30>
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	e000      	b.n	8003aea <NVIC_EncodePriority+0x32>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2201      	movs	r2, #1
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	461a      	mov	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	401a      	ands	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2101      	movs	r1, #1
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 8003b10:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 8003b20:	b590      	push	{r4, r7, lr}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	7a1b      	ldrb	r3, [r3, #8]
 8003b2c:	f083 0301 	eor.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d027      	beq.n	8003b86 <GLOBAL_DMA_Init+0x66>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fd fe0a 	bl	8001754 <XMC_DMA_Init>

    /* Initialize CPU_CTRL */
    CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);
 8003b40:	4813      	ldr	r0, [pc, #76]	; (8003b90 <GLOBAL_DMA_Init+0x70>)
 8003b42:	f000 fb6d 	bl	8004220 <CPU_CTRL_XMC4_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7a5c      	ldrb	r4, [r3, #9]
 8003b4a:	f7ff ff65 	bl	8003a18 <NVIC_GetPriorityGrouping>
 8003b4e:	4601      	mov	r1, r0
                                                        obj->config->priority,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	781b      	ldrb	r3, [r3, #0]

    /* Initialize CPU_CTRL */
    CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003b56:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	785b      	ldrb	r3, [r3, #1]

    /* Initialize CPU_CTRL */
    CPU_CTRL_XMC4_Init(CPU_CTRL_HANDLE);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8003b5e:	4608      	mov	r0, r1
 8003b60:	4611      	mov	r1, r2
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7ff ffa8 	bl	8003ab8 <NVIC_EncodePriority>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	b263      	sxtb	r3, r4
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	4611      	mov	r1, r2
 8003b70:	f7ff ff78 	bl	8003a64 <NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7a5b      	ldrb	r3, [r3, #9]
 8003b78:	b25b      	sxtb	r3, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff ff5a 	bl	8003a34 <NVIC_EnableIRQ>
    obj->initialized = true;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd90      	pop	{r4, r7, pc}
 8003b90:	1fffcc4c 	.word	0x1fffcc4c

08003b94 <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 8003b98:	4801      	ldr	r0, [pc, #4]	; (8003ba0 <GPDMA0_0_IRQHandler+0xc>)
 8003b9a:	f7fe f90b 	bl	8001db4 <XMC_DMA_IRQHandler>
}
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	50014000 	.word	0x50014000

08003ba4 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	60da      	str	r2, [r3, #12]
}
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop

08003bc4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	7b5b      	ldrb	r3, [r3, #13]
 8003bd0:	f083 0301 	eor.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00f      	beq.n	8003bfa <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	7b1b      	ldrb	r3, [r3, #12]
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fd f905 	bl	8000df4 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7ff ffd8 	bl	8003ba4 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <XMC_VADC_GLOBAL_DisablePostCalibration>:
 * XMC_VADC_GLOBAL_DisablePostCalibration()<BR>
 * None
 */

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	3310      	adds	r3, #16
 8003c18:	4619      	mov	r1, r3
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	408b      	lsls	r3, r1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	7c1b      	ldrb	r3, [r3, #16]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d149      	bne.n	8003cd4 <GLOBAL_ADC_Init+0xa4>
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7fe fc2a 	bl	80024a4 <XMC_VADC_GLOBAL_Init>

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e02f      	b.n	8003cb6 <GLOBAL_ADC_Init+0x86>
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c5e:	6819      	ldr	r1, [r3, #0]
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4608      	mov	r0, r1
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7fe fcbb 	bl	80025e8 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	2103      	movs	r1, #3
 8003c80:	f7fe fd42 	bl	8002708 <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c8c:	7a1b      	ldrb	r3, [r3, #8]
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <GLOBAL_ADC_Init+0x74>
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	f7ff ffb0 	bl	8003c04 <XMC_VADC_GLOBAL_DisablePostCalibration>

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cac:	2200      	movs	r2, #0
 8003cae:	725a      	strb	r2, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d9cc      	bls.n	8003c56 <GLOBAL_ADC_Init+0x26>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7c5b      	ldrb	r3, [r3, #17]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <GLOBAL_ADC_Init+0x9e>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fe fc39 	bl	8002540 <XMC_VADC_GLOBAL_StartupCalibration>
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	741a      	strb	r2, [r3, #16]
  }
  return (handle_ptr->init_state);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7c1b      	ldrb	r3, [r3, #16]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <DMA_CH_Init>:
  return version;
}

/* DMA_CH initialization function */
DMA_CH_STATUS_t DMA_CH_Init(DMA_CH_t *const obj)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  DMA_CH_STATUS_t status;

  XMC_ASSERT("DMA_CH_Init: NULL DMA_CH_t object", (obj != NULL));

  /* This cannot possibly fail! */
  GLOBAL_DMA_Init(obj->dma_global);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff17 	bl	8003b20 <GLOBAL_DMA_Init>

  if (XMC_DMA_CH_Init(obj->dma_global->dma, obj->ch_num, &obj->config->ch_config) == XMC_DMA_CH_STATUS_OK)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6819      	ldr	r1, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7b1a      	ldrb	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4608      	mov	r0, r1
 8003d02:	4611      	mov	r1, r2
 8003d04:	461a      	mov	r2, r3
 8003d06:	f7fd fdfb 	bl	8001900 <XMC_DMA_CH_Init>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d106      	bne.n	8003d1e <DMA_CH_Init+0x3e>
  {
    obj->reload(obj);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
    status = DMA_CH_STATUS_SUCCESS;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]
 8003d1c:	e001      	b.n	8003d22 <DMA_CH_Init+0x42>
  }
  else
  {
    status = DMA_CH_STATUS_FAILURE;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	460b      	mov	r3, r1
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 8003d3a:	7afb      	ldrb	r3, [r7, #11]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	2158      	movs	r1, #88	; 0x58
 8003d40:	fb01 f303 	mul.w	r3, r1, r3
 8003d44:	4413      	add	r3, r2
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 8003d62:	7afb      	ldrb	r3, [r7, #11]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	2158      	movs	r1, #88	; 0x58
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3308      	adds	r3, #8
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	601a      	str	r2, [r3, #0]
}
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop

08003d80 <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 8003d8e:	7afb      	ldrb	r3, [r7, #11]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	2158      	movs	r1, #88	; 0x58
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3318      	adds	r3, #24
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	605a      	str	r2, [r3, #4]
}
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <DMA_CH_IFQ_reload>:
extern uint32_t* pDMA_src_IFQ; /* Source address symbol */

extern uint32_t* pDMA_dst_IFQ; /* Destination address symbol */

void DMA_CH_IFQ_reload(DMA_CH_t *obj)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  XMC_DMA_CH_EnableEvent(obj->dma_global->dma, obj->ch_num, obj->config->events);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6819      	ldr	r1, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	7b1a      	ldrb	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	f7fd ff89 	bl	8001ce0 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(obj->dma_global->dma, obj->ch_num, obj->config->callback);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	7b1a      	ldrb	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	4608      	mov	r0, r1
 8003de0:	4611      	mov	r1, r2
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fd ffd2 	bl	8001d8c <XMC_DMA_CH_SetEventHandler>

  XMC_DMA_CH_SetBlockSize(obj->dma_global->dma, obj->ch_num, 1024);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7b1b      	ldrb	r3, [r3, #12]
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dfa:	f7ff ffc1 	bl	8003d80 <XMC_DMA_CH_SetBlockSize>
  XMC_DMA_CH_SetSourceAddress(obj->dma_global->dma, obj->ch_num, (uint32_t)pDMA_src_IFQ);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7b1a      	ldrb	r2, [r3, #12]
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <DMA_CH_IFQ_reload+0x88>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4608      	mov	r0, r1
 8003e0e:	4611      	mov	r1, r2
 8003e10:	461a      	mov	r2, r3
 8003e12:	f7ff ff8b 	bl	8003d2c <XMC_DMA_CH_SetSourceAddress>
  XMC_DMA_CH_SetDestinationAddress(obj->dma_global->dma, obj->ch_num, (uint32_t)pDMA_dst_IFQ);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6819      	ldr	r1, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	7b1a      	ldrb	r2, [r3, #12]
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <DMA_CH_IFQ_reload+0x8c>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4608      	mov	r0, r1
 8003e26:	4611      	mov	r1, r2
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f7ff ff93 	bl	8003d54 <XMC_DMA_CH_SetDestinationAddress>
}
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	1fffee0c 	.word	0x1fffee0c
 8003e38:	1fffcd0c 	.word	0x1fffcd0c

08003e3c <DMA_CH_IFI_reload>:
extern uint32_t* pDMA_src_IFI; /* Source address symbol */

extern uint32_t* pDMA_dst_IFI; /* Destination address symbol */

void DMA_CH_IFI_reload(DMA_CH_t *obj)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  XMC_DMA_CH_SetBlockSize(obj->dma_global->dma, obj->ch_num, 1024);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	7b1b      	ldrb	r3, [r3, #12]
 8003e4e:	4610      	mov	r0, r2
 8003e50:	4619      	mov	r1, r3
 8003e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e56:	f7ff ff93 	bl	8003d80 <XMC_DMA_CH_SetBlockSize>
  XMC_DMA_CH_SetSourceAddress(obj->dma_global->dma, obj->ch_num, (uint32_t)pDMA_src_IFI);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7b1a      	ldrb	r2, [r3, #12]
 8003e64:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <DMA_CH_IFI_reload+0x54>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f7ff ff5d 	bl	8003d2c <XMC_DMA_CH_SetSourceAddress>
  XMC_DMA_CH_SetDestinationAddress(obj->dma_global->dma, obj->ch_num, (uint32_t)pDMA_dst_IFI);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6819      	ldr	r1, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	7b1a      	ldrb	r2, [r3, #12]
 8003e7c:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <DMA_CH_IFI_reload+0x58>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4608      	mov	r0, r1
 8003e82:	4611      	mov	r1, r2
 8003e84:	461a      	mov	r2, r3
 8003e86:	f7ff ff65 	bl	8003d54 <XMC_DMA_CH_SetDestinationAddress>
}
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	1fffd608 	.word	0x1fffd608
 8003e94:	1fffcd08 	.word	0x1fffcd08

08003e98 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, handler->gpio_config);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	7a1a      	ldrb	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f7fc faa3 	bl	80003fc <XMC_GPIO_Init>

  return (DIGITAL_IO_STATUS_OK);
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <XMC_DAC_EnableSimultaneousDataMode>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_SimultaneousWrite(), XMC_DAC_DisableSimultaneousDataMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_EnableSimultaneousDataMode(XMC_DAC_t *const dac)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  dac->DACCFG[0].high |= DAC_DAC0CFG1_DATMOD_Msk;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
}
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop

08003ee0 <XMC_DAC_CH_Write>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_StartSingleValueMode(), XMC_DAC_CH_StartDataMode(), XMC_DAC_CH_StartRampMode()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_Write(XMC_DAC_t *const dac, const uint8_t channel, const uint16_t data)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
 8003eec:	4613      	mov	r3, r2
 8003eee:	803b      	strh	r3, [r7, #0]
  dac->DACDATA[channel] = data;
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	883a      	ldrh	r2, [r7, #0]
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	440b      	add	r3, r1
 8003efc:	605a      	str	r2, [r3, #4]
}
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <XMC_DAC_CH_SetMode>:
 * Sets the operating \e mode for the \e channel by setting the \a MODE bit-field of \a DAC0CFG0 register (for channel 0) / \a DAC1CFG0 register (for channel 1).
 * Different modes of DAC operation are defined by enum XMC_DAC_CH_MODE_t.
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetMode(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_MODE_t mode)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	460b      	mov	r3, r1
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	72fb      	strb	r3, [r7, #11]
  dac->DACCFG[channel].low = (dac->DACCFG[channel].low & ~DAC_DAC0CFG0_MODE_Msk) |
 8003f16:	7af8      	ldrb	r0, [r7, #11]
 8003f18:	7afb      	ldrb	r3, [r7, #11]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	00db      	lsls	r3, r3, #3
 8003f1e:	4413      	add	r3, r2
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f423 02e0 	bic.w	r2, r3, #7340032	; 0x700000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68f9      	ldr	r1, [r7, #12]
 8003f2c:	00c3      	lsls	r3, r0, #3
 8003f2e:	440b      	add	r3, r1
 8003f30:	605a      	str	r2, [r3, #4]
                             mode;
}
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <XMC_DAC_CH_EnableEvent>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_DisableEvent()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_EnableEvent(XMC_DAC_t *const dac, const uint8_t channel)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  dac->DACCFG[channel].low |= DAC_DAC0CFG0_SREN_Msk;
 8003f48:	78f8      	ldrb	r0, [r7, #3]
 8003f4a:	78fb      	ldrb	r3, [r7, #3]
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	4413      	add	r3, r2
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	00c3      	lsls	r3, r0, #3
 8003f5c:	440b      	add	r3, r1
 8003f5e:	605a      	str	r2, [r3, #4]
}
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop

08003f6c <XMC_DAC_CH_SetOutputScale>:
 * \par<b>Related APIs:</b><BR>
 * XMC_DAC_CH_GetOutputScale()\n\n\n
 *
 */
__STATIC_INLINE void XMC_DAC_CH_SetOutputScale(XMC_DAC_t *const dac, const uint8_t channel, const XMC_DAC_CH_OUTPUT_SCALE_t scale)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	70bb      	strb	r3, [r7, #2]
  dac->DACCFG[channel].high = (dac->DACCFG[channel].high & ~(DAC_DAC0CFG1_MULDIV_Msk | DAC_DAC0CFG1_SCALE_Msk)) |
 8003f7c:	78f8      	ldrb	r0, [r7, #3]
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	4413      	add	r3, r2
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f023 020f 	bic.w	r2, r3, #15
 8003f8c:	78bb      	ldrb	r3, [r7, #2]
 8003f8e:	431a      	orrs	r2, r3
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	00c3      	lsls	r3, r0, #3
 8003f94:	440b      	add	r3, r1
 8003f96:	609a      	str	r2, [r3, #8]
                              scale;
}
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop

08003fa4 <DAC_ModeConfig>:
  XMC_DAC_CH_SetRampStop(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, stop_ramp);
}

/* This API will configure DAC mode depends upon the user configuration */
XMC_DAC_CH_STATUS_t DAC_ModeConfig(const DAC_t * const HandlePtr)
{
 8003fa4:	b5b0      	push	{r4, r5, r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	6078      	str	r0, [r7, #4]
  XMC_DAC_CH_STATUS_t api_status = XMC_DAC_CH_STATUS_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]
  /* Initialize DAC configuration created by the user */
  if ( XMC_DAC_CH_MODE_PATTERN == HandlePtr->dac_mode )
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fb8:	d115      	bne.n	8003fe6 <DAC_ModeConfig+0x42>
  {
    api_status = XMC_DAC_CH_StartPatternMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	7c1c      	ldrb	r4, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	9200      	str	r2, [sp, #0]
 8003fd6:	9301      	str	r3, [sp, #4]
 8003fd8:	462a      	mov	r2, r5
 8003fda:	4623      	mov	r3, r4
 8003fdc:	f7fd fa9e 	bl	800151c <XMC_DAC_CH_StartPatternMode>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	73fb      	strb	r3, [r7, #15]
 8003fe4:	e085      	b.n	80040f2 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_pat_table_ptr,HandlePtr->dac_sign_output,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else if ( XMC_DAC_CH_MODE_SINGLE == HandlePtr->dac_mode )
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fee:	d115      	bne.n	800401c <DAC_ModeConfig+0x78>
  {
    api_status = XMC_DAC_CH_StartSingleValueMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f7fd fa07 	bl	8001410 <XMC_DAC_CH_StartSingleValueMode>
 8004002:	4603      	mov	r3, r0
 8004004:	73fb      	strb	r3, [r7, #15]
    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004010:	4610      	mov	r0, r2
 8004012:	4619      	mov	r1, r3
 8004014:	2200      	movs	r2, #0
 8004016:	f7ff ff63 	bl	8003ee0 <XMC_DAC_CH_Write>
 800401a:	e06a      	b.n	80040f2 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_DATA ==  HandlePtr->dac_mode )
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004024:	d125      	bne.n	8004072 <DAC_ModeConfig+0xce>
  {
    api_status = XMC_DAC_CH_StartDataMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f7fd f9fc 	bl	8001434 <XMC_DAC_CH_StartDataMode>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
    if(1U == HandlePtr->dac_service_request)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d108      	bne.n	800405c <DAC_ModeConfig+0xb8>
    {
      /* Enable Service Request */
      XMC_DAC_CH_EnableEvent(HandlePtr->dac_module_ptr,HandlePtr->dac_ch);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004054:	4610      	mov	r0, r2
 8004056:	4619      	mov	r1, r3
 8004058:	f7ff ff70 	bl	8003f3c <XMC_DAC_CH_EnableEvent>
    }

    /*Initialized data register with zero */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,0U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004066:	4610      	mov	r0, r2
 8004068:	4619      	mov	r1, r3
 800406a:	2200      	movs	r2, #0
 800406c:	f7ff ff38 	bl	8003ee0 <XMC_DAC_CH_Write>
 8004070:	e03f      	b.n	80040f2 <DAC_ModeConfig+0x14e>
  }
  else if ( XMC_DAC_CH_MODE_RAMP == HandlePtr->dac_mode )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800407a:	d125      	bne.n	80040c8 <DAC_ModeConfig+0x124>
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8b1d      	ldrh	r5, [r3, #24]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8b5c      	ldrh	r4, [r3, #26]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	9200      	str	r2, [sp, #0]
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	462a      	mov	r2, r5
 800409c:	4623      	mov	r3, r4
 800409e:	f7fd f9f9 	bl	8001494 <XMC_DAC_CH_StartRampMode>
 80040a2:	4603      	mov	r3, r0
 80040a4:	73fb      	strb	r3, [r7, #15]
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	791b      	ldrb	r3, [r3, #4]
 80040b6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80040ba:	b2db      	uxtb	r3, r3
  {
    api_status = XMC_DAC_CH_StartRampMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
    HandlePtr->dac_ramp_start,HandlePtr->dac_ramp_stop,
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);

    XMC_DAC_CH_SetOutputScale(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80040bc:	4608      	mov	r0, r1
 80040be:	4611      	mov	r1, r2
 80040c0:	461a      	mov	r2, r3
 80040c2:	f7ff ff53 	bl	8003f6c <XMC_DAC_CH_SetOutputScale>
 80040c6:	e014      	b.n	80040f2 <DAC_ModeConfig+0x14e>
                       (XMC_DAC_CH_OUTPUT_SCALE_t)HandlePtr->dac_config_ptr->output_scale);
  }
  else if ( XMC_DAC_CH_MODE_NOISE == HandlePtr->dac_mode )
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040d0:	d10d      	bne.n	80040ee <DAC_ModeConfig+0x14a>
  {
    api_status = XMC_DAC_CH_StartNoiseMode(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 1022 	ldrb.w	r1, [r3, #34]	; 0x22
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f7fd fa62 	bl	80015ac <XMC_DAC_CH_StartNoiseMode>
 80040e8:	4603      	mov	r3, r0
 80040ea:	73fb      	strb	r3, [r7, #15]
 80040ec:	e001      	b.n	80040f2 <DAC_ModeConfig+0x14e>
    HandlePtr->dac_input_trigger,HandlePtr->dac_frequency);
  }
  else
  {
    /* DAC Mode Idle */
    api_status = XMC_DAC_CH_STATUS_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
  }
  return api_status;
 80040f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bdb0      	pop	{r4, r5, r7, pc}

080040fc <DAC_Init>:
    * This function initializes DAC
    * peripheral as per the user configurations
*/

DAC_STATUS_t DAC_Init(const DAC_t * const HandlePtr)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  DAC_STATUS_t status = DAC_STATUS_SUCCESS;
 8004104:	2300      	movs	r3, #0
 8004106:	73fb      	strb	r3, [r7, #15]
  /*Assert variables.*/
  XMC_ASSERT(" DAC_Init: Passing argument DAC HandlePtr of type DAC_t is Null",
             (HandlePtr != (DAC_t *)NULL));

  /* Enable DAC module */
  XMC_DAC_CH_Init(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,HandlePtr->dac_config_ptr);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6819      	ldr	r1, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4608      	mov	r0, r1
 8004118:	4611      	mov	r1, r2
 800411a:	461a      	mov	r2, r3
 800411c:	f7fd f8fc 	bl	8001318 <XMC_DAC_CH_Init>

  /* Configure DAC with user configured mode */
  api_status = DAC_ModeConfig(HandlePtr);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff3f 	bl	8003fa4 <DAC_ModeConfig>
 8004126:	4603      	mov	r3, r0
 8004128:	73bb      	strb	r3, [r7, #14]

  /* Check if start after initialization is enabled */
  if(HandlePtr->dac_start_after_init == 0U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004130:	2b00      	cmp	r3, #0
 8004132:	d109      	bne.n	8004148 <DAC_Init+0x4c>
  {
    XMC_DAC_CH_SetMode(HandlePtr->dac_module_ptr, HandlePtr->dac_ch, XMC_DAC_CH_MODE_IDLE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	2200      	movs	r2, #0
 8004144:	f7ff fee0 	bl	8003f08 <XMC_DAC_CH_SetMode>
  }

  if(1U == HandlePtr->dac_coupled)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800414e:	2b01      	cmp	r3, #1
 8004150:	d104      	bne.n	800415c <DAC_Init+0x60>
  {
    /* Enable Simultaneous Data Mode */
    XMC_DAC_EnableSimultaneousDataMode(HandlePtr->dac_module_ptr);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff feb2 	bl	8003ec0 <XMC_DAC_EnableSimultaneousDataMode>
  }

  if(api_status != XMC_DAC_CH_STATUS_OK)
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <DAC_Init+0x6a>
  {
    status = DAC_STATUS_FAILURE;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <DAC_SingleValue_SetValue_s16>:

/*
  * This API will set data value in Single Value Signed Mode.
*/
DAC_STATUS_t DAC_SingleValue_SetValue_s16(const DAC_t * const HandlePtr,int16_t Data)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]
  DAC_STATUS_t status;
  int16_t temp_data = 0;
 800417c:	2300      	movs	r3, #0
 800417e:	81bb      	strh	r3, [r7, #12]
  if((DAC_DATA_VALUE_MAX_SIGN >= Data) && (DAC_DATA_VALUE_MIN_SIGN < Data))
 8004180:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004188:	da1e      	bge.n	80041c8 <DAC_SingleValue_SetValue_s16+0x58>
 800418a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800418e:	f513 6f00 	cmn.w	r3, #2048	; 0x800
 8004192:	dd19      	ble.n	80041c8 <DAC_SingleValue_SetValue_s16+0x58>
  {
    if(Data < 0)
 8004194:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004198:	2b00      	cmp	r3, #0
 800419a:	da05      	bge.n	80041a8 <DAC_SingleValue_SetValue_s16+0x38>
    {
      temp_data = (0x1000 + Data);
 800419c:	887b      	ldrh	r3, [r7, #2]
 800419e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	81bb      	strh	r3, [r7, #12]
 80041a6:	e001      	b.n	80041ac <DAC_SingleValue_SetValue_s16+0x3c>
    }
    else
    {
      temp_data = Data;
 80041a8:	887b      	ldrh	r3, [r7, #2]
 80041aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Update Corresponding CH Data register */
    XMC_DAC_CH_Write(HandlePtr->dac_module_ptr,HandlePtr->dac_ch,(uint16_t)temp_data);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6819      	ldr	r1, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80041b6:	89bb      	ldrh	r3, [r7, #12]
 80041b8:	4608      	mov	r0, r1
 80041ba:	4611      	mov	r1, r2
 80041bc:	461a      	mov	r2, r3
 80041be:	f7ff fe8f 	bl	8003ee0 <XMC_DAC_CH_Write>
    status = DAC_STATUS_SUCCESS;
 80041c2:	2300      	movs	r3, #0
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	e001      	b.n	80041cc <DAC_SingleValue_SetValue_s16+0x5c>
  }
  else
  {
    /* Data Values are out of range */
    status = DAC_STATUS_API_FAIL;
 80041c8:	2302      	movs	r3, #2
 80041ca:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop

080041d8 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <NVIC_SetPriorityGrouping+0x44>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041f4:	4013      	ands	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 8004200:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004208:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800420a:	4a04      	ldr	r2, [pc, #16]	; (800421c <NVIC_SetPriorityGrouping+0x44>)
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	60d3      	str	r3, [r2, #12]
}
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <CPU_CTRL_XMC4_Init>:
/*
 * API to initialize the CPU_CTRL_XMC4 APP
 */

CPU_CTRL_XMC4_STATUS_t CPU_CTRL_XMC4_Init(CPU_CTRL_XMC4_t *const handler)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  CPU_CTRL_XMC4_STATUS_t status;

  if(handler->initialized == false)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	791b      	ldrb	r3, [r3, #4]
 800422c:	f083 0301 	eor.w	r3, r3, #1
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00b      	beq.n	800424e <CPU_CTRL_XMC4_Init+0x2e>
  {
    NVIC_SetPriorityGrouping(handler->config->prigroup);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7ff ffcb 	bl	80041d8 <NVIC_SetPriorityGrouping>

    handler->initialized = true;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	711a      	strb	r2, [r3, #4]

    status = CPU_CTRL_XMC4_STATUS_SUCCESS;
 8004248:	2300      	movs	r3, #0
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	e001      	b.n	8004252 <CPU_CTRL_XMC4_Init+0x32>
  }
  else
  {
    /* returning SUCCESS if APP is already initialized */
    status = CPU_CTRL_XMC4_STATUS_SUCCESS;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8004252:	7bfb      	ldrb	r3, [r7, #15]
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_CHECK_MODULE_PTR(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f303 	lsl.w	r3, r1, r3
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	60da      	str	r2, [r3, #12]
}
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf14      	ite	ne
 8004298:	2301      	movne	r3, #1
 800429a:	2300      	moveq	r3, #0
 800429c:	b2db      	uxtb	r3, r3
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop

080042ac <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	60da      	str	r2, [r3, #12]
}
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f043 0202 	orr.w	r2, r3, #2
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	611a      	str	r2, [r3, #16]
}
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop

080042e4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->PRS = (uint32_t) period_val;
 80042f0:	887a      	ldrh	r2, [r7, #2]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  slice->CRS = (uint32_t) compare_val;
 800430c:	887a      	ldrh	r2, [r7, #2]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <XMC_CCU4_SLICE_GetTimerValue>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_SetTimerValue().
 */
__STATIC_INLINE uint16_t XMC_CCU4_SLICE_GetTimerValue(const XMC_CCU4_SLICE_t *const slice)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerValue:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  return((uint16_t)slice->TIMER);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	b29b      	uxth	r3, r3
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop

08004338 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_CHECK_SLICE_PTR(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <COUNTER_CCU4_lInit>:
		                    XMC_CCU8_SLICE_SR_ID_t sr_line);
#endif

#ifdef COUNTER_CCU4_USED
COUNTER_STATUS_t COUNTER_CCU4_lInit(COUNTER_CCU4_CONFIG_t *const handle_ptr)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  COUNTER_STATUS_t status;

  XMC_ASSERT("COUNTER_CCU4_lInit:Invalid handle_ptr", (handle_ptr != NULL))

  status = handle_ptr->state;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004372:	73fb      	strb	r3, [r7, #15]

  if (COUNTER_STATUS_UNINITIALIZED == status)
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b02      	cmp	r3, #2
 8004378:	f040 80b4 	bne.w	80044e4 <COUNTER_CCU4_lInit+0x180>
  {
     status = (COUNTER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_handle);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fc1f 	bl	8003bc4 <GLOBAL_CCU4_Init>
 8004386:	4603      	mov	r3, r0
 8004388:	73fb      	strb	r3, [r7, #15]

     /* Select the count mode as Edge Aligned*/
     XMC_CCU4_SLICE_SetTimerCountingMode(handle_ptr->slice_ptr,XMC_CCU4_SLICE_TIMER_COUNT_MODE_EA);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	2100      	movs	r1, #0
 8004392:	f7fc fe39 	bl	8001008 <XMC_CCU4_SLICE_SetTimerCountingMode>

     /* Configure the count operation for event-0*/
     XMC_CCU4_SLICE_CountConfig(handle_ptr->slice_ptr,XMC_CCU4_SLICE_EVENT_0);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	4618      	mov	r0, r3
 800439c:	2101      	movs	r1, #1
 800439e:	f7fc fd7b 	bl	8000e98 <XMC_CCU4_SLICE_CountConfig>

     /* Configure various parameters for the event-0*/
     XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->slice_ptr,XMC_CCU4_SLICE_EVENT_0, handle_ptr->event0_config);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	4610      	mov	r0, r2
 80043ac:	2101      	movs	r1, #1
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7fc fdc0 	bl	8000f34 <XMC_CCU4_SLICE_ConfigureEvent>

     if ( XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->countdir_event)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7f9b      	ldrb	r3, [r3, #30]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00e      	beq.n	80043da <COUNTER_CCU4_lInit+0x76>
     {
       /* Configure the Event 1 for external count direction*/
       XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_1,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	4610      	mov	r0, r2
 80043c6:	2102      	movs	r1, #2
 80043c8:	461a      	mov	r2, r3
 80043ca:	f7fc fdb3 	bl	8000f34 <XMC_CCU4_SLICE_ConfigureEvent>
    		                         handle_ptr->count_dir_event_config);

       /* Configure the external count direction for Event 1*/
       XMC_CCU4_SLICE_DirectionConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_EVENT_1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	4618      	mov	r0, r3
 80043d4:	2102      	movs	r1, #2
 80043d6:	f7fc fd93 	bl	8000f00 <XMC_CCU4_SLICE_DirectionConfig>
     }
     if ( XMC_CCU4_SLICE_EVENT_NONE != handle_ptr->gating_event)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	7fdb      	ldrb	r3, [r3, #31]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d012      	beq.n	8004408 <COUNTER_CCU4_lInit+0xa4>
     {
       /* Configure the External Event 1 or 2 for external gating*/
       XMC_CCU4_SLICE_ConfigureEvent(handle_ptr->slice_ptr,handle_ptr->gating_event,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6899      	ldr	r1, [r3, #8]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	7fda      	ldrb	r2, [r3, #31]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4608      	mov	r0, r1
 80043f0:	4611      	mov	r1, r2
 80043f2:	461a      	mov	r2, r3
 80043f4:	f7fc fd9e 	bl	8000f34 <XMC_CCU4_SLICE_ConfigureEvent>
    		                         handle_ptr->gating_event_config);

       /* Configure the external gating level for the counter to slice Event 1*/
       XMC_CCU4_SLICE_GateConfig(handle_ptr->slice_ptr,handle_ptr->gating_event);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	7fdb      	ldrb	r3, [r3, #31]
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	f7fc fd62 	bl	8000ecc <XMC_CCU4_SLICE_GateConfig>
     }

     /* Set the period register values */
     XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->slice_ptr,COUNTER_PERIOD_MAX_VALUE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	4618      	mov	r0, r3
 800440e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004412:	f7ff ff67 	bl	80042e4 <XMC_CCU4_SLICE_SetTimerPeriodMatch>

     /* Set the compare register values */
     XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->slice_ptr,handle_ptr->count_match_value);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	8b9b      	ldrh	r3, [r3, #28]
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	f7ff ff6d 	bl	8004300 <XMC_CCU4_SLICE_SetTimerCompareMatch>

     /*Requesting the shadow transfer for the CCU4 slice  */
     XMC_CCU4_EnableShadowTransfer(handle_ptr->kernel_ptr,handle_ptr->shadow_mask);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	4610      	mov	r0, r2
 8004430:	4619      	mov	r1, r3
 8004432:	f7fc fe23 	bl	800107c <XMC_CCU4_EnableShadowTransfer>

     /* Configure the Interrupts for the various events*/
     if (handle_ptr->intr_count_match != (bool)false)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <COUNTER_CCU4_lInit+0xf0>
     {
       /* Enable the count match event */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP,
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444a:	4610      	mov	r0, r2
 800444c:	2102      	movs	r1, #2
 800444e:	461a      	mov	r2, r3
 8004450:	f000 f874 	bl	800453c <COUNTER_CC4_lEvtConfig>
    		                  handle_ptr->count_match_node_id);
     }

     if (handle_ptr->intr_count_rollover != (bool)false)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <COUNTER_CCU4_lInit+0x10e>
     {
       /* Enable the count rollover event */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004468:	4610      	mov	r0, r2
 800446a:	2100      	movs	r1, #0
 800446c:	461a      	mov	r2, r3
 800446e:	f000 f865 	bl	800453c <COUNTER_CC4_lEvtConfig>
    		                  handle_ptr->count_rollover_node_id);
     }

     if (handle_ptr->intr_evt_edge_detect != (bool)false)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <COUNTER_CCU4_lInit+0x12c>
     {
       /* Enable the event edge detection */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT0,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004486:	4610      	mov	r0, r2
 8004488:	2108      	movs	r1, #8
 800448a:	461a      	mov	r2, r3
 800448c:	f000 f856 	bl	800453c <COUNTER_CC4_lEvtConfig>
    		                  handle_ptr->event_edge_det_node_id);
     }

     if (handle_ptr->intr_event1_detect != (bool)false)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <COUNTER_CCU4_lInit+0x14a>
     {
       /* Enable the event generation for External Event-1 */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT1, handle_ptr->event1_node_id);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80044a4:	4610      	mov	r0, r2
 80044a6:	2109      	movs	r1, #9
 80044a8:	461a      	mov	r2, r3
 80044aa:	f000 f847 	bl	800453c <COUNTER_CC4_lEvtConfig>
     }

     if (handle_ptr->intr_event2_detect != (bool)false)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <COUNTER_CCU4_lInit+0x168>
     {
       /* Enable the event generation for External Event-2 */
       COUNTER_CC4_lEvtConfig(handle_ptr->slice_ptr, XMC_CCU4_SLICE_IRQ_ID_EVENT2, handle_ptr->event2_node_id);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044c2:	4610      	mov	r0, r2
 80044c4:	210a      	movs	r1, #10
 80044c6:	461a      	mov	r2, r3
 80044c8:	f000 f838 	bl	800453c <COUNTER_CC4_lEvtConfig>
     }

     handle_ptr->state = COUNTER_STATUS_SUCCESS;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

     /*if counter start after initialization  is needed */
     if ((bool) true == handle_ptr->init_start)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <COUNTER_CCU4_lInit+0x180>
     {
       COUNTER_CC4_lStart(handle_ptr);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f806 	bl	80044f0 <COUNTER_CC4_lStart>
     }
  }
  return status;
 80044e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop

080044f0 <COUNTER_CC4_lStart>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_CC4_lStart(COUNTER_CCU4_CONFIG_t *const handle_ptr)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("COUNTER_CC4_lStart:Invalid handle_ptr", (handle_ptr != NULL))
  if ((COUNTER_STATUS_SUCCESS == handle_ptr->state) &&
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d118      	bne.n	8004534 <COUNTER_CC4_lStart+0x44>
      ((bool)false == XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->slice_ptr)))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff febc 	bl	8004284 <XMC_CCU4_SLICE_IsTimerRunning>
 800450c:	4603      	mov	r3, r0
 800450e:	f083 0301 	eor.w	r3, r3, #1
 8004512:	b2db      	uxtb	r3, r3
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_CC4_lStart(COUNTER_CCU4_CONFIG_t *const handle_ptr)
{
  XMC_ASSERT("COUNTER_CC4_lStart:Invalid handle_ptr", (handle_ptr != NULL))
  if ((COUNTER_STATUS_SUCCESS == handle_ptr->state) &&
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00d      	beq.n	8004534 <COUNTER_CC4_lStart+0x44>
      ((bool)false == XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->slice_ptr)))
  {
    /* Enable the clock for the counter slice*/
    XMC_CCU4_EnableClock(handle_ptr->kernel_ptr,handle_ptr->slice_number);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	f7ff fe99 	bl	800425c <XMC_CCU4_EnableClock>

    /* Start the counter operation*/
    XMC_CCU4_SLICE_StartTimer(handle_ptr->slice_ptr);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff febc 	bl	80042ac <XMC_CCU4_SLICE_StartTimer>
  }
}
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop

0800453c <COUNTER_CC4_lEvtConfig>:
  }
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_CC4_lEvtConfig(XMC_CCU4_SLICE_t *const slice_ptr,XMC_CCU4_SLICE_IRQ_ID_t event_id,
                            XMC_CCU4_SLICE_SR_ID_t sr_line)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	70fb      	strb	r3, [r7, #3]
 8004548:	4613      	mov	r3, r2
 800454a:	70bb      	strb	r3, [r7, #2]
   /* Enable the event generation for event_id */
   XMC_CCU4_SLICE_EnableEvent(slice_ptr,event_id);
 800454c:	78fb      	ldrb	r3, [r7, #3]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4619      	mov	r1, r3
 8004552:	f7ff fef1 	bl	8004338 <XMC_CCU4_SLICE_EnableEvent>

   /* Configure the SR line for the event*/
   XMC_CCU4_SLICE_SetInterruptNode(slice_ptr,event_id,sr_line);
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	78bb      	ldrb	r3, [r7, #2]
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4611      	mov	r1, r2
 800455e:	461a      	mov	r2, r3
 8004560:	f7fc fd9c 	bl	800109c <XMC_CCU4_SLICE_SetInterruptNode>
}
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop

0800456c <COUNTER_Init>:

  return version;
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
COUNTER_STATUS_t COUNTER_Init(COUNTER_t *const handle_ptr)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  COUNTER_STATUS_t status;
  status = COUNTER_STATUS_FAILURE;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("COUNTER_Init:Invalid handle_ptr", (handle_ptr != NULL))
#ifdef COUNTER_CCU4_USED
  if (COUNTER_CCU4 == handle_ptr->counter_type)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <COUNTER_Init+0x22>
  {
    status = COUNTER_CCU4_lInit(handle_ptr->ccu4_handle);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff feed 	bl	8004364 <COUNTER_CCU4_lInit>
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]
  if (COUNTER_CCU8 == handle_ptr->counter_type)
  {
    status = COUNTER_CCU8_lInit(handle_ptr->ccu8_handle);
  }
#endif
  return status;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <COUNTER_GetCurrentCount>:
#endif
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
uint16_t COUNTER_GetCurrentCount(COUNTER_t *const handle_ptr)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("COUNTER_GetEventCount:Invalid handle_ptr", (handle_ptr != NULL))

  uint16_t count_value;
  count_value = (uint16_t)0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	81fb      	strh	r3, [r7, #14]
#ifdef COUNTER_CCU4_USED
  if (COUNTER_CCU4 == handle_ptr->counter_type)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <COUNTER_GetCurrentCount+0x24>
  {
    count_value = XMC_CCU4_SLICE_GetTimerValue(handle_ptr->ccu4_handle->slice_ptr);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff feb2 	bl	800431c <XMC_CCU4_SLICE_GetTimerValue>
 80045b8:	4603      	mov	r3, r0
 80045ba:	81fb      	strh	r3, [r7, #14]
  if (COUNTER_CCU8 == handle_ptr->counter_type)
  {
    count_value = XMC_CCU8_SLICE_GetTimerValue(handle_ptr->ccu8_handle->slice_ptr);
  }
#endif
  return (count_value);
 80045bc:	89fb      	ldrh	r3, [r7, #14]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop

080045c8 <COUNTER_ResetCounter>:
  return (event_status);
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
void COUNTER_ResetCounter(COUNTER_t *const handle_ptr)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("COUNTER_ResetCounter:Invalid handle_ptr", (handle_ptr != NULL))
#ifdef COUNTER_CCU4_USED
  if (COUNTER_CCU4 == handle_ptr->counter_type)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <COUNTER_ResetCounter+0x1c>
  {
    XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_handle->slice_ptr);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff fe70 	bl	80042c4 <XMC_CCU4_SLICE_ClearTimer>
  if (COUNTER_CCU8 == handle_ptr->counter_type)
  {
    XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_handle->slice_ptr);
  }
#endif
}
 80045e4:	3708      	adds	r7, #8
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop

080045ec <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80045ec:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80045ee:	2b01      	cmp	r3, #1
	IT       LS
 80045f0:	bf98      	it	ls
	BXLS     lr
 80045f2:	4770      	bxls	lr
	PUSH     {r4-r9}
 80045f4:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80045f8:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80045fa:	089b      	lsrs	r3, r3, #2

080045fc <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80045fc:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8004600:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8004604:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8004606:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800460a:	4480      	add	r8, r0
	ADD      r9,r0,r9
 800460c:	4481      	add	r9, r0
	ADD      r2,r0,r2
 800460e:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8004610:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8004612:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8004616:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800461a:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800461c:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8004620:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8004624:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 8004628:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800462c:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 800462e:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8004632:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 8004636:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 8004638:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 800463c:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8004640:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8004644:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 8004648:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800464a:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 800464c:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 800464e:	d1d5      	bne.n	80045fc <arm_bitreversal_32_0>
	POP      {r4-r9}
 8004650:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8004654:	4770      	bx	lr

08004656 <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 8004656:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 8004658:	2b01      	cmp	r3, #1
	IT       LS
 800465a:	bf98      	it	ls
	BXLS     lr
 800465c:	4770      	bxls	lr
	PUSH     {r4-r9}
 800465e:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8004662:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8004664:	089b      	lsrs	r3, r3, #2

08004666 <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8004666:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800466a:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 800466e:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8004670:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8004674:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 8004678:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 800467c:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8004680:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8004684:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 8004688:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800468c:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 800468e:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8004692:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8004696:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800469a:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 800469e:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80046a0:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80046a2:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80046a4:	d1df      	bne.n	8004666 <arm_bitreversal_16_0>
	POP      {r4-r9}
 80046a6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80046aa:	4770      	bx	lr

080046ac <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b0a1      	sub	sp, #132	; 0x84
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	881b      	ldrh	r3, [r3, #0]
 80046ba:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 80046bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 80046d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046d2:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 80046d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046d6:	085b      	lsrs	r3, r3, #1
 80046d8:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80046da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	4413      	add	r3, r2
 80046e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 80046e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80046ea:	4413      	add	r3, r2
 80046ec:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 80046ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046f0:	089b      	lsrs	r3, r3, #2
 80046f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046f4:	e196      	b.n	8004a24 <arm_cfft_radix8by2_f32+0x378>
    {
        t1[0] = p1[0];
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 800470e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8004714:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 800471a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8004720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8004726:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 800472c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8004732:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8004738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 800473e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8004744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 800474a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8004750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8004756:	683c      	ldr	r4, [r7, #0]
 8004758:	1d23      	adds	r3, r4, #4
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	f004 f9c6 	bl	8008af4 <__addsf3>
 8004768:	4603      	mov	r3, r0
 800476a:	6023      	str	r3, [r4, #0]
        *p1++ = t1[1] + t2[1];
 800476c:	683c      	ldr	r4, [r7, #0]
 800476e:	1d23      	adds	r3, r4, #4
 8004770:	603b      	str	r3, [r7, #0]
 8004772:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	4610      	mov	r0, r2
 8004778:	4619      	mov	r1, r3
 800477a:	f004 f9bb 	bl	8008af4 <__addsf3>
 800477e:	4603      	mov	r3, r0
 8004780:	6023      	str	r3, [r4, #0]
        *p1++ = t1[2] + t2[2];
 8004782:	683c      	ldr	r4, [r7, #0]
 8004784:	1d23      	adds	r3, r4, #4
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	f004 f9b0 	bl	8008af4 <__addsf3>
 8004794:	4603      	mov	r3, r0
 8004796:	6023      	str	r3, [r4, #0]
        *p1++ = t1[3] + t2[3];    // col 1
 8004798:	683c      	ldr	r4, [r7, #0]
 800479a:	1d23      	adds	r3, r4, #4
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	f004 f9a5 	bl	8008af4 <__addsf3>
 80047aa:	4603      	mov	r3, r0
 80047ac:	6023      	str	r3, [r4, #0]

        t2[0] = t1[0] - t2[0];
 80047ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80047b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	f004 f99b 	bl	8008af0 <__aeabi_fsub>
 80047ba:	4603      	mov	r3, r0
 80047bc:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 80047be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	f004 f993 	bl	8008af0 <__aeabi_fsub>
 80047ca:	4603      	mov	r3, r0
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 80047ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d2:	4610      	mov	r0, r2
 80047d4:	4619      	mov	r1, r3
 80047d6:	f004 f98b 	bl	8008af0 <__aeabi_fsub>
 80047da:	4603      	mov	r3, r0
 80047dc:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80047de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e2:	4610      	mov	r0, r2
 80047e4:	4619      	mov	r1, r3
 80047e6:	f004 f983 	bl	8008af0 <__aeabi_fsub>
 80047ea:	4603      	mov	r3, r0
 80047ec:	637b      	str	r3, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80047ee:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80047f0:	1d23      	adds	r3, r4, #4
 80047f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4610      	mov	r0, r2
 80047fa:	4619      	mov	r1, r3
 80047fc:	f004 f97a 	bl	8008af4 <__addsf3>
 8004800:	4603      	mov	r3, r0
 8004802:	6023      	str	r3, [r4, #0]
        *pMid1++ = t3[1] + t4[1];
 8004804:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8004806:	1d23      	adds	r3, r4, #4
 8004808:	67fb      	str	r3, [r7, #124]	; 0x7c
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4610      	mov	r0, r2
 8004810:	4619      	mov	r1, r3
 8004812:	f004 f96f 	bl	8008af4 <__addsf3>
 8004816:	4603      	mov	r3, r0
 8004818:	6023      	str	r3, [r4, #0]
        *pMid1++ = t3[2] + t4[2];
 800481a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800481c:	1d23      	adds	r3, r4, #4
 800481e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004820:	6a3a      	ldr	r2, [r7, #32]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	4610      	mov	r0, r2
 8004826:	4619      	mov	r1, r3
 8004828:	f004 f964 	bl	8008af4 <__addsf3>
 800482c:	4603      	mov	r3, r0
 800482e:	6023      	str	r3, [r4, #0]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8004830:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	f004 f959 	bl	8008af4 <__addsf3>
 8004842:	4603      	mov	r3, r0
 8004844:	6023      	str	r3, [r4, #0]

        t4[0] = t4[0] - t3[0];
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	4610      	mov	r0, r2
 800484c:	4619      	mov	r1, r3
 800484e:	f004 f94f 	bl	8008af0 <__aeabi_fsub>
 8004852:	4603      	mov	r3, r0
 8004854:	60bb      	str	r3, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	4610      	mov	r0, r2
 800485c:	4619      	mov	r1, r3
 800485e:	f004 f947 	bl	8008af0 <__aeabi_fsub>
 8004862:	4603      	mov	r3, r0
 8004864:	60fb      	str	r3, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	f004 f93f 	bl	8008af0 <__aeabi_fsub>
 8004872:	4603      	mov	r3, r0
 8004874:	613b      	str	r3, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	4610      	mov	r0, r2
 800487c:	4619      	mov	r1, r3
 800487e:	f004 f937 	bl	8008af0 <__aeabi_fsub>
 8004882:	4603      	mov	r3, r0
 8004884:	617b      	str	r3, [r7, #20]

        twR = *tw++;
 8004886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	673a      	str	r2, [r7, #112]	; 0x70
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8004890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004892:	1d1a      	adds	r2, r3, #4
 8004894:	673a      	str	r2, [r7, #112]	; 0x70
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	4618      	mov	r0, r3
 800489e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80048a0:	f004 fa30 	bl	8008d04 <__aeabi_fmul>
 80048a4:	4603      	mov	r3, r0
 80048a6:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 80048a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048aa:	4618      	mov	r0, r3
 80048ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048ae:	f004 fa29 	bl	8008d04 <__aeabi_fmul>
 80048b2:	4603      	mov	r3, r0
 80048b4:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	4618      	mov	r0, r3
 80048ba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80048bc:	f004 fa22 	bl	8008d04 <__aeabi_fmul>
 80048c0:	4603      	mov	r3, r0
 80048c2:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	4618      	mov	r0, r3
 80048c8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048ca:	f004 fa1b 	bl	8008d04 <__aeabi_fmul>
 80048ce:	4603      	mov	r3, r0
 80048d0:	64bb      	str	r3, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80048d2:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80048d4:	1d23      	adds	r3, r4, #4
 80048d6:	677b      	str	r3, [r7, #116]	; 0x74
 80048d8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80048da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80048dc:	f004 f90a 	bl	8008af4 <__addsf3>
 80048e0:	4603      	mov	r3, r0
 80048e2:	6023      	str	r3, [r4, #0]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80048e4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80048e6:	1d23      	adds	r3, r4, #4
 80048e8:	677b      	str	r3, [r7, #116]	; 0x74
 80048ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80048ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048ee:	f004 f8ff 	bl	8008af0 <__aeabi_fsub>
 80048f2:	4603      	mov	r3, r0
 80048f4:	6023      	str	r3, [r4, #0]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	4618      	mov	r0, r3
 80048fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80048fc:	f004 fa02 	bl	8008d04 <__aeabi_fmul>
 8004900:	4603      	mov	r3, r0
 8004902:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4618      	mov	r0, r3
 8004908:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800490a:	f004 f9fb 	bl	8008d04 <__aeabi_fmul>
 800490e:	4603      	mov	r3, r0
 8004910:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4618      	mov	r0, r3
 8004916:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004918:	f004 f9f4 	bl	8008d04 <__aeabi_fmul>
 800491c:	4603      	mov	r3, r0
 800491e:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4618      	mov	r0, r3
 8004924:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004926:	f004 f9ed 	bl	8008d04 <__aeabi_fmul>
 800492a:	4603      	mov	r3, r0
 800492c:	64bb      	str	r3, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800492e:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8004930:	1d23      	adds	r3, r4, #4
 8004932:	67bb      	str	r3, [r7, #120]	; 0x78
 8004934:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004936:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004938:	f004 f8da 	bl	8008af0 <__aeabi_fsub>
 800493c:	4603      	mov	r3, r0
 800493e:	6023      	str	r3, [r4, #0]
        *pMid2++ = m2 + m3;
 8004940:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8004942:	1d23      	adds	r3, r4, #4
 8004944:	67bb      	str	r3, [r7, #120]	; 0x78
 8004946:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004948:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800494a:	f004 f8d3 	bl	8008af4 <__addsf3>
 800494e:	4603      	mov	r3, r0
 8004950:	6023      	str	r3, [r4, #0]

        twR = *tw++;
 8004952:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	673a      	str	r2, [r7, #112]	; 0x70
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 800495c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800495e:	1d1a      	adds	r2, r3, #4
 8004960:	673a      	str	r2, [r7, #112]	; 0x70
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 8004966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004968:	4618      	mov	r0, r3
 800496a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800496c:	f004 f9ca 	bl	8008d04 <__aeabi_fmul>
 8004970:	4603      	mov	r3, r0
 8004972:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 8004974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004976:	4618      	mov	r0, r3
 8004978:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800497a:	f004 f9c3 	bl	8008d04 <__aeabi_fmul>
 800497e:	4603      	mov	r3, r0
 8004980:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 8004982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004984:	4618      	mov	r0, r3
 8004986:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004988:	f004 f9bc 	bl	8008d04 <__aeabi_fmul>
 800498c:	4603      	mov	r3, r0
 800498e:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 8004990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004992:	4618      	mov	r0, r3
 8004994:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004996:	f004 f9b5 	bl	8008d04 <__aeabi_fmul>
 800499a:	4603      	mov	r3, r0
 800499c:	64bb      	str	r3, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 800499e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80049a0:	1d23      	adds	r3, r4, #4
 80049a2:	677b      	str	r3, [r7, #116]	; 0x74
 80049a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80049a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049a8:	f004 f8a4 	bl	8008af4 <__addsf3>
 80049ac:	4603      	mov	r3, r0
 80049ae:	6023      	str	r3, [r4, #0]
        *p2++ = m2 - m3;
 80049b0:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 80049b2:	1d23      	adds	r3, r4, #4
 80049b4:	677b      	str	r3, [r7, #116]	; 0x74
 80049b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80049b8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80049ba:	f004 f899 	bl	8008af0 <__aeabi_fsub>
 80049be:	4603      	mov	r3, r0
 80049c0:	6023      	str	r3, [r4, #0]
        
        m0 = t4[2] * twI;
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4618      	mov	r0, r3
 80049c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049c8:	f004 f99c 	bl	8008d04 <__aeabi_fmul>
 80049cc:	4603      	mov	r3, r0
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	4618      	mov	r0, r3
 80049d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80049d6:	f004 f995 	bl	8008d04 <__aeabi_fmul>
 80049da:	4603      	mov	r3, r0
 80049dc:	653b      	str	r3, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	4618      	mov	r0, r3
 80049e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049e4:	f004 f98e 	bl	8008d04 <__aeabi_fmul>
 80049e8:	4603      	mov	r3, r0
 80049ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4618      	mov	r0, r3
 80049f0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80049f2:	f004 f987 	bl	8008d04 <__aeabi_fmul>
 80049f6:	4603      	mov	r3, r0
 80049f8:	64bb      	str	r3, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 80049fa:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 80049fc:	1d23      	adds	r3, r4, #4
 80049fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a00:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004a02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a04:	f004 f874 	bl	8008af0 <__aeabi_fsub>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	6023      	str	r3, [r4, #0]
        *pMid2++ = m2 + m3;
 8004a0c:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8004a0e:	1d23      	adds	r3, r4, #4
 8004a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8004a14:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a16:	f004 f86d 	bl	8008af4 <__addsf3>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	6023      	str	r3, [r4, #0]
    //    Initialize mid pointers
    pMid1 = p1 + L;
    pMid2 = p2 + L;

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8004a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a20:	3b01      	subs	r3, #1
 8004a22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f47f ae65 	bne.w	80046f6 <arm_cfft_radix8by2_f32+0x4a>
        *pMid2++ = m0 - m1;
        *pMid2++ = m2 + m3;
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8004a2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004a36:	4611      	mov	r1, r2
 8004a38:	461a      	mov	r2, r3
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	f000 fedc 	bl	80057f8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8004a40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004a4a:	4611      	mov	r1, r2
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	2302      	movs	r3, #2
 8004a50:	f000 fed2 	bl	80057f8 <arm_radix8_butterfly_f32>
}
 8004a54:	3784      	adds	r7, #132	; 0x84
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd90      	pop	{r4, r7, pc}
 8004a5a:	bf00      	nop

08004a5c <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b0ad      	sub	sp, #180	; 0xb4
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	881b      	ldrh	r3, [r3, #0]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8004a72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8004a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8004a90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8004aa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aa8:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8004aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aae:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8004ab0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ab4:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8004ab6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004aba:	3b04      	subs	r3, #4
 8004abc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8004ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ac4:	3b04      	subs	r3, #4
 8004ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8004aca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ace:	3b04      	subs	r3, #4
 8004ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8004ad4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8004ade:	4413      	add	r3, r2
 8004ae0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004aec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004af4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004af8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8004afc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004b00:	085b      	lsrs	r3, r3, #1
 8004b02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8004b06:	2302      	movs	r3, #2
 8004b08:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8004b0e:	2306      	movs	r3, #6
 8004b10:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	4619      	mov	r1, r3
 8004b20:	f003 ffe8 	bl	8008af4 <__addsf3>
 8004b24:	4603      	mov	r3, r0
 8004b26:	663b      	str	r3, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	f003 ffdb 	bl	8008af0 <__aeabi_fsub>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	3304      	adds	r3, #4
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b48:	3304      	adds	r3, #4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f003 ffd0 	bl	8008af4 <__addsf3>
 8004b54:	4603      	mov	r3, r0
 8004b56:	65bb      	str	r3, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b62:	3304      	adds	r3, #4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	f003 ffc1 	bl	8008af0 <__aeabi_fsub>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	657b      	str	r3, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004b72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b76:	3304      	adds	r3, #4
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004b7e:	f003 ffb9 	bl	8008af4 <__addsf3>
 8004b82:	4603      	mov	r3, r0
 8004b84:	461a      	mov	r2, r3
 8004b86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b8a:	3304      	adds	r3, #4
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	f003 ffad 	bl	8008af0 <__aeabi_fsub>
 8004b96:	4603      	mov	r3, r0
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	f003 ffa4 	bl	8008af0 <__aeabi_fsub>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	f003 ff9d 	bl	8008af4 <__addsf3>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	633b      	str	r3, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f003 ff92 	bl	8008af0 <__aeabi_fsub>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	4619      	mov	r1, r3
 8004bda:	f003 ff89 	bl	8008af0 <__aeabi_fsub>
 8004bde:	4603      	mov	r3, r0
 8004be0:	61fb      	str	r3, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004be2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004be6:	3304      	adds	r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004bec:	4619      	mov	r1, r3
 8004bee:	f003 ff7f 	bl	8008af0 <__aeabi_fsub>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	f003 ff75 	bl	8008af0 <__aeabi_fsub>
 8004c06:	4603      	mov	r3, r0
 8004c08:	623b      	str	r3, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c0e:	3304      	adds	r3, #4
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004c14:	4619      	mov	r1, r3
 8004c16:	f003 ff6b 	bl	8008af0 <__aeabi_fsub>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c22:	3304      	adds	r3, #4
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4610      	mov	r0, r2
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f003 ff63 	bl	8008af4 <__addsf3>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	60fb      	str	r3, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004c32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c3c:	f003 ff5a 	bl	8008af4 <__addsf3>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	f003 ff4f 	bl	8008af0 <__aeabi_fsub>
 8004c52:	4603      	mov	r3, r0
 8004c54:	613b      	str	r3, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004c56:	683c      	ldr	r4, [r7, #0]
 8004c58:	1d23      	adds	r3, r4, #4
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004c66:	f003 ff45 	bl	8008af4 <__addsf3>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	f003 ff3c 	bl	8008af4 <__addsf3>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	6023      	str	r3, [r4, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004c80:	683c      	ldr	r4, [r7, #0]
 8004c82:	1d23      	adds	r3, r4, #4
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004c8a:	3304      	adds	r3, #4
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c92:	f003 ff2f 	bl	8008af4 <__addsf3>
 8004c96:	4603      	mov	r3, r0
 8004c98:	461a      	mov	r2, r3
 8004c9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f003 ff25 	bl	8008af4 <__addsf3>
 8004caa:	4603      	mov	r3, r0
 8004cac:	6023      	str	r3, [r4, #0]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8004cae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cb2:	1d1a      	adds	r2, r3, #4
 8004cb4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cba:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8004cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004cc0:	1d1a      	adds	r2, r3, #4
 8004cc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc8:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8004cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cce:	1d1a      	adds	r2, r3, #4
 8004cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cd4:	69fa      	ldr	r2, [r7, #28]
 8004cd6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8004cd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004cdc:	1d1a      	adds	r2, r3, #4
 8004cde:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8004ce6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cea:	1d1a      	adds	r2, r3, #4
 8004cec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8004cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8004d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8004d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004d18:	4413      	add	r3, r2
 8004d1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8004d1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d26:	4413      	add	r3, r2
 8004d28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8004d2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d30:	3b02      	subs	r3, #2
 8004d32:	085b      	lsrs	r3, r3, #1
 8004d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d38:	e30b      	b.n	8005352 <arm_cfft_radix8by4_f32+0x8f6>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4610      	mov	r0, r2
 8004d46:	4619      	mov	r1, r3
 8004d48:	f003 fed4 	bl	8008af4 <__addsf3>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	663b      	str	r3, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4610      	mov	r0, r2
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	f003 fec7 	bl	8008af0 <__aeabi_fsub>
 8004d62:	4603      	mov	r3, r0
 8004d64:	65fb      	str	r3, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d70:	3304      	adds	r3, #4
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	f003 febc 	bl	8008af4 <__addsf3>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	65bb      	str	r3, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	3304      	adds	r3, #4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4610      	mov	r0, r2
 8004d90:	4619      	mov	r1, r3
 8004d92:	f003 fead 	bl	8008af0 <__aeabi_fsub>
 8004d96:	4603      	mov	r3, r0
 8004d98:	657b      	str	r3, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8004d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d9e:	3304      	adds	r3, #4
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4618      	mov	r0, r3
 8004da4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004da6:	f003 fea5 	bl	8008af4 <__addsf3>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461a      	mov	r2, r3
 8004dae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004db2:	3304      	adds	r3, #4
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	f003 fe99 	bl	8008af0 <__aeabi_fsub>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8004dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f003 fe90 	bl	8008af0 <__aeabi_fsub>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	f003 fe89 	bl	8008af4 <__addsf3>
 8004de2:	4603      	mov	r3, r0
 8004de4:	633b      	str	r3, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8004de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004dee:	4619      	mov	r1, r3
 8004df0:	f003 fe7e 	bl	8008af0 <__aeabi_fsub>
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	f003 fe75 	bl	8008af0 <__aeabi_fsub>
 8004e06:	4603      	mov	r3, r0
 8004e08:	61fb      	str	r3, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8004e0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e0e:	3304      	adds	r3, #4
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004e14:	4619      	mov	r1, r3
 8004e16:	f003 fe6b 	bl	8008af0 <__aeabi_fsub>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e22:	3304      	adds	r3, #4
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4610      	mov	r0, r2
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f003 fe61 	bl	8008af0 <__aeabi_fsub>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	623b      	str	r3, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8004e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e36:	3304      	adds	r3, #4
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	f003 fe57 	bl	8008af0 <__aeabi_fsub>
 8004e42:	4603      	mov	r3, r0
 8004e44:	461a      	mov	r2, r3
 8004e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	f003 fe4f 	bl	8008af4 <__addsf3>
 8004e56:	4603      	mov	r3, r0
 8004e58:	60fb      	str	r3, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e64:	f003 fe46 	bl	8008af4 <__addsf3>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	f003 fe3b 	bl	8008af0 <__aeabi_fsub>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	613b      	str	r3, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8004e7e:	683c      	ldr	r4, [r7, #0]
 8004e80:	1d23      	adds	r3, r4, #4
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004e8e:	f003 fe31 	bl	8008af4 <__addsf3>
 8004e92:	4603      	mov	r3, r0
 8004e94:	461a      	mov	r2, r3
 8004e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	f003 fe28 	bl	8008af4 <__addsf3>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	6023      	str	r3, [r4, #0]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8004ea8:	683c      	ldr	r4, [r7, #0]
 8004eaa:	1d23      	adds	r3, r4, #4
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004eba:	f003 fe1b 	bl	8008af4 <__addsf3>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4610      	mov	r0, r2
 8004ecc:	4619      	mov	r1, r3
 8004ece:	f003 fe11 	bl	8008af4 <__addsf3>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	6023      	str	r3, [r4, #0]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8004ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004eda:	3b04      	subs	r3, #4
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ee2:	3b04      	subs	r3, #4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f003 fe03 	bl	8008af4 <__addsf3>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	65bb      	str	r3, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8004ef2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004efe:	3b04      	subs	r3, #4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	f003 fdf3 	bl	8008af0 <__aeabi_fsub>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	657b      	str	r3, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8004f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f003 fde9 	bl	8008af4 <__addsf3>
 8004f22:	4603      	mov	r3, r0
 8004f24:	663b      	str	r3, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8004f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4610      	mov	r0, r2
 8004f34:	4619      	mov	r1, r3
 8004f36:	f003 fddb 	bl	8008af0 <__aeabi_fsub>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8004f3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f003 fdcf 	bl	8008af0 <__aeabi_fsub>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4618      	mov	r0, r3
 8004f56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f58:	f003 fdcc 	bl	8008af4 <__addsf3>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8004f60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f003 fdbe 	bl	8008af0 <__aeabi_fsub>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f7c:	3b04      	subs	r3, #4
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	f003 fdb4 	bl	8008af0 <__aeabi_fsub>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f90:	3b04      	subs	r3, #4
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	f003 fdac 	bl	8008af4 <__addsf3>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	63bb      	str	r3, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8004fa0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fa4:	3b04      	subs	r3, #4
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8004faa:	4619      	mov	r1, r3
 8004fac:	f003 fda0 	bl	8008af0 <__aeabi_fsub>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fb8:	3b04      	subs	r3, #4
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f003 fd96 	bl	8008af0 <__aeabi_fsub>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8004fc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f003 fd8d 	bl	8008af0 <__aeabi_fsub>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	461a      	mov	r2, r3
 8004fda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4610      	mov	r0, r2
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	f003 fd84 	bl	8008af0 <__aeabi_fsub>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8004fec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	f003 fd78 	bl	8008af0 <__aeabi_fsub>
 8005000:	4603      	mov	r3, r0
 8005002:	4618      	mov	r0, r3
 8005004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005006:	f003 fd73 	bl	8008af0 <__aeabi_fsub>
 800500a:	4603      	mov	r3, r0
 800500c:	617b      	str	r3, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800500e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005012:	3b04      	subs	r3, #4
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800501a:	3b04      	subs	r3, #4
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4610      	mov	r0, r2
 8005020:	4619      	mov	r1, r3
 8005022:	f003 fd65 	bl	8008af0 <__aeabi_fsub>
 8005026:	4603      	mov	r3, r0
 8005028:	4618      	mov	r0, r3
 800502a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800502c:	f003 fd60 	bl	8008af0 <__aeabi_fsub>
 8005030:	4603      	mov	r3, r0
 8005032:	61bb      	str	r3, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8005034:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8005038:	1f23      	subs	r3, r4, #4
 800503a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800503e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005048:	f003 fd54 	bl	8008af4 <__addsf3>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	f003 fd4b 	bl	8008af4 <__addsf3>
 800505e:	4603      	mov	r3, r0
 8005060:	6023      	str	r3, [r4, #0]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8005062:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 8005066:	1f23      	subs	r3, r4, #4
 8005068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800506c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005070:	3b04      	subs	r3, #4
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005078:	f003 fd3c 	bl	8008af4 <__addsf3>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005084:	3b04      	subs	r3, #4
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	f003 fd32 	bl	8008af4 <__addsf3>
 8005090:	4603      	mov	r3, r0
 8005092:	6023      	str	r3, [r4, #0]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8005094:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005098:	1d1a      	adds	r2, r3, #4
 800509a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 80050a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050a6:	1d1a      	adds	r2, r3, #4
 80050a8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 80050b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b2:	4618      	mov	r0, r3
 80050b4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050b6:	f003 fe25 	bl	8008d04 <__aeabi_fmul>
 80050ba:	4603      	mov	r3, r0
 80050bc:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	4618      	mov	r0, r3
 80050c2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80050c4:	f003 fe1e 	bl	8008d04 <__aeabi_fmul>
 80050c8:	4603      	mov	r3, r0
 80050ca:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	4618      	mov	r0, r3
 80050d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050d2:	f003 fe17 	bl	8008d04 <__aeabi_fmul>
 80050d6:	4603      	mov	r3, r0
 80050d8:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	4618      	mov	r0, r3
 80050de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80050e0:	f003 fe10 	bl	8008d04 <__aeabi_fmul>
 80050e4:	4603      	mov	r3, r0
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 80050e8:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80050ec:	1d23      	adds	r3, r4, #4
 80050ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050f2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80050f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050f6:	f003 fcfd 	bl	8008af4 <__addsf3>
 80050fa:	4603      	mov	r3, r0
 80050fc:	6023      	str	r3, [r4, #0]
        *p2++ = m2 - m3;
 80050fe:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005102:	1d23      	adds	r3, r4, #4
 8005104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005108:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800510a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800510c:	f003 fcf0 	bl	8008af0 <__aeabi_fsub>
 8005110:	4603      	mov	r3, r0
 8005112:	6023      	str	r3, [r4, #0]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	4618      	mov	r0, r3
 8005118:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800511a:	f003 fdf3 	bl	8008d04 <__aeabi_fmul>
 800511e:	4603      	mov	r3, r0
 8005120:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8005122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005124:	4618      	mov	r0, r3
 8005126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005128:	f003 fdec 	bl	8008d04 <__aeabi_fmul>
 800512c:	4603      	mov	r3, r0
 800512e:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8005130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005132:	4618      	mov	r0, r3
 8005134:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005136:	f003 fde5 	bl	8008d04 <__aeabi_fmul>
 800513a:	4603      	mov	r3, r0
 800513c:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	4618      	mov	r0, r3
 8005142:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005144:	f003 fdde 	bl	8008d04 <__aeabi_fmul>
 8005148:	4603      	mov	r3, r0
 800514a:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 800514c:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8005150:	1f23      	subs	r3, r4, #4
 8005152:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005156:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005158:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800515a:	f003 fcc9 	bl	8008af0 <__aeabi_fsub>
 800515e:	4603      	mov	r3, r0
 8005160:	6023      	str	r3, [r4, #0]
        *pEnd2-- = m2 + m3;
 8005162:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 8005166:	1f23      	subs	r3, r4, #4
 8005168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800516c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800516e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005170:	f003 fcc0 	bl	8008af4 <__addsf3>
 8005174:	4603      	mov	r3, r0
 8005176:	6023      	str	r3, [r4, #0]

        // COL 3
        twR = tw3[0];
 8005178:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 8005180:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8005188:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005190:	4413      	add	r3, r2
 8005192:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4618      	mov	r0, r3
 800519a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800519c:	f003 fdb2 	bl	8008d04 <__aeabi_fmul>
 80051a0:	4603      	mov	r3, r0
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	4618      	mov	r0, r3
 80051a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051aa:	f003 fdab 	bl	8008d04 <__aeabi_fmul>
 80051ae:	4603      	mov	r3, r0
 80051b0:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	4618      	mov	r0, r3
 80051b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80051b8:	f003 fda4 	bl	8008d04 <__aeabi_fmul>
 80051bc:	4603      	mov	r3, r0
 80051be:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	4618      	mov	r0, r3
 80051c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80051c6:	f003 fd9d 	bl	8008d04 <__aeabi_fmul>
 80051ca:	4603      	mov	r3, r0
 80051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 80051ce:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 80051d2:	1d23      	adds	r3, r4, #4
 80051d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051d8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80051da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051dc:	f003 fc8a 	bl	8008af4 <__addsf3>
 80051e0:	4603      	mov	r3, r0
 80051e2:	6023      	str	r3, [r4, #0]
        *p3++ = m2 - m3;
 80051e4:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 80051e8:	1d23      	adds	r3, r4, #4
 80051ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80051f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80051f2:	f003 fc7d 	bl	8008af0 <__aeabi_fsub>
 80051f6:	4603      	mov	r3, r0
 80051f8:	6023      	str	r3, [r4, #0]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005200:	4618      	mov	r0, r3
 8005202:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005204:	f003 fd7e 	bl	8008d04 <__aeabi_fmul>
 8005208:	4603      	mov	r3, r0
 800520a:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	4618      	mov	r0, r3
 8005210:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005212:	f003 fd77 	bl	8008d04 <__aeabi_fmul>
 8005216:	4603      	mov	r3, r0
 8005218:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	4618      	mov	r0, r3
 800521e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005220:	f003 fd70 	bl	8008d04 <__aeabi_fmul>
 8005224:	4603      	mov	r3, r0
 8005226:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	4618      	mov	r0, r3
 800522c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800522e:	f003 fd69 	bl	8008d04 <__aeabi_fmul>
 8005232:	4603      	mov	r3, r0
 8005234:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 8005236:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 800523a:	1f23      	subs	r3, r4, #4
 800523c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005240:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005242:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005244:	f003 fc54 	bl	8008af0 <__aeabi_fsub>
 8005248:	4603      	mov	r3, r0
 800524a:	6023      	str	r3, [r4, #0]
        *pEnd3-- = m3 - m2;
 800524c:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8005250:	1f23      	subs	r3, r4, #4
 8005252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005256:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005258:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800525a:	f003 fc49 	bl	8008af0 <__aeabi_fsub>
 800525e:	4603      	mov	r3, r0
 8005260:	6023      	str	r3, [r4, #0]
        
        // COL 4
        twR = tw4[0];
 8005262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 800526a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 8005272:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800527a:	4413      	add	r3, r2
 800527c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4618      	mov	r0, r3
 8005284:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005286:	f003 fd3d 	bl	8008d04 <__aeabi_fmul>
 800528a:	4603      	mov	r3, r0
 800528c:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4618      	mov	r0, r3
 8005292:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005294:	f003 fd36 	bl	8008d04 <__aeabi_fmul>
 8005298:	4603      	mov	r3, r0
 800529a:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	4618      	mov	r0, r3
 80052a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052a2:	f003 fd2f 	bl	8008d04 <__aeabi_fmul>
 80052a6:	4603      	mov	r3, r0
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4618      	mov	r0, r3
 80052ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052b0:	f003 fd28 	bl	8008d04 <__aeabi_fmul>
 80052b4:	4603      	mov	r3, r0
 80052b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 80052b8:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 80052bc:	1d23      	adds	r3, r4, #4
 80052be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80052c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052c6:	f003 fc15 	bl	8008af4 <__addsf3>
 80052ca:	4603      	mov	r3, r0
 80052cc:	6023      	str	r3, [r4, #0]
        *p4++ = m2 - m3;
 80052ce:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 80052d2:	1d23      	adds	r3, r4, #4
 80052d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80052d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80052da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052dc:	f003 fc08 	bl	8008af0 <__aeabi_fsub>
 80052e0:	4603      	mov	r3, r0
 80052e2:	6023      	str	r3, [r4, #0]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	4618      	mov	r0, r3
 80052e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80052ea:	f003 fd0b 	bl	8008d04 <__aeabi_fmul>
 80052ee:	4603      	mov	r3, r0
 80052f0:	64bb      	str	r3, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	4618      	mov	r0, r3
 80052f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80052f8:	f003 fd04 	bl	8008d04 <__aeabi_fmul>
 80052fc:	4603      	mov	r3, r0
 80052fe:	647b      	str	r3, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4618      	mov	r0, r3
 8005304:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005306:	f003 fcfd 	bl	8008d04 <__aeabi_fmul>
 800530a:	4603      	mov	r3, r0
 800530c:	643b      	str	r3, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	4618      	mov	r0, r3
 8005312:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005314:	f003 fcf6 	bl	8008d04 <__aeabi_fmul>
 8005318:	4603      	mov	r3, r0
 800531a:	63fb      	str	r3, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 800531c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005320:	1f23      	subs	r3, r4, #4
 8005322:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005326:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005328:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800532a:	f003 fbe1 	bl	8008af0 <__aeabi_fsub>
 800532e:	4603      	mov	r3, r0
 8005330:	6023      	str	r3, [r4, #0]
        *pEnd4-- = m2 + m3;
 8005332:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8005336:	1f23      	subs	r3, r4, #4
 8005338:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800533c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800533e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005340:	f003 fbd8 	bl	8008af4 <__addsf3>
 8005344:	4603      	mov	r3, r0
 8005346:	6023      	str	r3, [r4, #0]

    tw2 += twMod2;
    tw3 += twMod3;
    tw4 += twMod4;

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8005348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800534c:	3b01      	subs	r3, #1
 800534e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005352:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005356:	2b00      	cmp	r3, #0
 8005358:	f47f acef 	bne.w	8004d3a <arm_cfft_radix8by4_f32+0x2de>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	f003 fbc3 	bl	8008af4 <__addsf3>
 800536e:	4603      	mov	r3, r0
 8005370:	663b      	str	r3, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4610      	mov	r0, r2
 800537e:	4619      	mov	r1, r3
 8005380:	f003 fbb6 	bl	8008af0 <__aeabi_fsub>
 8005384:	4603      	mov	r3, r0
 8005386:	65fb      	str	r3, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	3304      	adds	r3, #4
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005392:	3304      	adds	r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f003 fbab 	bl	8008af4 <__addsf3>
 800539e:	4603      	mov	r3, r0
 80053a0:	65bb      	str	r3, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	3304      	adds	r3, #4
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053ac:	3304      	adds	r3, #4
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4610      	mov	r0, r2
 80053b2:	4619      	mov	r1, r3
 80053b4:	f003 fb9c 	bl	8008af0 <__aeabi_fsub>
 80053b8:	4603      	mov	r3, r0
 80053ba:	657b      	str	r3, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80053bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053c0:	3304      	adds	r3, #4
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80053c8:	f003 fb94 	bl	8008af4 <__addsf3>
 80053cc:	4603      	mov	r3, r0
 80053ce:	461a      	mov	r2, r3
 80053d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053d4:	3304      	adds	r3, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4610      	mov	r0, r2
 80053da:	4619      	mov	r1, r3
 80053dc:	f003 fb88 	bl	8008af0 <__aeabi_fsub>
 80053e0:	4603      	mov	r3, r0
 80053e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80053e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80053ec:	4619      	mov	r1, r3
 80053ee:	f003 fb7f 	bl	8008af0 <__aeabi_fsub>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4610      	mov	r0, r2
 80053fe:	4619      	mov	r1, r3
 8005400:	f003 fb78 	bl	8008af4 <__addsf3>
 8005404:	4603      	mov	r3, r0
 8005406:	633b      	str	r3, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8005408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8005410:	4619      	mov	r1, r3
 8005412:	f003 fb6d 	bl	8008af0 <__aeabi_fsub>
 8005416:	4603      	mov	r3, r0
 8005418:	461a      	mov	r2, r3
 800541a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	f003 fb64 	bl	8008af0 <__aeabi_fsub>
 8005428:	4603      	mov	r3, r0
 800542a:	61fb      	str	r3, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800542c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005430:	3304      	adds	r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005436:	4619      	mov	r1, r3
 8005438:	f003 fb5a 	bl	8008af0 <__aeabi_fsub>
 800543c:	4603      	mov	r3, r0
 800543e:	461a      	mov	r2, r3
 8005440:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005444:	3304      	adds	r3, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	f003 fb50 	bl	8008af0 <__aeabi_fsub>
 8005450:	4603      	mov	r3, r0
 8005452:	623b      	str	r3, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8005454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005458:	3304      	adds	r3, #4
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800545e:	4619      	mov	r1, r3
 8005460:	f003 fb46 	bl	8008af0 <__aeabi_fsub>
 8005464:	4603      	mov	r3, r0
 8005466:	461a      	mov	r2, r3
 8005468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800546c:	3304      	adds	r3, #4
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4610      	mov	r0, r2
 8005472:	4619      	mov	r1, r3
 8005474:	f003 fb3e 	bl	8008af4 <__addsf3>
 8005478:	4603      	mov	r3, r0
 800547a:	60fb      	str	r3, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800547c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005486:	f003 fb35 	bl	8008af4 <__addsf3>
 800548a:	4603      	mov	r3, r0
 800548c:	461a      	mov	r2, r3
 800548e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4610      	mov	r0, r2
 8005496:	4619      	mov	r1, r3
 8005498:	f003 fb2a 	bl	8008af0 <__aeabi_fsub>
 800549c:	4603      	mov	r3, r0
 800549e:	613b      	str	r3, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80054a0:	683c      	ldr	r4, [r7, #0]
 80054a2:	1d23      	adds	r3, r4, #4
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80054b0:	f003 fb20 	bl	8008af4 <__addsf3>
 80054b4:	4603      	mov	r3, r0
 80054b6:	461a      	mov	r2, r3
 80054b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4610      	mov	r0, r2
 80054c0:	4619      	mov	r1, r3
 80054c2:	f003 fb17 	bl	8008af4 <__addsf3>
 80054c6:	4603      	mov	r3, r0
 80054c8:	6023      	str	r3, [r4, #0]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80054ca:	683c      	ldr	r4, [r7, #0]
 80054cc:	1d23      	adds	r3, r4, #4
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054d4:	3304      	adds	r3, #4
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054dc:	f003 fb0a 	bl	8008af4 <__addsf3>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054e8:	3304      	adds	r3, #4
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4610      	mov	r0, r2
 80054ee:	4619      	mov	r1, r3
 80054f0:	f003 fb00 	bl	8008af4 <__addsf3>
 80054f4:	4603      	mov	r3, r0
 80054f6:	6023      	str	r3, [r4, #0]

    // COL 2
    twR = tw2[0];
 80054f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8005500:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	4618      	mov	r0, r3
 800550c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800550e:	f003 fbf9 	bl	8008d04 <__aeabi_fmul>
 8005512:	4603      	mov	r3, r0
 8005514:	64bb      	str	r3, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	4618      	mov	r0, r3
 800551a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800551c:	f003 fbf2 	bl	8008d04 <__aeabi_fmul>
 8005520:	4603      	mov	r3, r0
 8005522:	647b      	str	r3, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	4618      	mov	r0, r3
 8005528:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800552a:	f003 fbeb 	bl	8008d04 <__aeabi_fmul>
 800552e:	4603      	mov	r3, r0
 8005530:	643b      	str	r3, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	4618      	mov	r0, r3
 8005536:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005538:	f003 fbe4 	bl	8008d04 <__aeabi_fmul>
 800553c:	4603      	mov	r3, r0
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8005540:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8005544:	1d23      	adds	r3, r4, #4
 8005546:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800554a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800554c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800554e:	f003 fad1 	bl	8008af4 <__addsf3>
 8005552:	4603      	mov	r3, r0
 8005554:	6023      	str	r3, [r4, #0]
    *p2++ = m2 - m3;
 8005556:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800555a:	1d23      	adds	r3, r4, #4
 800555c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005560:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005562:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005564:	f003 fac4 	bl	8008af0 <__aeabi_fsub>
 8005568:	4603      	mov	r3, r0
 800556a:	6023      	str	r3, [r4, #0]
    // COL 3
    twR = tw3[0];
 800556c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8005574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	4618      	mov	r0, r3
 8005580:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005582:	f003 fbbf 	bl	8008d04 <__aeabi_fmul>
 8005586:	4603      	mov	r3, r0
 8005588:	64bb      	str	r3, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	4618      	mov	r0, r3
 800558e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005590:	f003 fbb8 	bl	8008d04 <__aeabi_fmul>
 8005594:	4603      	mov	r3, r0
 8005596:	647b      	str	r3, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	4618      	mov	r0, r3
 800559c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800559e:	f003 fbb1 	bl	8008d04 <__aeabi_fmul>
 80055a2:	4603      	mov	r3, r0
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4618      	mov	r0, r3
 80055aa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80055ac:	f003 fbaa 	bl	8008d04 <__aeabi_fmul>
 80055b0:	4603      	mov	r3, r0
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80055b4:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 80055b8:	1d23      	adds	r3, r4, #4
 80055ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80055c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055c2:	f003 fa97 	bl	8008af4 <__addsf3>
 80055c6:	4603      	mov	r3, r0
 80055c8:	6023      	str	r3, [r4, #0]
    *p3++ = m2 - m3;
 80055ca:	f8d7 408c 	ldr.w	r4, [r7, #140]	; 0x8c
 80055ce:	1d23      	adds	r3, r4, #4
 80055d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80055d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055d8:	f003 fa8a 	bl	8008af0 <__aeabi_fsub>
 80055dc:	4603      	mov	r3, r0
 80055de:	6023      	str	r3, [r4, #0]
    // COL 4
    twR = tw4[0];
 80055e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 80055e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4618      	mov	r0, r3
 80055f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80055f6:	f003 fb85 	bl	8008d04 <__aeabi_fmul>
 80055fa:	4603      	mov	r3, r0
 80055fc:	64bb      	str	r3, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	4618      	mov	r0, r3
 8005602:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005604:	f003 fb7e 	bl	8008d04 <__aeabi_fmul>
 8005608:	4603      	mov	r3, r0
 800560a:	647b      	str	r3, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	4618      	mov	r0, r3
 8005610:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005612:	f003 fb77 	bl	8008d04 <__aeabi_fmul>
 8005616:	4603      	mov	r3, r0
 8005618:	643b      	str	r3, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4618      	mov	r0, r3
 800561e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005620:	f003 fb70 	bl	8008d04 <__aeabi_fmul>
 8005624:	4603      	mov	r3, r0
 8005626:	63fb      	str	r3, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8005628:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 800562c:	1d23      	adds	r3, r4, #4
 800562e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005632:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005634:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005636:	f003 fa5d 	bl	8008af4 <__addsf3>
 800563a:	4603      	mov	r3, r0
 800563c:	6023      	str	r3, [r4, #0]
    *p4++ = m2 - m3;
 800563e:	f8d7 4088 	ldr.w	r4, [r7, #136]	; 0x88
 8005642:	1d23      	adds	r3, r4, #4
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005648:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800564a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800564c:	f003 fa50 	bl	8008af0 <__aeabi_fsub>
 8005650:	4603      	mov	r3, r0
 8005652:	6023      	str	r3, [r4, #0]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8005654:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005660:	4611      	mov	r1, r2
 8005662:	461a      	mov	r2, r3
 8005664:	2304      	movs	r3, #4
 8005666:	f000 f8c7 	bl	80057f8 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 800566a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800566e:	b29a      	uxth	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8005676:	4611      	mov	r1, r2
 8005678:	461a      	mov	r2, r3
 800567a:	2304      	movs	r3, #4
 800567c:	f000 f8bc 	bl	80057f8 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8005680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005684:	b29a      	uxth	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800568c:	4611      	mov	r1, r2
 800568e:	461a      	mov	r2, r3
 8005690:	2304      	movs	r3, #4
 8005692:	f000 f8b1 	bl	80057f8 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8005696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800569a:	b29a      	uxth	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	2304      	movs	r3, #4
 80056a8:	f000 f8a6 	bl	80057f8 <arm_radix8_butterfly_f32>
}
 80056ac:	37b4      	adds	r7, #180	; 0xb4
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd90      	pop	{r4, r7, pc}
 80056b2:	bf00      	nop

080056b4 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80056b4:	b590      	push	{r4, r7, lr}
 80056b6:	b089      	sub	sp, #36	; 0x24
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	4611      	mov	r1, r2
 80056c0:	461a      	mov	r2, r3
 80056c2:	460b      	mov	r3, r1
 80056c4:	71fb      	strb	r3, [r7, #7]
 80056c6:	4613      	mov	r3, r2
 80056c8:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d115      	bne.n	8005702 <arm_cfft_f32+0x4e>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3304      	adds	r3, #4
 80056da:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	e00b      	b.n	80056fa <arm_cfft_f32+0x46>
        {
            *pSrc = -*pSrc;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	601a      	str	r2, [r3, #0]
            pSrc += 2;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	3308      	adds	r3, #8
 80056f2:	61bb      	str	r3, [r7, #24]

    if(ifftFlag == 1u)
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
        for(l=0; l<L; l++) 
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	3301      	adds	r3, #1
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d3ef      	bcc.n	80056e2 <arm_cfft_f32+0x2e>
            *pSrc = -*pSrc;
            pSrc += 2;
        }
    }

    switch (L) 
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	d024      	beq.n	8005754 <arm_cfft_f32+0xa0>
 800570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570e:	d80b      	bhi.n	8005728 <arm_cfft_f32+0x74>
 8005710:	2b20      	cmp	r3, #32
 8005712:	d01f      	beq.n	8005754 <arm_cfft_f32+0xa0>
 8005714:	2b20      	cmp	r3, #32
 8005716:	d802      	bhi.n	800571e <arm_cfft_f32+0x6a>
 8005718:	2b10      	cmp	r3, #16
 800571a:	d016      	beq.n	800574a <arm_cfft_f32+0x96>
 800571c:	e02a      	b.n	8005774 <arm_cfft_f32+0xc0>
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d01d      	beq.n	800575e <arm_cfft_f32+0xaa>
 8005722:	2b80      	cmp	r3, #128	; 0x80
 8005724:	d011      	beq.n	800574a <arm_cfft_f32+0x96>
 8005726:	e025      	b.n	8005774 <arm_cfft_f32+0xc0>
 8005728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800572c:	d00d      	beq.n	800574a <arm_cfft_f32+0x96>
 800572e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005732:	d803      	bhi.n	800573c <arm_cfft_f32+0x88>
 8005734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005738:	d011      	beq.n	800575e <arm_cfft_f32+0xaa>
 800573a:	e01b      	b.n	8005774 <arm_cfft_f32+0xc0>
 800573c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005740:	d008      	beq.n	8005754 <arm_cfft_f32+0xa0>
 8005742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005746:	d00a      	beq.n	800575e <arm_cfft_f32+0xaa>
 8005748:	e014      	b.n	8005774 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	f7fe ffad 	bl	80046ac <arm_cfft_radix8by2_f32>
        break;
 8005752:	e00f      	b.n	8005774 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	f7ff f980 	bl	8004a5c <arm_cfft_radix8by4_f32>
        break;
 800575c:	e00a      	b.n	8005774 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	68b8      	ldr	r0, [r7, #8]
 8005768:	4611      	mov	r1, r2
 800576a:	461a      	mov	r2, r3
 800576c:	2301      	movs	r3, #1
 800576e:	f000 f843 	bl	80057f8 <arm_radix8_butterfly_f32>
        break;
 8005772:	bf00      	nop
    }  

    if( bitReverseFlag )
 8005774:	79bb      	ldrb	r3, [r7, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d008      	beq.n	800578c <arm_cfft_f32+0xd8>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	899a      	ldrh	r2, [r3, #12]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	68b8      	ldr	r0, [r7, #8]
 8005784:	4611      	mov	r1, r2
 8005786:	461a      	mov	r2, r3
 8005788:	f7fe ff30 	bl	80045ec <arm_bitreversal_32>

    if(ifftFlag == 1u)
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d12f      	bne.n	80057f2 <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 8005792:	6978      	ldr	r0, [r7, #20]
 8005794:	f003 fa5e 	bl	8008c54 <__aeabi_ui2f>
 8005798:	4603      	mov	r3, r0
 800579a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800579e:	4619      	mov	r1, r3
 80057a0:	f003 fb64 	bl	8008e6c <__aeabi_fdiv>
 80057a4:	4603      	mov	r3, r0
 80057a6:	613b      	str	r3, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80057ac:	2300      	movs	r3, #0
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e01b      	b.n	80057ea <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80057b2:	69bc      	ldr	r4, [r7, #24]
 80057b4:	1d23      	adds	r3, r4, #4
 80057b6:	61bb      	str	r3, [r7, #24]
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	6939      	ldr	r1, [r7, #16]
 80057be:	f003 faa1 	bl	8008d04 <__aeabi_fmul>
 80057c2:	4603      	mov	r3, r0
 80057c4:	6023      	str	r3, [r4, #0]
            *pSrc  = -(*pSrc) * invL;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80057ce:	4618      	mov	r0, r3
 80057d0:	6939      	ldr	r1, [r7, #16]
 80057d2:	f003 fa97 	bl	8008d04 <__aeabi_fmul>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	601a      	str	r2, [r3, #0]
            pSrc++;
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	3304      	adds	r3, #4
 80057e2:	61bb      	str	r3, [r7, #24]
    if(ifftFlag == 1u)
    {
        invL = 1.0f/(float32_t)L;
        /*  Conjugate and scale output data */
        pSrc = p1;
        for(l=0; l<L; l++) 
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	3301      	adds	r3, #1
 80057e8:	61fb      	str	r3, [r7, #28]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d3df      	bcc.n	80057b2 <arm_cfft_f32+0xfe>
            *pSrc++ *=   invL ;
            *pSrc  = -(*pSrc) * invL;
            pSrc++;
        }
    }
}
 80057f2:	3724      	adds	r7, #36	; 0x24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd90      	pop	{r4, r7, pc}

080057f8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 80057f8:	b590      	push	{r4, r7, lr}
 80057fa:	b0bd      	sub	sp, #244	; 0xf4
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	607a      	str	r2, [r7, #4]
 8005802:	461a      	mov	r2, r3
 8005804:	460b      	mov	r3, r1
 8005806:	817b      	strh	r3, [r7, #10]
 8005808:	4613      	mov	r3, r2
 800580a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800580c:	4b09      	ldr	r3, [pc, #36]	; (8005834 <arm_radix8_butterfly_f32+0x3c>)
 800580e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8005812:	897b      	ldrh	r3, [r7, #10]
 8005814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8005818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8005820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005824:	08db      	lsrs	r3, r3, #3
 8005826:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005830:	e002      	b.n	8005838 <arm_radix8_butterfly_f32+0x40>
 8005832:	bf00      	nop
 8005834:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8005838:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800583c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005840:	4413      	add	r3, r2
 8005842:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8005846:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800584a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800584e:	4413      	add	r3, r2
 8005850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8005854:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585c:	4413      	add	r3, r2
 800585e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8005862:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586a:	4413      	add	r3, r2
 800586c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8005870:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005878:	4413      	add	r3, r2
 800587a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800587e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005886:	4413      	add	r3, r2
 8005888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800588c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005894:	4413      	add	r3, r2
 8005896:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800589a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	6819      	ldr	r1, [r3, #0]
 80058a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4413      	add	r3, r2
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4608      	mov	r0, r1
 80058b4:	4619      	mov	r1, r3
 80058b6:	f003 f91d 	bl	8008af4 <__addsf3>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80058c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058c4:	00db      	lsls	r3, r3, #3
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	6819      	ldr	r1, [r3, #0]
 80058cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4608      	mov	r0, r1
 80058da:	4619      	mov	r1, r3
 80058dc:	f003 f908 	bl	8008af0 <__aeabi_fsub>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80058e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	6819      	ldr	r1, [r3, #0]
 80058f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	4413      	add	r3, r2
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4608      	mov	r0, r1
 8005900:	4619      	mov	r1, r3
 8005902:	f003 f8f7 	bl	8008af4 <__addsf3>
 8005906:	4603      	mov	r3, r0
 8005908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800590c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4413      	add	r3, r2
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4608      	mov	r0, r1
 8005926:	4619      	mov	r1, r3
 8005928:	f003 f8e2 	bl	8008af0 <__aeabi_fsub>
 800592c:	4603      	mov	r3, r0
 800592e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005932:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4413      	add	r3, r2
 800593c:	6819      	ldr	r1, [r3, #0]
 800593e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4608      	mov	r0, r1
 800594c:	4619      	mov	r1, r3
 800594e:	f003 f8d1 	bl	8008af4 <__addsf3>
 8005952:	4603      	mov	r3, r0
 8005954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005958:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4413      	add	r3, r2
 8005962:	6819      	ldr	r1, [r3, #0]
 8005964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4413      	add	r3, r2
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4608      	mov	r0, r1
 8005972:	4619      	mov	r1, r3
 8005974:	f003 f8bc 	bl	8008af0 <__aeabi_fsub>
 8005978:	4603      	mov	r3, r0
 800597a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800597e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	6819      	ldr	r1, [r3, #0]
 800598a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4413      	add	r3, r2
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4608      	mov	r0, r1
 8005998:	4619      	mov	r1, r3
 800599a:	f003 f8ab 	bl	8008af4 <__addsf3>
 800599e:	4603      	mov	r3, r0
 80059a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80059a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	4413      	add	r3, r2
 80059ae:	6819      	ldr	r1, [r3, #0]
 80059b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4608      	mov	r0, r1
 80059be:	4619      	mov	r1, r3
 80059c0:	f003 f896 	bl	8008af0 <__aeabi_fsub>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80059ca:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80059ce:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80059d2:	f003 f88d 	bl	8008af0 <__aeabi_fsub>
 80059d6:	4603      	mov	r3, r0
 80059d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80059dc:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80059e0:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80059e4:	f003 f886 	bl	8008af4 <__addsf3>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80059ee:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80059f2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80059f6:	f003 f87b 	bl	8008af0 <__aeabi_fsub>
 80059fa:	4603      	mov	r3, r0
 80059fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8005a00:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005a04:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8005a08:	f003 f874 	bl	8008af4 <__addsf3>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 8005a12:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	18d4      	adds	r4, r2, r3
 8005a1c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005a20:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005a24:	f003 f866 	bl	8008af4 <__addsf3>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	6023      	str	r3, [r4, #0]
         pSrc[2 * i5] = r1 - r2;
 8005a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	18d4      	adds	r4, r2, r3
 8005a36:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005a3a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005a3e:	f003 f857 	bl	8008af0 <__aeabi_fsub>
 8005a42:	4603      	mov	r3, r0
 8005a44:	6023      	str	r3, [r4, #0]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8005a46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4608      	mov	r0, r1
 8005a64:	4619      	mov	r1, r3
 8005a66:	f003 f845 	bl	8008af4 <__addsf3>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005a70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	3304      	adds	r3, #4
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	6819      	ldr	r1, [r3, #0]
 8005a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	3304      	adds	r3, #4
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4413      	add	r3, r2
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4608      	mov	r0, r1
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f003 f82e 	bl	8008af0 <__aeabi_fsub>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8005a9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	6819      	ldr	r1, [r3, #0]
 8005aa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005aac:	00db      	lsls	r3, r3, #3
 8005aae:	3304      	adds	r3, #4
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4608      	mov	r0, r1
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f003 f81b 	bl	8008af4 <__addsf3>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005ac4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	3304      	adds	r3, #4
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4413      	add	r3, r2
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	3304      	adds	r3, #4
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4608      	mov	r0, r1
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	f003 f804 	bl	8008af0 <__aeabi_fsub>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8005aee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	3304      	adds	r3, #4
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	6819      	ldr	r1, [r3, #0]
 8005afc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	3304      	adds	r3, #4
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4608      	mov	r0, r1
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f002 fff1 	bl	8008af4 <__addsf3>
 8005b12:	4603      	mov	r3, r0
 8005b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8005b18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	3304      	adds	r3, #4
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4413      	add	r3, r2
 8005b24:	6819      	ldr	r1, [r3, #0]
 8005b26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4413      	add	r3, r2
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4608      	mov	r0, r1
 8005b36:	4619      	mov	r1, r3
 8005b38:	f002 ffda 	bl	8008af0 <__aeabi_fsub>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8005b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	3304      	adds	r3, #4
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	6819      	ldr	r1, [r3, #0]
 8005b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	3304      	adds	r3, #4
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4608      	mov	r0, r1
 8005b60:	4619      	mov	r1, r3
 8005b62:	f002 ffc7 	bl	8008af4 <__addsf3>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	3304      	adds	r3, #4
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	3304      	adds	r3, #4
 8005b82:	68fa      	ldr	r2, [r7, #12]
 8005b84:	4413      	add	r3, r2
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4608      	mov	r0, r1
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f002 ffb0 	bl	8008af0 <__aeabi_fsub>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8005b96:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005b9a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005b9e:	f002 ffa7 	bl	8008af0 <__aeabi_fsub>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8005ba8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005bac:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005bb0:	f002 ffa0 	bl	8008af4 <__addsf3>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8005bba:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005bbe:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8005bc2:	f002 ff95 	bl	8008af0 <__aeabi_fsub>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8005bcc:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8005bd0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8005bd4:	f002 ff8e 	bl	8008af4 <__addsf3>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8005bde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005be2:	00db      	lsls	r3, r3, #3
 8005be4:	3304      	adds	r3, #4
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	18d4      	adds	r4, r2, r3
 8005bea:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005bee:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005bf2:	f002 ff7f 	bl	8008af4 <__addsf3>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	6023      	str	r3, [r4, #0]
         pSrc[2 * i5 + 1] = r1 - r2;
 8005bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	3304      	adds	r3, #4
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	18d4      	adds	r4, r2, r3
 8005c06:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8005c0a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005c0e:	f002 ff6f 	bl	8008af0 <__aeabi_fsub>
 8005c12:	4603      	mov	r3, r0
 8005c14:	6023      	str	r3, [r4, #0]
         pSrc[2 * i3]     = t1 + s3;
 8005c16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	18d4      	adds	r4, r2, r3
 8005c20:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8005c24:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005c28:	f002 ff64 	bl	8008af4 <__addsf3>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	6023      	str	r3, [r4, #0]
         pSrc[2 * i7]     = t1 - s3;
 8005c30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	18d4      	adds	r4, r2, r3
 8005c3a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8005c3e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8005c42:	f002 ff55 	bl	8008af0 <__aeabi_fsub>
 8005c46:	4603      	mov	r3, r0
 8005c48:	6023      	str	r3, [r4, #0]
         pSrc[2 * i3 + 1] = t2 - r3;
 8005c4a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	3304      	adds	r3, #4
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	18d4      	adds	r4, r2, r3
 8005c56:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8005c5a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8005c5e:	f002 ff47 	bl	8008af0 <__aeabi_fsub>
 8005c62:	4603      	mov	r3, r0
 8005c64:	6023      	str	r3, [r4, #0]
         pSrc[2 * i7 + 1] = t2 + r3;
 8005c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	18d4      	adds	r4, r2, r3
 8005c72:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8005c76:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8005c7a:	f002 ff3b 	bl	8008af4 <__addsf3>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	6023      	str	r3, [r4, #0]
         r1 = (r6 - r8) * C81;
 8005c82:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005c86:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005c8a:	f002 ff31 	bl	8008af0 <__aeabi_fsub>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4618      	mov	r0, r3
 8005c92:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005c96:	f003 f835 	bl	8008d04 <__aeabi_fmul>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8005ca0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8005ca4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005ca8:	f002 ff24 	bl	8008af4 <__addsf3>
 8005cac:	4603      	mov	r3, r0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005cb4:	f003 f826 	bl	8008d04 <__aeabi_fmul>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8005cbe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005cc2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8005cc6:	f002 ff13 	bl	8008af0 <__aeabi_fsub>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005cd2:	f003 f817 	bl	8008d04 <__aeabi_fmul>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8005cdc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005ce0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8005ce4:	f002 ff06 	bl	8008af4 <__addsf3>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005cf0:	f003 f808 	bl	8008d04 <__aeabi_fmul>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8005cfa:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005cfe:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005d02:	f002 fef5 	bl	8008af0 <__aeabi_fsub>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8005d0c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005d10:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8005d14:	f002 feee 	bl	8008af4 <__addsf3>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8005d1e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8005d22:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8005d26:	f002 fee3 	bl	8008af0 <__aeabi_fsub>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8005d30:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8005d34:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8005d38:	f002 fedc 	bl	8008af4 <__addsf3>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8005d42:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005d46:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005d4a:	f002 fed1 	bl	8008af0 <__aeabi_fsub>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8005d54:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005d58:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8005d5c:	f002 feca 	bl	8008af4 <__addsf3>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8005d66:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005d6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d6e:	f002 febf 	bl	8008af0 <__aeabi_fsub>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8005d78:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8005d7c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d80:	f002 feb8 	bl	8008af4 <__addsf3>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8005d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d8e:	00db      	lsls	r3, r3, #3
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	18d4      	adds	r4, r2, r3
 8005d94:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005d98:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005d9c:	f002 feaa 	bl	8008af4 <__addsf3>
 8005da0:	4603      	mov	r3, r0
 8005da2:	6023      	str	r3, [r4, #0]
         pSrc[2 * i8]     = r5 - s7;
 8005da4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	18d4      	adds	r4, r2, r3
 8005dae:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8005db2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8005db6:	f002 fe9b 	bl	8008af0 <__aeabi_fsub>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	6023      	str	r3, [r4, #0]
         pSrc[2 * i6]     = t1 + s8;
 8005dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	18d4      	adds	r4, r2, r3
 8005dc8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8005dcc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8005dd0:	f002 fe90 	bl	8008af4 <__addsf3>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	6023      	str	r3, [r4, #0]
         pSrc[2 * i4]     = t1 - s8;
 8005dd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	18d4      	adds	r4, r2, r3
 8005de2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8005de6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8005dea:	f002 fe81 	bl	8008af0 <__aeabi_fsub>
 8005dee:	4603      	mov	r3, r0
 8005df0:	6023      	str	r3, [r4, #0]
         pSrc[2 * i2 + 1] = s5 - r7;
 8005df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	3304      	adds	r3, #4
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	18d4      	adds	r4, r2, r3
 8005dfe:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e06:	f002 fe73 	bl	8008af0 <__aeabi_fsub>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	6023      	str	r3, [r4, #0]
         pSrc[2 * i8 + 1] = s5 + r7;
 8005e0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	3304      	adds	r3, #4
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	18d4      	adds	r4, r2, r3
 8005e1a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8005e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e22:	f002 fe67 	bl	8008af4 <__addsf3>
 8005e26:	4603      	mov	r3, r0
 8005e28:	6023      	str	r3, [r4, #0]
         pSrc[2 * i6 + 1] = t2 - r8;
 8005e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	3304      	adds	r3, #4
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	18d4      	adds	r4, r2, r3
 8005e36:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8005e3a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005e3e:	f002 fe57 	bl	8008af0 <__aeabi_fsub>
 8005e42:	4603      	mov	r3, r0
 8005e44:	6023      	str	r3, [r4, #0]
         pSrc[2 * i4 + 1] = t2 + r8;
 8005e46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	18d4      	adds	r4, r2, r3
 8005e52:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8005e56:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8005e5a:	f002 fe4b 	bl	8008af4 <__addsf3>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	6023      	str	r3, [r4, #0]
         
         i1 += n1;
 8005e62:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8005e70:	897a      	ldrh	r2, [r7, #10]
 8005e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e76:	429a      	cmp	r2, r3
 8005e78:	f63f acde 	bhi.w	8005838 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8005e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e80:	2b07      	cmp	r3, #7
 8005e82:	d801      	bhi.n	8005e88 <arm_radix8_butterfly_f32+0x690>
         break;
 8005e84:	f000 bcc9 	b.w	800681a <arm_radix8_butterfly_f32+0x1022>
      
      ia1 = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8005e94:	893a      	ldrh	r2, [r7, #8]
 8005e96:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e9a:	4413      	add	r3, r2
 8005e9c:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8005e9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8005ea4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8005ea8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eaa:	4413      	add	r3, r2
 8005eac:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8005eae:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005eb0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eb2:	4413      	add	r3, r2
 8005eb4:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8005eb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005eb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eba:	4413      	add	r3, r2
 8005ebc:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8005ebe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005ec0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ec2:	4413      	add	r3, r2
 8005ec4:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8005ec6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005eca:	4413      	add	r3, r2
 8005ecc:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8005ece:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005ed0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ed2:	4413      	add	r3, r2
 8005ed4:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8005ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005eda:	00db      	lsls	r3, r3, #3
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4413      	add	r3, r2
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8005ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	4413      	add	r3, r2
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8005ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8005efc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005efe:	00db      	lsls	r3, r3, #3
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8005f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8005f14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8005f20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	4413      	add	r3, r2
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8005f2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	3304      	adds	r3, #4
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8005f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	3304      	adds	r3, #4
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8005f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f4c:	00db      	lsls	r3, r3, #3
 8005f4e:	3304      	adds	r3, #4
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8005f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	3304      	adds	r3, #4
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	4413      	add	r3, r2
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	00db      	lsls	r3, r3, #3
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	4413      	add	r3, r2
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8005f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	3304      	adds	r3, #4
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8005f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	3304      	adds	r3, #4
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8005f98:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005f9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8005fa6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fae:	4413      	add	r3, r2
 8005fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8005fb4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8005fc2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8005fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fca:	4413      	add	r3, r2
 8005fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8005fd0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd8:	4413      	add	r3, r2
 8005fda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8005fde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8005fec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8005ffa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ffe:	00db      	lsls	r3, r3, #3
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	6819      	ldr	r1, [r3, #0]
 8006006:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800600a:	00db      	lsls	r3, r3, #3
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4413      	add	r3, r2
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4608      	mov	r0, r1
 8006014:	4619      	mov	r1, r3
 8006016:	f002 fd6d 	bl	8008af4 <__addsf3>
 800601a:	4603      	mov	r3, r0
 800601c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8006020:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	68fa      	ldr	r2, [r7, #12]
 8006028:	4413      	add	r3, r2
 800602a:	6819      	ldr	r1, [r3, #0]
 800602c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	4413      	add	r3, r2
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4608      	mov	r0, r1
 800603a:	4619      	mov	r1, r3
 800603c:	f002 fd58 	bl	8008af0 <__aeabi_fsub>
 8006040:	4603      	mov	r3, r0
 8006042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4413      	add	r3, r2
 8006050:	6819      	ldr	r1, [r3, #0]
 8006052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006056:	00db      	lsls	r3, r3, #3
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4608      	mov	r0, r1
 8006060:	4619      	mov	r1, r3
 8006062:	f002 fd47 	bl	8008af4 <__addsf3>
 8006066:	4603      	mov	r3, r0
 8006068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800606c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006070:	00db      	lsls	r3, r3, #3
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	6819      	ldr	r1, [r3, #0]
 8006078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4413      	add	r3, r2
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4608      	mov	r0, r1
 8006086:	4619      	mov	r1, r3
 8006088:	f002 fd32 	bl	8008af0 <__aeabi_fsub>
 800608c:	4603      	mov	r3, r0
 800608e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006092:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006096:	00db      	lsls	r3, r3, #3
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4413      	add	r3, r2
 800609c:	6819      	ldr	r1, [r3, #0]
 800609e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4608      	mov	r0, r1
 80060ac:	4619      	mov	r1, r3
 80060ae:	f002 fd21 	bl	8008af4 <__addsf3>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80060b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4413      	add	r3, r2
 80060c2:	6819      	ldr	r1, [r3, #0]
 80060c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4608      	mov	r0, r1
 80060d2:	4619      	mov	r1, r3
 80060d4:	f002 fd0c 	bl	8008af0 <__aeabi_fsub>
 80060d8:	4603      	mov	r3, r0
 80060da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80060de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060ee:	00db      	lsls	r3, r3, #3
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4413      	add	r3, r2
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4608      	mov	r0, r1
 80060f8:	4619      	mov	r1, r3
 80060fa:	f002 fcfb 	bl	8008af4 <__addsf3>
 80060fe:	4603      	mov	r3, r0
 8006100:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006104:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	4413      	add	r3, r2
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4413      	add	r3, r2
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4608      	mov	r0, r1
 800611e:	4619      	mov	r1, r3
 8006120:	f002 fce6 	bl	8008af0 <__aeabi_fsub>
 8006124:	4603      	mov	r3, r0
 8006126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800612a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800612e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006132:	f002 fcdd 	bl	8008af0 <__aeabi_fsub>
 8006136:	4603      	mov	r3, r0
 8006138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800613c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006140:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006144:	f002 fcd6 	bl	8008af4 <__addsf3>
 8006148:	4603      	mov	r3, r0
 800614a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800614e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8006152:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006156:	f002 fccb 	bl	8008af0 <__aeabi_fsub>
 800615a:	4603      	mov	r3, r0
 800615c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8006160:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8006164:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8006168:	f002 fcc4 	bl	8008af4 <__addsf3>
 800616c:	4603      	mov	r3, r0
 800616e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8006172:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	18d4      	adds	r4, r2, r3
 800617c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006180:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006184:	f002 fcb6 	bl	8008af4 <__addsf3>
 8006188:	4603      	mov	r3, r0
 800618a:	6023      	str	r3, [r4, #0]
            r2 = r1 - r2;
 800618c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8006190:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006194:	f002 fcac 	bl	8008af0 <__aeabi_fsub>
 8006198:	4603      	mov	r3, r0
 800619a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800619e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	3304      	adds	r3, #4
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4413      	add	r3, r2
 80061aa:	6819      	ldr	r1, [r3, #0]
 80061ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061b0:	00db      	lsls	r3, r3, #3
 80061b2:	3304      	adds	r3, #4
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4608      	mov	r0, r1
 80061bc:	4619      	mov	r1, r3
 80061be:	f002 fc99 	bl	8008af4 <__addsf3>
 80061c2:	4603      	mov	r3, r0
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80061c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061ca:	00db      	lsls	r3, r3, #3
 80061cc:	3304      	adds	r3, #4
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4413      	add	r3, r2
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	3304      	adds	r3, #4
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4608      	mov	r0, r1
 80061e4:	4619      	mov	r1, r3
 80061e6:	f002 fc83 	bl	8008af0 <__aeabi_fsub>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80061f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	3304      	adds	r3, #4
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	4413      	add	r3, r2
 80061fc:	6819      	ldr	r1, [r3, #0]
 80061fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	3304      	adds	r3, #4
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4413      	add	r3, r2
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4608      	mov	r0, r1
 800620e:	4619      	mov	r1, r3
 8006210:	f002 fc70 	bl	8008af4 <__addsf3>
 8006214:	4603      	mov	r3, r0
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8006218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	3304      	adds	r3, #4
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4413      	add	r3, r2
 8006224:	6819      	ldr	r1, [r3, #0]
 8006226:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	3304      	adds	r3, #4
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4413      	add	r3, r2
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4608      	mov	r0, r1
 8006236:	4619      	mov	r1, r3
 8006238:	f002 fc5a 	bl	8008af0 <__aeabi_fsub>
 800623c:	4603      	mov	r3, r0
 800623e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8006242:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006246:	00db      	lsls	r3, r3, #3
 8006248:	3304      	adds	r3, #4
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	6819      	ldr	r1, [r3, #0]
 8006250:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006254:	00db      	lsls	r3, r3, #3
 8006256:	3304      	adds	r3, #4
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4608      	mov	r0, r1
 8006260:	4619      	mov	r1, r3
 8006262:	f002 fc47 	bl	8008af4 <__addsf3>
 8006266:	4603      	mov	r3, r0
 8006268:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800626c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	3304      	adds	r3, #4
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4413      	add	r3, r2
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	3304      	adds	r3, #4
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4413      	add	r3, r2
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4608      	mov	r0, r1
 800628a:	4619      	mov	r1, r3
 800628c:	f002 fc30 	bl	8008af0 <__aeabi_fsub>
 8006290:	4603      	mov	r3, r0
 8006292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006296:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800629a:	00db      	lsls	r3, r3, #3
 800629c:	3304      	adds	r3, #4
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	6819      	ldr	r1, [r3, #0]
 80062a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	3304      	adds	r3, #4
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4608      	mov	r0, r1
 80062b4:	4619      	mov	r1, r3
 80062b6:	f002 fc1d 	bl	8008af4 <__addsf3>
 80062ba:	4603      	mov	r3, r0
 80062bc:	623b      	str	r3, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80062be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062c2:	00db      	lsls	r3, r3, #3
 80062c4:	3304      	adds	r3, #4
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	6819      	ldr	r1, [r3, #0]
 80062cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	3304      	adds	r3, #4
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4608      	mov	r0, r1
 80062dc:	4619      	mov	r1, r3
 80062de:	f002 fc07 	bl	8008af0 <__aeabi_fsub>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            t2 = s1 - s3;
 80062e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062ea:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80062ee:	f002 fbff 	bl	8008af0 <__aeabi_fsub>
 80062f2:	4603      	mov	r3, r0
 80062f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80062f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062fa:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80062fe:	f002 fbf9 	bl	8008af4 <__addsf3>
 8006302:	4603      	mov	r3, r0
 8006304:	62bb      	str	r3, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8006306:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006308:	6a39      	ldr	r1, [r7, #32]
 800630a:	f002 fbf1 	bl	8008af0 <__aeabi_fsub>
 800630e:	4603      	mov	r3, r0
 8006310:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8006314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006316:	6a39      	ldr	r1, [r7, #32]
 8006318:	f002 fbec 	bl	8008af4 <__addsf3>
 800631c:	4603      	mov	r3, r0
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8006320:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006324:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8006328:	f002 fbe4 	bl	8008af4 <__addsf3>
 800632c:	4603      	mov	r3, r0
 800632e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8006332:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006336:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800633a:	f002 fbd9 	bl	8008af0 <__aeabi_fsub>
 800633e:	4603      	mov	r3, r0
 8006340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8006344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	3304      	adds	r3, #4
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	18d4      	adds	r4, r2, r3
 8006350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006354:	f002 fbce 	bl	8008af4 <__addsf3>
 8006358:	4603      	mov	r3, r0
 800635a:	6023      	str	r3, [r4, #0]
            s2 = s1 - s2;
 800635c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006360:	f002 fbc6 	bl	8008af0 <__aeabi_fsub>
 8006364:	4603      	mov	r3, r0
 8006366:	627b      	str	r3, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8006368:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800636c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006370:	f002 fbbe 	bl	8008af0 <__aeabi_fsub>
 8006374:	4603      	mov	r3, r0
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8006378:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800637c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8006380:	f002 fbb8 	bl	8008af4 <__addsf3>
 8006384:	4603      	mov	r3, r0
 8006386:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800638a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800638c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006390:	f002 fcb8 	bl	8008d04 <__aeabi_fmul>
 8006394:	4603      	mov	r3, r0
 8006396:	61fb      	str	r3, [r7, #28]
            p2 = si5 * s2;
 8006398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800639a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800639c:	f002 fcb2 	bl	8008d04 <__aeabi_fmul>
 80063a0:	4603      	mov	r3, r0
 80063a2:	61bb      	str	r3, [r7, #24]
            p3 = co5 * s2;
 80063a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80063a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063a8:	f002 fcac 	bl	8008d04 <__aeabi_fmul>
 80063ac:	4603      	mov	r3, r0
 80063ae:	617b      	str	r3, [r7, #20]
            p4 = si5 * r2;
 80063b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063b2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80063b6:	f002 fca5 	bl	8008d04 <__aeabi_fmul>
 80063ba:	4603      	mov	r3, r0
 80063bc:	613b      	str	r3, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 80063be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	68fa      	ldr	r2, [r7, #12]
 80063c6:	18d4      	adds	r4, r2, r3
 80063c8:	69f8      	ldr	r0, [r7, #28]
 80063ca:	69b9      	ldr	r1, [r7, #24]
 80063cc:	f002 fb92 	bl	8008af4 <__addsf3>
 80063d0:	4603      	mov	r3, r0
 80063d2:	6023      	str	r3, [r4, #0]
            pSrc[2 * i5 + 1] = p3 - p4;
 80063d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	3304      	adds	r3, #4
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	18d4      	adds	r4, r2, r3
 80063e0:	6978      	ldr	r0, [r7, #20]
 80063e2:	6939      	ldr	r1, [r7, #16]
 80063e4:	f002 fb84 	bl	8008af0 <__aeabi_fsub>
 80063e8:	4603      	mov	r3, r0
 80063ea:	6023      	str	r3, [r4, #0]
            p1 = co3 * r1;
 80063ec:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80063ee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80063f2:	f002 fc87 	bl	8008d04 <__aeabi_fmul>
 80063f6:	4603      	mov	r3, r0
 80063f8:	61fb      	str	r3, [r7, #28]
            p2 = si3 * s1;
 80063fa:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80063fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063fe:	f002 fc81 	bl	8008d04 <__aeabi_fmul>
 8006402:	4603      	mov	r3, r0
 8006404:	61bb      	str	r3, [r7, #24]
            p3 = co3 * s1;
 8006406:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800640a:	f002 fc7b 	bl	8008d04 <__aeabi_fmul>
 800640e:	4603      	mov	r3, r0
 8006410:	617b      	str	r3, [r7, #20]
            p4 = si3 * r1;
 8006412:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006414:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006418:	f002 fc74 	bl	8008d04 <__aeabi_fmul>
 800641c:	4603      	mov	r3, r0
 800641e:	613b      	str	r3, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8006420:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006424:	00db      	lsls	r3, r3, #3
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	18d4      	adds	r4, r2, r3
 800642a:	69f8      	ldr	r0, [r7, #28]
 800642c:	69b9      	ldr	r1, [r7, #24]
 800642e:	f002 fb61 	bl	8008af4 <__addsf3>
 8006432:	4603      	mov	r3, r0
 8006434:	6023      	str	r3, [r4, #0]
            pSrc[2 * i3 + 1] = p3 - p4;
 8006436:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	3304      	adds	r3, #4
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	18d4      	adds	r4, r2, r3
 8006442:	6978      	ldr	r0, [r7, #20]
 8006444:	6939      	ldr	r1, [r7, #16]
 8006446:	f002 fb53 	bl	8008af0 <__aeabi_fsub>
 800644a:	4603      	mov	r3, r0
 800644c:	6023      	str	r3, [r4, #0]
            p1 = co7 * t1;
 800644e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006450:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006454:	f002 fc56 	bl	8008d04 <__aeabi_fmul>
 8006458:	4603      	mov	r3, r0
 800645a:	61fb      	str	r3, [r7, #28]
            p2 = si7 * t2;
 800645c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800645e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006462:	f002 fc4f 	bl	8008d04 <__aeabi_fmul>
 8006466:	4603      	mov	r3, r0
 8006468:	61bb      	str	r3, [r7, #24]
            p3 = co7 * t2;
 800646a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800646c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006470:	f002 fc48 	bl	8008d04 <__aeabi_fmul>
 8006474:	4603      	mov	r3, r0
 8006476:	617b      	str	r3, [r7, #20]
            p4 = si7 * t1;
 8006478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800647a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800647e:	f002 fc41 	bl	8008d04 <__aeabi_fmul>
 8006482:	4603      	mov	r3, r0
 8006484:	613b      	str	r3, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8006486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	18d4      	adds	r4, r2, r3
 8006490:	69f8      	ldr	r0, [r7, #28]
 8006492:	69b9      	ldr	r1, [r7, #24]
 8006494:	f002 fb2e 	bl	8008af4 <__addsf3>
 8006498:	4603      	mov	r3, r0
 800649a:	6023      	str	r3, [r4, #0]
            pSrc[2 * i7 + 1] = p3 - p4;
 800649c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	3304      	adds	r3, #4
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	18d4      	adds	r4, r2, r3
 80064a8:	6978      	ldr	r0, [r7, #20]
 80064aa:	6939      	ldr	r1, [r7, #16]
 80064ac:	f002 fb20 	bl	8008af0 <__aeabi_fsub>
 80064b0:	4603      	mov	r3, r0
 80064b2:	6023      	str	r3, [r4, #0]
            r1 = (r6 - r8) * C81;
 80064b4:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80064b8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80064bc:	f002 fb18 	bl	8008af0 <__aeabi_fsub>
 80064c0:	4603      	mov	r3, r0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80064c8:	f002 fc1c 	bl	8008d04 <__aeabi_fmul>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80064d2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80064d6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80064da:	f002 fb0b 	bl	8008af4 <__addsf3>
 80064de:	4603      	mov	r3, r0
 80064e0:	4618      	mov	r0, r3
 80064e2:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80064e6:	f002 fc0d 	bl	8008d04 <__aeabi_fmul>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80064f0:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80064f4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80064f8:	f002 fafa 	bl	8008af0 <__aeabi_fsub>
 80064fc:	4603      	mov	r3, r0
 80064fe:	4618      	mov	r0, r3
 8006500:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006504:	f002 fbfe 	bl	8008d04 <__aeabi_fmul>
 8006508:	4603      	mov	r3, r0
 800650a:	62bb      	str	r3, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800650c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006510:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006514:	f002 faee 	bl	8008af4 <__addsf3>
 8006518:	4603      	mov	r3, r0
 800651a:	4618      	mov	r0, r3
 800651c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006520:	f002 fbf0 	bl	8008d04 <__aeabi_fmul>
 8006524:	4603      	mov	r3, r0
 8006526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800652a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800652e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006532:	f002 fadd 	bl	8008af0 <__aeabi_fsub>
 8006536:	4603      	mov	r3, r0
 8006538:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800653c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8006540:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006544:	f002 fad6 	bl	8008af4 <__addsf3>
 8006548:	4603      	mov	r3, r0
 800654a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800654e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006552:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006556:	f002 facb 	bl	8008af0 <__aeabi_fsub>
 800655a:	4603      	mov	r3, r0
 800655c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8006560:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8006564:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006568:	f002 fac4 	bl	8008af4 <__addsf3>
 800656c:	4603      	mov	r3, r0
 800656e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8006572:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006576:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006578:	f002 faba 	bl	8008af0 <__aeabi_fsub>
 800657c:	4603      	mov	r3, r0
 800657e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8006582:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006586:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006588:	f002 fab4 	bl	8008af4 <__addsf3>
 800658c:	4603      	mov	r3, r0
 800658e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8006592:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8006596:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800659a:	f002 faa9 	bl	8008af0 <__aeabi_fsub>
 800659e:	4603      	mov	r3, r0
 80065a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            s7 = s7 + s6;
 80065a4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80065a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065ac:	f002 faa2 	bl	8008af4 <__addsf3>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            r1 = r5 + s7;
 80065b6:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80065ba:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80065be:	f002 fa99 	bl	8008af4 <__addsf3>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80065c8:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80065cc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80065d0:	f002 fa8e 	bl	8008af0 <__aeabi_fsub>
 80065d4:	4603      	mov	r3, r0
 80065d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80065da:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80065de:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80065e2:	f002 fa87 	bl	8008af4 <__addsf3>
 80065e6:	4603      	mov	r3, r0
 80065e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80065ec:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80065f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80065f4:	f002 fa7c 	bl	8008af0 <__aeabi_fsub>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80065fe:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006606:	f002 fa73 	bl	8008af0 <__aeabi_fsub>
 800660a:	4603      	mov	r3, r0
 800660c:	62bb      	str	r3, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800660e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8006612:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006616:	f002 fa6d 	bl	8008af4 <__addsf3>
 800661a:	4603      	mov	r3, r0
 800661c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8006620:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006624:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8006628:	f002 fa62 	bl	8008af0 <__aeabi_fsub>
 800662c:	4603      	mov	r3, r0
 800662e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8006632:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8006636:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800663a:	f002 fa5b 	bl	8008af4 <__addsf3>
 800663e:	4603      	mov	r3, r0
 8006640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8006644:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006646:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800664a:	f002 fb5b 	bl	8008d04 <__aeabi_fmul>
 800664e:	4603      	mov	r3, r0
 8006650:	61fb      	str	r3, [r7, #28]
            p2 = si2 * s1;
 8006652:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006656:	f002 fb55 	bl	8008d04 <__aeabi_fmul>
 800665a:	4603      	mov	r3, r0
 800665c:	61bb      	str	r3, [r7, #24]
            p3 = co2 * s1;
 800665e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006660:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006662:	f002 fb4f 	bl	8008d04 <__aeabi_fmul>
 8006666:	4603      	mov	r3, r0
 8006668:	617b      	str	r3, [r7, #20]
            p4 = si2 * r1;
 800666a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800666c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8006670:	f002 fb48 	bl	8008d04 <__aeabi_fmul>
 8006674:	4603      	mov	r3, r0
 8006676:	613b      	str	r3, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8006678:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667c:	00db      	lsls	r3, r3, #3
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	18d4      	adds	r4, r2, r3
 8006682:	69f8      	ldr	r0, [r7, #28]
 8006684:	69b9      	ldr	r1, [r7, #24]
 8006686:	f002 fa35 	bl	8008af4 <__addsf3>
 800668a:	4603      	mov	r3, r0
 800668c:	6023      	str	r3, [r4, #0]
            pSrc[2 * i2 + 1] = p3 - p4;
 800668e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	3304      	adds	r3, #4
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	18d4      	adds	r4, r2, r3
 800669a:	6978      	ldr	r0, [r7, #20]
 800669c:	6939      	ldr	r1, [r7, #16]
 800669e:	f002 fa27 	bl	8008af0 <__aeabi_fsub>
 80066a2:	4603      	mov	r3, r0
 80066a4:	6023      	str	r3, [r4, #0]
            p1 = co8 * r5;
 80066a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80066a8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80066ac:	f002 fb2a 	bl	8008d04 <__aeabi_fmul>
 80066b0:	4603      	mov	r3, r0
 80066b2:	61fb      	str	r3, [r7, #28]
            p2 = si8 * s5;
 80066b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066b6:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80066ba:	f002 fb23 	bl	8008d04 <__aeabi_fmul>
 80066be:	4603      	mov	r3, r0
 80066c0:	61bb      	str	r3, [r7, #24]
            p3 = co8 * s5;
 80066c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80066c4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80066c8:	f002 fb1c 	bl	8008d04 <__aeabi_fmul>
 80066cc:	4603      	mov	r3, r0
 80066ce:	617b      	str	r3, [r7, #20]
            p4 = si8 * r5;
 80066d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066d2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80066d6:	f002 fb15 	bl	8008d04 <__aeabi_fmul>
 80066da:	4603      	mov	r3, r0
 80066dc:	613b      	str	r3, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80066de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	18d4      	adds	r4, r2, r3
 80066e8:	69f8      	ldr	r0, [r7, #28]
 80066ea:	69b9      	ldr	r1, [r7, #24]
 80066ec:	f002 fa02 	bl	8008af4 <__addsf3>
 80066f0:	4603      	mov	r3, r0
 80066f2:	6023      	str	r3, [r4, #0]
            pSrc[2 * i8 + 1] = p3 - p4;
 80066f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	3304      	adds	r3, #4
 80066fc:	68fa      	ldr	r2, [r7, #12]
 80066fe:	18d4      	adds	r4, r2, r3
 8006700:	6978      	ldr	r0, [r7, #20]
 8006702:	6939      	ldr	r1, [r7, #16]
 8006704:	f002 f9f4 	bl	8008af0 <__aeabi_fsub>
 8006708:	4603      	mov	r3, r0
 800670a:	6023      	str	r3, [r4, #0]
            p1 = co6 * r6;
 800670c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800670e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8006712:	f002 faf7 	bl	8008d04 <__aeabi_fmul>
 8006716:	4603      	mov	r3, r0
 8006718:	61fb      	str	r3, [r7, #28]
            p2 = si6 * s6;
 800671a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800671c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006720:	f002 faf0 	bl	8008d04 <__aeabi_fmul>
 8006724:	4603      	mov	r3, r0
 8006726:	61bb      	str	r3, [r7, #24]
            p3 = co6 * s6;
 8006728:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800672a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800672e:	f002 fae9 	bl	8008d04 <__aeabi_fmul>
 8006732:	4603      	mov	r3, r0
 8006734:	617b      	str	r3, [r7, #20]
            p4 = si6 * r6;
 8006736:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006738:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800673c:	f002 fae2 	bl	8008d04 <__aeabi_fmul>
 8006740:	4603      	mov	r3, r0
 8006742:	613b      	str	r3, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8006744:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006748:	00db      	lsls	r3, r3, #3
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	18d4      	adds	r4, r2, r3
 800674e:	69f8      	ldr	r0, [r7, #28]
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	f002 f9cf 	bl	8008af4 <__addsf3>
 8006756:	4603      	mov	r3, r0
 8006758:	6023      	str	r3, [r4, #0]
            pSrc[2 * i6 + 1] = p3 - p4;
 800675a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	3304      	adds	r3, #4
 8006762:	68fa      	ldr	r2, [r7, #12]
 8006764:	18d4      	adds	r4, r2, r3
 8006766:	6978      	ldr	r0, [r7, #20]
 8006768:	6939      	ldr	r1, [r7, #16]
 800676a:	f002 f9c1 	bl	8008af0 <__aeabi_fsub>
 800676e:	4603      	mov	r3, r0
 8006770:	6023      	str	r3, [r4, #0]
            p1 = co4 * t1;
 8006772:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006774:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8006778:	f002 fac4 	bl	8008d04 <__aeabi_fmul>
 800677c:	4603      	mov	r3, r0
 800677e:	61fb      	str	r3, [r7, #28]
            p2 = si4 * t2;
 8006780:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006782:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006786:	f002 fabd 	bl	8008d04 <__aeabi_fmul>
 800678a:	4603      	mov	r3, r0
 800678c:	61bb      	str	r3, [r7, #24]
            p3 = co4 * t2;
 800678e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006790:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8006794:	f002 fab6 	bl	8008d04 <__aeabi_fmul>
 8006798:	4603      	mov	r3, r0
 800679a:	617b      	str	r3, [r7, #20]
            p4 = si4 * t1;
 800679c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800679e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80067a2:	f002 faaf 	bl	8008d04 <__aeabi_fmul>
 80067a6:	4603      	mov	r3, r0
 80067a8:	613b      	str	r3, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80067aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	18d4      	adds	r4, r2, r3
 80067b4:	69f8      	ldr	r0, [r7, #28]
 80067b6:	69b9      	ldr	r1, [r7, #24]
 80067b8:	f002 f99c 	bl	8008af4 <__addsf3>
 80067bc:	4603      	mov	r3, r0
 80067be:	6023      	str	r3, [r4, #0]
            pSrc[2 * i4 + 1] = p3 - p4;
 80067c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	3304      	adds	r3, #4
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	18d4      	adds	r4, r2, r3
 80067cc:	6978      	ldr	r0, [r7, #20]
 80067ce:	6939      	ldr	r1, [r7, #16]
 80067d0:	f002 f98e 	bl	8008af0 <__aeabi_fsub>
 80067d4:	4603      	mov	r3, r0
 80067d6:	6023      	str	r3, [r4, #0]
            
            i1 += n1;
 80067d8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80067dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e0:	4413      	add	r3, r2
 80067e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 80067e6:	897a      	ldrh	r2, [r7, #10]
 80067e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067ec:	429a      	cmp	r2, r3
 80067ee:	f63f abd3 	bhi.w	8005f98 <arm_radix8_butterfly_f32+0x7a0>
         
         j++;
 80067f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f6:	3301      	adds	r3, #1
 80067f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 80067fc:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006804:	429a      	cmp	r2, r3
 8006806:	f4ff ab45 	bcc.w	8005e94 <arm_radix8_butterfly_f32+0x69c>
      
      twidCoefModifier <<= 3;
 800680a:	893b      	ldrh	r3, [r7, #8]
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 8006810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006814:	2b07      	cmp	r3, #7
 8006816:	f63e afff 	bhi.w	8005818 <arm_radix8_butterfly_f32+0x20>
}
 800681a:	37f4      	adds	r7, #244	; 0xf4
 800681c:	46bd      	mov	sp, r7
 800681e:	bd90      	pop	{r4, r7, pc}

08006820 <stage_rfft_f32>:
#include "CMSIS_DSP/cmsis_dsp.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b095      	sub	sp, #84	; 0x54
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						   /* increasing pointer               */
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						   /* decreasing pointer               */
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;					
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	881b      	ldrh	r3, [r3, #0]
 800683e:	3b01      	subs	r3, #1
 8006840:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8006842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 8006848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800684e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8006854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800685a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800685c:	1d1a      	adds	r2, r3, #4
 800685e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8006864:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006866:	1d1a      	adds	r2, r3, #4
 8006868:	64ba      	str	r2, [r7, #72]	; 0x48
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
   
   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800686e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006870:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006872:	f002 f93f 	bl	8008af4 <__addsf3>
 8006876:	4603      	mov	r3, r0
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
   
   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800687a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800687c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800687e:	f002 f939 	bl	8008af4 <__addsf3>
 8006882:	4603      	mov	r3, r0
 8006884:	623b      	str	r3, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8006886:	687c      	ldr	r4, [r7, #4]
 8006888:	1d23      	adds	r3, r4, #4
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800688e:	6a39      	ldr	r1, [r7, #32]
 8006890:	f002 f930 	bl	8008af4 <__addsf3>
 8006894:	4603      	mov	r3, r0
 8006896:	4618      	mov	r0, r3
 8006898:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800689c:	f002 fa32 	bl	8008d04 <__aeabi_fmul>
 80068a0:	4603      	mov	r3, r0
 80068a2:	6023      	str	r3, [r4, #0]
   *pOut++ = 0.5f * ( t1a - t1b );
 80068a4:	687c      	ldr	r4, [r7, #4]
 80068a6:	1d23      	adds	r3, r4, #4
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ac:	6a39      	ldr	r1, [r7, #32]
 80068ae:	f002 f91f 	bl	8008af0 <__aeabi_fsub>
 80068b2:	4603      	mov	r3, r0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80068ba:	f002 fa23 	bl	8008d04 <__aeabi_fmul>
 80068be:	4603      	mov	r3, r0
 80068c0:	6023      	str	r3, [r4, #0]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80068c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	4413      	add	r3, r2
 80068ca:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80068cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ce:	3308      	adds	r3, #8
 80068d0:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80068d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80068d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80068de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80068e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80068ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068ec:	1d1a      	adds	r2, r3, #4
 80068ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80068f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f6:	1d1a      	adds	r2, r3, #4
 80068f8:	64ba      	str	r2, [r7, #72]	; 0x48
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80068fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006900:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006902:	f002 f8f5 	bl	8008af0 <__aeabi_fsub>
 8006906:	4603      	mov	r3, r0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800690a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800690c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800690e:	f002 f8f1 	bl	8008af4 <__addsf3>
 8006912:	4603      	mov	r3, r0
 8006914:	623b      	str	r3, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8006916:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006918:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800691a:	f002 f9f3 	bl	8008d04 <__aeabi_fmul>
 800691e:	4603      	mov	r3, r0
 8006920:	61fb      	str	r3, [r7, #28]
      p1 = twI * t1a;
 8006922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006926:	f002 f9ed 	bl	8008d04 <__aeabi_fmul>
 800692a:	4603      	mov	r3, r0
 800692c:	61bb      	str	r3, [r7, #24]
      p2 = twR * t1b;
 800692e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006930:	6a39      	ldr	r1, [r7, #32]
 8006932:	f002 f9e7 	bl	8008d04 <__aeabi_fmul>
 8006936:	4603      	mov	r3, r0
 8006938:	617b      	str	r3, [r7, #20]
      p3 = twI * t1b;
 800693a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800693c:	6a39      	ldr	r1, [r7, #32]
 800693e:	f002 f9e1 	bl	8008d04 <__aeabi_fmul>
 8006942:	4603      	mov	r3, r0
 8006944:	613b      	str	r3, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8006946:	687c      	ldr	r4, [r7, #4]
 8006948:	1d23      	adds	r3, r4, #4
 800694a:	607b      	str	r3, [r7, #4]
 800694c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800694e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006950:	f002 f8d0 	bl	8008af4 <__addsf3>
 8006954:	4603      	mov	r3, r0
 8006956:	4618      	mov	r0, r3
 8006958:	69f9      	ldr	r1, [r7, #28]
 800695a:	f002 f8cb 	bl	8008af4 <__addsf3>
 800695e:	4603      	mov	r3, r0
 8006960:	4618      	mov	r0, r3
 8006962:	6939      	ldr	r1, [r7, #16]
 8006964:	f002 f8c6 	bl	8008af4 <__addsf3>
 8006968:	4603      	mov	r3, r0
 800696a:	4618      	mov	r0, r3
 800696c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006970:	f002 f9c8 	bl	8008d04 <__aeabi_fmul>
 8006974:	4603      	mov	r3, r0
 8006976:	6023      	str	r3, [r4, #0]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8006978:	687c      	ldr	r4, [r7, #4]
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	607b      	str	r3, [r7, #4]
 800697e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006980:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006982:	f002 f8b5 	bl	8008af0 <__aeabi_fsub>
 8006986:	4603      	mov	r3, r0
 8006988:	4618      	mov	r0, r3
 800698a:	69b9      	ldr	r1, [r7, #24]
 800698c:	f002 f8b2 	bl	8008af4 <__addsf3>
 8006990:	4603      	mov	r3, r0
 8006992:	4618      	mov	r0, r3
 8006994:	6979      	ldr	r1, [r7, #20]
 8006996:	f002 f8ab 	bl	8008af0 <__aeabi_fsub>
 800699a:	4603      	mov	r3, r0
 800699c:	4618      	mov	r0, r3
 800699e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80069a2:	f002 f9af 	bl	8008d04 <__aeabi_fmul>
 80069a6:	4603      	mov	r3, r0
 80069a8:	6023      	str	r3, [r4, #0]

      pA += 2;
 80069aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ac:	3308      	adds	r3, #8
 80069ae:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 80069b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b2:	3b08      	subs	r3, #8
 80069b4:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 80069b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069b8:	3b01      	subs	r3, #1
 80069ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while(k > 0u);
 80069bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d187      	bne.n	80068d2 <stage_rfft_f32+0xb2>
}
 80069c2:	3754      	adds	r7, #84	; 0x54
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd90      	pop	{r4, r7, pc}

080069c8 <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 80069c8:	b590      	push	{r4, r7, lr}
 80069ca:	b095      	sub	sp, #84	; 0x54
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	64bb      	str	r3, [r7, #72]	; 0x48
   float32_t *pA = p;						/* increasing pointer               */
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	647b      	str	r3, [r7, #68]	; 0x44
   float32_t *pB = p;						/* decreasing pointer               */
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	643b      	str	r3, [r7, #64]	; 0x40
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;					
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	881b      	ldrh	r3, [r3, #0]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 80069ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 80069f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 80069f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f8:	3308      	adds	r3, #8
 80069fa:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 80069fc:	687c      	ldr	r4, [r7, #4]
 80069fe:	1d23      	adds	r3, r4, #4
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a04:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a06:	f002 f875 	bl	8008af4 <__addsf3>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006a12:	f002 f977 	bl	8008d04 <__aeabi_fmul>
 8006a16:	4603      	mov	r3, r0
 8006a18:	6023      	str	r3, [r4, #0]
   *pOut++ = 0.5f * ( xAR - xAI );
 8006a1a:	687c      	ldr	r4, [r7, #4]
 8006a1c:	1d23      	adds	r3, r4, #4
 8006a1e:	607b      	str	r3, [r7, #4]
 8006a20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006a24:	f002 f864 	bl	8008af0 <__aeabi_fsub>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006a30:	f002 f968 	bl	8008d04 <__aeabi_fmul>
 8006a34:	4603      	mov	r3, r0
 8006a36:	6023      	str	r3, [r4, #0]

   pB  =  p + 2*k ;
 8006a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	4413      	add	r3, r2
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8006a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a44:	3308      	adds	r3, #8
 8006a46:	647b      	str	r3, [r7, #68]	; 0x44

   while(k > 0u)
 8006a48:	e074      	b.n	8006b34 <merge_rfft_f32+0x16c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8006a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8006a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8006a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8006a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8006a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a64:	1d1a      	adds	r2, r3, #4
 8006a66:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8006a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6e:	1d1a      	adds	r2, r3, #4
 8006a70:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8006a76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a7a:	f002 f839 	bl	8008af0 <__aeabi_fsub>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8006a82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006a86:	f002 f835 	bl	8008af4 <__addsf3>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	623b      	str	r3, [r7, #32]

      r = twR * t1a;
 8006a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a92:	f002 f937 	bl	8008d04 <__aeabi_fmul>
 8006a96:	4603      	mov	r3, r0
 8006a98:	61fb      	str	r3, [r7, #28]
      s = twI * t1b;
 8006a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a9c:	6a39      	ldr	r1, [r7, #32]
 8006a9e:	f002 f931 	bl	8008d04 <__aeabi_fmul>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	61bb      	str	r3, [r7, #24]
      t = twI * t1a;
 8006aa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aaa:	f002 f92b 	bl	8008d04 <__aeabi_fmul>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	617b      	str	r3, [r7, #20]
      u = twR * t1b;
 8006ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ab4:	6a39      	ldr	r1, [r7, #32]
 8006ab6:	f002 f925 	bl	8008d04 <__aeabi_fmul>
 8006aba:	4603      	mov	r3, r0
 8006abc:	613b      	str	r3, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8006abe:	687c      	ldr	r4, [r7, #4]
 8006ac0:	1d23      	adds	r3, r4, #4
 8006ac2:	607b      	str	r3, [r7, #4]
 8006ac4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ac8:	f002 f814 	bl	8008af4 <__addsf3>
 8006acc:	4603      	mov	r3, r0
 8006ace:	4618      	mov	r0, r3
 8006ad0:	69f9      	ldr	r1, [r7, #28]
 8006ad2:	f002 f80d 	bl	8008af0 <__aeabi_fsub>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	4618      	mov	r0, r3
 8006ada:	69b9      	ldr	r1, [r7, #24]
 8006adc:	f002 f808 	bl	8008af0 <__aeabi_fsub>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006ae8:	f002 f90c 	bl	8008d04 <__aeabi_fmul>
 8006aec:	4603      	mov	r3, r0
 8006aee:	6023      	str	r3, [r4, #0]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8006af0:	687c      	ldr	r4, [r7, #4]
 8006af2:	1d23      	adds	r3, r4, #4
 8006af4:	607b      	str	r3, [r7, #4]
 8006af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006af8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006afa:	f001 fff9 	bl	8008af0 <__aeabi_fsub>
 8006afe:	4603      	mov	r3, r0
 8006b00:	4618      	mov	r0, r3
 8006b02:	6979      	ldr	r1, [r7, #20]
 8006b04:	f001 fff6 	bl	8008af4 <__addsf3>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	6939      	ldr	r1, [r7, #16]
 8006b0e:	f001 ffef 	bl	8008af0 <__aeabi_fsub>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4618      	mov	r0, r3
 8006b16:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006b1a:	f002 f8f3 	bl	8008d04 <__aeabi_fmul>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	6023      	str	r3, [r4, #0]

      pA += 2;
 8006b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b24:	3308      	adds	r3, #8
 8006b26:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8006b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b2a:	3b08      	subs	r3, #8
 8006b2c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8006b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b30:	3b01      	subs	r3, #1
 8006b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   *pOut++ = 0.5f * ( xAR - xAI );

   pB  =  p + 2*k ;
   pA +=  2	   ;

   while(k > 0u)
 8006b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d187      	bne.n	8006a4a <merge_rfft_f32+0x82>
      pA += 2;
      pB -= 2;
      k--;
   }

}
 8006b3a:	3754      	adds	r7, #84	; 0x54
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd90      	pop	{r4, r7, pc}

08006b40 <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8a1b      	ldrh	r3, [r3, #16]
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 8006b5e:	78fb      	ldrb	r3, [r7, #3]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00c      	beq.n	8006b7e <arm_rfft_fast_f32+0x3e>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	68b9      	ldr	r1, [r7, #8]
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	f7ff ff2d 	bl	80069c8 <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8006b6e:	78fb      	ldrb	r3, [r7, #3]
 8006b70:	6978      	ldr	r0, [r7, #20]
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	461a      	mov	r2, r3
 8006b76:	2301      	movs	r3, #1
 8006b78:	f7fe fd9c 	bl	80056b4 <arm_cfft_f32>
 8006b7c:	e00b      	b.n	8006b96 <arm_rfft_fast_f32+0x56>
   }
   else
   {
      /* Calculation of RFFT of input */
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	6978      	ldr	r0, [r7, #20]
 8006b82:	68b9      	ldr	r1, [r7, #8]
 8006b84:	461a      	mov	r2, r3
 8006b86:	2301      	movs	r3, #1
 8006b88:	f7fe fd94 	bl	80056b4 <arm_cfft_f32>
   
      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	f7ff fe45 	bl	8006820 <stage_rfft_f32>
   }
}
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <arm_rfft_fast_init_f32>:
* This Function also initializes Twiddle factor table pointer and Bit reversal table pointer.   
*/
arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	807b      	strh	r3, [r7, #2]
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	60bb      	str	r3, [r7, #8]
  Sint->fftLen = fftLen/2;
 8006bb0:	887b      	ldrh	r3, [r7, #2]
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = fftLen;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	887a      	ldrh	r2, [r7, #2]
 8006bbe:	821a      	strh	r2, [r3, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	881b      	ldrh	r3, [r3, #0]
 8006bc4:	2b80      	cmp	r3, #128	; 0x80
 8006bc6:	d050      	beq.n	8006c6a <arm_rfft_fast_init_f32+0xce>
 8006bc8:	2b80      	cmp	r3, #128	; 0x80
 8006bca:	dc06      	bgt.n	8006bda <arm_rfft_fast_init_f32+0x3e>
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d066      	beq.n	8006c9e <arm_rfft_fast_init_f32+0x102>
 8006bd0:	2b40      	cmp	r3, #64	; 0x40
 8006bd2:	d057      	beq.n	8006c84 <arm_rfft_fast_init_f32+0xe8>
 8006bd4:	2b10      	cmp	r3, #16
 8006bd6:	d06f      	beq.n	8006cb8 <arm_rfft_fast_init_f32+0x11c>
 8006bd8:	e07b      	b.n	8006cd2 <arm_rfft_fast_init_f32+0x136>
 8006bda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bde:	d028      	beq.n	8006c32 <arm_rfft_fast_init_f32+0x96>
 8006be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006be4:	dc03      	bgt.n	8006bee <arm_rfft_fast_init_f32+0x52>
 8006be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bea:	d030      	beq.n	8006c4e <arm_rfft_fast_init_f32+0xb2>
 8006bec:	e071      	b.n	8006cd2 <arm_rfft_fast_init_f32+0x136>
 8006bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bf2:	d010      	beq.n	8006c16 <arm_rfft_fast_init_f32+0x7a>
 8006bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bf8:	d16b      	bne.n	8006cd2 <arm_rfft_fast_init_f32+0x136>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f44f 626e 	mov.w	r2, #3808	; 0xee0
 8006c00:	819a      	strh	r2, [r3, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4a38      	ldr	r2, [pc, #224]	; (8006ce8 <arm_rfft_fast_init_f32+0x14c>)
 8006c06:	609a      	str	r2, [r3, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	4a38      	ldr	r2, [pc, #224]	; (8006cec <arm_rfft_fast_init_f32+0x150>)
 8006c0c:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a37      	ldr	r2, [pc, #220]	; (8006cf0 <arm_rfft_fast_init_f32+0x154>)
 8006c12:	615a      	str	r2, [r3, #20]
    break;
 8006c14:	e060      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  case 1024u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006c1c:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	4a34      	ldr	r2, [pc, #208]	; (8006cf4 <arm_rfft_fast_init_f32+0x158>)
 8006c22:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	4a34      	ldr	r2, [pc, #208]	; (8006cf8 <arm_rfft_fast_init_f32+0x15c>)
 8006c28:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a33      	ldr	r2, [pc, #204]	; (8006cfc <arm_rfft_fast_init_f32+0x160>)
 8006c2e:	615a      	str	r2, [r3, #20]
    break;
 8006c30:	e052      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  case 512u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006c38:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4a30      	ldr	r2, [pc, #192]	; (8006d00 <arm_rfft_fast_init_f32+0x164>)
 8006c3e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	4a30      	ldr	r2, [pc, #192]	; (8006d04 <arm_rfft_fast_init_f32+0x168>)
 8006c44:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2f      	ldr	r2, [pc, #188]	; (8006d08 <arm_rfft_fast_init_f32+0x16c>)
 8006c4a:	615a      	str	r2, [r3, #20]
    break;
 8006c4c:	e044      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  case 256u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006c54:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	4a2c      	ldr	r2, [pc, #176]	; (8006d0c <arm_rfft_fast_init_f32+0x170>)
 8006c5a:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4a2c      	ldr	r2, [pc, #176]	; (8006d10 <arm_rfft_fast_init_f32+0x174>)
 8006c60:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a2b      	ldr	r2, [pc, #172]	; (8006d14 <arm_rfft_fast_init_f32+0x178>)
 8006c66:	615a      	str	r2, [r3, #20]
    break;
 8006c68:	e036      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  case 128u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	22d0      	movs	r2, #208	; 0xd0
 8006c6e:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	4a29      	ldr	r2, [pc, #164]	; (8006d18 <arm_rfft_fast_init_f32+0x17c>)
 8006c74:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a28      	ldr	r2, [pc, #160]	; (8006d1c <arm_rfft_fast_init_f32+0x180>)
 8006c7a:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a28      	ldr	r2, [pc, #160]	; (8006d20 <arm_rfft_fast_init_f32+0x184>)
 8006c80:	615a      	str	r2, [r3, #20]
    break;
 8006c82:	e029      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  case 64u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2238      	movs	r2, #56	; 0x38
 8006c88:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	4a25      	ldr	r2, [pc, #148]	; (8006d24 <arm_rfft_fast_init_f32+0x188>)
 8006c8e:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	4a25      	ldr	r2, [pc, #148]	; (8006d28 <arm_rfft_fast_init_f32+0x18c>)
 8006c94:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a24      	ldr	r2, [pc, #144]	; (8006d2c <arm_rfft_fast_init_f32+0x190>)
 8006c9a:	615a      	str	r2, [r3, #20]
    break;
 8006c9c:	e01c      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  case 32u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2230      	movs	r2, #48	; 0x30
 8006ca2:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4a22      	ldr	r2, [pc, #136]	; (8006d30 <arm_rfft_fast_init_f32+0x194>)
 8006ca8:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4a21      	ldr	r2, [pc, #132]	; (8006d34 <arm_rfft_fast_init_f32+0x198>)
 8006cae:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	; (8006d38 <arm_rfft_fast_init_f32+0x19c>)
 8006cb4:	615a      	str	r2, [r3, #20]
    break;
 8006cb6:	e00f      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2214      	movs	r2, #20
 8006cbc:	819a      	strh	r2, [r3, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	4a1e      	ldr	r2, [pc, #120]	; (8006d3c <arm_rfft_fast_init_f32+0x1a0>)
 8006cc2:	609a      	str	r2, [r3, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4a1e      	ldr	r2, [pc, #120]	; (8006d40 <arm_rfft_fast_init_f32+0x1a4>)
 8006cc8:	605a      	str	r2, [r3, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a1d      	ldr	r2, [pc, #116]	; (8006d44 <arm_rfft_fast_init_f32+0x1a8>)
 8006cce:	615a      	str	r2, [r3, #20]
    break;
 8006cd0:	e002      	b.n	8006cd8 <arm_rfft_fast_init_f32+0x13c>
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 8006cd2:	23ff      	movs	r3, #255	; 0xff
 8006cd4:	73fb      	strb	r3, [r7, #15]
    break;
 8006cd6:	bf00      	nop
  }

  return (status);
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	b25b      	sxtb	r3, r3
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	08012fb4 	.word	0x08012fb4
 8006cec:	0800d81c 	.word	0x0800d81c
 8006cf0:	08018cf4 	.word	0x08018cf4
 8006cf4:	080121a4 	.word	0x080121a4
 8006cf8:	0800b81c 	.word	0x0800b81c
 8006cfc:	08016cf4 	.word	0x08016cf4
 8006d00:	08011e24 	.word	0x08011e24
 8006d04:	0800a81c 	.word	0x0800a81c
 8006d08:	08015cf4 	.word	0x08015cf4
 8006d0c:	08011ab4 	.word	0x08011ab4
 8006d10:	0800a01c 	.word	0x0800a01c
 8006d14:	080154f4 	.word	0x080154f4
 8006d18:	08011914 	.word	0x08011914
 8006d1c:	08009c1c 	.word	0x08009c1c
 8006d20:	080150f4 	.word	0x080150f4
 8006d24:	080118a4 	.word	0x080118a4
 8006d28:	08009a1c 	.word	0x08009a1c
 8006d2c:	08014ef4 	.word	0x08014ef4
 8006d30:	08011844 	.word	0x08011844
 8006d34:	0800991c 	.word	0x0800991c
 8006d38:	08014df4 	.word	0x08014df4
 8006d3c:	0801181c 	.word	0x0801181c
 8006d40:	0800989c 	.word	0x0800989c
 8006d44:	08014d74 	.word	0x08014d74

08006d48 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08a      	sub	sp, #40	; 0x28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
 8006d54:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8006d56:	2300      	movs	r3, #0
 8006d58:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	1d1a      	adds	r2, r3, #4
 8006d62:	60fa      	str	r2, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	089b      	lsrs	r3, r3, #2
 8006d6e:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8006d70:	e049      	b.n	8006e06 <arm_max_f32+0xbe>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1d1a      	adds	r2, r3, #4
 8006d76:	60fa      	str	r2, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	1d1a      	adds	r2, r3, #4
 8006d80:	60fa      	str	r2, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8006d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d88:	6979      	ldr	r1, [r7, #20]
 8006d8a:	f002 f959 	bl	8009040 <__aeabi_fcmplt>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d004      	beq.n	8006d9e <arm_max_f32+0x56>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1d1a      	adds	r2, r3, #4
 8006da2:	60fa      	str	r2, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8006da8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006daa:	6939      	ldr	r1, [r7, #16]
 8006dac:	f002 f948 	bl	8009040 <__aeabi_fcmplt>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <arm_max_f32+0x78>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	1d1a      	adds	r2, r3, #4
 8006dc4:	60fa      	str	r2, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8006dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006dcc:	6979      	ldr	r1, [r7, #20]
 8006dce:	f002 f937 	bl	8009040 <__aeabi_fcmplt>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <arm_max_f32+0x9a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	3303      	adds	r3, #3
 8006de0:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8006de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006de4:	6939      	ldr	r1, [r7, #16]
 8006de6:	f002 f92b 	bl	8009040 <__aeabi_fcmplt>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <arm_max_f32+0xb2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	3304      	adds	r3, #4
 8006df8:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	3b01      	subs	r3, #1
 8006e04:	623b      	str	r3, [r7, #32]

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1b2      	bne.n	8006d72 <arm_max_f32+0x2a>
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	f003 0303 	and.w	r3, r3, #3
 8006e14:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006e16:	e014      	b.n	8006e42 <arm_max_f32+0xfa>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	1d1a      	adds	r2, r3, #4
 8006e1c:	60fa      	str	r2, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 8006e22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e24:	6979      	ldr	r1, [r7, #20]
 8006e26:	f002 f90b 	bl	8009040 <__aeabi_fcmplt>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d005      	beq.n	8006e3c <arm_max_f32+0xf4>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1e7      	bne.n	8006e18 <arm_max_f32+0xd0>
    blkCnt--;

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e4c:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	601a      	str	r2, [r3, #0]
}
 8006e54:	3728      	adds	r7, #40	; 0x28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop

08006e5c <arm_mean_f32>:

void arm_mean_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8006e68:	f04f 0300 	mov.w	r3, #0
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	089b      	lsrs	r3, r3, #2
 8006e72:	623b      	str	r3, [r7, #32]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006e74:	e02e      	b.n	8006ed4 <arm_mean_f32+0x78>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    in1 = *pSrc++;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1d1a      	adds	r2, r3, #4
 8006e7a:	60fa      	str	r2, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	61fb      	str	r3, [r7, #28]
    in2 = *pSrc++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	1d1a      	adds	r2, r3, #4
 8006e84:	60fa      	str	r2, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	61bb      	str	r3, [r7, #24]
    in3 = *pSrc++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	1d1a      	adds	r2, r3, #4
 8006e8e:	60fa      	str	r2, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	617b      	str	r3, [r7, #20]
    in4 = *pSrc++;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	60fa      	str	r2, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	613b      	str	r3, [r7, #16]

    sum += in1;
 8006e9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ea0:	69f9      	ldr	r1, [r7, #28]
 8006ea2:	f001 fe27 	bl	8008af4 <__addsf3>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
    sum += in2;
 8006eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eac:	69b9      	ldr	r1, [r7, #24]
 8006eae:	f001 fe21 	bl	8008af4 <__addsf3>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
    sum += in3;
 8006eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	f001 fe1b 	bl	8008af4 <__addsf3>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
    sum += in4;
 8006ec2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ec4:	6939      	ldr	r1, [r7, #16]
 8006ec6:	f001 fe15 	bl	8008af4 <__addsf3>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	623b      	str	r3, [r7, #32]
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1cd      	bne.n	8006e76 <arm_mean_f32+0x1a>
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	f003 0303 	and.w	r3, r3, #3
 8006ee0:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006ee2:	e00c      	b.n	8006efe <arm_mean_f32+0xa2>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	1d1a      	adds	r2, r3, #4
 8006ee8:	60fa      	str	r2, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f001 fe00 	bl	8008af4 <__addsf3>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Decrement the loop counter */
    blkCnt--;
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	623b      	str	r3, [r7, #32]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1ef      	bne.n	8006ee4 <arm_mean_f32+0x88>
    blkCnt--;
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store the result to the destination */
  *pResult = sum / (float32_t) blockSize;
 8006f04:	68b8      	ldr	r0, [r7, #8]
 8006f06:	f001 fea5 	bl	8008c54 <__aeabi_ui2f>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	f001 ffac 	bl	8008e6c <__aeabi_fdiv>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]
}
 8006f1c:	3728      	adds	r7, #40	; 0x28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop

08006f24 <arm_cos_f32>:
 * @return cos(x).   
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8006f24:	b590      	push	{r4, r7, lr}
 8006f26:	b08b      	sub	sp, #44	; 0x2c
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	4933      	ldr	r1, [pc, #204]	; (8006ffc <arm_cos_f32+0xd8>)
 8006f30:	f001 fee8 	bl	8008d04 <__aeabi_fmul>
 8006f34:	4603      	mov	r3, r0
 8006f36:	4618      	mov	r0, r3
 8006f38:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8006f3c:	f001 fdda 	bl	8008af4 <__addsf3>
 8006f40:	4603      	mov	r3, r0
 8006f42:	623b      	str	r3, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8006f44:	6a38      	ldr	r0, [r7, #32]
 8006f46:	f002 f8a3 	bl	8009090 <__aeabi_f2iz>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if(in < 0.0f)
 8006f4e:	6a38      	ldr	r0, [r7, #32]
 8006f50:	f04f 0100 	mov.w	r1, #0
 8006f54:	f002 f874 	bl	8009040 <__aeabi_fcmplt>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <arm_cos_f32+0x40>
  {
    n--;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	3b01      	subs	r3, #1
 8006f62:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8006f64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f66:	f001 fe79 	bl	8008c5c <__aeabi_i2f>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6a38      	ldr	r0, [r7, #32]
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f001 fdbe 	bl	8008af0 <__aeabi_fsub>
 8006f74:	4603      	mov	r3, r0
 8006f76:	623b      	str	r3, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8006f78:	6a38      	ldr	r0, [r7, #32]
 8006f7a:	f04f 4188 	mov.w	r1, #1140850688	; 0x44000000
 8006f7e:	f001 fec1 	bl	8008d04 <__aeabi_fmul>
 8006f82:	4603      	mov	r3, r0
 8006f84:	61fb      	str	r3, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8006f86:	69f8      	ldr	r0, [r7, #28]
 8006f88:	f002 f8a8 	bl	80090dc <__aeabi_f2uiz>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f94:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8006f96:	8b7b      	ldrh	r3, [r7, #26]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fe5b 	bl	8008c54 <__aeabi_ui2f>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	69f8      	ldr	r0, [r7, #28]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	f001 fda4 	bl	8008af0 <__aeabi_fsub>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	617b      	str	r3, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8006fac:	8b7b      	ldrh	r3, [r7, #26]
 8006fae:	4a14      	ldr	r2, [pc, #80]	; (8007000 <arm_cos_f32+0xdc>)
 8006fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb4:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8006fb6:	8b7b      	ldrh	r3, [r7, #26]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	4a11      	ldr	r2, [pc, #68]	; (8007000 <arm_cos_f32+0xdc>)
 8006fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8006fc2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006fc6:	6979      	ldr	r1, [r7, #20]
 8006fc8:	f001 fd92 	bl	8008af0 <__aeabi_fsub>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	6939      	ldr	r1, [r7, #16]
 8006fd2:	f001 fe97 	bl	8008d04 <__aeabi_fmul>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461c      	mov	r4, r3
 8006fda:	6978      	ldr	r0, [r7, #20]
 8006fdc:	68f9      	ldr	r1, [r7, #12]
 8006fde:	f001 fe91 	bl	8008d04 <__aeabi_fmul>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	f001 fd84 	bl	8008af4 <__addsf3>
 8006fec:	4603      	mov	r3, r0
 8006fee:	60bb      	str	r3, [r7, #8]

  /* Return the output value */
  return (cosVal);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	372c      	adds	r7, #44	; 0x2c
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd90      	pop	{r4, r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	3e22f983 	.word	0x3e22f983
 8007000:	0801ccf4 	.word	0x0801ccf4

08007004 <arm_sqrt_f32>:
   */

  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
    if(in > 0)
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f04f 0100 	mov.w	r1, #0
 8007014:	f002 f832 	bl	800907c <__aeabi_fcmpgt>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d007      	beq.n	800702e <arm_sqrt_f32+0x2a>

//      #if __FPU_USED
#if (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#else
      *pOut = sqrtf(in);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 f802 	bl	8008028 <sqrtf>
 8007024:	4602      	mov	r2, r0
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	601a      	str	r2, [r3, #0]
#endif

      return (ARM_MATH_SUCCESS);
 800702a:	2300      	movs	r3, #0
 800702c:	e004      	b.n	8007038 <arm_sqrt_f32+0x34>
    }
    else
    {
      *pOut = 0.0f;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8007036:	23ff      	movs	r3, #255	; 0xff
 8007038:	b25b      	sxtb	r3, r3
    }

  }
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop

08007044 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b089      	sub	sp, #36	; 0x24
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8007056:	e08a      	b.n	800716e <arm_cmplx_mag_f32+0x12a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	1d1a      	adds	r2, r3, #4
 800705c:	60fa      	str	r2, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1d1a      	adds	r2, r3, #4
 8007066:	60fa      	str	r2, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800706c:	69b8      	ldr	r0, [r7, #24]
 800706e:	69b9      	ldr	r1, [r7, #24]
 8007070:	f001 fe48 	bl	8008d04 <__aeabi_fmul>
 8007074:	4603      	mov	r3, r0
 8007076:	461c      	mov	r4, r3
 8007078:	6978      	ldr	r0, [r7, #20]
 800707a:	6979      	ldr	r1, [r7, #20]
 800707c:	f001 fe42 	bl	8008d04 <__aeabi_fmul>
 8007080:	4603      	mov	r3, r0
 8007082:	4620      	mov	r0, r4
 8007084:	4619      	mov	r1, r3
 8007086:	f001 fd35 	bl	8008af4 <__addsf3>
 800708a:	4603      	mov	r3, r0
 800708c:	4619      	mov	r1, r3
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	1d1a      	adds	r2, r3, #4
 8007092:	60ba      	str	r2, [r7, #8]
 8007094:	4608      	mov	r0, r1
 8007096:	4619      	mov	r1, r3
 8007098:	f7ff ffb4 	bl	8007004 <arm_sqrt_f32>

    realIn = *pSrc++;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1d1a      	adds	r2, r3, #4
 80070a0:	60fa      	str	r2, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1d1a      	adds	r2, r3, #4
 80070aa:	60fa      	str	r2, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80070b0:	69b8      	ldr	r0, [r7, #24]
 80070b2:	69b9      	ldr	r1, [r7, #24]
 80070b4:	f001 fe26 	bl	8008d04 <__aeabi_fmul>
 80070b8:	4603      	mov	r3, r0
 80070ba:	461c      	mov	r4, r3
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	6979      	ldr	r1, [r7, #20]
 80070c0:	f001 fe20 	bl	8008d04 <__aeabi_fmul>
 80070c4:	4603      	mov	r3, r0
 80070c6:	4620      	mov	r0, r4
 80070c8:	4619      	mov	r1, r3
 80070ca:	f001 fd13 	bl	8008af4 <__addsf3>
 80070ce:	4603      	mov	r3, r0
 80070d0:	4619      	mov	r1, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	1d1a      	adds	r2, r3, #4
 80070d6:	60ba      	str	r2, [r7, #8]
 80070d8:	4608      	mov	r0, r1
 80070da:	4619      	mov	r1, r3
 80070dc:	f7ff ff92 	bl	8007004 <arm_sqrt_f32>

    realIn = *pSrc++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1d1a      	adds	r2, r3, #4
 80070e4:	60fa      	str	r2, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	1d1a      	adds	r2, r3, #4
 80070ee:	60fa      	str	r2, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80070f4:	69b8      	ldr	r0, [r7, #24]
 80070f6:	69b9      	ldr	r1, [r7, #24]
 80070f8:	f001 fe04 	bl	8008d04 <__aeabi_fmul>
 80070fc:	4603      	mov	r3, r0
 80070fe:	461c      	mov	r4, r3
 8007100:	6978      	ldr	r0, [r7, #20]
 8007102:	6979      	ldr	r1, [r7, #20]
 8007104:	f001 fdfe 	bl	8008d04 <__aeabi_fmul>
 8007108:	4603      	mov	r3, r0
 800710a:	4620      	mov	r0, r4
 800710c:	4619      	mov	r1, r3
 800710e:	f001 fcf1 	bl	8008af4 <__addsf3>
 8007112:	4603      	mov	r3, r0
 8007114:	4619      	mov	r1, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	1d1a      	adds	r2, r3, #4
 800711a:	60ba      	str	r2, [r7, #8]
 800711c:	4608      	mov	r0, r1
 800711e:	4619      	mov	r1, r3
 8007120:	f7ff ff70 	bl	8007004 <arm_sqrt_f32>

    realIn = *pSrc++;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	1d1a      	adds	r2, r3, #4
 8007128:	60fa      	str	r2, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	60fa      	str	r2, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8007138:	69b8      	ldr	r0, [r7, #24]
 800713a:	69b9      	ldr	r1, [r7, #24]
 800713c:	f001 fde2 	bl	8008d04 <__aeabi_fmul>
 8007140:	4603      	mov	r3, r0
 8007142:	461c      	mov	r4, r3
 8007144:	6978      	ldr	r0, [r7, #20]
 8007146:	6979      	ldr	r1, [r7, #20]
 8007148:	f001 fddc 	bl	8008d04 <__aeabi_fmul>
 800714c:	4603      	mov	r3, r0
 800714e:	4620      	mov	r0, r4
 8007150:	4619      	mov	r1, r3
 8007152:	f001 fccf 	bl	8008af4 <__addsf3>
 8007156:	4603      	mov	r3, r0
 8007158:	4619      	mov	r1, r3
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	1d1a      	adds	r2, r3, #4
 800715e:	60ba      	str	r2, [r7, #8]
 8007160:	4608      	mov	r0, r1
 8007162:	4619      	mov	r1, r3
 8007164:	f7ff ff4e 	bl	8007004 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	3b01      	subs	r3, #1
 800716c:	61fb      	str	r3, [r7, #28]
  /*loop Unrolling */
  blkCnt = numSamples >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f47f af71 	bne.w	8007058 <arm_cmplx_mag_f32+0x14>
    blkCnt--;
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 800717e:	e024      	b.n	80071ca <arm_cmplx_mag_f32+0x186>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	1d1a      	adds	r2, r3, #4
 8007184:	60fa      	str	r2, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1d1a      	adds	r2, r3, #4
 800718e:	60fa      	str	r2, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8007194:	69b8      	ldr	r0, [r7, #24]
 8007196:	69b9      	ldr	r1, [r7, #24]
 8007198:	f001 fdb4 	bl	8008d04 <__aeabi_fmul>
 800719c:	4603      	mov	r3, r0
 800719e:	461c      	mov	r4, r3
 80071a0:	6978      	ldr	r0, [r7, #20]
 80071a2:	6979      	ldr	r1, [r7, #20]
 80071a4:	f001 fdae 	bl	8008d04 <__aeabi_fmul>
 80071a8:	4603      	mov	r3, r0
 80071aa:	4620      	mov	r0, r4
 80071ac:	4619      	mov	r1, r3
 80071ae:	f001 fca1 	bl	8008af4 <__addsf3>
 80071b2:	4603      	mov	r3, r0
 80071b4:	4619      	mov	r1, r3
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	1d1a      	adds	r2, r3, #4
 80071ba:	60ba      	str	r2, [r7, #8]
 80071bc:	4608      	mov	r0, r1
 80071be:	4619      	mov	r1, r3
 80071c0:	f7ff ff20 	bl	8007004 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;

  while(blkCnt > 0u)
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1d7      	bne.n	8007180 <arm_cmplx_mag_f32+0x13c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 80071d0:	3724      	adds	r7, #36	; 0x24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd90      	pop	{r4, r7, pc}
 80071d6:	bf00      	nop

080071d8 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b093      	sub	sp, #76	; 0x4c
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	089b      	lsrs	r3, r3, #2
 80071ea:	647b      	str	r3, [r7, #68]	; 0x44

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80071ec:	e04a      	b.n	8007284 <arm_mult_f32+0xac>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	643b      	str	r3, [r7, #64]	; 0x40
    /* read sample from sourceB */
    inB1 = *pSrcB;
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	63bb      	str	r3, [r7, #56]	; 0x38
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	637b      	str	r3, [r7, #52]	; 0x34

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 8007206:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800720a:	f001 fd7b 	bl	8008d04 <__aeabi_fmul>
 800720e:	4603      	mov	r3, r0
 8007210:	633b      	str	r3, [r7, #48]	; 0x30

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 800721e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007220:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007222:	f001 fd6f 	bl	8008d04 <__aeabi_fmul>
 8007226:	4603      	mov	r3, r0
 8007228:	627b      	str	r3, [r7, #36]	; 0x24

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	623b      	str	r3, [r7, #32]

    /* store result to destination buffer */
    *pDst = out1;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007234:	601a      	str	r2, [r3, #0]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	61fb      	str	r3, [r7, #28]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 800723c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800723e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007240:	f001 fd60 	bl	8008d04 <__aeabi_fmul>
 8007244:	4603      	mov	r3, r0
 8007246:	61bb      	str	r3, [r7, #24]

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3304      	adds	r3, #4
 800724c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724e:	601a      	str	r2, [r3, #0]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 8007250:	6a38      	ldr	r0, [r7, #32]
 8007252:	69f9      	ldr	r1, [r7, #28]
 8007254:	f001 fd56 	bl	8008d04 <__aeabi_fmul>
 8007258:	4603      	mov	r3, r0
 800725a:	617b      	str	r3, [r7, #20]
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	3308      	adds	r3, #8
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	601a      	str	r2, [r3, #0]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	330c      	adds	r3, #12
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	601a      	str	r2, [r3, #0]


    /* update pointers to process next samples */
    pSrcA += 4u;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	3310      	adds	r3, #16
 8007270:	60fb      	str	r3, [r7, #12]
    pSrcB += 4u;
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	3310      	adds	r3, #16
 8007276:	60bb      	str	r3, [r7, #8]
    pDst += 4u;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3310      	adds	r3, #16
 800727c:	607b      	str	r3, [r7, #4]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 800727e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007280:	3b01      	subs	r3, #1
 8007282:	647b      	str	r3, [r7, #68]	; 0x44
  /* loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8007284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1b1      	bne.n	80071ee <arm_mult_f32+0x16>
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8007292:	e013      	b.n	80072bc <arm_mult_f32+0xe4>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8007294:	687c      	ldr	r4, [r7, #4]
 8007296:	1d23      	adds	r3, r4, #4
 8007298:	607b      	str	r3, [r7, #4]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	1d1a      	adds	r2, r3, #4
 800729e:	60fa      	str	r2, [r7, #12]
 80072a0:	6819      	ldr	r1, [r3, #0]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	1d1a      	adds	r2, r3, #4
 80072a6:	60ba      	str	r2, [r7, #8]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4608      	mov	r0, r1
 80072ac:	4619      	mov	r1, r3
 80072ae:	f001 fd29 	bl	8008d04 <__aeabi_fmul>
 80072b2:	4603      	mov	r3, r0
 80072b4:	6023      	str	r3, [r4, #0]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 80072b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072b8:	3b01      	subs	r3, #1
 80072ba:	647b      	str	r3, [r7, #68]	; 0x44
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80072bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e8      	bne.n	8007294 <arm_mult_f32+0xbc>
    *pDst++ = (*pSrcA++) * (*pSrcB++);

    /* Decrement the blockSize loop counter */
    blkCnt--;
  }
}
 80072c2:	374c      	adds	r7, #76	; 0x4c
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd90      	pop	{r4, r7, pc}

080072c8 <arm_offset_f32>:
void arm_offset_f32(
  float32_t * pSrc,
  float32_t offset,
  float32_t * pDst,
  uint32_t blockSize)
{
 80072c8:	b590      	push	{r4, r7, lr}
 80072ca:	b08b      	sub	sp, #44	; 0x2c
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	60f8      	str	r0, [r7, #12]
 80072d0:	60b9      	str	r1, [r7, #8]
 80072d2:	607a      	str	r2, [r7, #4]
 80072d4:	603b      	str	r3, [r7, #0]

/* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t in1, in2, in3, in4;

  /*loop Unrolling */
  blkCnt = blockSize >> 2u;
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	089b      	lsrs	r3, r3, #2
 80072da:	627b      	str	r3, [r7, #36]	; 0x24

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80072dc:	e03b      	b.n	8007356 <arm_offset_f32+0x8e>
  {
    /* C = A + offset */
    /* Add offset and then store the results in the destination buffer. */
    /* read samples from source */
    in1 = *pSrc;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	623b      	str	r3, [r7, #32]
    in2 = *(pSrc + 1);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	61fb      	str	r3, [r7, #28]

    /* add offset to input */
    in1 = in1 + offset;
 80072ea:	6a38      	ldr	r0, [r7, #32]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	f001 fc01 	bl	8008af4 <__addsf3>
 80072f2:	4603      	mov	r3, r0
 80072f4:	623b      	str	r3, [r7, #32]

    /* read samples from source */
    in3 = *(pSrc + 2);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	61bb      	str	r3, [r7, #24]

    /* add offset to input */
    in2 = in2 + offset;
 80072fc:	69f8      	ldr	r0, [r7, #28]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	f001 fbf8 	bl	8008af4 <__addsf3>
 8007304:	4603      	mov	r3, r0
 8007306:	61fb      	str	r3, [r7, #28]

    /* read samples from source */
    in4 = *(pSrc + 3);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	617b      	str	r3, [r7, #20]

    /* add offset to input */
    in3 = in3 + offset;
 800730e:	69b8      	ldr	r0, [r7, #24]
 8007310:	68b9      	ldr	r1, [r7, #8]
 8007312:	f001 fbef 	bl	8008af4 <__addsf3>
 8007316:	4603      	mov	r3, r0
 8007318:	61bb      	str	r3, [r7, #24]

    /* store result to destination */
    *pDst = in1;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	601a      	str	r2, [r3, #0]

    /* add offset to input */
    in4 = in4 + offset;
 8007320:	6978      	ldr	r0, [r7, #20]
 8007322:	68b9      	ldr	r1, [r7, #8]
 8007324:	f001 fbe6 	bl	8008af4 <__addsf3>
 8007328:	4603      	mov	r3, r0
 800732a:	617b      	str	r3, [r7, #20]

    /* store result to destination */
    *(pDst + 1) = in2;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	3304      	adds	r3, #4
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 2) = in3;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	3308      	adds	r3, #8
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	601a      	str	r2, [r3, #0]

    /* store result to destination */
    *(pDst + 3) = in4;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	330c      	adds	r3, #12
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	601a      	str	r2, [r3, #0]

    /* update pointers to process next samples */
    pSrc += 4u;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3310      	adds	r3, #16
 8007348:	60fb      	str	r3, [r7, #12]
    pDst += 4u;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3310      	adds	r3, #16
 800734e:	607b      	str	r3, [r7, #4]

    /* Decrement the loop counter */
    blkCnt--;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	3b01      	subs	r3, #1
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
  /*loop Unrolling */
  blkCnt = blockSize >> 2u;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1c0      	bne.n	80072de <arm_offset_f32+0x16>
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	f003 0303 	and.w	r3, r3, #3
 8007362:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8007364:	e00f      	b.n	8007386 <arm_offset_f32+0xbe>
  {
    /* C = A + offset */
    /* Add offset and then store the result in the destination buffer. */
    *pDst++ = (*pSrc++) + offset;
 8007366:	687c      	ldr	r4, [r7, #4]
 8007368:	1d23      	adds	r3, r4, #4
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	1d1a      	adds	r2, r3, #4
 8007370:	60fa      	str	r2, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4618      	mov	r0, r3
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	f001 fbbc 	bl	8008af4 <__addsf3>
 800737c:	4603      	mov	r3, r0
 800737e:	6023      	str	r3, [r4, #0]

    /* Decrement the loop counter */
    blkCnt--;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	3b01      	subs	r3, #1
 8007384:	627b      	str	r3, [r7, #36]	; 0x24
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1ec      	bne.n	8007366 <arm_offset_f32+0x9e>
    *pDst++ = (*pSrc++) + offset;

    /* Decrement the loop counter */
    blkCnt--;
  }
}
 800738c:	372c      	adds	r7, #44	; 0x2c
 800738e:	46bd      	mov	sp, r7
 8007390:	bd90      	pop	{r4, r7, pc}
 8007392:	bf00      	nop

08007394 <OSCHP_GetFrequency>:
  return (version);
}

/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8007398:	4b02      	ldr	r3, [pc, #8]	; (80073a4 <OSCHP_GetFrequency+0x10>)
}
 800739a:	4618      	mov	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr
 80073a4:	00b71b00 	.word	0x00b71b00

080073a8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	af00      	add	r7, sp, #0

  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80073ac:	480b      	ldr	r0, [pc, #44]	; (80073dc <SystemCoreClockSetup+0x34>)
 80073ae:	f7f9 f8ed 	bl	800058c <XMC_SCU_CLOCK_Init>
  /* RTC source clock*/
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80073b2:	2000      	movs	r0, #0
 80073b4:	f7f9 f9f2 	bl	800079c <XMC_SCU_HIB_SetRtcClockSource>

  /* USB/SDMMC source clock*/
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80073b8:	2000      	movs	r0, #0
 80073ba:	f7f9 f9a7 	bl	800070c <XMC_SCU_CLOCK_SetUsbClockSource>
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80073be:	2004      	movs	r0, #4
 80073c0:	f7f9 fa78 	bl	80008b4 <XMC_SCU_CLOCK_SetUsbClockDivider>

  XMC_SCU_CLOCK_StartUsbPll(2U, 64U);
 80073c4:	2002      	movs	r0, #2
 80073c6:	2140      	movs	r1, #64	; 0x40
 80073c8:	f7f9 faea 	bl	80009a0 <XMC_SCU_CLOCK_StartUsbPll>

  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 80073cc:	2000      	movs	r0, #0
 80073ce:	f7f9 f9b1 	bl	8000734 <XMC_SCU_CLOCK_SetWdtClockSource>
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 80073d2:	2001      	movs	r0, #1
 80073d4:	f7f9 fa82 	bl	80008dc <XMC_SCU_CLOCK_SetWdtClockDivider>

}
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	0801d4f8 	.word	0x0801d4f8

080073e0 <NVIC_GetPriorityGrouping>:
  The function reads the priority grouping field from the NVIC Interrupt Controller.

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80073e0:	b480      	push	{r7}
 80073e2:	af00      	add	r7, sp, #0
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 80073e4:	4b04      	ldr	r3, [pc, #16]	; (80073f8 <NVIC_GetPriorityGrouping+0x18>)
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073ec:	0a1b      	lsrs	r3, r3, #8
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	e000ed00 	.word	0xe000ed00

080073fc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8007406:	4908      	ldr	r1, [pc, #32]	; (8007428 <NVIC_EnableIRQ+0x2c>)
 8007408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800740c:	095b      	lsrs	r3, r3, #5
 800740e:	79fa      	ldrb	r2, [r7, #7]
 8007410:	f002 021f 	and.w	r2, r2, #31
 8007414:	2001      	movs	r0, #1
 8007416:	fa00 f202 	lsl.w	r2, r0, r2
 800741a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr
 8007428:	e000e100 	.word	0xe000e100

0800742c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	6039      	str	r1, [r7, #0]
 8007436:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8007438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800743c:	2b00      	cmp	r3, #0
 800743e:	da0b      	bge.n	8007458 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8007440:	490d      	ldr	r1, [pc, #52]	; (8007478 <NVIC_SetPriority+0x4c>)
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	3b04      	subs	r3, #4
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	b2d2      	uxtb	r2, r2
 800744e:	0092      	lsls	r2, r2, #2
 8007450:	b2d2      	uxtb	r2, r2
 8007452:	440b      	add	r3, r1
 8007454:	761a      	strb	r2, [r3, #24]
 8007456:	e009      	b.n	800746c <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8007458:	4908      	ldr	r1, [pc, #32]	; (800747c <NVIC_SetPriority+0x50>)
 800745a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	0092      	lsls	r2, r2, #2
 8007464:	b2d2      	uxtb	r2, r2
 8007466:	440b      	add	r3, r1
 8007468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	e000ed00 	.word	0xe000ed00
 800747c:	e000e100 	.word	0xe000e100

08007480 <NVIC_EncodePriority>:
    \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
    \param [in]       SubPriority  Subpriority value (starting from 0).
    \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007480:	b480      	push	{r7}
 8007482:	b089      	sub	sp, #36	; 0x24
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	f1c3 0307 	rsb	r3, r3, #7
 800749a:	2b06      	cmp	r3, #6
 800749c:	bf28      	it	cs
 800749e:	2306      	movcs	r3, #6
 80074a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	3306      	adds	r3, #6
 80074a6:	2b06      	cmp	r3, #6
 80074a8:	d902      	bls.n	80074b0 <NVIC_EncodePriority+0x30>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	3b01      	subs	r3, #1
 80074ae:	e000      	b.n	80074b2 <NVIC_EncodePriority+0x32>
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	2201      	movs	r2, #1
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	3b01      	subs	r3, #1
 80074be:	461a      	mov	r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	401a      	ands	r2, r3
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	409a      	lsls	r2, r3
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	2101      	movs	r1, #1
 80074cc:	fa01 f303 	lsl.w	r3, r1, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	4619      	mov	r1, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 80074d8:	4313      	orrs	r3, r2
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
         );
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3724      	adds	r7, #36	; 0x24
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop

080074e8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80074f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop

0800750c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>:
 *  XMC_VADC_GLOBAL_BackgroundAddMultipleChannels()<BR>
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(XMC_VADC_GLOBAL_t *const global_ptr,
                                                                    const uint32_t grp_num,
                                                                    const uint32_t ch_num)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	3260      	adds	r2, #96	; 0x60
 800751e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2101      	movs	r1, #1
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	ea42 0103 	orr.w	r1, r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	3260      	adds	r2, #96	; 0x60
 8007534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop

08007544 <XMC_VADC_GROUP_ResultInit>:
 * XMC_VADC_GROUP_AddResultToFifo()<BR> XMC_VADC_GROUP_EnableResultEvent()<br> XMC_VADC_GROUP_DisableResultEvent()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6819      	ldr	r1, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	68ba      	ldr	r2, [r7, #8]
 8007558:	32a0      	adds	r2, #160	; 0xa0
 800755a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800755e:	3714      	adds	r7, #20
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
 8007568:	b590      	push	{r4, r7, lr}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]

  const ADC_MEASUREMENT_CHANNEL_t *indexed;
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	7e1b      	ldrb	r3, [r3, #24]
 8007574:	2b02      	cmp	r3, #2
 8007576:	f040 8099 	bne.w	80076ac <ADC_MEASUREMENT_Init+0x144>
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	4618      	mov	r0, r3
 8007580:	f7fc fb56 	bl	8003c30 <GLOBAL_ADC_Init>
 8007584:	4603      	mov	r3, r0
 8007586:	73bb      	strb	r3, [r7, #14]
#ifdef ADC_MEASUREMENT_CPU_4X
    status = (ADC_MEASUREMENT_STATUS_t)((uint32_t)status + (uint32_t)CPU_CTRL_XMC4_Init(handle_ptr->cpu_handle));
#endif
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	4610      	mov	r0, r2
 8007594:	6819      	ldr	r1, [r3, #0]
 8007596:	2200      	movs	r2, #0
 8007598:	2301      	movs	r3, #1
 800759a:	f7fa ffad 	bl	80024f8 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	68da      	ldr	r2, [r3, #12]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	4610      	mov	r0, r2
 80075aa:	4619      	mov	r1, r3
 80075ac:	f7fb f8c8 	bl	8002740 <XMC_VADC_GLOBAL_BackgroundInit>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 80075b0:	2300      	movs	r3, #0
 80075b2:	73fb      	strb	r3, [r7, #15]
 80075b4:	e02e      	b.n	8007614 <ADC_MEASUREMENT_Init+0xac>
    {
      indexed = handle_ptr->array->channel_array[j];
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	7bfa      	ldrb	r2, [r7, #15]
 80075bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c0:	60bb      	str	r3, [r7, #8]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	689a      	ldr	r2, [r3, #8]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	7b5b      	ldrb	r3, [r3, #13]
 80075ca:	4619      	mov	r1, r3
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4610      	mov	r0, r2
 80075d2:	461a      	mov	r2, r3
 80075d4:	f7fb f932 	bl	800283c <XMC_VADC_GROUP_ChannelInit>
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	789b      	ldrb	r3, [r3, #2]
 80075e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	4619      	mov	r1, r3
                                indexed->res_handle);
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	685b      	ldr	r3, [r3, #4]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
 80075ee:	4610      	mov	r0, r2
 80075f0:	461a      	mov	r2, r3
 80075f2:	f7ff ffa7 	bl	8007544 <XMC_VADC_GROUP_ResultInit>
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	68da      	ldr	r2, [r3, #12]
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	7b1b      	ldrb	r3, [r3, #12]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8007600:	4619      	mov	r1, r3
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	7b5b      	ldrb	r3, [r3, #13]
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
 8007606:	4610      	mov	r0, r2
 8007608:	461a      	mov	r2, r3
 800760a:	f7ff ff7f 	bl	800750c <XMC_VADC_GLOBAL_BackgroundAddChannelToSequence>
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
 800760e:	7bfb      	ldrb	r3, [r7, #15]
 8007610:	3301      	adds	r3, #1
 8007612:	73fb      	strb	r3, [r7, #15]
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d9cd      	bls.n	80075b6 <ADC_MEASUREMENT_Init+0x4e>
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
                                                     (uint32_t)indexed->group_index, (uint32_t)indexed->ch_num);
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	7a1b      	ldrb	r3, [r3, #8]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d02c      	beq.n	8007684 <ADC_MEASUREMENT_Init+0x11c>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d028      	beq.n	8007684 <ADC_MEASUREMENT_Init+0x11c>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	b2dc      	uxtb	r4, r3
 800763a:	f7ff fed1 	bl	80073e0 <NVIC_GetPriorityGrouping>
 800763e:	4601      	mov	r1, r0
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 8007644:	685a      	ldr	r2, [r3, #4]
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	691b      	ldr	r3, [r3, #16]
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        handle_ptr->req_src_intr_handle->priority);
#else
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	4608      	mov	r0, r1
 800764e:	4611      	mov	r1, r2
 8007650:	461a      	mov	r2, r3
 8007652:	f7ff ff15 	bl	8007480 <NVIC_EncodePriority>
 8007656:	4602      	mov	r2, r0
 8007658:	b263      	sxtb	r3, r4
 800765a:	4618      	mov	r0, r3
 800765c:	4611      	mov	r1, r2
 800765e:	f7ff fee5 	bl	800742c <NVIC_SetPriority>
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	7e5b      	ldrb	r3, [r3, #25]
 800766c:	4610      	mov	r0, r2
 800766e:	4619      	mov	r1, r3
 8007670:	f7fa ff96 	bl	80025a0 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	b25b      	sxtb	r3, r3
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff febc 	bl	80073fc <NVIC_EnableIRQ>
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d002      	beq.n	8007692 <ADC_MEASUREMENT_Init+0x12a>
    {
    	(handle_ptr->mux_config)();
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7e9b      	ldrb	r3, [r3, #26]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <ADC_MEASUREMENT_Init+0x13e>
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff ff21 	bl	80074e8 <XMC_VADC_GLOBAL_BackgroundTriggerConversion>
    }
    handle_ptr->init_state = status;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7bba      	ldrb	r2, [r7, #14]
 80076aa:	761a      	strb	r2, [r3, #24]
  }
  return (handle_ptr->init_state);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	7e1b      	ldrb	r3, [r3, #24]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd90      	pop	{r4, r7, pc}

080076b8 <ADC_IN_mux_config>:

/**
 * The Result Event Node configurations are done by this API and is invoked from ADC_MEASUREMENT_Init(). 
 */
  void ADC_IN_mux_config(void)
  {
 80076b8:	b580      	push	{r7, lr}
 80076ba:	af00      	add	r7, sp, #0

    /* Result Event Node Mux Configuration for Channel_A (Group-0 channel-4 Result_Register-8)*/
    XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0,8,XMC_VADC_SR_SHARED_SR2);
 80076bc:	4805      	ldr	r0, [pc, #20]	; (80076d4 <ADC_IN_mux_config+0x1c>)
 80076be:	2108      	movs	r1, #8
 80076c0:	2206      	movs	r2, #6
 80076c2:	f7fb f929 	bl	8002918 <XMC_VADC_GROUP_SetResultInterruptNode>

    /* Result Event Node Mux Configuration for Channel_B (Group-0 channel-0 Result_Register-5)*/
    XMC_VADC_GROUP_SetResultInterruptNode(VADC_G0,5,XMC_VADC_SR_GROUP_SR3);
 80076c6:	4803      	ldr	r0, [pc, #12]	; (80076d4 <ADC_IN_mux_config+0x1c>)
 80076c8:	2105      	movs	r1, #5
 80076ca:	2203      	movs	r2, #3
 80076cc:	f7fb f924 	bl	8002918 <XMC_VADC_GROUP_SetResultInterruptNode>

  }
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	40004400 	.word	0x40004400

080076d8 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80076de:	2300      	movs	r3, #0
 80076e0:	71fb      	strb	r3, [r7, #7]
      

/** @Initialization of APPs Init Functions */


  if (init_status == DAVE_STATUS_SUCCESS)
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <DAVE_Init+0x1a>
  {
    /**  Initialization of DIGITAL_IO APP instance LED_RED */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_RED);
 80076e8:	483c      	ldr	r0, [pc, #240]	; (80077dc <DAVE_Init+0x104>)
 80076ea:	f7fc fbd5 	bl	8003e98 <DIGITAL_IO_Init>
 80076ee:	4603      	mov	r3, r0
 80076f0:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d104      	bne.n	8007702 <DAVE_Init+0x2a>
  {
    /**  Initialization of DIGITAL_IO APP instance LED_YELLOW */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_YELLOW);
 80076f8:	4839      	ldr	r0, [pc, #228]	; (80077e0 <DAVE_Init+0x108>)
 80076fa:	f7fc fbcd 	bl	8003e98 <DIGITAL_IO_Init>
 80076fe:	4603      	mov	r3, r0
 8007700:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <DAVE_Init+0x3a>
  {
    /**  Initialization of DIGITAL_IO APP instance LED_GREEN */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LED_GREEN);
 8007708:	4836      	ldr	r0, [pc, #216]	; (80077e4 <DAVE_Init+0x10c>)
 800770a:	f7fc fbc5 	bl	8003e98 <DIGITAL_IO_Init>
 800770e:	4603      	mov	r3, r0
 8007710:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d104      	bne.n	8007722 <DAVE_Init+0x4a>
  {
    /**  Initialization of TIMER APP instance ONE_HZ_TIMER */
    init_status = (DAVE_STATUS_t)TIMER_Init(&ONE_HZ_TIMER);
 8007718:	4833      	ldr	r0, [pc, #204]	; (80077e8 <DAVE_Init+0x110>)
 800771a:	f7fb f9d1 	bl	8002ac0 <TIMER_Init>
 800771e:	4603      	mov	r3, r0
 8007720:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007722:	79fb      	ldrb	r3, [r7, #7]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <DAVE_Init+0x5a>
  {
    /**  Initialization of INTERRUPT APP instance ONE_HZ_INT */
    init_status = (DAVE_STATUS_t)INTERRUPT_Init(&ONE_HZ_INT);
 8007728:	4830      	ldr	r0, [pc, #192]	; (80077ec <DAVE_Init+0x114>)
 800772a:	f7fc f941 	bl	80039b0 <INTERRUPT_Init>
 800772e:	4603      	mov	r3, r0
 8007730:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <DAVE_Init+0x6a>
  {
    /**  Initialization of DIGITAL_IO APP instance LDO_BGT_EN */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LDO_BGT_EN);
 8007738:	482d      	ldr	r0, [pc, #180]	; (80077f0 <DAVE_Init+0x118>)
 800773a:	f7fc fbad 	bl	8003e98 <DIGITAL_IO_Init>
 800773e:	4603      	mov	r3, r0
 8007740:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007742:	79fb      	ldrb	r3, [r7, #7]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <DAVE_Init+0x7a>
  {
    /**  Initialization of DAC APP instance VCOARSE */
    init_status = (DAVE_STATUS_t)DAC_Init(&VCOARSE);
 8007748:	482a      	ldr	r0, [pc, #168]	; (80077f4 <DAVE_Init+0x11c>)
 800774a:	f7fc fcd7 	bl	80040fc <DAC_Init>
 800774e:	4603      	mov	r3, r0
 8007750:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d104      	bne.n	8007762 <DAVE_Init+0x8a>
  {
    /**  Initialization of DAC APP instance VFINE */
    init_status = (DAVE_STATUS_t)DAC_Init(&VFINE);
 8007758:	4827      	ldr	r0, [pc, #156]	; (80077f8 <DAVE_Init+0x120>)
 800775a:	f7fc fccf 	bl	80040fc <DAC_Init>
 800775e:	4603      	mov	r3, r0
 8007760:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007762:	79fb      	ldrb	r3, [r7, #7]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <DAVE_Init+0x9a>
  {
    /**  Initialization of SPI_MASTER APP instance SPI_BGT */
    init_status = (DAVE_STATUS_t)SPI_MASTER_Init(&SPI_BGT);
 8007768:	4824      	ldr	r0, [pc, #144]	; (80077fc <DAVE_Init+0x124>)
 800776a:	f7fb fc0f 	bl	8002f8c <SPI_MASTER_Init>
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d104      	bne.n	8007782 <DAVE_Init+0xaa>
  {
    /**  Initialization of TIMER APP instance FS_ADC */
    init_status = (DAVE_STATUS_t)TIMER_Init(&FS_ADC);
 8007778:	4821      	ldr	r0, [pc, #132]	; (8007800 <DAVE_Init+0x128>)
 800777a:	f7fb f9a1 	bl	8002ac0 <TIMER_Init>
 800777e:	4603      	mov	r3, r0
 8007780:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007782:	79fb      	ldrb	r3, [r7, #7]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d104      	bne.n	8007792 <DAVE_Init+0xba>
  {
    /**  Initialization of DIGITAL_IO APP instance Q2ONP22 */
    init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Q2ONP22);
 8007788:	481e      	ldr	r0, [pc, #120]	; (8007804 <DAVE_Init+0x12c>)
 800778a:	f7fc fb85 	bl	8003e98 <DIGITAL_IO_Init>
 800778e:	4603      	mov	r3, r0
 8007790:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 8007792:	79fb      	ldrb	r3, [r7, #7]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d104      	bne.n	80077a2 <DAVE_Init+0xca>
  {
    /**  Initialization of COUNTER APP instance Q2_FREQ_P22 */
    init_status = (DAVE_STATUS_t)COUNTER_Init(&Q2_FREQ_P22);
 8007798:	481b      	ldr	r0, [pc, #108]	; (8007808 <DAVE_Init+0x130>)
 800779a:	f7fc fee7 	bl	800456c <COUNTER_Init>
 800779e:	4603      	mov	r3, r0
 80077a0:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <DAVE_Init+0xda>
  {
    /**  Initialization of DMA_CH APP instance DMA_CH_IFQ */
    init_status = (DAVE_STATUS_t)DMA_CH_Init(&DMA_CH_IFQ);
 80077a8:	4818      	ldr	r0, [pc, #96]	; (800780c <DAVE_Init+0x134>)
 80077aa:	f7fc fa99 	bl	8003ce0 <DMA_CH_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <DAVE_Init+0xea>
  {
    /**  Initialization of ADC_MEASUREMENT APP instance ADC_IN */
    init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_IN);
 80077b8:	4815      	ldr	r0, [pc, #84]	; (8007810 <DAVE_Init+0x138>)
 80077ba:	f7ff fed5 	bl	8007568 <ADC_MEASUREMENT_Init>
 80077be:	4603      	mov	r3, r0
 80077c0:	71fb      	strb	r3, [r7, #7]
  }  

  if (init_status == DAVE_STATUS_SUCCESS)
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <DAVE_Init+0xfa>
  {
    /**  Initialization of DMA_CH APP instance DMA_CH_IFI */
    init_status = (DAVE_STATUS_t)DMA_CH_Init(&DMA_CH_IFI);
 80077c8:	4812      	ldr	r0, [pc, #72]	; (8007814 <DAVE_Init+0x13c>)
 80077ca:	f7fc fa89 	bl	8003ce0 <DMA_CH_Init>
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
  }  
 

  return init_status;
 80077d2:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	1fffcb84 	.word	0x1fffcb84
 80077e0:	1fffcb9c 	.word	0x1fffcb9c
 80077e4:	1fffcbb4 	.word	0x1fffcbb4
 80077e8:	1fffca18 	.word	0x1fffca18
 80077ec:	08009854 	.word	0x08009854
 80077f0:	1fffcbcc 	.word	0x1fffcbcc
 80077f4:	1fffcbec 	.word	0x1fffcbec
 80077f8:	1fffcc20 	.word	0x1fffcc20
 80077fc:	1fffcaa8 	.word	0x1fffcaa8
 8007800:	1fffca40 	.word	0x1fffca40
 8007804:	1fffcbd8 	.word	0x1fffcbd8
 8007808:	1fffcc88 	.word	0x1fffcc88
 800780c:	1fffcb2c 	.word	0x1fffcb2c
 8007810:	1fffcce0 	.word	0x1fffcce0
 8007814:	1fffcb68 	.word	0x1fffcb68

08007818 <BGTSetTxPower>:

//***********************************************
//  Set the transmitter power on the BGT24MTR11
//
void BGTSetTxPower(BGT_Power_t PwrLvl)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	71fb      	strb	r3, [r7, #7]
	uint16_t SPI_data;

	switch (PwrLvl)
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	2b03      	cmp	r3, #3
 8007826:	d819      	bhi.n	800785c <BGTSetTxPower+0x44>
 8007828:	a201      	add	r2, pc, #4	; (adr r2, 8007830 <BGTSetTxPower+0x18>)
 800782a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782e:	bf00      	nop
 8007830:	08007841 	.word	0x08007841
 8007834:	08007849 	.word	0x08007849
 8007838:	08007851 	.word	0x08007851
 800783c:	08007857 	.word	0x08007857
	{
	case TX_OFF:
		SPI_data = BGT24_GS_MASK | BGT24_DIS_PA_MASK | BGT24_PC_PA_7;
 8007840:	f249 0307 	movw	r3, #36871	; 0x9007
 8007844:	81fb      	strh	r3, [r7, #14]
		break;
 8007846:	e00b      	b.n	8007860 <BGTSetTxPower+0x48>

	case TX_MIN:
		SPI_data = BGT24_GS_MASK | BGT24_PC_PA_7;  // TX on with minimum power
 8007848:	f248 0307 	movw	r3, #32775	; 0x8007
 800784c:	81fb      	strh	r3, [r7, #14]
		break;
 800784e:	e007      	b.n	8007860 <BGTSetTxPower+0x48>

	case TX_MID:
		SPI_data =  BGT24_PC1_BUF_MASK | BGT24_PC_PA_3;  // TX on with medium power
 8007850:	230b      	movs	r3, #11
 8007852:	81fb      	strh	r3, [r7, #14]
		break;
 8007854:	e004      	b.n	8007860 <BGTSetTxPower+0x48>

	case TX_MAX:
		SPI_data =  BGT24_PC1_BUF_MASK | BGT24_PC_PA_0;  // TX on with maximum power
 8007856:	2308      	movs	r3, #8
 8007858:	81fb      	strh	r3, [r7, #14]
		break;
 800785a:	e001      	b.n	8007860 <BGTSetTxPower+0x48>

	default:
		SPI_data = BGT24_PC_PA_7;  // TX on with minimum power
 800785c:	2307      	movs	r3, #7
 800785e:	81fb      	strh	r3, [r7, #14]

	}  // bottom of switch(PwrLvl)

	SPI_MASTER_Transmit(&SPI_BGT, (uint8_t *)&SPI_data, 1);
 8007860:	f107 030e 	add.w	r3, r7, #14
 8007864:	4803      	ldr	r0, [pc, #12]	; (8007874 <BGTSetTxPower+0x5c>)
 8007866:	4619      	mov	r1, r3
 8007868:	2201      	movs	r2, #1
 800786a:	f7fb fba9 	bl	8002fc0 <SPI_MASTER_Transmit>

}  // end of BGTSetTxPower
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	1fffcaa8 	.word	0x1fffcaa8

08007878 <BGT_LO_Adjust>:
//  Set BGT local oscillator to ISM range
//  24.000GHz to 24.250GHz
//  Q2 is the LO/(2^^20)
//
void BGT_LO_Adjust(uint32_t Q2Count)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
	static int32_t fineDACVal = 0;
	static int32_t coarseDACVal = 0;

    if (Q2Count < ISM_CNT_MIN)   // increase LO
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f645 1267 	movw	r2, #22887	; 0x5967
 8007886:	4293      	cmp	r3, r2
 8007888:	d80d      	bhi.n	80078a6 <BGT_LO_Adjust+0x2e>
    {
    	coarseDACVal += 10;
 800788a:	4b31      	ldr	r3, [pc, #196]	; (8007950 <BGT_LO_Adjust+0xd8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	330a      	adds	r3, #10
 8007890:	4a2f      	ldr	r2, [pc, #188]	; (8007950 <BGT_LO_Adjust+0xd8>)
 8007892:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 8007894:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <BGT_LO_Adjust+0xd8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	b21b      	sxth	r3, r3
 800789c:	482d      	ldr	r0, [pc, #180]	; (8007954 <BGT_LO_Adjust+0xdc>)
 800789e:	4619      	mov	r1, r3
 80078a0:	f7fc fc66 	bl	8004170 <DAC_SingleValue_SetValue_s16>
 80078a4:	e051      	b.n	800794a <BGT_LO_Adjust+0xd2>
    }
    else if (Q2Count > ISM_CNT_MAX)  // decrease LO
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f645 2256 	movw	r2, #23126	; 0x5a56
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d90d      	bls.n	80078cc <BGT_LO_Adjust+0x54>
    {
    	coarseDACVal -= 10;
 80078b0:	4b27      	ldr	r3, [pc, #156]	; (8007950 <BGT_LO_Adjust+0xd8>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3b0a      	subs	r3, #10
 80078b6:	4a26      	ldr	r2, [pc, #152]	; (8007950 <BGT_LO_Adjust+0xd8>)
 80078b8:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 80078ba:	4b25      	ldr	r3, [pc, #148]	; (8007950 <BGT_LO_Adjust+0xd8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	b21b      	sxth	r3, r3
 80078c2:	4824      	ldr	r0, [pc, #144]	; (8007954 <BGT_LO_Adjust+0xdc>)
 80078c4:	4619      	mov	r1, r3
 80078c6:	f7fc fc53 	bl	8004170 <DAC_SingleValue_SetValue_s16>
 80078ca:	e03e      	b.n	800794a <BGT_LO_Adjust+0xd2>

    }
    else if (Q2Count < (ISM_CNT_MID - ISM_CNT_HYST) )  // increase LO
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f645 12d9 	movw	r2, #23001	; 0x59d9
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d81a      	bhi.n	800790c <BGT_LO_Adjust+0x94>
    {
    	fineDACVal += 1;
 80078d6:	4b20      	ldr	r3, [pc, #128]	; (8007958 <BGT_LO_Adjust+0xe0>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	4a1e      	ldr	r2, [pc, #120]	; (8007958 <BGT_LO_Adjust+0xe0>)
 80078de:	6013      	str	r3, [r2, #0]
    	coarseDACVal += 1;
 80078e0:	4b1b      	ldr	r3, [pc, #108]	; (8007950 <BGT_LO_Adjust+0xd8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	3301      	adds	r3, #1
 80078e6:	4a1a      	ldr	r2, [pc, #104]	; (8007950 <BGT_LO_Adjust+0xd8>)
 80078e8:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 80078ea:	4b19      	ldr	r3, [pc, #100]	; (8007950 <BGT_LO_Adjust+0xd8>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	b21b      	sxth	r3, r3
 80078f2:	4818      	ldr	r0, [pc, #96]	; (8007954 <BGT_LO_Adjust+0xdc>)
 80078f4:	4619      	mov	r1, r3
 80078f6:	f7fc fc3b 	bl	8004170 <DAC_SingleValue_SetValue_s16>
    	DAC_SingleValue_SetValue_s16(&VFINE,fineDACVal);
 80078fa:	4b17      	ldr	r3, [pc, #92]	; (8007958 <BGT_LO_Adjust+0xe0>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	b29b      	uxth	r3, r3
 8007900:	b21b      	sxth	r3, r3
 8007902:	4816      	ldr	r0, [pc, #88]	; (800795c <BGT_LO_Adjust+0xe4>)
 8007904:	4619      	mov	r1, r3
 8007906:	f7fc fc33 	bl	8004170 <DAC_SingleValue_SetValue_s16>
 800790a:	e01e      	b.n	800794a <BGT_LO_Adjust+0xd2>
    }
    else if (Q2Count > (ISM_CNT_MID + ISM_CNT_HYST) )  // decrease LO
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f645 12e4 	movw	r2, #23012	; 0x59e4
 8007912:	4293      	cmp	r3, r2
 8007914:	d919      	bls.n	800794a <BGT_LO_Adjust+0xd2>
    {
    	fineDACVal -= 1;
 8007916:	4b10      	ldr	r3, [pc, #64]	; (8007958 <BGT_LO_Adjust+0xe0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3b01      	subs	r3, #1
 800791c:	4a0e      	ldr	r2, [pc, #56]	; (8007958 <BGT_LO_Adjust+0xe0>)
 800791e:	6013      	str	r3, [r2, #0]
    	coarseDACVal -= 1;
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <BGT_LO_Adjust+0xd8>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	3b01      	subs	r3, #1
 8007926:	4a0a      	ldr	r2, [pc, #40]	; (8007950 <BGT_LO_Adjust+0xd8>)
 8007928:	6013      	str	r3, [r2, #0]
    	DAC_SingleValue_SetValue_s16(&VCOARSE,coarseDACVal);
 800792a:	4b09      	ldr	r3, [pc, #36]	; (8007950 <BGT_LO_Adjust+0xd8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	b29b      	uxth	r3, r3
 8007930:	b21b      	sxth	r3, r3
 8007932:	4808      	ldr	r0, [pc, #32]	; (8007954 <BGT_LO_Adjust+0xdc>)
 8007934:	4619      	mov	r1, r3
 8007936:	f7fc fc1b 	bl	8004170 <DAC_SingleValue_SetValue_s16>
    	DAC_SingleValue_SetValue_s16(&VFINE,fineDACVal);
 800793a:	4b07      	ldr	r3, [pc, #28]	; (8007958 <BGT_LO_Adjust+0xe0>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	b29b      	uxth	r3, r3
 8007940:	b21b      	sxth	r3, r3
 8007942:	4806      	ldr	r0, [pc, #24]	; (800795c <BGT_LO_Adjust+0xe4>)
 8007944:	4619      	mov	r1, r3
 8007946:	f7fc fc13 	bl	8004170 <DAC_SingleValue_SetValue_s16>
    }


}  // end of BGT_LO_Adjust
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	1fffcdac 	.word	0x1fffcdac
 8007954:	1fffcbec 	.word	0x1fffcbec
 8007958:	1fffcdb0 	.word	0x1fffcdb0
 800795c:	1fffcc20 	.word	0x1fffcc20

08007960 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800796c:	78fb      	ldrb	r3, [r7, #3]
 800796e:	2201      	movs	r2, #1
 8007970:	409a      	lsls	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	605a      	str	r2, [r3, #4]
}
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	460b      	mov	r3, r1
 800798a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800798c:	78fb      	ldrb	r3, [r7, #3]
 800798e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007992:	409a      	lsls	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	605a      	str	r2, [r3, #4]
}
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685a      	ldr	r2, [r3, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7a1b      	ldrb	r3, [r3, #8]
 80079b4:	4610      	mov	r0, r2
 80079b6:	4619      	mov	r1, r3
 80079b8:	f7ff ffd2 	bl	8007960 <XMC_GPIO_SetOutputHigh>
}
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop

080079c4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7a1b      	ldrb	r3, [r3, #8]
 80079d4:	4610      	mov	r0, r2
 80079d6:	4619      	mov	r1, r3
 80079d8:	f7ff ffd2 	bl	8007980 <XMC_GPIO_SetOutputLow>
}
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop

080079e4 <DMA_CH_Enable>:
 *   return 1;
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void DMA_CH_Enable(DMA_CH_t *const obj)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b082      	sub	sp, #8
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_CH_Enable: NULL DMA_CH_t object", (obj != NULL));

  XMC_DMA_CH_Enable(obj->dma_global->dma, obj->ch_num);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	7b1b      	ldrb	r3, [r3, #12]
 80079f6:	4610      	mov	r0, r2
 80079f8:	4619      	mov	r1, r3
 80079fa:	f7f9 ff37 	bl	800186c <XMC_DMA_CH_Enable>
}
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <DMA_CH_Disable>:
 *   return 1;
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void DMA_CH_Disable(DMA_CH_t *const obj)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_CH_Disable: NULL DMA_CH_t object", (obj != NULL));

  XMC_DMA_CH_Disable(obj->dma_global->dma, obj->ch_num);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681a      	ldr	r2, [r3, #0]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	7b1b      	ldrb	r3, [r3, #12]
 8007a16:	4610      	mov	r0, r2
 8007a18:	4619      	mov	r1, r3
 8007a1a:	f7f9 ff39 	bl	8001890 <XMC_DMA_CH_Disable>
}
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <DMA_CH_Reload>:
 *
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void DMA_CH_Reload(DMA_CH_t *const obj)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
	obj->reload(obj);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
}
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop

08007a3c <main>:
*/
//*********************************************************
//
//
int main(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
  DAVE_STATUS_t status;
  uint8_t firstBufDone = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	71fb      	strb	r3, [r7, #7]

  pDMA_src_IFI = (uint32_t*)&ADC_MEASUREMENT_Channel_A.group_handle->RES[ADC_MEASUREMENT_Channel_A.ch_handle->result_reg_number];
 8007a46:	4b43      	ldr	r3, [pc, #268]	; (8007b54 <main+0x118>)
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	4b42      	ldr	r3, [pc, #264]	; (8007b54 <main+0x118>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	789b      	ldrb	r3, [r3, #2]
 8007a50:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	33c0      	adds	r3, #192	; 0xc0
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	4a3e      	ldr	r2, [pc, #248]	; (8007b58 <main+0x11c>)
 8007a5e:	6013      	str	r3, [r2, #0]
  pDMA_src_IFQ = (uint32_t*)&ADC_MEASUREMENT_Channel_B.group_handle->RES[ADC_MEASUREMENT_Channel_B.ch_handle->result_reg_number];
 8007a60:	4b3e      	ldr	r3, [pc, #248]	; (8007b5c <main+0x120>)
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	4b3d      	ldr	r3, [pc, #244]	; (8007b5c <main+0x120>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	789b      	ldrb	r3, [r3, #2]
 8007a6a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	33c0      	adds	r3, #192	; 0xc0
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	4a3a      	ldr	r2, [pc, #232]	; (8007b60 <main+0x124>)
 8007a78:	6013      	str	r3, [r2, #0]

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8007a7a:	f7ff fe2d 	bl	80076d8 <DAVE_Init>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	71bb      	strb	r3, [r7, #6]

  status = DIGITAL_IO_Init(&PIN1_5);
 8007a82:	4838      	ldr	r0, [pc, #224]	; (8007b64 <main+0x128>)
 8007a84:	f7fc fa08 	bl	8003e98 <DIGITAL_IO_Init>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	71bb      	strb	r3, [r7, #6]
//  status = DIGITAL_IO_Init(&PIN0_1);
  if(status == DAVE_STATUS_FAILURE)
 8007a8c:	79bb      	ldrb	r3, [r7, #6]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d100      	bne.n	8007a94 <main+0x58>
  {
    while(1U)  // loop forever on error
    	;
 8007a92:	e7fe      	b.n	8007a92 <main+0x56>
  }


  DIGITAL_IO_SetOutputHigh(&LDO_BGT_EN);  // Enable power to BGT24
 8007a94:	4834      	ldr	r0, [pc, #208]	; (8007b68 <main+0x12c>)
 8007a96:	f7ff ff85 	bl	80079a4 <DIGITAL_IO_SetOutputHigh>

  CCU40->GCTRL |= (0x0001<<CCU4_GCTRL_SUSCFG_Pos);      // stop timers at breakpoint when debugging
 8007a9a:	4a34      	ldr	r2, [pc, #208]	; (8007b6c <main+0x130>)
 8007a9c:	4b33      	ldr	r3, [pc, #204]	; (8007b6c <main+0x130>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aa4:	6013      	str	r3, [r2, #0]
  CCU41->GCTRL |= (0x0001<<CCU4_GCTRL_SUSCFG_Pos);
 8007aa6:	4a32      	ldr	r2, [pc, #200]	; (8007b70 <main+0x134>)
 8007aa8:	4b31      	ldr	r3, [pc, #196]	; (8007b70 <main+0x134>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ab0:	6013      	str	r3, [r2, #0]

  arm_rfft_fast_init_f32(&i_fftStructure, FFT_SIZE);  // setup FFT
 8007ab2:	4830      	ldr	r0, [pc, #192]	; (8007b74 <main+0x138>)
 8007ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ab8:	f7ff f870 	bl	8006b9c <arm_rfft_fast_init_f32>

  genHanningData();   						// generate Hanning window data
 8007abc:	f000 f97a 	bl	8007db4 <genHanningData>
  DMA_CH_Enable(&DMA_CH_IFI);
 8007ac0:	482d      	ldr	r0, [pc, #180]	; (8007b78 <main+0x13c>)
 8007ac2:	f7ff ff8f 	bl	80079e4 <DMA_CH_Enable>
  DMA_CH_Enable(&DMA_CH_IFQ);
 8007ac6:	482d      	ldr	r0, [pc, #180]	; (8007b7c <main+0x140>)
 8007ac8:	f7ff ff8c 	bl	80079e4 <DMA_CH_Enable>

  TIMER_Stop(&FS_ADC);
 8007acc:	482c      	ldr	r0, [pc, #176]	; (8007b80 <main+0x144>)
 8007ace:	f7fb f833 	bl	8002b38 <TIMER_Stop>
  TIMER_SetTimeInterval(&FS_ADC, SAMPLE_FREQ_10KHZ);  	// set the sample frequency
 8007ad2:	482b      	ldr	r0, [pc, #172]	; (8007b80 <main+0x144>)
 8007ad4:	f242 7110 	movw	r1, #10000	; 0x2710
 8007ad8:	f7fb f86a 	bl	8002bb0 <TIMER_SetTimeInterval>
  TIMER_Start(&FS_ADC);        							// start data acquisition
 8007adc:	4828      	ldr	r0, [pc, #160]	; (8007b80 <main+0x144>)
 8007ade:	f7fb f80d 	bl	8002afc <TIMER_Start>
  BGTSetTxPower(gTxPowerLvl);    	// configure BGT24
 8007ae2:	4b28      	ldr	r3, [pc, #160]	; (8007b84 <main+0x148>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fe96 	bl	8007818 <BGTSetTxPower>

  while(1U)
  {
	  if (gIFQDataReadyFlag == 0)
 8007aec:	4b26      	ldr	r3, [pc, #152]	; (8007b88 <main+0x14c>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d100      	bne.n	8007af6 <main+0xba>
		  continue;
 8007af4:	e02c      	b.n	8007b50 <main+0x114>

	  if (gIFQDataReadyFlag == 1 && firstBufDone == 0)
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <main+0x14c>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d110      	bne.n	8007b20 <main+0xe4>
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10d      	bne.n	8007b20 <main+0xe4>
	  {
		  do_rfft_i(ifi_raw_buf0);   	// Process the ADC data from the BGT24 IFI_HG channel
 8007b04:	4821      	ldr	r0, [pc, #132]	; (8007b8c <main+0x150>)
 8007b06:	f001 fe0f 	bl	8009728 <__do_rfft_i_veneer>
		  do_rfft_q(ifq_raw_buf0);   	// Process the ADC data from the BGT24 IFQ_HG channel
 8007b0a:	4821      	ldr	r0, [pc, #132]	; (8007b90 <main+0x154>)
 8007b0c:	f001 fe14 	bl	8009738 <__do_rfft_q_veneer>
		  TIMER_Start(&FS_ADC);
 8007b10:	481b      	ldr	r0, [pc, #108]	; (8007b80 <main+0x144>)
 8007b12:	f7fa fff3 	bl	8002afc <TIMER_Start>
		  firstBufDone = 1;
 8007b16:	2301      	movs	r3, #1
 8007b18:	71fb      	strb	r3, [r7, #7]
		  checkTargetDetection();
 8007b1a:	f000 f83f 	bl	8007b9c <checkTargetDetection>
 8007b1e:	e017      	b.n	8007b50 <main+0x114>
	  }
	  else if (gIFQDataReadyFlag == 2)
 8007b20:	4b19      	ldr	r3, [pc, #100]	; (8007b88 <main+0x14c>)
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d113      	bne.n	8007b50 <main+0x114>
	  {
		  do_rfft_i(pifi_raw_buf1);   	// Process the ADC data from the BGT24 IFI_HG channel
 8007b28:	4b1a      	ldr	r3, [pc, #104]	; (8007b94 <main+0x158>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f001 fdfb 	bl	8009728 <__do_rfft_i_veneer>
		  do_rfft_q(pifq_raw_buf1);   	// Process the ADC data from the BGT24 IFQ_HG channel
 8007b32:	4b19      	ldr	r3, [pc, #100]	; (8007b98 <main+0x15c>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f001 fdfe 	bl	8009738 <__do_rfft_q_veneer>
		  TIMER_Start(&FS_ADC);
 8007b3c:	4810      	ldr	r0, [pc, #64]	; (8007b80 <main+0x144>)
 8007b3e:	f7fa ffdd 	bl	8002afc <TIMER_Start>

		  gIFQDataReadyFlag = 0;
 8007b42:	4b11      	ldr	r3, [pc, #68]	; (8007b88 <main+0x14c>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	701a      	strb	r2, [r3, #0]
		  firstBufDone = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	71fb      	strb	r3, [r7, #7]
		  checkTargetDetection();
 8007b4c:	f000 f826 	bl	8007b9c <checkTargetDetection>
	  }

  }  // bottom of while(1) loop
 8007b50:	e7cc      	b.n	8007aec <main+0xb0>
 8007b52:	bf00      	nop
 8007b54:	1fffcca4 	.word	0x1fffcca4
 8007b58:	1fffd608 	.word	0x1fffd608
 8007b5c:	1fffccc8 	.word	0x1fffccc8
 8007b60:	1fffee0c 	.word	0x1fffee0c
 8007b64:	1fffcd24 	.word	0x1fffcd24
 8007b68:	1fffcbcc 	.word	0x1fffcbcc
 8007b6c:	4000c000 	.word	0x4000c000
 8007b70:	40010000 	.word	0x40010000
 8007b74:	1fffcdf0 	.word	0x1fffcdf0
 8007b78:	1fffcb68 	.word	0x1fffcb68
 8007b7c:	1fffcb2c 	.word	0x1fffcb2c
 8007b80:	1fffca40 	.word	0x1fffca40
 8007b84:	1fffccfe 	.word	0x1fffccfe
 8007b88:	1fffcdb4 	.word	0x1fffcdb4
 8007b8c:	1ffffe10 	.word	0x1ffffe10
 8007b90:	1fffce08 	.word	0x1fffce08
 8007b94:	1fffcd10 	.word	0x1fffcd10
 8007b98:	1fffcd14 	.word	0x1fffcd14

08007b9c <checkTargetDetection>:
//  Search IFI & IFQ frequency response for motion detection event
//  and determine target velocity in Mile Per Hour (MPH).
//  Toggle yellow LED on motion detection.
//
void checkTargetDetection(void)
{
 8007b9c:	b590      	push	{r4, r7, lr}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
	uint16_t idx;

	for (idx = 0; idx< FFT_SIZE/2; idx++)
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	80fb      	strh	r3, [r7, #6]
 8007ba6:	e01a      	b.n	8007bde <checkTargetDetection+0x42>
	{
		finalResult[idx] = (i_fftResult[idx] + q_fftResult[idx])/2.0f;
 8007ba8:	88fc      	ldrh	r4, [r7, #6]
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	4a4b      	ldr	r2, [pc, #300]	; (8007cdc <checkTargetDetection+0x140>)
 8007bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007bb2:	88fb      	ldrh	r3, [r7, #6]
 8007bb4:	4a4a      	ldr	r2, [pc, #296]	; (8007ce0 <checkTargetDetection+0x144>)
 8007bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bba:	4608      	mov	r0, r1
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	f000 ff99 	bl	8008af4 <__addsf3>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007bca:	f001 f94f 	bl	8008e6c <__aeabi_fdiv>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4b44      	ldr	r3, [pc, #272]	; (8007ce4 <checkTargetDetection+0x148>)
 8007bd4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
//
void checkTargetDetection(void)
{
	uint16_t idx;

	for (idx = 0; idx< FFT_SIZE/2; idx++)
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	80fb      	strh	r3, [r7, #6]
 8007bde:	88fb      	ldrh	r3, [r7, #6]
 8007be0:	2bff      	cmp	r3, #255	; 0xff
 8007be2:	d9e1      	bls.n	8007ba8 <checkTargetDetection+0xc>
	{
		finalResult[idx] = (i_fftResult[idx] + q_fftResult[idx])/2.0f;
	}
	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(finalResult, NUM_SAMPLES/2, &maxVal, &maxBin);
 8007be4:	483f      	ldr	r0, [pc, #252]	; (8007ce4 <checkTargetDetection+0x148>)
 8007be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bea:	4a3f      	ldr	r2, [pc, #252]	; (8007ce8 <checkTargetDetection+0x14c>)
 8007bec:	4b3f      	ldr	r3, [pc, #252]	; (8007cec <checkTargetDetection+0x150>)
 8007bee:	f7ff f8ab 	bl	8006d48 <arm_max_f32>

	if (maxVal > gDetectionThreshold )  // if the threshold is exceeded, we have a doppler event
 8007bf2:	4b3f      	ldr	r3, [pc, #252]	; (8007cf0 <checkTargetDetection+0x154>)
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f001 f830 	bl	8008c5c <__aeabi_i2f>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	4b3a      	ldr	r3, [pc, #232]	; (8007ce8 <checkTargetDetection+0x14c>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4610      	mov	r0, r2
 8007c04:	4619      	mov	r1, r3
 8007c06:	f001 fa1b 	bl	8009040 <__aeabi_fcmplt>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d050      	beq.n	8007cb2 <checkTargetDetection+0x116>
	{
		gDopFreqIFI = maxBin*gHzPerBin + gHzPerBin/2.0f;	// compute the frequency of the max bin
 8007c10:	4b36      	ldr	r3, [pc, #216]	; (8007cec <checkTargetDetection+0x150>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f001 f81d 	bl	8008c54 <__aeabi_ui2f>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	4b35      	ldr	r3, [pc, #212]	; (8007cf4 <checkTargetDetection+0x158>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4610      	mov	r0, r2
 8007c22:	4619      	mov	r1, r3
 8007c24:	f001 f86e 	bl	8008d04 <__aeabi_fmul>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	461c      	mov	r4, r3
 8007c2c:	4b31      	ldr	r3, [pc, #196]	; (8007cf4 <checkTargetDetection+0x158>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007c36:	f001 f919 	bl	8008e6c <__aeabi_fdiv>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	4620      	mov	r0, r4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	f000 ff58 	bl	8008af4 <__addsf3>
 8007c44:	4603      	mov	r3, r0
 8007c46:	461a      	mov	r2, r3
 8007c48:	4b2b      	ldr	r3, [pc, #172]	; (8007cf8 <checkTargetDetection+0x15c>)
 8007c4a:	601a      	str	r2, [r3, #0]
		gTargetVelocity = gDopFreqIFI*(float32_t)0.013894f;  // convert freq to velocity in MPH
 8007c4c:	4b2a      	ldr	r3, [pc, #168]	; (8007cf8 <checkTargetDetection+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	492a      	ldr	r1, [pc, #168]	; (8007cfc <checkTargetDetection+0x160>)
 8007c54:	f001 f856 	bl	8008d04 <__aeabi_fmul>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	4b28      	ldr	r3, [pc, #160]	; (8007d00 <checkTargetDetection+0x164>)
 8007c5e:	601a      	str	r2, [r3, #0]

		DIGITAL_IO_SetOutputHigh(&PIN1_5);
 8007c60:	4828      	ldr	r0, [pc, #160]	; (8007d04 <checkTargetDetection+0x168>)
 8007c62:	f7ff fe9f 	bl	80079a4 <DIGITAL_IO_SetOutputHigh>

		/* Calculates direction and turns on appropriate LED depending on direction */
		uint8_t spec_result = spectrum_peak(i_fftResult, q_fftResult, NUM_SAMPLES);
 8007c66:	481d      	ldr	r0, [pc, #116]	; (8007cdc <checkTargetDetection+0x140>)
 8007c68:	491d      	ldr	r1, [pc, #116]	; (8007ce0 <checkTargetDetection+0x144>)
 8007c6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c6e:	f000 f8f7 	bl	8007e60 <spectrum_peak>
 8007c72:	4603      	mov	r3, r0
 8007c74:	717b      	strb	r3, [r7, #5]
        switch(spec_result){
 8007c76:	797b      	ldrb	r3, [r7, #5]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d00b      	beq.n	8007c94 <checkTargetDetection+0xf8>
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d010      	beq.n	8007ca2 <checkTargetDetection+0x106>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d000      	beq.n	8007c86 <checkTargetDetection+0xea>
 8007c84:	e026      	b.n	8007cd4 <checkTargetDetection+0x138>
            case LEFT_SPECTRUM: // Target is moving toward radar
                DIGITAL_IO_SetOutputHigh(&LED_YELLOW);
 8007c86:	4820      	ldr	r0, [pc, #128]	; (8007d08 <checkTargetDetection+0x16c>)
 8007c88:	f7ff fe8c 	bl	80079a4 <DIGITAL_IO_SetOutputHigh>
                DIGITAL_IO_SetOutputLow(&LED_GREEN);
 8007c8c:	481f      	ldr	r0, [pc, #124]	; (8007d0c <checkTargetDetection+0x170>)
 8007c8e:	f7ff fe99 	bl	80079c4 <DIGITAL_IO_SetOutputLow>
                break;
 8007c92:	e00d      	b.n	8007cb0 <checkTargetDetection+0x114>
            case RIGHT_SPECTRUM: // Target is moving away from radar
                DIGITAL_IO_SetOutputLow(&LED_YELLOW);
 8007c94:	481c      	ldr	r0, [pc, #112]	; (8007d08 <checkTargetDetection+0x16c>)
 8007c96:	f7ff fe95 	bl	80079c4 <DIGITAL_IO_SetOutputLow>
                DIGITAL_IO_SetOutputHigh(&LED_GREEN);
 8007c9a:	481c      	ldr	r0, [pc, #112]	; (8007d0c <checkTargetDetection+0x170>)
 8007c9c:	f7ff fe82 	bl	80079a4 <DIGITAL_IO_SetOutputHigh>
                break;
 8007ca0:	e006      	b.n	8007cb0 <checkTargetDetection+0x114>
            case BOTH_SPECTRUMS: // Target is still relative to radar
                DIGITAL_IO_SetOutputLow(&LED_YELLOW);
 8007ca2:	4819      	ldr	r0, [pc, #100]	; (8007d08 <checkTargetDetection+0x16c>)
 8007ca4:	f7ff fe8e 	bl	80079c4 <DIGITAL_IO_SetOutputLow>
                DIGITAL_IO_SetOutputLow(&LED_GREEN);
 8007ca8:	4818      	ldr	r0, [pc, #96]	; (8007d0c <checkTargetDetection+0x170>)
 8007caa:	f7ff fe8b 	bl	80079c4 <DIGITAL_IO_SetOutputLow>
                break;
 8007cae:	bf00      	nop
 8007cb0:	e010      	b.n	8007cd4 <checkTargetDetection+0x138>
        }
	}
	else
	{
		gDopFreqIFI = 0;
 8007cb2:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <checkTargetDetection+0x15c>)
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
		gTargetVelocity = 0;
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <checkTargetDetection+0x164>)
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]
		DIGITAL_IO_SetOutputLow(&PIN1_5);
 8007cc2:	4810      	ldr	r0, [pc, #64]	; (8007d04 <checkTargetDetection+0x168>)
 8007cc4:	f7ff fe7e 	bl	80079c4 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputLow(&LED_YELLOW);
 8007cc8:	480f      	ldr	r0, [pc, #60]	; (8007d08 <checkTargetDetection+0x16c>)
 8007cca:	f7ff fe7b 	bl	80079c4 <DIGITAL_IO_SetOutputLow>
		DIGITAL_IO_SetOutputLow(&LED_GREEN);
 8007cce:	480f      	ldr	r0, [pc, #60]	; (8007d0c <checkTargetDetection+0x170>)
 8007cd0:	f7ff fe78 	bl	80079c4 <DIGITAL_IO_SetOutputLow>
	}
}  // end of checkTargetDetection()
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd90      	pop	{r4, r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	1ffff610 	.word	0x1ffff610
 8007ce0:	1fffee10 	.word	0x1fffee10
 8007ce4:	20000e10 	.word	0x20000e10
 8007ce8:	1fffcdc4 	.word	0x1fffcdc4
 8007cec:	1fffcdc8 	.word	0x1fffcdc8
 8007cf0:	1fffccfc 	.word	0x1fffccfc
 8007cf4:	1fffcd00 	.word	0x1fffcd00
 8007cf8:	1fffcdbc 	.word	0x1fffcdbc
 8007cfc:	3c63a3a9 	.word	0x3c63a3a9
 8007d00:	1fffcdc0 	.word	0x1fffcdc0
 8007d04:	1fffcd24 	.word	0x1fffcd24
 8007d08:	1fffcb9c 	.word	0x1fffcb9c
 8007d0c:	1fffcbb4 	.word	0x1fffcbb4

08007d10 <DMA_IFQ_event_handler>:
// the DMA buffers are large enough to handle two blocks of
// data so we can overlap data acquisition with data processing
// operations.
//
void DMA_IFQ_event_handler(XMC_DMA_CH_EVENT_t event)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	4603      	mov	r3, r0
 8007d18:	71fb      	strb	r3, [r7, #7]
	static uint8_t cnt = 0;

	if (cnt == 0)
 8007d1a:	4b16      	ldr	r3, [pc, #88]	; (8007d74 <DMA_IFQ_event_handler+0x64>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d109      	bne.n	8007d36 <DMA_IFQ_event_handler+0x26>
	{
		gIFQDataReadyFlag = 1; 	// Data is ready to be processed for first DMA block
 8007d22:	4b15      	ldr	r3, [pc, #84]	; (8007d78 <DMA_IFQ_event_handler+0x68>)
 8007d24:	2201      	movs	r2, #1
 8007d26:	701a      	strb	r2, [r3, #0]
		cnt++;
 8007d28:	4b12      	ldr	r3, [pc, #72]	; (8007d74 <DMA_IFQ_event_handler+0x64>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	4b10      	ldr	r3, [pc, #64]	; (8007d74 <DMA_IFQ_event_handler+0x64>)
 8007d32:	701a      	strb	r2, [r3, #0]
 8007d34:	e01a      	b.n	8007d6c <DMA_IFQ_event_handler+0x5c>
	}
	else
	{			// Second DMA block has been transferred.
		TIMER_Stop(&FS_ADC);	// stop ADC sampling
 8007d36:	4811      	ldr	r0, [pc, #68]	; (8007d7c <DMA_IFQ_event_handler+0x6c>)
 8007d38:	f7fa fefe 	bl	8002b38 <TIMER_Stop>
		cnt = 0;
 8007d3c:	4b0d      	ldr	r3, [pc, #52]	; (8007d74 <DMA_IFQ_event_handler+0x64>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	701a      	strb	r2, [r3, #0]
		DMA_CH_Disable(&DMA_CH_IFI);	// Disable DMA
 8007d42:	480f      	ldr	r0, [pc, #60]	; (8007d80 <DMA_IFQ_event_handler+0x70>)
 8007d44:	f7ff fe5e 	bl	8007a04 <DMA_CH_Disable>
		DMA_CH_Disable(&DMA_CH_IFQ);
 8007d48:	480e      	ldr	r0, [pc, #56]	; (8007d84 <DMA_IFQ_event_handler+0x74>)
 8007d4a:	f7ff fe5b 	bl	8007a04 <DMA_CH_Disable>

		DMA_CH_Reload(&DMA_CH_IFI);		// Reload DMA addresses
 8007d4e:	480c      	ldr	r0, [pc, #48]	; (8007d80 <DMA_IFQ_event_handler+0x70>)
 8007d50:	f7ff fe68 	bl	8007a24 <DMA_CH_Reload>
		DMA_CH_Reload(&DMA_CH_IFQ);
 8007d54:	480b      	ldr	r0, [pc, #44]	; (8007d84 <DMA_IFQ_event_handler+0x74>)
 8007d56:	f7ff fe65 	bl	8007a24 <DMA_CH_Reload>

		DMA_CH_Enable(&DMA_CH_IFI);		// Restart DMA
 8007d5a:	4809      	ldr	r0, [pc, #36]	; (8007d80 <DMA_IFQ_event_handler+0x70>)
 8007d5c:	f7ff fe42 	bl	80079e4 <DMA_CH_Enable>
		DMA_CH_Enable(&DMA_CH_IFQ);
 8007d60:	4808      	ldr	r0, [pc, #32]	; (8007d84 <DMA_IFQ_event_handler+0x74>)
 8007d62:	f7ff fe3f 	bl	80079e4 <DMA_CH_Enable>
		gIFQDataReadyFlag = 2;			// second DMA block is ready
 8007d66:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <DMA_IFQ_event_handler+0x68>)
 8007d68:	2202      	movs	r2, #2
 8007d6a:	701a      	strb	r2, [r3, #0]
	}

} // end of IFQ DMA ISR
 8007d6c:	3708      	adds	r7, #8
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	1fffcdcc 	.word	0x1fffcdcc
 8007d78:	1fffcdb4 	.word	0x1fffcdb4
 8007d7c:	1fffca40 	.word	0x1fffca40
 8007d80:	1fffcb68 	.word	0x1fffcb68
 8007d84:	1fffcb2c 	.word	0x1fffcb2c

08007d88 <CCU41_3_IRQHandler>:

//***********************************************
// One Hz Interrupt Service Routine
//
void OneHzISR(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	af00      	add	r7, sp, #0

//	DIGITAL_IO_ToggleOutput(&LED_GREEN);

	gQ2Freq = COUNTER_GetCurrentCount(&Q2_FREQ_P22);  // Read Q2 counter
 8007d8c:	4807      	ldr	r0, [pc, #28]	; (8007dac <CCU41_3_IRQHandler+0x24>)
 8007d8e:	f7fc fc03 	bl	8004598 <COUNTER_GetCurrentCount>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <CCU41_3_IRQHandler+0x28>)
 8007d98:	601a      	str	r2, [r3, #0]
	COUNTER_ResetCounter(&Q2_FREQ_P22);				  // clear Q2 counter
 8007d9a:	4804      	ldr	r0, [pc, #16]	; (8007dac <CCU41_3_IRQHandler+0x24>)
 8007d9c:	f7fc fc14 	bl	80045c8 <COUNTER_ResetCounter>

	BGT_LO_Adjust(gQ2Freq);			// make sure Q2 is in range
 8007da0:	4b03      	ldr	r3, [pc, #12]	; (8007db0 <CCU41_3_IRQHandler+0x28>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f7ff fd67 	bl	8007878 <BGT_LO_Adjust>

}  // end of OneHzISR()
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	1fffcc88 	.word	0x1fffcc88
 8007db0:	1fffcdb8 	.word	0x1fffcdb8

08007db4 <genHanningData>:
//   Generate Hanning Window data for FFT
//   Signal Processing.  Hanning window helps
//   smooth the edges of the sample window.
//
void genHanningData(void)
{
 8007db4:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
	uint16_t idx;
	float32_t  piVal = (float)22.0/(float)7.0;
 8007dbc:	4b26      	ldr	r3, [pc, #152]	; (8007e58 <genHanningData+0xa4>)
 8007dbe:	603b      	str	r3, [r7, #0]

	for (idx=0; idx<FFT_SIZE; idx++)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	80fb      	strh	r3, [r7, #6]
 8007dc4:	e03f      	b.n	8007e46 <genHanningData+0x92>
	{
		hanning_window[idx] = (1.0f - arm_cos_f32(2.0*piVal*idx/FFT_SIZE))/2.0f;
 8007dc6:	88fc      	ldrh	r4, [r7, #6]
 8007dc8:	6838      	ldr	r0, [r7, #0]
 8007dca:	f000 fb4f 	bl	800846c <__aeabi_f2d>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	f000 f9eb 	bl	80081b0 <__adddf3>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4690      	mov	r8, r2
 8007de0:	4699      	mov	r9, r3
 8007de2:	88fb      	ldrh	r3, [r7, #6]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f000 fb2f 	bl	8008448 <__aeabi_i2d>
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f000 fb8f 	bl	8008514 <__aeabi_dmul>
 8007df6:	4602      	mov	r2, r0
 8007df8:	460b      	mov	r3, r1
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 8007e06:	f000 fcaf 	bl	8008768 <__aeabi_ddiv>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4619      	mov	r1, r3
 8007e12:	f000 fe19 	bl	8008a48 <__aeabi_d2f>
 8007e16:	4603      	mov	r3, r0
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff f883 	bl	8006f24 <arm_cos_f32>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007e24:	4619      	mov	r1, r3
 8007e26:	f000 fe63 	bl	8008af0 <__aeabi_fsub>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007e32:	f001 f81b 	bl	8008e6c <__aeabi_fdiv>
 8007e36:	4603      	mov	r3, r0
 8007e38:	461a      	mov	r2, r3
 8007e3a:	4b08      	ldr	r3, [pc, #32]	; (8007e5c <genHanningData+0xa8>)
 8007e3c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
void genHanningData(void)
{
	uint16_t idx;
	float32_t  piVal = (float)22.0/(float)7.0;

	for (idx=0; idx<FFT_SIZE; idx++)
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	3301      	adds	r3, #1
 8007e44:	80fb      	strh	r3, [r7, #6]
 8007e46:	88fb      	ldrh	r3, [r7, #6]
 8007e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e4c:	d3bb      	bcc.n	8007dc6 <genHanningData+0x12>
	{
		hanning_window[idx] = (1.0f - arm_cos_f32(2.0*piVal*idx/FFT_SIZE))/2.0f;
	}

}  // end of genHanningData()
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
 8007e56:	bf00      	nop
 8007e58:	40492492 	.word	0x40492492
 8007e5c:	1fffe60c 	.word	0x1fffe60c

08007e60 <spectrum_peak>:
uint8_t spectrum_peak(
    float32_t* pSrcA,
    float32_t* pSrcB,
    uint32_t blockSize
    )
{
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
    float32_t
            left_peak = xcorr_left_max(pSrcA, pSrcB, blockSize),
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	f000 f835 	bl	8007ee0 <xcorr_left_max>
 8007e76:	6178      	str	r0, [r7, #20]
            right_peak = xcorr_right_max(pSrcA, pSrcB, blockSize)
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	f000 f881 	bl	8007f84 <xcorr_right_max>
 8007e82:	6138      	str	r0, [r7, #16]
            ;
    if(fabs(left_peak - right_peak) < XCORR_EPSILON)
 8007e84:	6978      	ldr	r0, [r7, #20]
 8007e86:	6939      	ldr	r1, [r7, #16]
 8007e88:	f000 fe32 	bl	8008af0 <__aeabi_fsub>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 faea 	bl	800846c <__aeabi_f2d>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	460b      	mov	r3, r1
 8007e9c:	4610      	mov	r0, r2
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	a30d      	add	r3, pc, #52	; (adr r3, 8007ed8 <spectrum_peak+0x78>)
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f000 fda7 	bl	80089f8 <__aeabi_dcmplt>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <spectrum_peak+0x54>
    {
        return BOTH_SPECTRUMS;
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e00b      	b.n	8007ecc <spectrum_peak+0x6c>
    }
    return right_peak > left_peak;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	461c      	mov	r4, r3
 8007eb8:	6938      	ldr	r0, [r7, #16]
 8007eba:	6979      	ldr	r1, [r7, #20]
 8007ebc:	f001 f8de 	bl	800907c <__aeabi_fcmpgt>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d101      	bne.n	8007eca <spectrum_peak+0x6a>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	461c      	mov	r4, r3
 8007eca:	b2e3      	uxtb	r3, r4
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	371c      	adds	r7, #28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd90      	pop	{r4, r7, pc}
 8007ed4:	f3af 8000 	nop.w
 8007ed8:	9999999a 	.word	0x9999999a
 8007edc:	3fb99999 	.word	0x3fb99999

08007ee0 <xcorr_left_max>:
float32_t xcorr_left_max(
    float32_t* pSrcA,
    float32_t* pSrcB,
    uint32_t blockSize
    )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b088      	sub	sp, #32
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	60b9      	str	r1, [r7, #8]
 8007eea:	607a      	str	r2, [r7, #4]
    uint32_t i = 0, j = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]
    float32_t toreturn = 0.0;
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
    float32_t calc_hold = 0.0;
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	613b      	str	r3, [r7, #16]

        // Slide srcA left-to-right starting from no overlap
    for(i=0; i < blockSize; ++i){
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	e034      	b.n	8007f70 <xcorr_left_max+0x90>
        calc_hold = 0;
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
        for(j=0; j+i < blockSize; ++j){
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	61bb      	str	r3, [r7, #24]
 8007f10:	e019      	b.n	8007f46 <xcorr_left_max+0x66>
            calc_hold += pSrcA[j+i] * pSrcB[j];
 8007f12:	69ba      	ldr	r2, [r7, #24]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	6819      	ldr	r1, [r3, #0]
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	4413      	add	r3, r2
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4608      	mov	r0, r1
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f000 fee9 	bl	8008d04 <__aeabi_fmul>
 8007f32:	4603      	mov	r3, r0
 8007f34:	6938      	ldr	r0, [r7, #16]
 8007f36:	4619      	mov	r1, r3
 8007f38:	f000 fddc 	bl	8008af4 <__addsf3>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	613b      	str	r3, [r7, #16]
    float32_t calc_hold = 0.0;

        // Slide srcA left-to-right starting from no overlap
    for(i=0; i < blockSize; ++i){
        calc_hold = 0;
        for(j=0; j+i < blockSize; ++j){
 8007f40:	69bb      	ldr	r3, [r7, #24]
 8007f42:	3301      	adds	r3, #1
 8007f44:	61bb      	str	r3, [r7, #24]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	441a      	add	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d3df      	bcc.n	8007f12 <xcorr_left_max+0x32>
            calc_hold += pSrcA[j+i] * pSrcB[j];
        }
        if(i == 0 || toreturn < calc_hold)
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d006      	beq.n	8007f66 <xcorr_left_max+0x86>
 8007f58:	6978      	ldr	r0, [r7, #20]
 8007f5a:	6939      	ldr	r1, [r7, #16]
 8007f5c:	f001 f870 	bl	8009040 <__aeabi_fcmplt>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <xcorr_left_max+0x8a>
        {
            toreturn = calc_hold;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	617b      	str	r3, [r7, #20]
    uint32_t i = 0, j = 0;
    float32_t toreturn = 0.0;
    float32_t calc_hold = 0.0;

        // Slide srcA left-to-right starting from no overlap
    for(i=0; i < blockSize; ++i){
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3c6      	bcc.n	8007f06 <xcorr_left_max+0x26>
        if(i == 0 || toreturn < calc_hold)
        {
            toreturn = calc_hold;
        }
    }
    return toreturn;
 8007f78:	697b      	ldr	r3, [r7, #20]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3720      	adds	r7, #32
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop

08007f84 <xcorr_right_max>:
float32_t xcorr_right_max(
    float32_t* pSrcA,
    float32_t* pSrcB,
    uint32_t blockSize
    )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
    uint32_t i = 0, j = 0;
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	2300      	movs	r3, #0
 8007f96:	61bb      	str	r3, [r7, #24]
    float32_t toreturn = 0.0;
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	617b      	str	r3, [r7, #20]
    float32_t calc_hold = 0.0;
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	613b      	str	r3, [r7, #16]

        // Slide srcA left-to-right starting from complete overlap
    for(i=0; i < blockSize; ++i){
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61fb      	str	r3, [r7, #28]
 8007fa8:	e034      	b.n	8008014 <xcorr_right_max+0x90>
        calc_hold = 0;
 8007faa:	f04f 0300 	mov.w	r3, #0
 8007fae:	613b      	str	r3, [r7, #16]
        for(j=0; j+i < blockSize; ++j){
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61bb      	str	r3, [r7, #24]
 8007fb4:	e019      	b.n	8007fea <xcorr_right_max+0x66>
            calc_hold += pSrcA[j] * pSrcB[j + i];
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	6819      	ldr	r1, [r3, #0]
 8007fc0:	69ba      	ldr	r2, [r7, #24]
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	4413      	add	r3, r2
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4608      	mov	r0, r1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f000 fe97 	bl	8008d04 <__aeabi_fmul>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6938      	ldr	r0, [r7, #16]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	f000 fd8a 	bl	8008af4 <__addsf3>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	613b      	str	r3, [r7, #16]
    float32_t calc_hold = 0.0;

        // Slide srcA left-to-right starting from complete overlap
    for(i=0; i < blockSize; ++i){
        calc_hold = 0;
        for(j=0; j+i < blockSize; ++j){
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	61bb      	str	r3, [r7, #24]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	69fb      	ldr	r3, [r7, #28]
 8007fee:	441a      	add	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d3df      	bcc.n	8007fb6 <xcorr_right_max+0x32>
            calc_hold += pSrcA[j] * pSrcB[j + i];
        }
        if(i == 0 || toreturn < calc_hold)
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d006      	beq.n	800800a <xcorr_right_max+0x86>
 8007ffc:	6978      	ldr	r0, [r7, #20]
 8007ffe:	6939      	ldr	r1, [r7, #16]
 8008000:	f001 f81e 	bl	8009040 <__aeabi_fcmplt>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <xcorr_right_max+0x8a>
        {
            toreturn = calc_hold;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	617b      	str	r3, [r7, #20]
    uint32_t i = 0, j = 0;
    float32_t toreturn = 0.0;
    float32_t calc_hold = 0.0;

        // Slide srcA left-to-right starting from complete overlap
    for(i=0; i < blockSize; ++i){
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	3301      	adds	r3, #1
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	429a      	cmp	r2, r3
 800801a:	d3c6      	bcc.n	8007faa <xcorr_right_max+0x26>
        if(i == 0 || toreturn < calc_hold)
        {
            toreturn = calc_hold;
        }
    }
    return toreturn;
 800801c:	697b      	ldr	r3, [r7, #20]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3720      	adds	r7, #32
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop

08008028 <sqrtf>:
 8008028:	b570      	push	{r4, r5, r6, lr}
 800802a:	4d24      	ldr	r5, [pc, #144]	; (80080bc <sqrtf+0x94>)
 800802c:	b08a      	sub	sp, #40	; 0x28
 800802e:	4606      	mov	r6, r0
 8008030:	f000 f848 	bl	80080c4 <__ieee754_sqrtf>
 8008034:	f995 3000 	ldrsb.w	r3, [r5]
 8008038:	3301      	adds	r3, #1
 800803a:	4604      	mov	r4, r0
 800803c:	d008      	beq.n	8008050 <sqrtf+0x28>
 800803e:	4630      	mov	r0, r6
 8008040:	f000 f896 	bl	8008170 <__fpclassifyf>
 8008044:	b120      	cbz	r0, 8008050 <sqrtf+0x28>
 8008046:	4630      	mov	r0, r6
 8008048:	2100      	movs	r1, #0
 800804a:	f000 fff9 	bl	8009040 <__aeabi_fcmplt>
 800804e:	b910      	cbnz	r0, 8008056 <sqrtf+0x2e>
 8008050:	4620      	mov	r0, r4
 8008052:	b00a      	add	sp, #40	; 0x28
 8008054:	bd70      	pop	{r4, r5, r6, pc}
 8008056:	2301      	movs	r3, #1
 8008058:	4a19      	ldr	r2, [pc, #100]	; (80080c0 <sqrtf+0x98>)
 800805a:	9300      	str	r3, [sp, #0]
 800805c:	4630      	mov	r0, r6
 800805e:	2300      	movs	r3, #0
 8008060:	9201      	str	r2, [sp, #4]
 8008062:	9308      	str	r3, [sp, #32]
 8008064:	f000 fa02 	bl	800846c <__aeabi_f2d>
 8008068:	782c      	ldrb	r4, [r5, #0]
 800806a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800806e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008072:	b97c      	cbnz	r4, 8008094 <sqrtf+0x6c>
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800807c:	4668      	mov	r0, sp
 800807e:	f000 f875 	bl	800816c <matherr>
 8008082:	b188      	cbz	r0, 80080a8 <sqrtf+0x80>
 8008084:	9b08      	ldr	r3, [sp, #32]
 8008086:	b9a3      	cbnz	r3, 80080b2 <sqrtf+0x8a>
 8008088:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800808c:	f000 fcdc 	bl	8008a48 <__aeabi_d2f>
 8008090:	b00a      	add	sp, #40	; 0x28
 8008092:	bd70      	pop	{r4, r5, r6, pc}
 8008094:	2000      	movs	r0, #0
 8008096:	2100      	movs	r1, #0
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	f000 fb64 	bl	8008768 <__aeabi_ddiv>
 80080a0:	2c02      	cmp	r4, #2
 80080a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080a6:	d1e9      	bne.n	800807c <sqrtf+0x54>
 80080a8:	f001 fb04 	bl	80096b4 <__errno>
 80080ac:	2321      	movs	r3, #33	; 0x21
 80080ae:	6003      	str	r3, [r0, #0]
 80080b0:	e7e8      	b.n	8008084 <sqrtf+0x5c>
 80080b2:	f001 faff 	bl	80096b4 <__errno>
 80080b6:	9b08      	ldr	r3, [sp, #32]
 80080b8:	6003      	str	r3, [r0, #0]
 80080ba:	e7e5      	b.n	8008088 <sqrtf+0x60>
 80080bc:	1fffcd30 	.word	0x1fffcd30
 80080c0:	0801d51c 	.word	0x0801d51c

080080c4 <__ieee754_sqrtf>:
 80080c4:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80080c8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	4603      	mov	r3, r0
 80080d0:	4604      	mov	r4, r0
 80080d2:	d22d      	bcs.n	8008130 <__ieee754_sqrtf+0x6c>
 80080d4:	b35a      	cbz	r2, 800812e <__ieee754_sqrtf+0x6a>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	db3d      	blt.n	8008156 <__ieee754_sqrtf+0x92>
 80080da:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80080de:	ea4f 50e0 	mov.w	r0, r0, asr #23
 80080e2:	d32c      	bcc.n	800813e <__ieee754_sqrtf+0x7a>
 80080e4:	387f      	subs	r0, #127	; 0x7f
 80080e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80080ea:	07c2      	lsls	r2, r0, #31
 80080ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080f0:	bf48      	it	mi
 80080f2:	005b      	lslmi	r3, r3, #1
 80080f4:	2600      	movs	r6, #0
 80080f6:	1040      	asrs	r0, r0, #1
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	4631      	mov	r1, r6
 80080fc:	2419      	movs	r4, #25
 80080fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008102:	188d      	adds	r5, r1, r2
 8008104:	429d      	cmp	r5, r3
 8008106:	dc02      	bgt.n	800810e <__ieee754_sqrtf+0x4a>
 8008108:	1b5b      	subs	r3, r3, r5
 800810a:	18a9      	adds	r1, r5, r2
 800810c:	4416      	add	r6, r2
 800810e:	3c01      	subs	r4, #1
 8008110:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008114:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008118:	d1f3      	bne.n	8008102 <__ieee754_sqrtf+0x3e>
 800811a:	b113      	cbz	r3, 8008122 <__ieee754_sqrtf+0x5e>
 800811c:	f006 0301 	and.w	r3, r6, #1
 8008120:	441e      	add	r6, r3
 8008122:	1076      	asrs	r6, r6, #1
 8008124:	f106 567c 	add.w	r6, r6, #1056964608	; 0x3f000000
 8008128:	eb06 50c0 	add.w	r0, r6, r0, lsl #23
 800812c:	bd70      	pop	{r4, r5, r6, pc}
 800812e:	bd70      	pop	{r4, r5, r6, pc}
 8008130:	4601      	mov	r1, r0
 8008132:	f000 fde7 	bl	8008d04 <__aeabi_fmul>
 8008136:	4621      	mov	r1, r4
 8008138:	f000 fcdc 	bl	8008af4 <__addsf3>
 800813c:	bd70      	pop	{r4, r5, r6, pc}
 800813e:	f414 0200 	ands.w	r2, r4, #8388608	; 0x800000
 8008142:	d10f      	bne.n	8008164 <__ieee754_sqrtf+0xa0>
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	0219      	lsls	r1, r3, #8
 8008148:	f102 0201 	add.w	r2, r2, #1
 800814c:	d5fa      	bpl.n	8008144 <__ieee754_sqrtf+0x80>
 800814e:	f1c2 0201 	rsb	r2, r2, #1
 8008152:	4410      	add	r0, r2
 8008154:	e7c6      	b.n	80080e4 <__ieee754_sqrtf+0x20>
 8008156:	4601      	mov	r1, r0
 8008158:	f000 fcca 	bl	8008af0 <__aeabi_fsub>
 800815c:	4601      	mov	r1, r0
 800815e:	f000 fe85 	bl	8008e6c <__aeabi_fdiv>
 8008162:	bd70      	pop	{r4, r5, r6, pc}
 8008164:	2201      	movs	r2, #1
 8008166:	4410      	add	r0, r2
 8008168:	e7bc      	b.n	80080e4 <__ieee754_sqrtf+0x20>
 800816a:	bf00      	nop

0800816c <matherr>:
 800816c:	2000      	movs	r0, #0
 800816e:	4770      	bx	lr

08008170 <__fpclassifyf>:
 8008170:	f030 4000 	bics.w	r0, r0, #2147483648	; 0x80000000
 8008174:	d101      	bne.n	800817a <__fpclassifyf+0xa>
 8008176:	2002      	movs	r0, #2
 8008178:	4770      	bx	lr
 800817a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800817e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8008182:	d201      	bcs.n	8008188 <__fpclassifyf+0x18>
 8008184:	2004      	movs	r0, #4
 8008186:	4770      	bx	lr
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <__fpclassifyf+0x30>)
 800818a:	1e42      	subs	r2, r0, #1
 800818c:	429a      	cmp	r2, r3
 800818e:	d801      	bhi.n	8008194 <__fpclassifyf+0x24>
 8008190:	2003      	movs	r0, #3
 8008192:	4770      	bx	lr
 8008194:	f1a0 40ff 	sub.w	r0, r0, #2139095040	; 0x7f800000
 8008198:	fab0 f080 	clz	r0, r0
 800819c:	0940      	lsrs	r0, r0, #5
 800819e:	4770      	bx	lr
 80081a0:	007ffffe 	.word	0x007ffffe

080081a4 <__aeabi_drsub>:
 80081a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80081a8:	e002      	b.n	80081b0 <__adddf3>
 80081aa:	bf00      	nop

080081ac <__aeabi_dsub>:
 80081ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080081b0 <__adddf3>:
 80081b0:	b530      	push	{r4, r5, lr}
 80081b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80081b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80081ba:	ea94 0f05 	teq	r4, r5
 80081be:	bf08      	it	eq
 80081c0:	ea90 0f02 	teqeq	r0, r2
 80081c4:	bf1f      	itttt	ne
 80081c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80081ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80081ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80081d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80081d6:	f000 80e2 	beq.w	800839e <__adddf3+0x1ee>
 80081da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80081de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80081e2:	bfb8      	it	lt
 80081e4:	426d      	neglt	r5, r5
 80081e6:	dd0c      	ble.n	8008202 <__adddf3+0x52>
 80081e8:	442c      	add	r4, r5
 80081ea:	ea80 0202 	eor.w	r2, r0, r2
 80081ee:	ea81 0303 	eor.w	r3, r1, r3
 80081f2:	ea82 0000 	eor.w	r0, r2, r0
 80081f6:	ea83 0101 	eor.w	r1, r3, r1
 80081fa:	ea80 0202 	eor.w	r2, r0, r2
 80081fe:	ea81 0303 	eor.w	r3, r1, r3
 8008202:	2d36      	cmp	r5, #54	; 0x36
 8008204:	bf88      	it	hi
 8008206:	bd30      	pophi	{r4, r5, pc}
 8008208:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800820c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008210:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008218:	d002      	beq.n	8008220 <__adddf3+0x70>
 800821a:	4240      	negs	r0, r0
 800821c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008220:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800822c:	d002      	beq.n	8008234 <__adddf3+0x84>
 800822e:	4252      	negs	r2, r2
 8008230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008234:	ea94 0f05 	teq	r4, r5
 8008238:	f000 80a7 	beq.w	800838a <__adddf3+0x1da>
 800823c:	f1a4 0401 	sub.w	r4, r4, #1
 8008240:	f1d5 0e20 	rsbs	lr, r5, #32
 8008244:	db0d      	blt.n	8008262 <__adddf3+0xb2>
 8008246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800824a:	fa22 f205 	lsr.w	r2, r2, r5
 800824e:	1880      	adds	r0, r0, r2
 8008250:	f141 0100 	adc.w	r1, r1, #0
 8008254:	fa03 f20e 	lsl.w	r2, r3, lr
 8008258:	1880      	adds	r0, r0, r2
 800825a:	fa43 f305 	asr.w	r3, r3, r5
 800825e:	4159      	adcs	r1, r3
 8008260:	e00e      	b.n	8008280 <__adddf3+0xd0>
 8008262:	f1a5 0520 	sub.w	r5, r5, #32
 8008266:	f10e 0e20 	add.w	lr, lr, #32
 800826a:	2a01      	cmp	r2, #1
 800826c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8008270:	bf28      	it	cs
 8008272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8008276:	fa43 f305 	asr.w	r3, r3, r5
 800827a:	18c0      	adds	r0, r0, r3
 800827c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8008280:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8008284:	d507      	bpl.n	8008296 <__adddf3+0xe6>
 8008286:	f04f 0e00 	mov.w	lr, #0
 800828a:	f1dc 0c00 	rsbs	ip, ip, #0
 800828e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8008292:	eb6e 0101 	sbc.w	r1, lr, r1
 8008296:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800829a:	d31b      	bcc.n	80082d4 <__adddf3+0x124>
 800829c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80082a0:	d30c      	bcc.n	80082bc <__adddf3+0x10c>
 80082a2:	0849      	lsrs	r1, r1, #1
 80082a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80082a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80082ac:	f104 0401 	add.w	r4, r4, #1
 80082b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80082b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80082b8:	f080 809a 	bcs.w	80083f0 <__adddf3+0x240>
 80082bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80082c0:	bf08      	it	eq
 80082c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80082c6:	f150 0000 	adcs.w	r0, r0, #0
 80082ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80082ce:	ea41 0105 	orr.w	r1, r1, r5
 80082d2:	bd30      	pop	{r4, r5, pc}
 80082d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80082d8:	4140      	adcs	r0, r0
 80082da:	eb41 0101 	adc.w	r1, r1, r1
 80082de:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80082e2:	f1a4 0401 	sub.w	r4, r4, #1
 80082e6:	d1e9      	bne.n	80082bc <__adddf3+0x10c>
 80082e8:	f091 0f00 	teq	r1, #0
 80082ec:	bf04      	itt	eq
 80082ee:	4601      	moveq	r1, r0
 80082f0:	2000      	moveq	r0, #0
 80082f2:	fab1 f381 	clz	r3, r1
 80082f6:	bf08      	it	eq
 80082f8:	3320      	addeq	r3, #32
 80082fa:	f1a3 030b 	sub.w	r3, r3, #11
 80082fe:	f1b3 0220 	subs.w	r2, r3, #32
 8008302:	da0c      	bge.n	800831e <__adddf3+0x16e>
 8008304:	320c      	adds	r2, #12
 8008306:	dd08      	ble.n	800831a <__adddf3+0x16a>
 8008308:	f102 0c14 	add.w	ip, r2, #20
 800830c:	f1c2 020c 	rsb	r2, r2, #12
 8008310:	fa01 f00c 	lsl.w	r0, r1, ip
 8008314:	fa21 f102 	lsr.w	r1, r1, r2
 8008318:	e00c      	b.n	8008334 <__adddf3+0x184>
 800831a:	f102 0214 	add.w	r2, r2, #20
 800831e:	bfd8      	it	le
 8008320:	f1c2 0c20 	rsble	ip, r2, #32
 8008324:	fa01 f102 	lsl.w	r1, r1, r2
 8008328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800832c:	bfdc      	itt	le
 800832e:	ea41 010c 	orrle.w	r1, r1, ip
 8008332:	4090      	lslle	r0, r2
 8008334:	1ae4      	subs	r4, r4, r3
 8008336:	bfa2      	ittt	ge
 8008338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800833c:	4329      	orrge	r1, r5
 800833e:	bd30      	popge	{r4, r5, pc}
 8008340:	ea6f 0404 	mvn.w	r4, r4
 8008344:	3c1f      	subs	r4, #31
 8008346:	da1c      	bge.n	8008382 <__adddf3+0x1d2>
 8008348:	340c      	adds	r4, #12
 800834a:	dc0e      	bgt.n	800836a <__adddf3+0x1ba>
 800834c:	f104 0414 	add.w	r4, r4, #20
 8008350:	f1c4 0220 	rsb	r2, r4, #32
 8008354:	fa20 f004 	lsr.w	r0, r0, r4
 8008358:	fa01 f302 	lsl.w	r3, r1, r2
 800835c:	ea40 0003 	orr.w	r0, r0, r3
 8008360:	fa21 f304 	lsr.w	r3, r1, r4
 8008364:	ea45 0103 	orr.w	r1, r5, r3
 8008368:	bd30      	pop	{r4, r5, pc}
 800836a:	f1c4 040c 	rsb	r4, r4, #12
 800836e:	f1c4 0220 	rsb	r2, r4, #32
 8008372:	fa20 f002 	lsr.w	r0, r0, r2
 8008376:	fa01 f304 	lsl.w	r3, r1, r4
 800837a:	ea40 0003 	orr.w	r0, r0, r3
 800837e:	4629      	mov	r1, r5
 8008380:	bd30      	pop	{r4, r5, pc}
 8008382:	fa21 f004 	lsr.w	r0, r1, r4
 8008386:	4629      	mov	r1, r5
 8008388:	bd30      	pop	{r4, r5, pc}
 800838a:	f094 0f00 	teq	r4, #0
 800838e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8008392:	bf06      	itte	eq
 8008394:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8008398:	3401      	addeq	r4, #1
 800839a:	3d01      	subne	r5, #1
 800839c:	e74e      	b.n	800823c <__adddf3+0x8c>
 800839e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80083a2:	bf18      	it	ne
 80083a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80083a8:	d029      	beq.n	80083fe <__adddf3+0x24e>
 80083aa:	ea94 0f05 	teq	r4, r5
 80083ae:	bf08      	it	eq
 80083b0:	ea90 0f02 	teqeq	r0, r2
 80083b4:	d005      	beq.n	80083c2 <__adddf3+0x212>
 80083b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80083ba:	bf04      	itt	eq
 80083bc:	4619      	moveq	r1, r3
 80083be:	4610      	moveq	r0, r2
 80083c0:	bd30      	pop	{r4, r5, pc}
 80083c2:	ea91 0f03 	teq	r1, r3
 80083c6:	bf1e      	ittt	ne
 80083c8:	2100      	movne	r1, #0
 80083ca:	2000      	movne	r0, #0
 80083cc:	bd30      	popne	{r4, r5, pc}
 80083ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80083d2:	d105      	bne.n	80083e0 <__adddf3+0x230>
 80083d4:	0040      	lsls	r0, r0, #1
 80083d6:	4149      	adcs	r1, r1
 80083d8:	bf28      	it	cs
 80083da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80083de:	bd30      	pop	{r4, r5, pc}
 80083e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80083e4:	bf3c      	itt	cc
 80083e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80083ea:	bd30      	popcc	{r4, r5, pc}
 80083ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80083f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083f8:	f04f 0000 	mov.w	r0, #0
 80083fc:	bd30      	pop	{r4, r5, pc}
 80083fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8008402:	bf1a      	itte	ne
 8008404:	4619      	movne	r1, r3
 8008406:	4610      	movne	r0, r2
 8008408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800840c:	bf1c      	itt	ne
 800840e:	460b      	movne	r3, r1
 8008410:	4602      	movne	r2, r0
 8008412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008416:	bf06      	itte	eq
 8008418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800841c:	ea91 0f03 	teqeq	r1, r3
 8008420:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008424:	bd30      	pop	{r4, r5, pc}
 8008426:	bf00      	nop

08008428 <__aeabi_ui2d>:
 8008428:	f090 0f00 	teq	r0, #0
 800842c:	bf04      	itt	eq
 800842e:	2100      	moveq	r1, #0
 8008430:	4770      	bxeq	lr
 8008432:	b530      	push	{r4, r5, lr}
 8008434:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008438:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800843c:	f04f 0500 	mov.w	r5, #0
 8008440:	f04f 0100 	mov.w	r1, #0
 8008444:	e750      	b.n	80082e8 <__adddf3+0x138>
 8008446:	bf00      	nop

08008448 <__aeabi_i2d>:
 8008448:	f090 0f00 	teq	r0, #0
 800844c:	bf04      	itt	eq
 800844e:	2100      	moveq	r1, #0
 8008450:	4770      	bxeq	lr
 8008452:	b530      	push	{r4, r5, lr}
 8008454:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008458:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800845c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8008460:	bf48      	it	mi
 8008462:	4240      	negmi	r0, r0
 8008464:	f04f 0100 	mov.w	r1, #0
 8008468:	e73e      	b.n	80082e8 <__adddf3+0x138>
 800846a:	bf00      	nop

0800846c <__aeabi_f2d>:
 800846c:	0042      	lsls	r2, r0, #1
 800846e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8008472:	ea4f 0131 	mov.w	r1, r1, rrx
 8008476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800847a:	bf1f      	itttt	ne
 800847c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8008480:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008484:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8008488:	4770      	bxne	lr
 800848a:	f092 0f00 	teq	r2, #0
 800848e:	bf14      	ite	ne
 8008490:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8008494:	4770      	bxeq	lr
 8008496:	b530      	push	{r4, r5, lr}
 8008498:	f44f 7460 	mov.w	r4, #896	; 0x380
 800849c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80084a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80084a4:	e720      	b.n	80082e8 <__adddf3+0x138>
 80084a6:	bf00      	nop

080084a8 <__aeabi_ul2d>:
 80084a8:	ea50 0201 	orrs.w	r2, r0, r1
 80084ac:	bf08      	it	eq
 80084ae:	4770      	bxeq	lr
 80084b0:	b530      	push	{r4, r5, lr}
 80084b2:	f04f 0500 	mov.w	r5, #0
 80084b6:	e00a      	b.n	80084ce <__aeabi_l2d+0x16>

080084b8 <__aeabi_l2d>:
 80084b8:	ea50 0201 	orrs.w	r2, r0, r1
 80084bc:	bf08      	it	eq
 80084be:	4770      	bxeq	lr
 80084c0:	b530      	push	{r4, r5, lr}
 80084c2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80084c6:	d502      	bpl.n	80084ce <__aeabi_l2d+0x16>
 80084c8:	4240      	negs	r0, r0
 80084ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80084ce:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80084d2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80084d6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80084da:	f43f aedc 	beq.w	8008296 <__adddf3+0xe6>
 80084de:	f04f 0203 	mov.w	r2, #3
 80084e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084e6:	bf18      	it	ne
 80084e8:	3203      	addne	r2, #3
 80084ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80084ee:	bf18      	it	ne
 80084f0:	3203      	addne	r2, #3
 80084f2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80084f6:	f1c2 0320 	rsb	r3, r2, #32
 80084fa:	fa00 fc03 	lsl.w	ip, r0, r3
 80084fe:	fa20 f002 	lsr.w	r0, r0, r2
 8008502:	fa01 fe03 	lsl.w	lr, r1, r3
 8008506:	ea40 000e 	orr.w	r0, r0, lr
 800850a:	fa21 f102 	lsr.w	r1, r1, r2
 800850e:	4414      	add	r4, r2
 8008510:	e6c1      	b.n	8008296 <__adddf3+0xe6>
 8008512:	bf00      	nop

08008514 <__aeabi_dmul>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800851a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800851e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008522:	bf1d      	ittte	ne
 8008524:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8008528:	ea94 0f0c 	teqne	r4, ip
 800852c:	ea95 0f0c 	teqne	r5, ip
 8008530:	f000 f8de 	bleq	80086f0 <__aeabi_dmul+0x1dc>
 8008534:	442c      	add	r4, r5
 8008536:	ea81 0603 	eor.w	r6, r1, r3
 800853a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800853e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008542:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8008546:	bf18      	it	ne
 8008548:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800854c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008550:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008554:	d038      	beq.n	80085c8 <__aeabi_dmul+0xb4>
 8008556:	fba0 ce02 	umull	ip, lr, r0, r2
 800855a:	f04f 0500 	mov.w	r5, #0
 800855e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8008562:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8008566:	fbe0 e503 	umlal	lr, r5, r0, r3
 800856a:	f04f 0600 	mov.w	r6, #0
 800856e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8008572:	f09c 0f00 	teq	ip, #0
 8008576:	bf18      	it	ne
 8008578:	f04e 0e01 	orrne.w	lr, lr, #1
 800857c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8008580:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8008584:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8008588:	d204      	bcs.n	8008594 <__aeabi_dmul+0x80>
 800858a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800858e:	416d      	adcs	r5, r5
 8008590:	eb46 0606 	adc.w	r6, r6, r6
 8008594:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8008598:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800859c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80085a0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80085a4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80085a8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80085ac:	bf88      	it	hi
 80085ae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80085b2:	d81e      	bhi.n	80085f2 <__aeabi_dmul+0xde>
 80085b4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80085b8:	bf08      	it	eq
 80085ba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80085be:	f150 0000 	adcs.w	r0, r0, #0
 80085c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80085cc:	ea46 0101 	orr.w	r1, r6, r1
 80085d0:	ea40 0002 	orr.w	r0, r0, r2
 80085d4:	ea81 0103 	eor.w	r1, r1, r3
 80085d8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80085dc:	bfc2      	ittt	gt
 80085de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80085e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80085e6:	bd70      	popgt	{r4, r5, r6, pc}
 80085e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80085ec:	f04f 0e00 	mov.w	lr, #0
 80085f0:	3c01      	subs	r4, #1
 80085f2:	f300 80ab 	bgt.w	800874c <__aeabi_dmul+0x238>
 80085f6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80085fa:	bfde      	ittt	le
 80085fc:	2000      	movle	r0, #0
 80085fe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008602:	bd70      	pople	{r4, r5, r6, pc}
 8008604:	f1c4 0400 	rsb	r4, r4, #0
 8008608:	3c20      	subs	r4, #32
 800860a:	da35      	bge.n	8008678 <__aeabi_dmul+0x164>
 800860c:	340c      	adds	r4, #12
 800860e:	dc1b      	bgt.n	8008648 <__aeabi_dmul+0x134>
 8008610:	f104 0414 	add.w	r4, r4, #20
 8008614:	f1c4 0520 	rsb	r5, r4, #32
 8008618:	fa00 f305 	lsl.w	r3, r0, r5
 800861c:	fa20 f004 	lsr.w	r0, r0, r4
 8008620:	fa01 f205 	lsl.w	r2, r1, r5
 8008624:	ea40 0002 	orr.w	r0, r0, r2
 8008628:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800862c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008634:	fa21 f604 	lsr.w	r6, r1, r4
 8008638:	eb42 0106 	adc.w	r1, r2, r6
 800863c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008640:	bf08      	it	eq
 8008642:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	f1c4 040c 	rsb	r4, r4, #12
 800864c:	f1c4 0520 	rsb	r5, r4, #32
 8008650:	fa00 f304 	lsl.w	r3, r0, r4
 8008654:	fa20 f005 	lsr.w	r0, r0, r5
 8008658:	fa01 f204 	lsl.w	r2, r1, r4
 800865c:	ea40 0002 	orr.w	r0, r0, r2
 8008660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008668:	f141 0100 	adc.w	r1, r1, #0
 800866c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008670:	bf08      	it	eq
 8008672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	f1c4 0520 	rsb	r5, r4, #32
 800867c:	fa00 f205 	lsl.w	r2, r0, r5
 8008680:	ea4e 0e02 	orr.w	lr, lr, r2
 8008684:	fa20 f304 	lsr.w	r3, r0, r4
 8008688:	fa01 f205 	lsl.w	r2, r1, r5
 800868c:	ea43 0302 	orr.w	r3, r3, r2
 8008690:	fa21 f004 	lsr.w	r0, r1, r4
 8008694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008698:	fa21 f204 	lsr.w	r2, r1, r4
 800869c:	ea20 0002 	bic.w	r0, r0, r2
 80086a0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80086a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80086a8:	bf08      	it	eq
 80086aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80086ae:	bd70      	pop	{r4, r5, r6, pc}
 80086b0:	f094 0f00 	teq	r4, #0
 80086b4:	d10f      	bne.n	80086d6 <__aeabi_dmul+0x1c2>
 80086b6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80086ba:	0040      	lsls	r0, r0, #1
 80086bc:	eb41 0101 	adc.w	r1, r1, r1
 80086c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80086c4:	bf08      	it	eq
 80086c6:	3c01      	subeq	r4, #1
 80086c8:	d0f7      	beq.n	80086ba <__aeabi_dmul+0x1a6>
 80086ca:	ea41 0106 	orr.w	r1, r1, r6
 80086ce:	f095 0f00 	teq	r5, #0
 80086d2:	bf18      	it	ne
 80086d4:	4770      	bxne	lr
 80086d6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80086da:	0052      	lsls	r2, r2, #1
 80086dc:	eb43 0303 	adc.w	r3, r3, r3
 80086e0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80086e4:	bf08      	it	eq
 80086e6:	3d01      	subeq	r5, #1
 80086e8:	d0f7      	beq.n	80086da <__aeabi_dmul+0x1c6>
 80086ea:	ea43 0306 	orr.w	r3, r3, r6
 80086ee:	4770      	bx	lr
 80086f0:	ea94 0f0c 	teq	r4, ip
 80086f4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80086f8:	bf18      	it	ne
 80086fa:	ea95 0f0c 	teqne	r5, ip
 80086fe:	d00c      	beq.n	800871a <__aeabi_dmul+0x206>
 8008700:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008704:	bf18      	it	ne
 8008706:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800870a:	d1d1      	bne.n	80086b0 <__aeabi_dmul+0x19c>
 800870c:	ea81 0103 	eor.w	r1, r1, r3
 8008710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008714:	f04f 0000 	mov.w	r0, #0
 8008718:	bd70      	pop	{r4, r5, r6, pc}
 800871a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800871e:	bf06      	itte	eq
 8008720:	4610      	moveq	r0, r2
 8008722:	4619      	moveq	r1, r3
 8008724:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008728:	d019      	beq.n	800875e <__aeabi_dmul+0x24a>
 800872a:	ea94 0f0c 	teq	r4, ip
 800872e:	d102      	bne.n	8008736 <__aeabi_dmul+0x222>
 8008730:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008734:	d113      	bne.n	800875e <__aeabi_dmul+0x24a>
 8008736:	ea95 0f0c 	teq	r5, ip
 800873a:	d105      	bne.n	8008748 <__aeabi_dmul+0x234>
 800873c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008740:	bf1c      	itt	ne
 8008742:	4610      	movne	r0, r2
 8008744:	4619      	movne	r1, r3
 8008746:	d10a      	bne.n	800875e <__aeabi_dmul+0x24a>
 8008748:	ea81 0103 	eor.w	r1, r1, r3
 800874c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008750:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008758:	f04f 0000 	mov.w	r0, #0
 800875c:	bd70      	pop	{r4, r5, r6, pc}
 800875e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008762:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8008766:	bd70      	pop	{r4, r5, r6, pc}

08008768 <__aeabi_ddiv>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800876e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008772:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008776:	bf1d      	ittte	ne
 8008778:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800877c:	ea94 0f0c 	teqne	r4, ip
 8008780:	ea95 0f0c 	teqne	r5, ip
 8008784:	f000 f8a7 	bleq	80088d6 <__aeabi_ddiv+0x16e>
 8008788:	eba4 0405 	sub.w	r4, r4, r5
 800878c:	ea81 0e03 	eor.w	lr, r1, r3
 8008790:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008794:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8008798:	f000 8088 	beq.w	80088ac <__aeabi_ddiv+0x144>
 800879c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80087a0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80087a4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80087a8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80087ac:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80087b0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80087b4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80087b8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80087bc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80087c0:	429d      	cmp	r5, r3
 80087c2:	bf08      	it	eq
 80087c4:	4296      	cmpeq	r6, r2
 80087c6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80087ca:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80087ce:	d202      	bcs.n	80087d6 <__aeabi_ddiv+0x6e>
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80087d6:	1ab6      	subs	r6, r6, r2
 80087d8:	eb65 0503 	sbc.w	r5, r5, r3
 80087dc:	085b      	lsrs	r3, r3, #1
 80087de:	ea4f 0232 	mov.w	r2, r2, rrx
 80087e2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80087e6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80087ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80087ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80087f2:	bf22      	ittt	cs
 80087f4:	1ab6      	subcs	r6, r6, r2
 80087f6:	4675      	movcs	r5, lr
 80087f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80087fc:	085b      	lsrs	r3, r3, #1
 80087fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8008802:	ebb6 0e02 	subs.w	lr, r6, r2
 8008806:	eb75 0e03 	sbcs.w	lr, r5, r3
 800880a:	bf22      	ittt	cs
 800880c:	1ab6      	subcs	r6, r6, r2
 800880e:	4675      	movcs	r5, lr
 8008810:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008814:	085b      	lsrs	r3, r3, #1
 8008816:	ea4f 0232 	mov.w	r2, r2, rrx
 800881a:	ebb6 0e02 	subs.w	lr, r6, r2
 800881e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008822:	bf22      	ittt	cs
 8008824:	1ab6      	subcs	r6, r6, r2
 8008826:	4675      	movcs	r5, lr
 8008828:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	ea4f 0232 	mov.w	r2, r2, rrx
 8008832:	ebb6 0e02 	subs.w	lr, r6, r2
 8008836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800883a:	bf22      	ittt	cs
 800883c:	1ab6      	subcs	r6, r6, r2
 800883e:	4675      	movcs	r5, lr
 8008840:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008844:	ea55 0e06 	orrs.w	lr, r5, r6
 8008848:	d018      	beq.n	800887c <__aeabi_ddiv+0x114>
 800884a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800884e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008852:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8008856:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800885a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800885e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8008862:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8008866:	d1c0      	bne.n	80087ea <__aeabi_ddiv+0x82>
 8008868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800886c:	d10b      	bne.n	8008886 <__aeabi_ddiv+0x11e>
 800886e:	ea41 0100 	orr.w	r1, r1, r0
 8008872:	f04f 0000 	mov.w	r0, #0
 8008876:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800887a:	e7b6      	b.n	80087ea <__aeabi_ddiv+0x82>
 800887c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008880:	bf04      	itt	eq
 8008882:	4301      	orreq	r1, r0
 8008884:	2000      	moveq	r0, #0
 8008886:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800888a:	bf88      	it	hi
 800888c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008890:	f63f aeaf 	bhi.w	80085f2 <__aeabi_dmul+0xde>
 8008894:	ebb5 0c03 	subs.w	ip, r5, r3
 8008898:	bf04      	itt	eq
 800889a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800889e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80088a2:	f150 0000 	adcs.w	r0, r0, #0
 80088a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80088b0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80088b4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80088b8:	bfc2      	ittt	gt
 80088ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80088be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80088c2:	bd70      	popgt	{r4, r5, r6, pc}
 80088c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80088c8:	f04f 0e00 	mov.w	lr, #0
 80088cc:	3c01      	subs	r4, #1
 80088ce:	e690      	b.n	80085f2 <__aeabi_dmul+0xde>
 80088d0:	ea45 0e06 	orr.w	lr, r5, r6
 80088d4:	e68d      	b.n	80085f2 <__aeabi_dmul+0xde>
 80088d6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80088da:	ea94 0f0c 	teq	r4, ip
 80088de:	bf08      	it	eq
 80088e0:	ea95 0f0c 	teqeq	r5, ip
 80088e4:	f43f af3b 	beq.w	800875e <__aeabi_dmul+0x24a>
 80088e8:	ea94 0f0c 	teq	r4, ip
 80088ec:	d10a      	bne.n	8008904 <__aeabi_ddiv+0x19c>
 80088ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80088f2:	f47f af34 	bne.w	800875e <__aeabi_dmul+0x24a>
 80088f6:	ea95 0f0c 	teq	r5, ip
 80088fa:	f47f af25 	bne.w	8008748 <__aeabi_dmul+0x234>
 80088fe:	4610      	mov	r0, r2
 8008900:	4619      	mov	r1, r3
 8008902:	e72c      	b.n	800875e <__aeabi_dmul+0x24a>
 8008904:	ea95 0f0c 	teq	r5, ip
 8008908:	d106      	bne.n	8008918 <__aeabi_ddiv+0x1b0>
 800890a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800890e:	f43f aefd 	beq.w	800870c <__aeabi_dmul+0x1f8>
 8008912:	4610      	mov	r0, r2
 8008914:	4619      	mov	r1, r3
 8008916:	e722      	b.n	800875e <__aeabi_dmul+0x24a>
 8008918:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800891c:	bf18      	it	ne
 800891e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008922:	f47f aec5 	bne.w	80086b0 <__aeabi_dmul+0x19c>
 8008926:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800892a:	f47f af0d 	bne.w	8008748 <__aeabi_dmul+0x234>
 800892e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008932:	f47f aeeb 	bne.w	800870c <__aeabi_dmul+0x1f8>
 8008936:	e712      	b.n	800875e <__aeabi_dmul+0x24a>

08008938 <__gedf2>:
 8008938:	f04f 3cff 	mov.w	ip, #4294967295
 800893c:	e006      	b.n	800894c <__cmpdf2+0x4>
 800893e:	bf00      	nop

08008940 <__ledf2>:
 8008940:	f04f 0c01 	mov.w	ip, #1
 8008944:	e002      	b.n	800894c <__cmpdf2+0x4>
 8008946:	bf00      	nop

08008948 <__cmpdf2>:
 8008948:	f04f 0c01 	mov.w	ip, #1
 800894c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008958:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800895c:	bf18      	it	ne
 800895e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8008962:	d01b      	beq.n	800899c <__cmpdf2+0x54>
 8008964:	b001      	add	sp, #4
 8008966:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800896a:	bf0c      	ite	eq
 800896c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8008970:	ea91 0f03 	teqne	r1, r3
 8008974:	bf02      	ittt	eq
 8008976:	ea90 0f02 	teqeq	r0, r2
 800897a:	2000      	moveq	r0, #0
 800897c:	4770      	bxeq	lr
 800897e:	f110 0f00 	cmn.w	r0, #0
 8008982:	ea91 0f03 	teq	r1, r3
 8008986:	bf58      	it	pl
 8008988:	4299      	cmppl	r1, r3
 800898a:	bf08      	it	eq
 800898c:	4290      	cmpeq	r0, r2
 800898e:	bf2c      	ite	cs
 8008990:	17d8      	asrcs	r0, r3, #31
 8008992:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8008996:	f040 0001 	orr.w	r0, r0, #1
 800899a:	4770      	bx	lr
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__cmpdf2+0x64>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d107      	bne.n	80089bc <__cmpdf2+0x74>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d1d6      	bne.n	8008964 <__cmpdf2+0x1c>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d0d3      	beq.n	8008964 <__cmpdf2+0x1c>
 80089bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop

080089c4 <__aeabi_cdrcmple>:
 80089c4:	4684      	mov	ip, r0
 80089c6:	4610      	mov	r0, r2
 80089c8:	4662      	mov	r2, ip
 80089ca:	468c      	mov	ip, r1
 80089cc:	4619      	mov	r1, r3
 80089ce:	4663      	mov	r3, ip
 80089d0:	e000      	b.n	80089d4 <__aeabi_cdcmpeq>
 80089d2:	bf00      	nop

080089d4 <__aeabi_cdcmpeq>:
 80089d4:	b501      	push	{r0, lr}
 80089d6:	f7ff ffb7 	bl	8008948 <__cmpdf2>
 80089da:	2800      	cmp	r0, #0
 80089dc:	bf48      	it	mi
 80089de:	f110 0f00 	cmnmi.w	r0, #0
 80089e2:	bd01      	pop	{r0, pc}

080089e4 <__aeabi_dcmpeq>:
 80089e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089e8:	f7ff fff4 	bl	80089d4 <__aeabi_cdcmpeq>
 80089ec:	bf0c      	ite	eq
 80089ee:	2001      	moveq	r0, #1
 80089f0:	2000      	movne	r0, #0
 80089f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80089f6:	bf00      	nop

080089f8 <__aeabi_dcmplt>:
 80089f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80089fc:	f7ff ffea 	bl	80089d4 <__aeabi_cdcmpeq>
 8008a00:	bf34      	ite	cc
 8008a02:	2001      	movcc	r0, #1
 8008a04:	2000      	movcs	r0, #0
 8008a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a0a:	bf00      	nop

08008a0c <__aeabi_dcmple>:
 8008a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a10:	f7ff ffe0 	bl	80089d4 <__aeabi_cdcmpeq>
 8008a14:	bf94      	ite	ls
 8008a16:	2001      	movls	r0, #1
 8008a18:	2000      	movhi	r0, #0
 8008a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a1e:	bf00      	nop

08008a20 <__aeabi_dcmpge>:
 8008a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a24:	f7ff ffce 	bl	80089c4 <__aeabi_cdrcmple>
 8008a28:	bf94      	ite	ls
 8008a2a:	2001      	movls	r0, #1
 8008a2c:	2000      	movhi	r0, #0
 8008a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a32:	bf00      	nop

08008a34 <__aeabi_dcmpgt>:
 8008a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008a38:	f7ff ffc4 	bl	80089c4 <__aeabi_cdrcmple>
 8008a3c:	bf34      	ite	cc
 8008a3e:	2001      	movcc	r0, #1
 8008a40:	2000      	movcs	r0, #0
 8008a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8008a46:	bf00      	nop

08008a48 <__aeabi_d2f>:
 8008a48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a50:	bf24      	itt	cs
 8008a52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a5a:	d90d      	bls.n	8008a78 <__aeabi_d2f+0x30>
 8008a5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a70:	bf08      	it	eq
 8008a72:	f020 0001 	biceq.w	r0, r0, #1
 8008a76:	4770      	bx	lr
 8008a78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a7c:	d121      	bne.n	8008ac2 <__aeabi_d2f+0x7a>
 8008a7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a82:	bfbc      	itt	lt
 8008a84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a88:	4770      	bxlt	lr
 8008a8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a92:	f1c2 0218 	rsb	r2, r2, #24
 8008a96:	f1c2 0c20 	rsb	ip, r2, #32
 8008a9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a9e:	fa20 f002 	lsr.w	r0, r0, r2
 8008aa2:	bf18      	it	ne
 8008aa4:	f040 0001 	orrne.w	r0, r0, #1
 8008aa8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008aac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008ab0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008ab4:	ea40 000c 	orr.w	r0, r0, ip
 8008ab8:	fa23 f302 	lsr.w	r3, r3, r2
 8008abc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008ac0:	e7cc      	b.n	8008a5c <__aeabi_d2f+0x14>
 8008ac2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008ac6:	d107      	bne.n	8008ad8 <__aeabi_d2f+0x90>
 8008ac8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008acc:	bf1e      	ittt	ne
 8008ace:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008ad2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008ad6:	4770      	bxne	lr
 8008ad8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008adc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ae0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ae4:	4770      	bx	lr
 8008ae6:	bf00      	nop

08008ae8 <__aeabi_frsub>:
 8008ae8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8008aec:	e002      	b.n	8008af4 <__addsf3>
 8008aee:	bf00      	nop

08008af0 <__aeabi_fsub>:
 8008af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08008af4 <__addsf3>:
 8008af4:	0042      	lsls	r2, r0, #1
 8008af6:	bf1f      	itttt	ne
 8008af8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8008afc:	ea92 0f03 	teqne	r2, r3
 8008b00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8008b04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008b08:	d06a      	beq.n	8008be0 <__addsf3+0xec>
 8008b0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8008b0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8008b12:	bfc1      	itttt	gt
 8008b14:	18d2      	addgt	r2, r2, r3
 8008b16:	4041      	eorgt	r1, r0
 8008b18:	4048      	eorgt	r0, r1
 8008b1a:	4041      	eorgt	r1, r0
 8008b1c:	bfb8      	it	lt
 8008b1e:	425b      	neglt	r3, r3
 8008b20:	2b19      	cmp	r3, #25
 8008b22:	bf88      	it	hi
 8008b24:	4770      	bxhi	lr
 8008b26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8008b2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008b2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008b32:	bf18      	it	ne
 8008b34:	4240      	negne	r0, r0
 8008b36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008b3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8008b3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8008b42:	bf18      	it	ne
 8008b44:	4249      	negne	r1, r1
 8008b46:	ea92 0f03 	teq	r2, r3
 8008b4a:	d03f      	beq.n	8008bcc <__addsf3+0xd8>
 8008b4c:	f1a2 0201 	sub.w	r2, r2, #1
 8008b50:	fa41 fc03 	asr.w	ip, r1, r3
 8008b54:	eb10 000c 	adds.w	r0, r0, ip
 8008b58:	f1c3 0320 	rsb	r3, r3, #32
 8008b5c:	fa01 f103 	lsl.w	r1, r1, r3
 8008b60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008b64:	d502      	bpl.n	8008b6c <__addsf3+0x78>
 8008b66:	4249      	negs	r1, r1
 8008b68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8008b6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8008b70:	d313      	bcc.n	8008b9a <__addsf3+0xa6>
 8008b72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8008b76:	d306      	bcc.n	8008b86 <__addsf3+0x92>
 8008b78:	0840      	lsrs	r0, r0, #1
 8008b7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8008b7e:	f102 0201 	add.w	r2, r2, #1
 8008b82:	2afe      	cmp	r2, #254	; 0xfe
 8008b84:	d251      	bcs.n	8008c2a <__addsf3+0x136>
 8008b86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8008b8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008b8e:	bf08      	it	eq
 8008b90:	f020 0001 	biceq.w	r0, r0, #1
 8008b94:	ea40 0003 	orr.w	r0, r0, r3
 8008b98:	4770      	bx	lr
 8008b9a:	0049      	lsls	r1, r1, #1
 8008b9c:	eb40 0000 	adc.w	r0, r0, r0
 8008ba0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8008ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8008ba8:	d1ed      	bne.n	8008b86 <__addsf3+0x92>
 8008baa:	fab0 fc80 	clz	ip, r0
 8008bae:	f1ac 0c08 	sub.w	ip, ip, #8
 8008bb2:	ebb2 020c 	subs.w	r2, r2, ip
 8008bb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8008bba:	bfaa      	itet	ge
 8008bbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8008bc0:	4252      	neglt	r2, r2
 8008bc2:	4318      	orrge	r0, r3
 8008bc4:	bfbc      	itt	lt
 8008bc6:	40d0      	lsrlt	r0, r2
 8008bc8:	4318      	orrlt	r0, r3
 8008bca:	4770      	bx	lr
 8008bcc:	f092 0f00 	teq	r2, #0
 8008bd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8008bd4:	bf06      	itte	eq
 8008bd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8008bda:	3201      	addeq	r2, #1
 8008bdc:	3b01      	subne	r3, #1
 8008bde:	e7b5      	b.n	8008b4c <__addsf3+0x58>
 8008be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008be8:	bf18      	it	ne
 8008bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008bee:	d021      	beq.n	8008c34 <__addsf3+0x140>
 8008bf0:	ea92 0f03 	teq	r2, r3
 8008bf4:	d004      	beq.n	8008c00 <__addsf3+0x10c>
 8008bf6:	f092 0f00 	teq	r2, #0
 8008bfa:	bf08      	it	eq
 8008bfc:	4608      	moveq	r0, r1
 8008bfe:	4770      	bx	lr
 8008c00:	ea90 0f01 	teq	r0, r1
 8008c04:	bf1c      	itt	ne
 8008c06:	2000      	movne	r0, #0
 8008c08:	4770      	bxne	lr
 8008c0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8008c0e:	d104      	bne.n	8008c1a <__addsf3+0x126>
 8008c10:	0040      	lsls	r0, r0, #1
 8008c12:	bf28      	it	cs
 8008c14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8008c18:	4770      	bx	lr
 8008c1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8008c1e:	bf3c      	itt	cc
 8008c20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8008c24:	4770      	bxcc	lr
 8008c26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8008c2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8008c2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008c32:	4770      	bx	lr
 8008c34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8008c38:	bf16      	itet	ne
 8008c3a:	4608      	movne	r0, r1
 8008c3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8008c40:	4601      	movne	r1, r0
 8008c42:	0242      	lsls	r2, r0, #9
 8008c44:	bf06      	itte	eq
 8008c46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8008c4a:	ea90 0f01 	teqeq	r0, r1
 8008c4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8008c52:	4770      	bx	lr

08008c54 <__aeabi_ui2f>:
 8008c54:	f04f 0300 	mov.w	r3, #0
 8008c58:	e004      	b.n	8008c64 <__aeabi_i2f+0x8>
 8008c5a:	bf00      	nop

08008c5c <__aeabi_i2f>:
 8008c5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8008c60:	bf48      	it	mi
 8008c62:	4240      	negmi	r0, r0
 8008c64:	ea5f 0c00 	movs.w	ip, r0
 8008c68:	bf08      	it	eq
 8008c6a:	4770      	bxeq	lr
 8008c6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8008c70:	4601      	mov	r1, r0
 8008c72:	f04f 0000 	mov.w	r0, #0
 8008c76:	e01c      	b.n	8008cb2 <__aeabi_l2f+0x2a>

08008c78 <__aeabi_ul2f>:
 8008c78:	ea50 0201 	orrs.w	r2, r0, r1
 8008c7c:	bf08      	it	eq
 8008c7e:	4770      	bxeq	lr
 8008c80:	f04f 0300 	mov.w	r3, #0
 8008c84:	e00a      	b.n	8008c9c <__aeabi_l2f+0x14>
 8008c86:	bf00      	nop

08008c88 <__aeabi_l2f>:
 8008c88:	ea50 0201 	orrs.w	r2, r0, r1
 8008c8c:	bf08      	it	eq
 8008c8e:	4770      	bxeq	lr
 8008c90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8008c94:	d502      	bpl.n	8008c9c <__aeabi_l2f+0x14>
 8008c96:	4240      	negs	r0, r0
 8008c98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008c9c:	ea5f 0c01 	movs.w	ip, r1
 8008ca0:	bf02      	ittt	eq
 8008ca2:	4684      	moveq	ip, r0
 8008ca4:	4601      	moveq	r1, r0
 8008ca6:	2000      	moveq	r0, #0
 8008ca8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8008cac:	bf08      	it	eq
 8008cae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8008cb2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8008cb6:	fabc f28c 	clz	r2, ip
 8008cba:	3a08      	subs	r2, #8
 8008cbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8008cc0:	db10      	blt.n	8008ce4 <__aeabi_l2f+0x5c>
 8008cc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8008cc6:	4463      	add	r3, ip
 8008cc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8008ccc:	f1c2 0220 	rsb	r2, r2, #32
 8008cd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8008cd4:	fa20 f202 	lsr.w	r2, r0, r2
 8008cd8:	eb43 0002 	adc.w	r0, r3, r2
 8008cdc:	bf08      	it	eq
 8008cde:	f020 0001 	biceq.w	r0, r0, #1
 8008ce2:	4770      	bx	lr
 8008ce4:	f102 0220 	add.w	r2, r2, #32
 8008ce8:	fa01 fc02 	lsl.w	ip, r1, r2
 8008cec:	f1c2 0220 	rsb	r2, r2, #32
 8008cf0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8008cf4:	fa21 f202 	lsr.w	r2, r1, r2
 8008cf8:	eb43 0002 	adc.w	r0, r3, r2
 8008cfc:	bf08      	it	eq
 8008cfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008d02:	4770      	bx	lr

08008d04 <__aeabi_fmul>:
 8008d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008d0c:	bf1e      	ittt	ne
 8008d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008d12:	ea92 0f0c 	teqne	r2, ip
 8008d16:	ea93 0f0c 	teqne	r3, ip
 8008d1a:	d06f      	beq.n	8008dfc <__aeabi_fmul+0xf8>
 8008d1c:	441a      	add	r2, r3
 8008d1e:	ea80 0c01 	eor.w	ip, r0, r1
 8008d22:	0240      	lsls	r0, r0, #9
 8008d24:	bf18      	it	ne
 8008d26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8008d2a:	d01e      	beq.n	8008d6a <__aeabi_fmul+0x66>
 8008d2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008d30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8008d34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8008d38:	fba0 3101 	umull	r3, r1, r0, r1
 8008d3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008d40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8008d44:	bf3e      	ittt	cc
 8008d46:	0049      	lslcc	r1, r1, #1
 8008d48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8008d4c:	005b      	lslcc	r3, r3, #1
 8008d4e:	ea40 0001 	orr.w	r0, r0, r1
 8008d52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8008d56:	2afd      	cmp	r2, #253	; 0xfd
 8008d58:	d81d      	bhi.n	8008d96 <__aeabi_fmul+0x92>
 8008d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008d62:	bf08      	it	eq
 8008d64:	f020 0001 	biceq.w	r0, r0, #1
 8008d68:	4770      	bx	lr
 8008d6a:	f090 0f00 	teq	r0, #0
 8008d6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008d72:	bf08      	it	eq
 8008d74:	0249      	lsleq	r1, r1, #9
 8008d76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008d7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8008d7e:	3a7f      	subs	r2, #127	; 0x7f
 8008d80:	bfc2      	ittt	gt
 8008d82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008d86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008d8a:	4770      	bxgt	lr
 8008d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	3a01      	subs	r2, #1
 8008d96:	dc5d      	bgt.n	8008e54 <__aeabi_fmul+0x150>
 8008d98:	f112 0f19 	cmn.w	r2, #25
 8008d9c:	bfdc      	itt	le
 8008d9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8008da2:	4770      	bxle	lr
 8008da4:	f1c2 0200 	rsb	r2, r2, #0
 8008da8:	0041      	lsls	r1, r0, #1
 8008daa:	fa21 f102 	lsr.w	r1, r1, r2
 8008dae:	f1c2 0220 	rsb	r2, r2, #32
 8008db2:	fa00 fc02 	lsl.w	ip, r0, r2
 8008db6:	ea5f 0031 	movs.w	r0, r1, rrx
 8008dba:	f140 0000 	adc.w	r0, r0, #0
 8008dbe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8008dc2:	bf08      	it	eq
 8008dc4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8008dc8:	4770      	bx	lr
 8008dca:	f092 0f00 	teq	r2, #0
 8008dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008dd2:	bf02      	ittt	eq
 8008dd4:	0040      	lsleq	r0, r0, #1
 8008dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008dda:	3a01      	subeq	r2, #1
 8008ddc:	d0f9      	beq.n	8008dd2 <__aeabi_fmul+0xce>
 8008dde:	ea40 000c 	orr.w	r0, r0, ip
 8008de2:	f093 0f00 	teq	r3, #0
 8008de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008dea:	bf02      	ittt	eq
 8008dec:	0049      	lsleq	r1, r1, #1
 8008dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008df2:	3b01      	subeq	r3, #1
 8008df4:	d0f9      	beq.n	8008dea <__aeabi_fmul+0xe6>
 8008df6:	ea41 010c 	orr.w	r1, r1, ip
 8008dfa:	e78f      	b.n	8008d1c <__aeabi_fmul+0x18>
 8008dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008e00:	ea92 0f0c 	teq	r2, ip
 8008e04:	bf18      	it	ne
 8008e06:	ea93 0f0c 	teqne	r3, ip
 8008e0a:	d00a      	beq.n	8008e22 <__aeabi_fmul+0x11e>
 8008e0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008e10:	bf18      	it	ne
 8008e12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008e16:	d1d8      	bne.n	8008dca <__aeabi_fmul+0xc6>
 8008e18:	ea80 0001 	eor.w	r0, r0, r1
 8008e1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008e20:	4770      	bx	lr
 8008e22:	f090 0f00 	teq	r0, #0
 8008e26:	bf17      	itett	ne
 8008e28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8008e2c:	4608      	moveq	r0, r1
 8008e2e:	f091 0f00 	teqne	r1, #0
 8008e32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8008e36:	d014      	beq.n	8008e62 <__aeabi_fmul+0x15e>
 8008e38:	ea92 0f0c 	teq	r2, ip
 8008e3c:	d101      	bne.n	8008e42 <__aeabi_fmul+0x13e>
 8008e3e:	0242      	lsls	r2, r0, #9
 8008e40:	d10f      	bne.n	8008e62 <__aeabi_fmul+0x15e>
 8008e42:	ea93 0f0c 	teq	r3, ip
 8008e46:	d103      	bne.n	8008e50 <__aeabi_fmul+0x14c>
 8008e48:	024b      	lsls	r3, r1, #9
 8008e4a:	bf18      	it	ne
 8008e4c:	4608      	movne	r0, r1
 8008e4e:	d108      	bne.n	8008e62 <__aeabi_fmul+0x15e>
 8008e50:	ea80 0001 	eor.w	r0, r0, r1
 8008e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008e58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008e5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008e60:	4770      	bx	lr
 8008e62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008e66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8008e6a:	4770      	bx	lr

08008e6c <__aeabi_fdiv>:
 8008e6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8008e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8008e74:	bf1e      	ittt	ne
 8008e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8008e7a:	ea92 0f0c 	teqne	r2, ip
 8008e7e:	ea93 0f0c 	teqne	r3, ip
 8008e82:	d069      	beq.n	8008f58 <__aeabi_fdiv+0xec>
 8008e84:	eba2 0203 	sub.w	r2, r2, r3
 8008e88:	ea80 0c01 	eor.w	ip, r0, r1
 8008e8c:	0249      	lsls	r1, r1, #9
 8008e8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8008e92:	d037      	beq.n	8008f04 <__aeabi_fdiv+0x98>
 8008e94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8008e9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8008ea0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8008ea4:	428b      	cmp	r3, r1
 8008ea6:	bf38      	it	cc
 8008ea8:	005b      	lslcc	r3, r3, #1
 8008eaa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8008eae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8008eb2:	428b      	cmp	r3, r1
 8008eb4:	bf24      	itt	cs
 8008eb6:	1a5b      	subcs	r3, r3, r1
 8008eb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8008ebc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8008ec0:	bf24      	itt	cs
 8008ec2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8008ec6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008eca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8008ece:	bf24      	itt	cs
 8008ed0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8008ed4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008ed8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8008edc:	bf24      	itt	cs
 8008ede:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8008ee2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008ee6:	011b      	lsls	r3, r3, #4
 8008ee8:	bf18      	it	ne
 8008eea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8008eee:	d1e0      	bne.n	8008eb2 <__aeabi_fdiv+0x46>
 8008ef0:	2afd      	cmp	r2, #253	; 0xfd
 8008ef2:	f63f af50 	bhi.w	8008d96 <__aeabi_fmul+0x92>
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8008efc:	bf08      	it	eq
 8008efe:	f020 0001 	biceq.w	r0, r0, #1
 8008f02:	4770      	bx	lr
 8008f04:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8008f08:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8008f0c:	327f      	adds	r2, #127	; 0x7f
 8008f0e:	bfc2      	ittt	gt
 8008f10:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8008f14:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8008f18:	4770      	bxgt	lr
 8008f1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008f1e:	f04f 0300 	mov.w	r3, #0
 8008f22:	3a01      	subs	r2, #1
 8008f24:	e737      	b.n	8008d96 <__aeabi_fmul+0x92>
 8008f26:	f092 0f00 	teq	r2, #0
 8008f2a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8008f2e:	bf02      	ittt	eq
 8008f30:	0040      	lsleq	r0, r0, #1
 8008f32:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8008f36:	3a01      	subeq	r2, #1
 8008f38:	d0f9      	beq.n	8008f2e <__aeabi_fdiv+0xc2>
 8008f3a:	ea40 000c 	orr.w	r0, r0, ip
 8008f3e:	f093 0f00 	teq	r3, #0
 8008f42:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008f46:	bf02      	ittt	eq
 8008f48:	0049      	lsleq	r1, r1, #1
 8008f4a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8008f4e:	3b01      	subeq	r3, #1
 8008f50:	d0f9      	beq.n	8008f46 <__aeabi_fdiv+0xda>
 8008f52:	ea41 010c 	orr.w	r1, r1, ip
 8008f56:	e795      	b.n	8008e84 <__aeabi_fdiv+0x18>
 8008f58:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8008f5c:	ea92 0f0c 	teq	r2, ip
 8008f60:	d108      	bne.n	8008f74 <__aeabi_fdiv+0x108>
 8008f62:	0242      	lsls	r2, r0, #9
 8008f64:	f47f af7d 	bne.w	8008e62 <__aeabi_fmul+0x15e>
 8008f68:	ea93 0f0c 	teq	r3, ip
 8008f6c:	f47f af70 	bne.w	8008e50 <__aeabi_fmul+0x14c>
 8008f70:	4608      	mov	r0, r1
 8008f72:	e776      	b.n	8008e62 <__aeabi_fmul+0x15e>
 8008f74:	ea93 0f0c 	teq	r3, ip
 8008f78:	d104      	bne.n	8008f84 <__aeabi_fdiv+0x118>
 8008f7a:	024b      	lsls	r3, r1, #9
 8008f7c:	f43f af4c 	beq.w	8008e18 <__aeabi_fmul+0x114>
 8008f80:	4608      	mov	r0, r1
 8008f82:	e76e      	b.n	8008e62 <__aeabi_fmul+0x15e>
 8008f84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8008f88:	bf18      	it	ne
 8008f8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8008f8e:	d1ca      	bne.n	8008f26 <__aeabi_fdiv+0xba>
 8008f90:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8008f94:	f47f af5c 	bne.w	8008e50 <__aeabi_fmul+0x14c>
 8008f98:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8008f9c:	f47f af3c 	bne.w	8008e18 <__aeabi_fmul+0x114>
 8008fa0:	e75f      	b.n	8008e62 <__aeabi_fmul+0x15e>
 8008fa2:	bf00      	nop

08008fa4 <__gesf2>:
 8008fa4:	f04f 3cff 	mov.w	ip, #4294967295
 8008fa8:	e006      	b.n	8008fb8 <__cmpsf2+0x4>
 8008faa:	bf00      	nop

08008fac <__lesf2>:
 8008fac:	f04f 0c01 	mov.w	ip, #1
 8008fb0:	e002      	b.n	8008fb8 <__cmpsf2+0x4>
 8008fb2:	bf00      	nop

08008fb4 <__cmpsf2>:
 8008fb4:	f04f 0c01 	mov.w	ip, #1
 8008fb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008fbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8008fc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8008fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008fc8:	bf18      	it	ne
 8008fca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8008fce:	d011      	beq.n	8008ff4 <__cmpsf2+0x40>
 8008fd0:	b001      	add	sp, #4
 8008fd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8008fd6:	bf18      	it	ne
 8008fd8:	ea90 0f01 	teqne	r0, r1
 8008fdc:	bf58      	it	pl
 8008fde:	ebb2 0003 	subspl.w	r0, r2, r3
 8008fe2:	bf88      	it	hi
 8008fe4:	17c8      	asrhi	r0, r1, #31
 8008fe6:	bf38      	it	cc
 8008fe8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8008fec:	bf18      	it	ne
 8008fee:	f040 0001 	orrne.w	r0, r0, #1
 8008ff2:	4770      	bx	lr
 8008ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8008ff8:	d102      	bne.n	8009000 <__cmpsf2+0x4c>
 8008ffa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8008ffe:	d105      	bne.n	800900c <__cmpsf2+0x58>
 8009000:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8009004:	d1e4      	bne.n	8008fd0 <__cmpsf2+0x1c>
 8009006:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800900a:	d0e1      	beq.n	8008fd0 <__cmpsf2+0x1c>
 800900c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop

08009014 <__aeabi_cfrcmple>:
 8009014:	4684      	mov	ip, r0
 8009016:	4608      	mov	r0, r1
 8009018:	4661      	mov	r1, ip
 800901a:	e7ff      	b.n	800901c <__aeabi_cfcmpeq>

0800901c <__aeabi_cfcmpeq>:
 800901c:	b50f      	push	{r0, r1, r2, r3, lr}
 800901e:	f7ff ffc9 	bl	8008fb4 <__cmpsf2>
 8009022:	2800      	cmp	r0, #0
 8009024:	bf48      	it	mi
 8009026:	f110 0f00 	cmnmi.w	r0, #0
 800902a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800902c <__aeabi_fcmpeq>:
 800902c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009030:	f7ff fff4 	bl	800901c <__aeabi_cfcmpeq>
 8009034:	bf0c      	ite	eq
 8009036:	2001      	moveq	r0, #1
 8009038:	2000      	movne	r0, #0
 800903a:	f85d fb08 	ldr.w	pc, [sp], #8
 800903e:	bf00      	nop

08009040 <__aeabi_fcmplt>:
 8009040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009044:	f7ff ffea 	bl	800901c <__aeabi_cfcmpeq>
 8009048:	bf34      	ite	cc
 800904a:	2001      	movcc	r0, #1
 800904c:	2000      	movcs	r0, #0
 800904e:	f85d fb08 	ldr.w	pc, [sp], #8
 8009052:	bf00      	nop

08009054 <__aeabi_fcmple>:
 8009054:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009058:	f7ff ffe0 	bl	800901c <__aeabi_cfcmpeq>
 800905c:	bf94      	ite	ls
 800905e:	2001      	movls	r0, #1
 8009060:	2000      	movhi	r0, #0
 8009062:	f85d fb08 	ldr.w	pc, [sp], #8
 8009066:	bf00      	nop

08009068 <__aeabi_fcmpge>:
 8009068:	f84d ed08 	str.w	lr, [sp, #-8]!
 800906c:	f7ff ffd2 	bl	8009014 <__aeabi_cfrcmple>
 8009070:	bf94      	ite	ls
 8009072:	2001      	movls	r0, #1
 8009074:	2000      	movhi	r0, #0
 8009076:	f85d fb08 	ldr.w	pc, [sp], #8
 800907a:	bf00      	nop

0800907c <__aeabi_fcmpgt>:
 800907c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8009080:	f7ff ffc8 	bl	8009014 <__aeabi_cfrcmple>
 8009084:	bf34      	ite	cc
 8009086:	2001      	movcc	r0, #1
 8009088:	2000      	movcs	r0, #0
 800908a:	f85d fb08 	ldr.w	pc, [sp], #8
 800908e:	bf00      	nop

08009090 <__aeabi_f2iz>:
 8009090:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8009094:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8009098:	d30f      	bcc.n	80090ba <__aeabi_f2iz+0x2a>
 800909a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800909e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80090a2:	d90d      	bls.n	80090c0 <__aeabi_f2iz+0x30>
 80090a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80090a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80090b0:	fa23 f002 	lsr.w	r0, r3, r2
 80090b4:	bf18      	it	ne
 80090b6:	4240      	negne	r0, r0
 80090b8:	4770      	bx	lr
 80090ba:	f04f 0000 	mov.w	r0, #0
 80090be:	4770      	bx	lr
 80090c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80090c4:	d101      	bne.n	80090ca <__aeabi_f2iz+0x3a>
 80090c6:	0242      	lsls	r2, r0, #9
 80090c8:	d105      	bne.n	80090d6 <__aeabi_f2iz+0x46>
 80090ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80090ce:	bf08      	it	eq
 80090d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80090d4:	4770      	bx	lr
 80090d6:	f04f 0000 	mov.w	r0, #0
 80090da:	4770      	bx	lr

080090dc <__aeabi_f2uiz>:
 80090dc:	0042      	lsls	r2, r0, #1
 80090de:	d20e      	bcs.n	80090fe <__aeabi_f2uiz+0x22>
 80090e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80090e4:	d30b      	bcc.n	80090fe <__aeabi_f2uiz+0x22>
 80090e6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80090ea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80090ee:	d409      	bmi.n	8009104 <__aeabi_f2uiz+0x28>
 80090f0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80090f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80090f8:	fa23 f002 	lsr.w	r0, r3, r2
 80090fc:	4770      	bx	lr
 80090fe:	f04f 0000 	mov.w	r0, #0
 8009102:	4770      	bx	lr
 8009104:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8009108:	d101      	bne.n	800910e <__aeabi_f2uiz+0x32>
 800910a:	0242      	lsls	r2, r0, #9
 800910c:	d102      	bne.n	8009114 <__aeabi_f2uiz+0x38>
 800910e:	f04f 30ff 	mov.w	r0, #4294967295
 8009112:	4770      	bx	lr
 8009114:	f04f 0000 	mov.w	r0, #0
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop

0800911c <__aeabi_uldivmod>:
 800911c:	b94b      	cbnz	r3, 8009132 <__aeabi_uldivmod+0x16>
 800911e:	b942      	cbnz	r2, 8009132 <__aeabi_uldivmod+0x16>
 8009120:	2900      	cmp	r1, #0
 8009122:	bf08      	it	eq
 8009124:	2800      	cmpeq	r0, #0
 8009126:	d002      	beq.n	800912e <__aeabi_uldivmod+0x12>
 8009128:	f04f 31ff 	mov.w	r1, #4294967295
 800912c:	4608      	mov	r0, r1
 800912e:	f000 b83b 	b.w	80091a8 <__aeabi_idiv0>
 8009132:	b082      	sub	sp, #8
 8009134:	46ec      	mov	ip, sp
 8009136:	e92d 5000 	stmdb	sp!, {ip, lr}
 800913a:	f000 f81d 	bl	8009178 <__gnu_uldivmod_helper>
 800913e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009142:	b002      	add	sp, #8
 8009144:	bc0c      	pop	{r2, r3}
 8009146:	4770      	bx	lr

08009148 <__gnu_ldivmod_helper>:
 8009148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914c:	9c06      	ldr	r4, [sp, #24]
 800914e:	4615      	mov	r5, r2
 8009150:	4606      	mov	r6, r0
 8009152:	460f      	mov	r7, r1
 8009154:	4698      	mov	r8, r3
 8009156:	f000 f829 	bl	80091ac <__divdi3>
 800915a:	fb05 f301 	mul.w	r3, r5, r1
 800915e:	fb00 3808 	mla	r8, r0, r8, r3
 8009162:	fba5 2300 	umull	r2, r3, r5, r0
 8009166:	1ab2      	subs	r2, r6, r2
 8009168:	4443      	add	r3, r8
 800916a:	eb67 0303 	sbc.w	r3, r7, r3
 800916e:	e9c4 2300 	strd	r2, r3, [r4]
 8009172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009176:	bf00      	nop

08009178 <__gnu_uldivmod_helper>:
 8009178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800917c:	9c06      	ldr	r4, [sp, #24]
 800917e:	4690      	mov	r8, r2
 8009180:	4606      	mov	r6, r0
 8009182:	460f      	mov	r7, r1
 8009184:	461d      	mov	r5, r3
 8009186:	f000 f95f 	bl	8009448 <__udivdi3>
 800918a:	fb00 f505 	mul.w	r5, r0, r5
 800918e:	fba0 2308 	umull	r2, r3, r0, r8
 8009192:	fb08 5501 	mla	r5, r8, r1, r5
 8009196:	1ab2      	subs	r2, r6, r2
 8009198:	442b      	add	r3, r5
 800919a:	eb67 0303 	sbc.w	r3, r7, r3
 800919e:	e9c4 2300 	strd	r2, r3, [r4]
 80091a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a6:	bf00      	nop

080091a8 <__aeabi_idiv0>:
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop

080091ac <__divdi3>:
 80091ac:	2900      	cmp	r1, #0
 80091ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091b2:	f2c0 80a6 	blt.w	8009302 <__divdi3+0x156>
 80091b6:	2600      	movs	r6, #0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f2c0 809c 	blt.w	80092f6 <__divdi3+0x14a>
 80091be:	4688      	mov	r8, r1
 80091c0:	4694      	mov	ip, r2
 80091c2:	469e      	mov	lr, r3
 80091c4:	4615      	mov	r5, r2
 80091c6:	4604      	mov	r4, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d13d      	bne.n	800924a <__divdi3+0x9e>
 80091ce:	428a      	cmp	r2, r1
 80091d0:	d959      	bls.n	8009286 <__divdi3+0xda>
 80091d2:	fab2 f382 	clz	r3, r2
 80091d6:	b13b      	cbz	r3, 80091e8 <__divdi3+0x3c>
 80091d8:	f1c3 0220 	rsb	r2, r3, #32
 80091dc:	409f      	lsls	r7, r3
 80091de:	fa20 f202 	lsr.w	r2, r0, r2
 80091e2:	409d      	lsls	r5, r3
 80091e4:	4317      	orrs	r7, r2
 80091e6:	409c      	lsls	r4, r3
 80091e8:	0c29      	lsrs	r1, r5, #16
 80091ea:	0c22      	lsrs	r2, r4, #16
 80091ec:	fbb7 fef1 	udiv	lr, r7, r1
 80091f0:	b2a8      	uxth	r0, r5
 80091f2:	fb01 771e 	mls	r7, r1, lr, r7
 80091f6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80091fa:	fb00 f30e 	mul.w	r3, r0, lr
 80091fe:	42bb      	cmp	r3, r7
 8009200:	d90a      	bls.n	8009218 <__divdi3+0x6c>
 8009202:	197f      	adds	r7, r7, r5
 8009204:	f10e 32ff 	add.w	r2, lr, #4294967295
 8009208:	f080 8105 	bcs.w	8009416 <__divdi3+0x26a>
 800920c:	42bb      	cmp	r3, r7
 800920e:	f240 8102 	bls.w	8009416 <__divdi3+0x26a>
 8009212:	f1ae 0e02 	sub.w	lr, lr, #2
 8009216:	442f      	add	r7, r5
 8009218:	1aff      	subs	r7, r7, r3
 800921a:	b2a4      	uxth	r4, r4
 800921c:	fbb7 f3f1 	udiv	r3, r7, r1
 8009220:	fb01 7713 	mls	r7, r1, r3, r7
 8009224:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009228:	fb00 f003 	mul.w	r0, r0, r3
 800922c:	42b8      	cmp	r0, r7
 800922e:	d908      	bls.n	8009242 <__divdi3+0x96>
 8009230:	197f      	adds	r7, r7, r5
 8009232:	f103 32ff 	add.w	r2, r3, #4294967295
 8009236:	f080 80f0 	bcs.w	800941a <__divdi3+0x26e>
 800923a:	42b8      	cmp	r0, r7
 800923c:	f240 80ed 	bls.w	800941a <__divdi3+0x26e>
 8009240:	3b02      	subs	r3, #2
 8009242:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8009246:	2200      	movs	r2, #0
 8009248:	e003      	b.n	8009252 <__divdi3+0xa6>
 800924a:	428b      	cmp	r3, r1
 800924c:	d90f      	bls.n	800926e <__divdi3+0xc2>
 800924e:	2200      	movs	r2, #0
 8009250:	4613      	mov	r3, r2
 8009252:	1c34      	adds	r4, r6, #0
 8009254:	bf18      	it	ne
 8009256:	2401      	movne	r4, #1
 8009258:	4260      	negs	r0, r4
 800925a:	f04f 0500 	mov.w	r5, #0
 800925e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8009262:	4058      	eors	r0, r3
 8009264:	4051      	eors	r1, r2
 8009266:	1900      	adds	r0, r0, r4
 8009268:	4169      	adcs	r1, r5
 800926a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800926e:	fab3 f283 	clz	r2, r3
 8009272:	2a00      	cmp	r2, #0
 8009274:	f040 8086 	bne.w	8009384 <__divdi3+0x1d8>
 8009278:	428b      	cmp	r3, r1
 800927a:	d302      	bcc.n	8009282 <__divdi3+0xd6>
 800927c:	4584      	cmp	ip, r0
 800927e:	f200 80db 	bhi.w	8009438 <__divdi3+0x28c>
 8009282:	2301      	movs	r3, #1
 8009284:	e7e5      	b.n	8009252 <__divdi3+0xa6>
 8009286:	b912      	cbnz	r2, 800928e <__divdi3+0xe2>
 8009288:	2301      	movs	r3, #1
 800928a:	fbb3 f5f2 	udiv	r5, r3, r2
 800928e:	fab5 f085 	clz	r0, r5
 8009292:	2800      	cmp	r0, #0
 8009294:	d13b      	bne.n	800930e <__divdi3+0x162>
 8009296:	1b78      	subs	r0, r7, r5
 8009298:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800929c:	fa1f fc85 	uxth.w	ip, r5
 80092a0:	2201      	movs	r2, #1
 80092a2:	fbb0 f8fe 	udiv	r8, r0, lr
 80092a6:	0c21      	lsrs	r1, r4, #16
 80092a8:	fb0e 0718 	mls	r7, lr, r8, r0
 80092ac:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 80092b0:	fb0c f308 	mul.w	r3, ip, r8
 80092b4:	42bb      	cmp	r3, r7
 80092b6:	d907      	bls.n	80092c8 <__divdi3+0x11c>
 80092b8:	197f      	adds	r7, r7, r5
 80092ba:	f108 31ff 	add.w	r1, r8, #4294967295
 80092be:	d202      	bcs.n	80092c6 <__divdi3+0x11a>
 80092c0:	42bb      	cmp	r3, r7
 80092c2:	f200 80bd 	bhi.w	8009440 <__divdi3+0x294>
 80092c6:	4688      	mov	r8, r1
 80092c8:	1aff      	subs	r7, r7, r3
 80092ca:	b2a4      	uxth	r4, r4
 80092cc:	fbb7 f3fe 	udiv	r3, r7, lr
 80092d0:	fb0e 7713 	mls	r7, lr, r3, r7
 80092d4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80092d8:	fb0c fc03 	mul.w	ip, ip, r3
 80092dc:	45bc      	cmp	ip, r7
 80092de:	d907      	bls.n	80092f0 <__divdi3+0x144>
 80092e0:	197f      	adds	r7, r7, r5
 80092e2:	f103 31ff 	add.w	r1, r3, #4294967295
 80092e6:	d202      	bcs.n	80092ee <__divdi3+0x142>
 80092e8:	45bc      	cmp	ip, r7
 80092ea:	f200 80a7 	bhi.w	800943c <__divdi3+0x290>
 80092ee:	460b      	mov	r3, r1
 80092f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80092f4:	e7ad      	b.n	8009252 <__divdi3+0xa6>
 80092f6:	4252      	negs	r2, r2
 80092f8:	ea6f 0606 	mvn.w	r6, r6
 80092fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8009300:	e75d      	b.n	80091be <__divdi3+0x12>
 8009302:	4240      	negs	r0, r0
 8009304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8009308:	f04f 36ff 	mov.w	r6, #4294967295
 800930c:	e754      	b.n	80091b8 <__divdi3+0xc>
 800930e:	f1c0 0220 	rsb	r2, r0, #32
 8009312:	fa24 f102 	lsr.w	r1, r4, r2
 8009316:	fa07 f300 	lsl.w	r3, r7, r0
 800931a:	4085      	lsls	r5, r0
 800931c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009320:	40d7      	lsrs	r7, r2
 8009322:	4319      	orrs	r1, r3
 8009324:	fbb7 f2fe 	udiv	r2, r7, lr
 8009328:	0c0b      	lsrs	r3, r1, #16
 800932a:	fb0e 7712 	mls	r7, lr, r2, r7
 800932e:	fa1f fc85 	uxth.w	ip, r5
 8009332:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009336:	fb0c f702 	mul.w	r7, ip, r2
 800933a:	429f      	cmp	r7, r3
 800933c:	fa04 f400 	lsl.w	r4, r4, r0
 8009340:	d907      	bls.n	8009352 <__divdi3+0x1a6>
 8009342:	195b      	adds	r3, r3, r5
 8009344:	f102 30ff 	add.w	r0, r2, #4294967295
 8009348:	d274      	bcs.n	8009434 <__divdi3+0x288>
 800934a:	429f      	cmp	r7, r3
 800934c:	d972      	bls.n	8009434 <__divdi3+0x288>
 800934e:	3a02      	subs	r2, #2
 8009350:	442b      	add	r3, r5
 8009352:	1bdf      	subs	r7, r3, r7
 8009354:	b289      	uxth	r1, r1
 8009356:	fbb7 f8fe 	udiv	r8, r7, lr
 800935a:	fb0e 7318 	mls	r3, lr, r8, r7
 800935e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009362:	fb0c f708 	mul.w	r7, ip, r8
 8009366:	429f      	cmp	r7, r3
 8009368:	d908      	bls.n	800937c <__divdi3+0x1d0>
 800936a:	195b      	adds	r3, r3, r5
 800936c:	f108 31ff 	add.w	r1, r8, #4294967295
 8009370:	d25c      	bcs.n	800942c <__divdi3+0x280>
 8009372:	429f      	cmp	r7, r3
 8009374:	d95a      	bls.n	800942c <__divdi3+0x280>
 8009376:	f1a8 0802 	sub.w	r8, r8, #2
 800937a:	442b      	add	r3, r5
 800937c:	1bd8      	subs	r0, r3, r7
 800937e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8009382:	e78e      	b.n	80092a2 <__divdi3+0xf6>
 8009384:	f1c2 0320 	rsb	r3, r2, #32
 8009388:	fa2c f103 	lsr.w	r1, ip, r3
 800938c:	fa0e fe02 	lsl.w	lr, lr, r2
 8009390:	fa20 f703 	lsr.w	r7, r0, r3
 8009394:	ea41 0e0e 	orr.w	lr, r1, lr
 8009398:	fa08 f002 	lsl.w	r0, r8, r2
 800939c:	fa28 f103 	lsr.w	r1, r8, r3
 80093a0:	ea4f 451e 	mov.w	r5, lr, lsr #16
 80093a4:	4338      	orrs	r0, r7
 80093a6:	fbb1 f8f5 	udiv	r8, r1, r5
 80093aa:	0c03      	lsrs	r3, r0, #16
 80093ac:	fb05 1118 	mls	r1, r5, r8, r1
 80093b0:	fa1f f78e 	uxth.w	r7, lr
 80093b4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80093b8:	fb07 f308 	mul.w	r3, r7, r8
 80093bc:	428b      	cmp	r3, r1
 80093be:	fa0c fc02 	lsl.w	ip, ip, r2
 80093c2:	d909      	bls.n	80093d8 <__divdi3+0x22c>
 80093c4:	eb11 010e 	adds.w	r1, r1, lr
 80093c8:	f108 39ff 	add.w	r9, r8, #4294967295
 80093cc:	d230      	bcs.n	8009430 <__divdi3+0x284>
 80093ce:	428b      	cmp	r3, r1
 80093d0:	d92e      	bls.n	8009430 <__divdi3+0x284>
 80093d2:	f1a8 0802 	sub.w	r8, r8, #2
 80093d6:	4471      	add	r1, lr
 80093d8:	1ac9      	subs	r1, r1, r3
 80093da:	b280      	uxth	r0, r0
 80093dc:	fbb1 f3f5 	udiv	r3, r1, r5
 80093e0:	fb05 1113 	mls	r1, r5, r3, r1
 80093e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80093e8:	fb07 f703 	mul.w	r7, r7, r3
 80093ec:	428f      	cmp	r7, r1
 80093ee:	d908      	bls.n	8009402 <__divdi3+0x256>
 80093f0:	eb11 010e 	adds.w	r1, r1, lr
 80093f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80093f8:	d216      	bcs.n	8009428 <__divdi3+0x27c>
 80093fa:	428f      	cmp	r7, r1
 80093fc:	d914      	bls.n	8009428 <__divdi3+0x27c>
 80093fe:	3b02      	subs	r3, #2
 8009400:	4471      	add	r1, lr
 8009402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8009406:	1bc9      	subs	r1, r1, r7
 8009408:	fba3 890c 	umull	r8, r9, r3, ip
 800940c:	4549      	cmp	r1, r9
 800940e:	d309      	bcc.n	8009424 <__divdi3+0x278>
 8009410:	d005      	beq.n	800941e <__divdi3+0x272>
 8009412:	2200      	movs	r2, #0
 8009414:	e71d      	b.n	8009252 <__divdi3+0xa6>
 8009416:	4696      	mov	lr, r2
 8009418:	e6fe      	b.n	8009218 <__divdi3+0x6c>
 800941a:	4613      	mov	r3, r2
 800941c:	e711      	b.n	8009242 <__divdi3+0x96>
 800941e:	4094      	lsls	r4, r2
 8009420:	4544      	cmp	r4, r8
 8009422:	d2f6      	bcs.n	8009412 <__divdi3+0x266>
 8009424:	3b01      	subs	r3, #1
 8009426:	e7f4      	b.n	8009412 <__divdi3+0x266>
 8009428:	4603      	mov	r3, r0
 800942a:	e7ea      	b.n	8009402 <__divdi3+0x256>
 800942c:	4688      	mov	r8, r1
 800942e:	e7a5      	b.n	800937c <__divdi3+0x1d0>
 8009430:	46c8      	mov	r8, r9
 8009432:	e7d1      	b.n	80093d8 <__divdi3+0x22c>
 8009434:	4602      	mov	r2, r0
 8009436:	e78c      	b.n	8009352 <__divdi3+0x1a6>
 8009438:	4613      	mov	r3, r2
 800943a:	e70a      	b.n	8009252 <__divdi3+0xa6>
 800943c:	3b02      	subs	r3, #2
 800943e:	e757      	b.n	80092f0 <__divdi3+0x144>
 8009440:	f1a8 0802 	sub.w	r8, r8, #2
 8009444:	442f      	add	r7, r5
 8009446:	e73f      	b.n	80092c8 <__divdi3+0x11c>

08009448 <__udivdi3>:
 8009448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944c:	2b00      	cmp	r3, #0
 800944e:	d144      	bne.n	80094da <__udivdi3+0x92>
 8009450:	428a      	cmp	r2, r1
 8009452:	4615      	mov	r5, r2
 8009454:	4604      	mov	r4, r0
 8009456:	d94f      	bls.n	80094f8 <__udivdi3+0xb0>
 8009458:	fab2 f782 	clz	r7, r2
 800945c:	460e      	mov	r6, r1
 800945e:	b14f      	cbz	r7, 8009474 <__udivdi3+0x2c>
 8009460:	f1c7 0320 	rsb	r3, r7, #32
 8009464:	40b9      	lsls	r1, r7
 8009466:	fa20 f603 	lsr.w	r6, r0, r3
 800946a:	fa02 f507 	lsl.w	r5, r2, r7
 800946e:	430e      	orrs	r6, r1
 8009470:	fa00 f407 	lsl.w	r4, r0, r7
 8009474:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009478:	0c23      	lsrs	r3, r4, #16
 800947a:	fbb6 f0fe 	udiv	r0, r6, lr
 800947e:	b2af      	uxth	r7, r5
 8009480:	fb0e 6110 	mls	r1, lr, r0, r6
 8009484:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009488:	fb07 f100 	mul.w	r1, r7, r0
 800948c:	4299      	cmp	r1, r3
 800948e:	d909      	bls.n	80094a4 <__udivdi3+0x5c>
 8009490:	195b      	adds	r3, r3, r5
 8009492:	f100 32ff 	add.w	r2, r0, #4294967295
 8009496:	f080 80ec 	bcs.w	8009672 <__udivdi3+0x22a>
 800949a:	4299      	cmp	r1, r3
 800949c:	f240 80e9 	bls.w	8009672 <__udivdi3+0x22a>
 80094a0:	3802      	subs	r0, #2
 80094a2:	442b      	add	r3, r5
 80094a4:	1a5a      	subs	r2, r3, r1
 80094a6:	b2a4      	uxth	r4, r4
 80094a8:	fbb2 f3fe 	udiv	r3, r2, lr
 80094ac:	fb0e 2213 	mls	r2, lr, r3, r2
 80094b0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80094b4:	fb07 f703 	mul.w	r7, r7, r3
 80094b8:	4297      	cmp	r7, r2
 80094ba:	d908      	bls.n	80094ce <__udivdi3+0x86>
 80094bc:	1952      	adds	r2, r2, r5
 80094be:	f103 31ff 	add.w	r1, r3, #4294967295
 80094c2:	f080 80d8 	bcs.w	8009676 <__udivdi3+0x22e>
 80094c6:	4297      	cmp	r7, r2
 80094c8:	f240 80d5 	bls.w	8009676 <__udivdi3+0x22e>
 80094cc:	3b02      	subs	r3, #2
 80094ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80094d2:	2600      	movs	r6, #0
 80094d4:	4631      	mov	r1, r6
 80094d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094da:	428b      	cmp	r3, r1
 80094dc:	d847      	bhi.n	800956e <__udivdi3+0x126>
 80094de:	fab3 f683 	clz	r6, r3
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	d148      	bne.n	8009578 <__udivdi3+0x130>
 80094e6:	428b      	cmp	r3, r1
 80094e8:	d302      	bcc.n	80094f0 <__udivdi3+0xa8>
 80094ea:	4282      	cmp	r2, r0
 80094ec:	f200 80cd 	bhi.w	800968a <__udivdi3+0x242>
 80094f0:	2001      	movs	r0, #1
 80094f2:	4631      	mov	r1, r6
 80094f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094f8:	b912      	cbnz	r2, 8009500 <__udivdi3+0xb8>
 80094fa:	2501      	movs	r5, #1
 80094fc:	fbb5 f5f2 	udiv	r5, r5, r2
 8009500:	fab5 f885 	clz	r8, r5
 8009504:	f1b8 0f00 	cmp.w	r8, #0
 8009508:	d177      	bne.n	80095fa <__udivdi3+0x1b2>
 800950a:	1b4a      	subs	r2, r1, r5
 800950c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009510:	b2af      	uxth	r7, r5
 8009512:	2601      	movs	r6, #1
 8009514:	fbb2 f0fe 	udiv	r0, r2, lr
 8009518:	0c23      	lsrs	r3, r4, #16
 800951a:	fb0e 2110 	mls	r1, lr, r0, r2
 800951e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8009522:	fb07 f300 	mul.w	r3, r7, r0
 8009526:	428b      	cmp	r3, r1
 8009528:	d907      	bls.n	800953a <__udivdi3+0xf2>
 800952a:	1949      	adds	r1, r1, r5
 800952c:	f100 32ff 	add.w	r2, r0, #4294967295
 8009530:	d202      	bcs.n	8009538 <__udivdi3+0xf0>
 8009532:	428b      	cmp	r3, r1
 8009534:	f200 80ba 	bhi.w	80096ac <__udivdi3+0x264>
 8009538:	4610      	mov	r0, r2
 800953a:	1ac9      	subs	r1, r1, r3
 800953c:	b2a4      	uxth	r4, r4
 800953e:	fbb1 f3fe 	udiv	r3, r1, lr
 8009542:	fb0e 1113 	mls	r1, lr, r3, r1
 8009546:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800954a:	fb07 f703 	mul.w	r7, r7, r3
 800954e:	42a7      	cmp	r7, r4
 8009550:	d908      	bls.n	8009564 <__udivdi3+0x11c>
 8009552:	1964      	adds	r4, r4, r5
 8009554:	f103 32ff 	add.w	r2, r3, #4294967295
 8009558:	f080 808f 	bcs.w	800967a <__udivdi3+0x232>
 800955c:	42a7      	cmp	r7, r4
 800955e:	f240 808c 	bls.w	800967a <__udivdi3+0x232>
 8009562:	3b02      	subs	r3, #2
 8009564:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8009568:	4631      	mov	r1, r6
 800956a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800956e:	2600      	movs	r6, #0
 8009570:	4630      	mov	r0, r6
 8009572:	4631      	mov	r1, r6
 8009574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009578:	f1c6 0420 	rsb	r4, r6, #32
 800957c:	fa22 f504 	lsr.w	r5, r2, r4
 8009580:	40b3      	lsls	r3, r6
 8009582:	432b      	orrs	r3, r5
 8009584:	fa20 fc04 	lsr.w	ip, r0, r4
 8009588:	fa01 f706 	lsl.w	r7, r1, r6
 800958c:	fa21 f504 	lsr.w	r5, r1, r4
 8009590:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009594:	ea4c 0707 	orr.w	r7, ip, r7
 8009598:	fbb5 f8fe 	udiv	r8, r5, lr
 800959c:	0c39      	lsrs	r1, r7, #16
 800959e:	fb0e 5518 	mls	r5, lr, r8, r5
 80095a2:	fa1f fc83 	uxth.w	ip, r3
 80095a6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80095aa:	fb0c f108 	mul.w	r1, ip, r8
 80095ae:	42a9      	cmp	r1, r5
 80095b0:	fa02 f206 	lsl.w	r2, r2, r6
 80095b4:	d904      	bls.n	80095c0 <__udivdi3+0x178>
 80095b6:	18ed      	adds	r5, r5, r3
 80095b8:	f108 34ff 	add.w	r4, r8, #4294967295
 80095bc:	d367      	bcc.n	800968e <__udivdi3+0x246>
 80095be:	46a0      	mov	r8, r4
 80095c0:	1a6d      	subs	r5, r5, r1
 80095c2:	b2bf      	uxth	r7, r7
 80095c4:	fbb5 f4fe 	udiv	r4, r5, lr
 80095c8:	fb0e 5514 	mls	r5, lr, r4, r5
 80095cc:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80095d0:	fb0c fc04 	mul.w	ip, ip, r4
 80095d4:	458c      	cmp	ip, r1
 80095d6:	d904      	bls.n	80095e2 <__udivdi3+0x19a>
 80095d8:	18c9      	adds	r1, r1, r3
 80095da:	f104 35ff 	add.w	r5, r4, #4294967295
 80095de:	d35c      	bcc.n	800969a <__udivdi3+0x252>
 80095e0:	462c      	mov	r4, r5
 80095e2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80095e6:	ebcc 0101 	rsb	r1, ip, r1
 80095ea:	fba4 2302 	umull	r2, r3, r4, r2
 80095ee:	4299      	cmp	r1, r3
 80095f0:	d348      	bcc.n	8009684 <__udivdi3+0x23c>
 80095f2:	d044      	beq.n	800967e <__udivdi3+0x236>
 80095f4:	4620      	mov	r0, r4
 80095f6:	2600      	movs	r6, #0
 80095f8:	e76c      	b.n	80094d4 <__udivdi3+0x8c>
 80095fa:	f1c8 0420 	rsb	r4, r8, #32
 80095fe:	fa01 f308 	lsl.w	r3, r1, r8
 8009602:	fa05 f508 	lsl.w	r5, r5, r8
 8009606:	fa20 f704 	lsr.w	r7, r0, r4
 800960a:	40e1      	lsrs	r1, r4
 800960c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8009610:	431f      	orrs	r7, r3
 8009612:	fbb1 f6fe 	udiv	r6, r1, lr
 8009616:	0c3a      	lsrs	r2, r7, #16
 8009618:	fb0e 1116 	mls	r1, lr, r6, r1
 800961c:	fa1f fc85 	uxth.w	ip, r5
 8009620:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8009624:	fb0c f206 	mul.w	r2, ip, r6
 8009628:	429a      	cmp	r2, r3
 800962a:	fa00 f408 	lsl.w	r4, r0, r8
 800962e:	d907      	bls.n	8009640 <__udivdi3+0x1f8>
 8009630:	195b      	adds	r3, r3, r5
 8009632:	f106 31ff 	add.w	r1, r6, #4294967295
 8009636:	d237      	bcs.n	80096a8 <__udivdi3+0x260>
 8009638:	429a      	cmp	r2, r3
 800963a:	d935      	bls.n	80096a8 <__udivdi3+0x260>
 800963c:	3e02      	subs	r6, #2
 800963e:	442b      	add	r3, r5
 8009640:	1a9b      	subs	r3, r3, r2
 8009642:	b2bf      	uxth	r7, r7
 8009644:	fbb3 f0fe 	udiv	r0, r3, lr
 8009648:	fb0e 3310 	mls	r3, lr, r0, r3
 800964c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009650:	fb0c f100 	mul.w	r1, ip, r0
 8009654:	4299      	cmp	r1, r3
 8009656:	d907      	bls.n	8009668 <__udivdi3+0x220>
 8009658:	195b      	adds	r3, r3, r5
 800965a:	f100 32ff 	add.w	r2, r0, #4294967295
 800965e:	d221      	bcs.n	80096a4 <__udivdi3+0x25c>
 8009660:	4299      	cmp	r1, r3
 8009662:	d91f      	bls.n	80096a4 <__udivdi3+0x25c>
 8009664:	3802      	subs	r0, #2
 8009666:	442b      	add	r3, r5
 8009668:	1a5a      	subs	r2, r3, r1
 800966a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800966e:	4667      	mov	r7, ip
 8009670:	e750      	b.n	8009514 <__udivdi3+0xcc>
 8009672:	4610      	mov	r0, r2
 8009674:	e716      	b.n	80094a4 <__udivdi3+0x5c>
 8009676:	460b      	mov	r3, r1
 8009678:	e729      	b.n	80094ce <__udivdi3+0x86>
 800967a:	4613      	mov	r3, r2
 800967c:	e772      	b.n	8009564 <__udivdi3+0x11c>
 800967e:	40b0      	lsls	r0, r6
 8009680:	4290      	cmp	r0, r2
 8009682:	d2b7      	bcs.n	80095f4 <__udivdi3+0x1ac>
 8009684:	1e60      	subs	r0, r4, #1
 8009686:	2600      	movs	r6, #0
 8009688:	e724      	b.n	80094d4 <__udivdi3+0x8c>
 800968a:	4630      	mov	r0, r6
 800968c:	e722      	b.n	80094d4 <__udivdi3+0x8c>
 800968e:	42a9      	cmp	r1, r5
 8009690:	d995      	bls.n	80095be <__udivdi3+0x176>
 8009692:	f1a8 0802 	sub.w	r8, r8, #2
 8009696:	441d      	add	r5, r3
 8009698:	e792      	b.n	80095c0 <__udivdi3+0x178>
 800969a:	458c      	cmp	ip, r1
 800969c:	d9a0      	bls.n	80095e0 <__udivdi3+0x198>
 800969e:	3c02      	subs	r4, #2
 80096a0:	4419      	add	r1, r3
 80096a2:	e79e      	b.n	80095e2 <__udivdi3+0x19a>
 80096a4:	4610      	mov	r0, r2
 80096a6:	e7df      	b.n	8009668 <__udivdi3+0x220>
 80096a8:	460e      	mov	r6, r1
 80096aa:	e7c9      	b.n	8009640 <__udivdi3+0x1f8>
 80096ac:	3802      	subs	r0, #2
 80096ae:	4429      	add	r1, r5
 80096b0:	e743      	b.n	800953a <__udivdi3+0xf2>
 80096b2:	bf00      	nop

080096b4 <__errno>:
 80096b4:	4b01      	ldr	r3, [pc, #4]	; (80096bc <__errno+0x8>)
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	1fffcd94 	.word	0x1fffcd94

080096c0 <__libc_init_array>:
 80096c0:	b570      	push	{r4, r5, r6, lr}
 80096c2:	4b0e      	ldr	r3, [pc, #56]	; (80096fc <__libc_init_array+0x3c>)
 80096c4:	4c0e      	ldr	r4, [pc, #56]	; (8009700 <__libc_init_array+0x40>)
 80096c6:	1ae4      	subs	r4, r4, r3
 80096c8:	10a4      	asrs	r4, r4, #2
 80096ca:	2500      	movs	r5, #0
 80096cc:	461e      	mov	r6, r3
 80096ce:	42a5      	cmp	r5, r4
 80096d0:	d004      	beq.n	80096dc <__libc_init_array+0x1c>
 80096d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096d6:	4798      	blx	r3
 80096d8:	3501      	adds	r5, #1
 80096da:	e7f8      	b.n	80096ce <__libc_init_array+0xe>
 80096dc:	f7f9 f964 	bl	80029a8 <_init>
 80096e0:	4c08      	ldr	r4, [pc, #32]	; (8009704 <__libc_init_array+0x44>)
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <__libc_init_array+0x48>)
 80096e4:	1ae4      	subs	r4, r4, r3
 80096e6:	10a4      	asrs	r4, r4, #2
 80096e8:	2500      	movs	r5, #0
 80096ea:	461e      	mov	r6, r3
 80096ec:	42a5      	cmp	r5, r4
 80096ee:	d004      	beq.n	80096fa <__libc_init_array+0x3a>
 80096f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80096f4:	4798      	blx	r3
 80096f6:	3501      	adds	r5, #1
 80096f8:	e7f8      	b.n	80096ec <__libc_init_array+0x2c>
 80096fa:	bd70      	pop	{r4, r5, r6, pc}
 80096fc:	08009748 	.word	0x08009748
 8009700:	08009748 	.word	0x08009748
 8009704:	08009748 	.word	0x08009748
 8009708:	08009748 	.word	0x08009748

0800970c <memcpy>:
 800970c:	b510      	push	{r4, lr}
 800970e:	1e43      	subs	r3, r0, #1
 8009710:	440a      	add	r2, r1
 8009712:	4291      	cmp	r1, r2
 8009714:	d004      	beq.n	8009720 <memcpy+0x14>
 8009716:	f811 4b01 	ldrb.w	r4, [r1], #1
 800971a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800971e:	e7f8      	b.n	8009712 <memcpy+0x6>
 8009720:	bd10      	pop	{r4, pc}
 8009722:	0000      	movs	r0, r0
 8009724:	0000      	movs	r0, r0
	...

08009728 <__do_rfft_i_veneer>:
 8009728:	b401      	push	{r0}
 800972a:	4802      	ldr	r0, [pc, #8]	; (8009734 <__do_rfft_i_veneer+0xc>)
 800972c:	4684      	mov	ip, r0
 800972e:	bc01      	pop	{r0}
 8009730:	4760      	bx	ip
 8009732:	bf00      	nop
 8009734:	1fffc801 	.word	0x1fffc801

08009738 <__do_rfft_q_veneer>:
 8009738:	b401      	push	{r0}
 800973a:	4802      	ldr	r0, [pc, #8]	; (8009744 <__do_rfft_q_veneer+0xc>)
 800973c:	4684      	mov	ip, r0
 800973e:	bc01      	pop	{r0}
 8009740:	4760      	bx	ip
 8009742:	bf00      	nop
 8009744:	1fffc8c5 	.word	0x1fffc8c5

Disassembly of section .ram_code:

1fffc800 <do_rfft_i>:
//  The Hanning window is then applied to the time domain buffer.
//  This buffer then is converted to frequency domain with the FFT.
//
//
void do_rfft_i(uint16_t * pDataBuf)
{
1fffc800:	b580      	push	{r7, lr}
1fffc802:	b084      	sub	sp, #16
1fffc804:	af00      	add	r7, sp, #0
1fffc806:	6078      	str	r0, [r7, #4]
	uint32_t idx =0;
1fffc808:	2300      	movs	r3, #0
1fffc80a:	60fb      	str	r3, [r7, #12]
	float32_t i_mean = 0;
1fffc80c:	f04f 0300 	mov.w	r3, #0
1fffc810:	60bb      	str	r3, [r7, #8]

	for (idx=0; idx<NUM_SAMPLES; idx++)
1fffc812:	2300      	movs	r3, #0
1fffc814:	60fb      	str	r3, [r7, #12]
1fffc816:	e01a      	b.n	1fffc84e <do_rfft_i+0x4e>
		ifi_adc_measurements[idx] = (float32_t)pDataBuf[idx]*3.3f/4095.0f;
1fffc818:	68fb      	ldr	r3, [r7, #12]
1fffc81a:	005b      	lsls	r3, r3, #1
1fffc81c:	687a      	ldr	r2, [r7, #4]
1fffc81e:	4413      	add	r3, r2
1fffc820:	881b      	ldrh	r3, [r3, #0]
1fffc822:	4618      	mov	r0, r3
1fffc824:	f000 f8b4 	bl	1fffc990 <____aeabi_ui2f_veneer>
1fffc828:	4603      	mov	r3, r0
1fffc82a:	4618      	mov	r0, r3
1fffc82c:	491e      	ldr	r1, [pc, #120]	; (1fffc8a8 <__initial_sp+0xa8>)
1fffc82e:	f000 f8d7 	bl	1fffc9e0 <____aeabi_fmul_veneer>
1fffc832:	4603      	mov	r3, r0
1fffc834:	4618      	mov	r0, r3
1fffc836:	491d      	ldr	r1, [pc, #116]	; (1fffc8ac <__initial_sp+0xac>)
1fffc838:	f000 f8c2 	bl	1fffc9c0 <____aeabi_fdiv_veneer>
1fffc83c:	4603      	mov	r3, r0
1fffc83e:	4619      	mov	r1, r3
1fffc840:	4a1b      	ldr	r2, [pc, #108]	; (1fffc8b0 <__initial_sp+0xb0>)
1fffc842:	68fb      	ldr	r3, [r7, #12]
1fffc844:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
void do_rfft_i(uint16_t * pDataBuf)
{
	uint32_t idx =0;
	float32_t i_mean = 0;

	for (idx=0; idx<NUM_SAMPLES; idx++)
1fffc848:	68fb      	ldr	r3, [r7, #12]
1fffc84a:	3301      	adds	r3, #1
1fffc84c:	60fb      	str	r3, [r7, #12]
1fffc84e:	68fb      	ldr	r3, [r7, #12]
1fffc850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1fffc854:	d3e0      	bcc.n	1fffc818 <do_rfft_i+0x18>
		ifi_adc_measurements[idx] = (float32_t)pDataBuf[idx]*3.3f/4095.0f;

	arm_mean_f32(ifi_adc_measurements, NUM_SAMPLES, &i_mean); 						//Finds the mean
1fffc856:	f107 0308 	add.w	r3, r7, #8
1fffc85a:	4815      	ldr	r0, [pc, #84]	; (1fffc8b0 <__initial_sp+0xb0>)
1fffc85c:	f44f 7100 	mov.w	r1, #512	; 0x200
1fffc860:	461a      	mov	r2, r3
1fffc862:	f000 f89d 	bl	1fffc9a0 <__arm_mean_f32_veneer>
	arm_offset_f32(ifi_adc_measurements, -i_mean, i_adc_measurements, NUM_SAMPLES);  	//kills the offset
1fffc866:	68bb      	ldr	r3, [r7, #8]
1fffc868:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
1fffc86c:	4810      	ldr	r0, [pc, #64]	; (1fffc8b0 <__initial_sp+0xb0>)
1fffc86e:	4619      	mov	r1, r3
1fffc870:	4a10      	ldr	r2, [pc, #64]	; (1fffc8b4 <__initial_sp+0xb4>)
1fffc872:	f44f 7300 	mov.w	r3, #512	; 0x200
1fffc876:	f000 f8ab 	bl	1fffc9d0 <__arm_offset_f32_veneer>

	arm_mult_f32(i_adc_measurements, hanning_window, i_adc_measurements, NUM_SAMPLES); 	//apply a hanning window
1fffc87a:	480e      	ldr	r0, [pc, #56]	; (1fffc8b4 <__initial_sp+0xb4>)
1fffc87c:	490e      	ldr	r1, [pc, #56]	; (1fffc8b8 <__initial_sp+0xb8>)
1fffc87e:	4a0d      	ldr	r2, [pc, #52]	; (1fffc8b4 <__initial_sp+0xb4>)
1fffc880:	f44f 7300 	mov.w	r3, #512	; 0x200
1fffc884:	f000 f8b4 	bl	1fffc9f0 <__arm_mult_f32_veneer>

	arm_rfft_fast_f32(&i_fftStructure, i_adc_measurements, i_fftResult, INVERT_FFT); 	//performs fft
1fffc888:	480c      	ldr	r0, [pc, #48]	; (1fffc8bc <__initial_sp+0xbc>)
1fffc88a:	490a      	ldr	r1, [pc, #40]	; (1fffc8b4 <__initial_sp+0xb4>)
1fffc88c:	4a0c      	ldr	r2, [pc, #48]	; (1fffc8c0 <__initial_sp+0xc0>)
1fffc88e:	2300      	movs	r3, #0
1fffc890:	f000 f8b6 	bl	1fffca00 <__arm_rfft_fast_f32_veneer>

	arm_cmplx_mag_f32(i_fftResult, i_fftResult, NUM_SAMPLES);  // convert to real magnitude data
1fffc894:	480a      	ldr	r0, [pc, #40]	; (1fffc8c0 <__initial_sp+0xc0>)
1fffc896:	490a      	ldr	r1, [pc, #40]	; (1fffc8c0 <__initial_sp+0xc0>)
1fffc898:	f44f 7200 	mov.w	r2, #512	; 0x200
1fffc89c:	f000 f888 	bl	1fffc9b0 <__arm_cmplx_mag_f32_veneer>

}  // end of do_rfft_i()
1fffc8a0:	3710      	adds	r7, #16
1fffc8a2:	46bd      	mov	sp, r7
1fffc8a4:	bd80      	pop	{r7, pc}
1fffc8a6:	bf00      	nop
1fffc8a8:	40533333 	.word	0x40533333
1fffc8ac:	457ff000 	.word	0x457ff000
1fffc8b0:	1fffd60c 	.word	0x1fffd60c
1fffc8b4:	20001210 	.word	0x20001210
1fffc8b8:	1fffe60c 	.word	0x1fffe60c
1fffc8bc:	1fffcdf0 	.word	0x1fffcdf0
1fffc8c0:	1ffff610 	.word	0x1ffff610

1fffc8c4 <do_rfft_q>:
//  The Hanning window is then applied to the time domain buffer.
//  This buffer then is converted to frequency domain with the FFT.
//
//
void do_rfft_q(uint16_t * pDataBuf)
{
1fffc8c4:	b590      	push	{r4, r7, lr}
1fffc8c6:	b085      	sub	sp, #20
1fffc8c8:	af00      	add	r7, sp, #0
1fffc8ca:	6078      	str	r0, [r7, #4]
	uint32_t idx =0;
1fffc8cc:	2300      	movs	r3, #0
1fffc8ce:	60fb      	str	r3, [r7, #12]
	float32_t i_mean = 0;   // mean
1fffc8d0:	f04f 0300 	mov.w	r3, #0
1fffc8d4:	60bb      	str	r3, [r7, #8]

	for (idx=0; idx<NUM_SAMPLES; idx++)
1fffc8d6:	2300      	movs	r3, #0
1fffc8d8:	60fb      	str	r3, [r7, #12]
1fffc8da:	e01b      	b.n	1fffc914 <do_rfft_q+0x50>
		ifq_adc_measurements[idx] = (float32_t)pDataBuf[idx]*3.3f/4095.0f;
1fffc8dc:	4b25      	ldr	r3, [pc, #148]	; (1fffc974 <do_rfft_q+0xb0>)
1fffc8de:	681a      	ldr	r2, [r3, #0]
1fffc8e0:	68fb      	ldr	r3, [r7, #12]
1fffc8e2:	009b      	lsls	r3, r3, #2
1fffc8e4:	18d4      	adds	r4, r2, r3
1fffc8e6:	68fb      	ldr	r3, [r7, #12]
1fffc8e8:	005b      	lsls	r3, r3, #1
1fffc8ea:	687a      	ldr	r2, [r7, #4]
1fffc8ec:	4413      	add	r3, r2
1fffc8ee:	881b      	ldrh	r3, [r3, #0]
1fffc8f0:	4618      	mov	r0, r3
1fffc8f2:	f000 f84d 	bl	1fffc990 <____aeabi_ui2f_veneer>
1fffc8f6:	4603      	mov	r3, r0
1fffc8f8:	4618      	mov	r0, r3
1fffc8fa:	491f      	ldr	r1, [pc, #124]	; (1fffc978 <do_rfft_q+0xb4>)
1fffc8fc:	f000 f870 	bl	1fffc9e0 <____aeabi_fmul_veneer>
1fffc900:	4603      	mov	r3, r0
1fffc902:	4618      	mov	r0, r3
1fffc904:	491d      	ldr	r1, [pc, #116]	; (1fffc97c <do_rfft_q+0xb8>)
1fffc906:	f000 f85b 	bl	1fffc9c0 <____aeabi_fdiv_veneer>
1fffc90a:	4603      	mov	r3, r0
1fffc90c:	6023      	str	r3, [r4, #0]
void do_rfft_q(uint16_t * pDataBuf)
{
	uint32_t idx =0;
	float32_t i_mean = 0;   // mean

	for (idx=0; idx<NUM_SAMPLES; idx++)
1fffc90e:	68fb      	ldr	r3, [r7, #12]
1fffc910:	3301      	adds	r3, #1
1fffc912:	60fb      	str	r3, [r7, #12]
1fffc914:	68fb      	ldr	r3, [r7, #12]
1fffc916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1fffc91a:	d3df      	bcc.n	1fffc8dc <do_rfft_q+0x18>
		ifq_adc_measurements[idx] = (float32_t)pDataBuf[idx]*3.3f/4095.0f;

	arm_mean_f32(ifq_adc_measurements, NUM_SAMPLES, &i_mean); //Finds the mean
1fffc91c:	4b15      	ldr	r3, [pc, #84]	; (1fffc974 <do_rfft_q+0xb0>)
1fffc91e:	681a      	ldr	r2, [r3, #0]
1fffc920:	f107 0308 	add.w	r3, r7, #8
1fffc924:	4610      	mov	r0, r2
1fffc926:	f44f 7100 	mov.w	r1, #512	; 0x200
1fffc92a:	461a      	mov	r2, r3
1fffc92c:	f000 f838 	bl	1fffc9a0 <__arm_mean_f32_veneer>
	arm_offset_f32(ifq_adc_measurements, -i_mean, q_adc_measurements, NUM_SAMPLES);  //kills the offset
1fffc930:	4b10      	ldr	r3, [pc, #64]	; (1fffc974 <do_rfft_q+0xb0>)
1fffc932:	681a      	ldr	r2, [r3, #0]
1fffc934:	68bb      	ldr	r3, [r7, #8]
1fffc936:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
1fffc93a:	4610      	mov	r0, r2
1fffc93c:	4619      	mov	r1, r3
1fffc93e:	4a10      	ldr	r2, [pc, #64]	; (1fffc980 <do_rfft_q+0xbc>)
1fffc940:	f44f 7300 	mov.w	r3, #512	; 0x200
1fffc944:	f000 f844 	bl	1fffc9d0 <__arm_offset_f32_veneer>

	arm_mult_f32(q_adc_measurements, hanning_window, q_adc_measurements, NUM_SAMPLES); //apply a hanning window
1fffc948:	480d      	ldr	r0, [pc, #52]	; (1fffc980 <do_rfft_q+0xbc>)
1fffc94a:	490e      	ldr	r1, [pc, #56]	; (1fffc984 <do_rfft_q+0xc0>)
1fffc94c:	4a0c      	ldr	r2, [pc, #48]	; (1fffc980 <do_rfft_q+0xbc>)
1fffc94e:	f44f 7300 	mov.w	r3, #512	; 0x200
1fffc952:	f000 f84d 	bl	1fffc9f0 <__arm_mult_f32_veneer>

	arm_rfft_fast_f32(&i_fftStructure, q_adc_measurements, q_fftResult, INVERT_FFT); //performs fft
1fffc956:	480c      	ldr	r0, [pc, #48]	; (1fffc988 <do_rfft_q+0xc4>)
1fffc958:	4909      	ldr	r1, [pc, #36]	; (1fffc980 <do_rfft_q+0xbc>)
1fffc95a:	4a0c      	ldr	r2, [pc, #48]	; (1fffc98c <do_rfft_q+0xc8>)
1fffc95c:	2300      	movs	r3, #0
1fffc95e:	f000 f84f 	bl	1fffca00 <__arm_rfft_fast_f32_veneer>

	arm_cmplx_mag_f32(q_fftResult, q_fftResult, NUM_SAMPLES);  // convert to real magnitude data
1fffc962:	480a      	ldr	r0, [pc, #40]	; (1fffc98c <do_rfft_q+0xc8>)
1fffc964:	4909      	ldr	r1, [pc, #36]	; (1fffc98c <do_rfft_q+0xc8>)
1fffc966:	f44f 7200 	mov.w	r2, #512	; 0x200
1fffc96a:	f000 f821 	bl	1fffc9b0 <__arm_cmplx_mag_f32_veneer>

}  // end of do_rfft_q()
1fffc96e:	3714      	adds	r7, #20
1fffc970:	46bd      	mov	sp, r7
1fffc972:	bd90      	pop	{r4, r7, pc}
1fffc974:	1fffcd04 	.word	0x1fffcd04
1fffc978:	40533333 	.word	0x40533333
1fffc97c:	457ff000 	.word	0x457ff000
1fffc980:	20000610 	.word	0x20000610
1fffc984:	1fffe60c 	.word	0x1fffe60c
1fffc988:	1fffcdf0 	.word	0x1fffcdf0
1fffc98c:	1fffee10 	.word	0x1fffee10

1fffc990 <____aeabi_ui2f_veneer>:
1fffc990:	b401      	push	{r0}
1fffc992:	4802      	ldr	r0, [pc, #8]	; (1fffc99c <____aeabi_ui2f_veneer+0xc>)
1fffc994:	4684      	mov	ip, r0
1fffc996:	bc01      	pop	{r0}
1fffc998:	4760      	bx	ip
1fffc99a:	bf00      	nop
1fffc99c:	08008c55 	.word	0x08008c55

1fffc9a0 <__arm_mean_f32_veneer>:
1fffc9a0:	b401      	push	{r0}
1fffc9a2:	4802      	ldr	r0, [pc, #8]	; (1fffc9ac <__arm_mean_f32_veneer+0xc>)
1fffc9a4:	4684      	mov	ip, r0
1fffc9a6:	bc01      	pop	{r0}
1fffc9a8:	4760      	bx	ip
1fffc9aa:	bf00      	nop
1fffc9ac:	08006e5d 	.word	0x08006e5d

1fffc9b0 <__arm_cmplx_mag_f32_veneer>:
1fffc9b0:	b401      	push	{r0}
1fffc9b2:	4802      	ldr	r0, [pc, #8]	; (1fffc9bc <__arm_cmplx_mag_f32_veneer+0xc>)
1fffc9b4:	4684      	mov	ip, r0
1fffc9b6:	bc01      	pop	{r0}
1fffc9b8:	4760      	bx	ip
1fffc9ba:	bf00      	nop
1fffc9bc:	08007045 	.word	0x08007045

1fffc9c0 <____aeabi_fdiv_veneer>:
1fffc9c0:	b401      	push	{r0}
1fffc9c2:	4802      	ldr	r0, [pc, #8]	; (1fffc9cc <____aeabi_fdiv_veneer+0xc>)
1fffc9c4:	4684      	mov	ip, r0
1fffc9c6:	bc01      	pop	{r0}
1fffc9c8:	4760      	bx	ip
1fffc9ca:	bf00      	nop
1fffc9cc:	08008e6d 	.word	0x08008e6d

1fffc9d0 <__arm_offset_f32_veneer>:
1fffc9d0:	b401      	push	{r0}
1fffc9d2:	4802      	ldr	r0, [pc, #8]	; (1fffc9dc <__arm_offset_f32_veneer+0xc>)
1fffc9d4:	4684      	mov	ip, r0
1fffc9d6:	bc01      	pop	{r0}
1fffc9d8:	4760      	bx	ip
1fffc9da:	bf00      	nop
1fffc9dc:	080072c9 	.word	0x080072c9

1fffc9e0 <____aeabi_fmul_veneer>:
1fffc9e0:	b401      	push	{r0}
1fffc9e2:	4802      	ldr	r0, [pc, #8]	; (1fffc9ec <____aeabi_fmul_veneer+0xc>)
1fffc9e4:	4684      	mov	ip, r0
1fffc9e6:	bc01      	pop	{r0}
1fffc9e8:	4760      	bx	ip
1fffc9ea:	bf00      	nop
1fffc9ec:	08008d05 	.word	0x08008d05

1fffc9f0 <__arm_mult_f32_veneer>:
1fffc9f0:	b401      	push	{r0}
1fffc9f2:	4802      	ldr	r0, [pc, #8]	; (1fffc9fc <__arm_mult_f32_veneer+0xc>)
1fffc9f4:	4684      	mov	ip, r0
1fffc9f6:	bc01      	pop	{r0}
1fffc9f8:	4760      	bx	ip
1fffc9fa:	bf00      	nop
1fffc9fc:	080071d9 	.word	0x080071d9

1fffca00 <__arm_rfft_fast_f32_veneer>:
1fffca00:	b401      	push	{r0}
1fffca02:	4802      	ldr	r0, [pc, #8]	; (1fffca0c <__arm_rfft_fast_f32_veneer+0xc>)
1fffca04:	4684      	mov	ip, r0
1fffca06:	bc01      	pop	{r0}
1fffca08:	4760      	bx	ip
1fffca0a:	bf00      	nop
1fffca0c:	08006b41 	.word	0x08006b41
