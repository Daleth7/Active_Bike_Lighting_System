package Model.APPS.INTERRUPT.v4_0_4;

/*************** Revision History **********************************************
 Version      Date          Description //Retain this format

  4.0.0       16-Feb-2015   Initial version for DAVE v4
  4.0.1       20-Feb-2015   Documentation updated
  4.0.2       20-Apr-2015   XMC_ASSERT statements added in all CMSIS Wrapper APIs
  4.0.4       26-Jun-2015   Updated the APP description
*******************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

import java.util.regex.Matcher
import java.util.regex.Pattern
class  INTERRUPT extends INTERRUPT_GUI {

	// Note  : INTERRUPT properties are mandatory and important
	// Begin : INTERRUPT property section
	def version = '4.0.4'
	
	def categoriesDescription = ["System"]
	
	// Minimum DAVE version required for the App
	def minDaveVersion = '4.0.0'
	
	// Keywords to search in Apps selection view
	def keywords = [
		"NVIC",
        "ISR",
		"interrupt",
		"all"
	]
	
	def softwareIDs  = [
		"XMC4.*.*.*.*":"1.0.0",
		"XMC1.*.*.*.*":"1.0.0"
	]

	def singleton     = false
	def initProvider  = true
	def deprecated    = false
	def sharable      = false
	def ioApp         = false

	def description = "Allows to overwrite the provided interrupt service routine (ISR) in system file \n and sets the interrupt priority"
	
	// End   : INTERRUPT property section
	
	// Begin : User variable section
		
	MRequiredApp appres_cpu
	MVirtualResourceGroup hwres_nvicnode
	MVirtualSignal vs_nvic_signal_in

	// End   : User variable section

	public INTERRUPT(DaveEnv daveEnv) {
		
		String family = daveEnv.project.selectedDevice.deviceId.family
		String fn_regexp = ~/^[^\d\W]\w*\Z/
		
		if(family == "XMC4")
		{
			appres_cpu =  MRequiredApp("CPU_CTRL_XMC4", "CPU", RSHARABLE,"4.0.2")
		}
		else if(family == "XMC1") 
		{
			ginterruptprio_priority.subPriorityVisible = false
			appres_cpu =  MRequiredApp("CPU_CTRL_XMC1", "CPU", RSHARABLE,"4.0.2")
		}

		/* assign the virtual resource group for nvic node */
		hwres_nvicnode = MVirtualResourceGroup("NVIC Node", ["peripheral", "cpu", "0", "nvic", "interrupt", "*"])

		/* assign the virtual resource group to virtual signal along with the signal */
		vs_nvic_signal_in = MVirtualSignal(hwres_nvicnode, "sr_irq", "signal_in")

		/* Warn if the isr name is not a valid name */
		gmessage_valid_isr_name.visible = MF({
			Matcher matcher = (gstring_handler.value =~ fn_regexp)
			Boolean ExpressionMatch = !matcher.matches()
			return ExpressionMatch
		}, Boolean)
		
		/* Set default priority value as 63 for XMC4 devices */
		if(family == "XMC4")
		{
			ginterruptprio_priority.priorityValue = 63
		}
		/* Set default priority value as 3 for XMC1 devices */
		else if(family == "XMC1")
		{
			ginterruptprio_priority.priorityValue = 3
			ginterruptprio_priority.subPriorityVisible = false
		}

		/* Read the maximum priority value from CPU APP */
		ginterruptprio_priority.maxPriority = MF({
			Integer Priority = appres_cpu.getVal(["gint_maxInterruptPreemptPriority", "value"]) as Integer
			return Priority
		}, Integer)
		
		/* Read maximum sub priority value from CPU APP. It is applicable only for XMC4 devices */
		if(family == "XMC4")
		{
			ginterruptprio_priority.subPriorityValue = 0
			ginterruptprio_priority.maxSubPriority =  MF({
				Integer SubPriority = appres_cpu.getVal(["gint_maxInterruptSubPriority", "value"]) as Integer
				return SubPriority
			}, Integer)
		}
	}
	
	// File Generation
	def generateFiles(){
		copy("interrupt.c", "interrupt.c")
		copy("interrupt.h", "interrupt.h")
		generate("interrupt_confc.tmpl", "interrupt_conf.c")
		generate("interrupt_confh.tmpl", "interrupt_conf.h")
		generate("interrupt_externh.tmpl", "interrupt_extern.h")
	}
	
}
