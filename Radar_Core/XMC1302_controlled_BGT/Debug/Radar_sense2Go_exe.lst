
Radar_sense2Go_exe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023e8  10001000  10001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  100033e8  100033e8  000033e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .VENEER_Code  00000138  2000000c  100033f0  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 Stack         00000404  20000144  00000000  00000144  2**0
                  ALLOC
  4 .data         00000310  20000548  10003528  00008548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00001af0  20000858  10003838  00008858  2**2
                  ALLOC
  6 .no_init      00000004  20003ffc  10006fdc  00008858  2**2
                  ALLOC
  7 .debug_aranges 00000b88  00000000  00000000  00008858  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00019ea3  00000000  00000000  000093e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003d21  00000000  00000000  00023283  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00006fe7  00000000  00000000  00026fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001bc0  00000000  00000000  0002df8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00008505  00000000  00000000  0002fb4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007217  00000000  00000000  00038051  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000f38  00000000  00000000  0003f268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .build_attributes 0000084a  00000000  00000000  000401a0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

10001000 <__Vectors>:
10001000:	48 05 00 20 19 10 00 10 00 00 00 00 99 10 00 10     H.. ............
10001010:	00 04 01 00 00 01 00 00                             ........

10001018 <Reset_Handler>:
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001018:	4911      	ldr	r1, [pc, #68]	; (10001060 <__copy_data+0xe>)
	ldr	r2, =VeneerStart
1000101a:	4a12      	ldr	r2, [pc, #72]	; (10001064 <__copy_data+0x12>)
	ldr	r3, =VeneerEnd
1000101c:	4b12      	ldr	r3, [pc, #72]	; (10001068 <__copy_data+0x16>)
	bl  __copy_data
1000101e:	f000 f818 	bl	10001052 <__copy_data>

    ldr  r0, =SystemInit
10001022:	4812      	ldr	r0, [pc, #72]	; (1000106c <__copy_data+0x1a>)
    blx  r0
10001024:	4780      	blx	r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001026:	4912      	ldr	r1, [pc, #72]	; (10001070 <__copy_data+0x1e>)
	ldr	r2, =__data_start
10001028:	4a12      	ldr	r2, [pc, #72]	; (10001074 <__copy_data+0x22>)
	ldr	r3, =__data_end
1000102a:	4b13      	ldr	r3, [pc, #76]	; (10001078 <__copy_data+0x26>)
	bl  __copy_data
1000102c:	f000 f811 	bl	10001052 <__copy_data>

/* RAM code */
	ldr	r1, =__ram_code_load
10001030:	4912      	ldr	r1, [pc, #72]	; (1000107c <__copy_data+0x2a>)
	ldr	r2, =__ram_code_start
10001032:	4a13      	ldr	r2, [pc, #76]	; (10001080 <__copy_data+0x2e>)
	ldr	r3, =__ram_code_end
10001034:	4b13      	ldr	r3, [pc, #76]	; (10001084 <__copy_data+0x32>)
	bl  __copy_data
10001036:	f000 f80c 	bl	10001052 <__copy_data>
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
1000103a:	4913      	ldr	r1, [pc, #76]	; (10001088 <__copy_data+0x36>)
	ldr	r2, =__bss_end
1000103c:	4a13      	ldr	r2, [pc, #76]	; (1000108c <__copy_data+0x3a>)

	movs	r0, 0
1000103e:	2000      	movs	r0, #0

	subs	r2, r1
10001040:	1a52      	subs	r2, r2, r1
	ble	.L_loop3_done
10001042:	dd02      	ble.n	1000104a <Reset_Handler+0x32>

.L_loop3:
	subs	r2, #4
10001044:	3a04      	subs	r2, #4
	str	r0, [r1, r2]
10001046:	5088      	str	r0, [r1, r2]
	bgt	.L_loop3
10001048:	dcfc      	bgt.n	10001044 <Reset_Handler+0x2c>
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
1000104a:	4811      	ldr	r0, [pc, #68]	; (10001090 <__copy_data+0x3e>)
    blx  r0
1000104c:	4780      	blx	r0
#endif

    ldr  r0, =main
1000104e:	4811      	ldr	r0, [pc, #68]	; (10001094 <__copy_data+0x42>)
    blx  r0
10001050:	4780      	blx	r0

10001052 <__copy_data>:
 *    r3: end of the section to copy to
 *
 *  All addresses must be aligned to 4 bytes boundary.
 *  Uses r0
 */
	subs	r3, r2
10001052:	1a9b      	subs	r3, r3, r2
	ble	.L_loop_done
10001054:	dd03      	ble.n	1000105e <__copy_data+0xc>

.L_loop:
	subs	r3, #4
10001056:	3b04      	subs	r3, #4
	ldr	r0, [r1,r3]
10001058:	58c8      	ldr	r0, [r1, r3]
	str	r0, [r2,r3]
1000105a:	50d0      	str	r0, [r2, r3]
	bgt	.L_loop
1000105c:	dcfb      	bgt.n	10001056 <__copy_data+0x4>

.L_loop_done:
	bx  lr
1000105e:	4770      	bx	lr
    .thumb_func 
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler: 
/* Initialize interrupt veneer */
	ldr	r1, =eROData
10001060:	100033f0 	.word	0x100033f0
	ldr	r2, =VeneerStart
10001064:	2000000c 	.word	0x2000000c
	ldr	r3, =VeneerEnd
10001068:	20000144 	.word	0x20000144
	bl  __copy_data

    ldr  r0, =SystemInit
1000106c:	100010ed 	.word	0x100010ed
    blx  r0
	
/* Initialize data */
	ldr	r1, =DataLoadAddr
10001070:	10003528 	.word	0x10003528
	ldr	r2, =__data_start
10001074:	20000548 	.word	0x20000548
	ldr	r3, =__data_end
10001078:	20000858 	.word	0x20000858
	bl  __copy_data

/* RAM code */
	ldr	r1, =__ram_code_load
1000107c:	10003838 	.word	0x10003838
	ldr	r2, =__ram_code_start
10001080:	20000858 	.word	0x20000858
	ldr	r3, =__ram_code_end
10001084:	20000858 	.word	0x20000858
 *    __bss_end__: end of the BSS section.
 *
 *  Both addresses must be aligned to 4 bytes boundary.
 */
#ifndef __SKIP_BSS_CLEAR
	ldr	r1, =__bss_start
10001088:	20000858 	.word	0x20000858
	ldr	r2, =__bss_end
1000108c:	20002348 	.word	0x20002348
	bgt	.L_loop3
.L_loop3_done:
#endif /* __SKIP_BSS_CLEAR */

#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
10001090:	10003229 	.word	0x10003229
    blx  r0
#endif

    ldr  r0, =main
10001094:	10001fcd 	.word	0x10001fcd

10001098 <BCCU0_0_IRQHandler>:
    
    .thumb_func
    .weak Default_handler
    .type Default_handler, %function
Default_handler:
    b  .
10001098:	e7fe      	b.n	10001098 <BCCU0_0_IRQHandler>
	...

1000109c <SystemCoreClockUpdate>:

__WEAK void SystemCoreClockUpdate(void)
{
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000109c:	4a0d      	ldr	r2, [pc, #52]	; (100010d4 <SystemCoreClockUpdate+0x38>)

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
1000109e:	b508      	push	{r3, lr}
  static uint32_t IDIV, FDIV;

  IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
100010a0:	6813      	ldr	r3, [r2, #0]
100010a2:	490d      	ldr	r1, [pc, #52]	; (100010d8 <SystemCoreClockUpdate+0x3c>)
100010a4:	041b      	lsls	r3, r3, #16
100010a6:	0e1b      	lsrs	r3, r3, #24
100010a8:	600b      	str	r3, [r1, #0]
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
100010aa:	21ff      	movs	r1, #255	; 0xff
100010ac:	6812      	ldr	r2, [r2, #0]
100010ae:	4011      	ands	r1, r2
100010b0:	4a0a      	ldr	r2, [pc, #40]	; (100010dc <SystemCoreClockUpdate+0x40>)
100010b2:	6011      	str	r1, [r2, #0]
  
  if (IDIV != 0)
100010b4:	2b00      	cmp	r3, #0
100010b6:	d103      	bne.n	100010c0 <SystemCoreClockUpdate+0x24>
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
  }
  else
  {
    /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
    SystemCoreClock = DCO1_FREQUENCY >> 1U;
100010b8:	4a09      	ldr	r2, [pc, #36]	; (100010e0 <SystemCoreClockUpdate+0x44>)
100010ba:	4b0a      	ldr	r3, [pc, #40]	; (100010e4 <SystemCoreClockUpdate+0x48>)
100010bc:	601a      	str	r2, [r3, #0]
  }
}
100010be:	bd08      	pop	{r3, pc}
  FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
  
  if (IDIV != 0)
  {
    /* Fractional divider is enabled and used */
    SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
100010c0:	021b      	lsls	r3, r3, #8
100010c2:	1859      	adds	r1, r3, r1
100010c4:	4808      	ldr	r0, [pc, #32]	; (100010e8 <SystemCoreClockUpdate+0x4c>)
100010c6:	f000 f9f3 	bl	100014b0 <__aeabi_uidiv>
100010ca:	4b06      	ldr	r3, [pc, #24]	; (100010e4 <SystemCoreClockUpdate+0x48>)
100010cc:	0040      	lsls	r0, r0, #1
100010ce:	6018      	str	r0, [r3, #0]
100010d0:	e7f5      	b.n	100010be <SystemCoreClockUpdate+0x22>
100010d2:	46c0      	nop			; (mov r8, r8)
100010d4:	40010300 	.word	0x40010300
100010d8:	20000858 	.word	0x20000858
100010dc:	2000085c 	.word	0x2000085c
100010e0:	01e84800 	.word	0x01e84800
100010e4:	20003ffc 	.word	0x20003ffc
100010e8:	f4240000 	.word	0xf4240000

100010ec <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{    
100010ec:	b508      	push	{r3, lr}
  SystemCoreSetup();
100010ee:	f000 fddf 	bl	10001cb0 <SystemCoreSetup>
  SystemCoreClockSetup();
100010f2:	f000 fde7 	bl	10001cc4 <SystemCoreClockSetup>
}
100010f6:	bd08      	pop	{r3, pc}

100010f8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100010fa:	2403      	movs	r4, #3
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
100010fc:	4647      	mov	r7, r8
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
100010fe:	1c26      	adds	r6, r4, #0
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
10001100:	b480      	push	{r7}
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
10001102:	27f8      	movs	r7, #248	; 0xf8
10001104:	400e      	ands	r6, r1
10001106:	00f6      	lsls	r6, r6, #3
10001108:	40b7      	lsls	r7, r6
1000110a:	088b      	lsrs	r3, r1, #2
1000110c:	009b      	lsls	r3, r3, #2
1000110e:	18c3      	adds	r3, r0, r3
10001110:	691d      	ldr	r5, [r3, #16]
10001112:	46b0      	mov	r8, r6
10001114:	43bd      	bics	r5, r7

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001116:	004f      	lsls	r7, r1, #1
10001118:	40bc      	lsls	r4, r7
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));
  XMC_ASSERT("XMC_GPIO_Init: Invalid input hysteresis", XMC_GPIO_CHECK_INPUT_HYSTERESIS(config->input_hysteresis));
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
1000111a:	611d      	str	r5, [r3, #16]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000111c:	6f45      	ldr	r5, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
1000111e:	2604      	movs	r6, #4
  
  /* Switch to input */
  port->IOCR[pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001120:	43a5      	bics	r5, r4
10001122:	6745      	str	r5, [r0, #116]	; 0x74

  /* Set input hysteresis */
  port->PHCR[(uint32_t)pin >> 3U] &= ~(uint32_t)((uint32_t)PORT_PHCR_Msk << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U)));
10001124:	2507      	movs	r5, #7
10001126:	400d      	ands	r5, r1
10001128:	00ad      	lsls	r5, r5, #2
1000112a:	40ae      	lsls	r6, r5
1000112c:	08cc      	lsrs	r4, r1, #3
1000112e:	00a4      	lsls	r4, r4, #2
10001130:	1904      	adds	r4, r0, r4
10001132:	6c27      	ldr	r7, [r4, #64]	; 0x40
10001134:	43b7      	bics	r7, r6
10001136:	6427      	str	r7, [r4, #64]	; 0x40
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
10001138:	7856      	ldrb	r6, [r2, #1]
1000113a:	6c27      	ldr	r7, [r4, #64]	; 0x40
1000113c:	40ae      	lsls	r6, r5
1000113e:	1c35      	adds	r5, r6, #0
10001140:	433d      	orrs	r5, r7
10001142:	6425      	str	r5, [r4, #64]	; 0x40
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
10001144:	4c0a      	ldr	r4, [pc, #40]	; (10001170 <XMC_GPIO_Init+0x78>)
10001146:	42a0      	cmp	r0, r4
10001148:	d00c      	beq.n	10001164 <XMC_GPIO_Init+0x6c>
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
1000114a:	6854      	ldr	r4, [r2, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
1000114c:	7812      	ldrb	r2, [r2, #0]
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
  }
  /* Set output level */
  port->OMR = (uint32_t)config->output_level << pin;
1000114e:	408c      	lsls	r4, r1
10001150:	6044      	str	r4, [r0, #4]
  
  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << (PORT_IOCR_PC_Size * (pin & 0x3U));
10001152:	4640      	mov	r0, r8
10001154:	4082      	lsls	r2, r0
10001156:	1c16      	adds	r6, r2, #0
10001158:	6919      	ldr	r1, [r3, #16]
1000115a:	430e      	orrs	r6, r1
1000115c:	611e      	str	r6, [r3, #16]
}
1000115e:	bc04      	pop	{r2}
10001160:	4690      	mov	r8, r2
10001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
  port->PHCR[(uint32_t)pin >> 3U] |= (uint32_t)config->input_hysteresis << ((uint32_t)PORT_PHCR_Size * ((uint32_t)pin & 0x7U));
    
  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
  {    
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
10001164:	2501      	movs	r5, #1
10001166:	408d      	lsls	r5, r1
10001168:	6e04      	ldr	r4, [r0, #96]	; 0x60
1000116a:	43ac      	bics	r4, r5
1000116c:	6604      	str	r4, [r0, #96]	; 0x60
1000116e:	e7ec      	b.n	1000114a <XMC_GPIO_Init+0x52>
10001170:	40040200 	.word	0x40040200

10001174 <XMC_RTC_Init>:
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */ 
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
10001174:	4b15      	ldr	r3, [pc, #84]	; (100011cc <XMC_RTC_Init+0x58>)
 *********************************************************************************************************************/
/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
10001176:	b510      	push	{r4, lr}
10001178:	685b      	ldr	r3, [r3, #4]
  if (XMC_RTC_IsRunning() == false)
1000117a:	07db      	lsls	r3, r3, #31
1000117c:	d501      	bpl.n	10001182 <XMC_RTC_Init+0xe>
    }
    RTC->ATIM0 = config->alarm.raw0;	
    RTC->ATIM1 = config->alarm.raw1;    
  }
  return XMC_RTC_STATUS_OK;
}
1000117e:	2000      	movs	r0, #0
10001180:	bd10      	pop	{r4, pc}
10001182:	1c04      	adds	r4, r0, #0
/*
 * Checks RTC peripheral is enabled for programming to its registers
 */
bool XMC_RTC_IsEnabled(void)
{
  return !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_RTC);
10001184:	2080      	movs	r0, #128	; 0x80
10001186:	00c0      	lsls	r0, r0, #3
10001188:	f000 f858 	bl	1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
  if (XMC_RTC_IsRunning() == false)
  {
    if (XMC_RTC_IsEnabled() == false)
1000118c:	2800      	cmp	r0, #0
1000118e:	d117      	bne.n	100011c0 <XMC_RTC_Init+0x4c>
    {
      XMC_RTC_Enable();
	}
	
    XMC_RTC_SetPrescaler(config->prescaler);
10001190:	8a20      	ldrh	r0, [r4, #16]
10001192:	f000 f9c1 	bl	10001518 <XMC_RTC_SetPrescaler>

	while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk | SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk)) != 0U)
10001196:	2218      	movs	r2, #24
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
  return(SCU_GENERAL->MIRRSTS);
10001198:	490d      	ldr	r1, [pc, #52]	; (100011d0 <XMC_RTC_Init+0x5c>)
1000119a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
1000119c:	421a      	tst	r2, r3
1000119e:	d1fc      	bne.n	1000119a <XMC_RTC_Init+0x26>
	{
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
100011a0:	6822      	ldr	r2, [r4, #0]
100011a2:	4b0a      	ldr	r3, [pc, #40]	; (100011cc <XMC_RTC_Init+0x58>)
100011a4:	490a      	ldr	r1, [pc, #40]	; (100011d0 <XMC_RTC_Init+0x5c>)
100011a6:	621a      	str	r2, [r3, #32]
    RTC->TIM1 = config->time.raw1;
100011a8:	6862      	ldr	r2, [r4, #4]
100011aa:	625a      	str	r2, [r3, #36]	; 0x24
	
    while ((XMC_SCU_GetMirrorStatus() & (SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk | SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk)) != 0U)
100011ac:	2206      	movs	r2, #6
100011ae:	6c8b      	ldr	r3, [r1, #72]	; 0x48
100011b0:	421a      	tst	r2, r3
100011b2:	d1fc      	bne.n	100011ae <XMC_RTC_Init+0x3a>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;	
100011b4:	68a2      	ldr	r2, [r4, #8]
100011b6:	4b05      	ldr	r3, [pc, #20]	; (100011cc <XMC_RTC_Init+0x58>)
100011b8:	619a      	str	r2, [r3, #24]
    RTC->ATIM1 = config->alarm.raw1;    
100011ba:	68e2      	ldr	r2, [r4, #12]
100011bc:	61da      	str	r2, [r3, #28]
100011be:	e7de      	b.n	1000117e <XMC_RTC_Init+0xa>
/*
 * Ungates a clock node for RTC
 */ 
void XMC_RTC_Enable(void)
{
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_RTC);
100011c0:	2080      	movs	r0, #128	; 0x80
100011c2:	00c0      	lsls	r0, r0, #3
100011c4:	f000 f822 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
100011c8:	e7e2      	b.n	10001190 <XMC_RTC_Init+0x1c>
100011ca:	46c0      	nop			; (mov r8, r8)
100011cc:	40010a00 	.word	0x40010a00
100011d0:	40010000 	.word	0x40010000

100011d4 <XMC_RTC_EnableEvent>:
/*
 * Enable RTC periodic and alarm event(s)
 */ 
void XMC_RTC_EnableEvent(const uint32_t event)
{
  RTC->MSKSR |= event;
100011d4:	4a02      	ldr	r2, [pc, #8]	; (100011e0 <XMC_RTC_EnableEvent+0xc>)
100011d6:	6913      	ldr	r3, [r2, #16]
100011d8:	4318      	orrs	r0, r3
100011da:	6110      	str	r0, [r2, #16]
}
100011dc:	4770      	bx	lr
100011de:	46c0      	nop			; (mov r8, r8)
100011e0:	40010a00 	.word	0x40010a00

100011e4 <XMC_SCU_CLOCK_GatePeripheralClock>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100011e4:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100011e6:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
100011e8:	4a06      	ldr	r2, [pc, #24]	; (10001204 <XMC_SCU_CLOCK_GatePeripheralClock+0x20>)
100011ea:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
100011ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
100011ee:	4219      	tst	r1, r3
100011f0:	d1fc      	bne.n	100011ec <XMC_SCU_CLOCK_GatePeripheralClock+0x8>

/* API which gates a clock node at its source */
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
100011f2:	4a05      	ldr	r2, [pc, #20]	; (10001208 <XMC_SCU_CLOCK_GatePeripheralClock+0x24>)
100011f4:	68d3      	ldr	r3, [r2, #12]
100011f6:	4318      	orrs	r0, r3
100011f8:	60d0      	str	r0, [r2, #12]
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100011fa:	22c3      	movs	r2, #195	; 0xc3
100011fc:	4b01      	ldr	r3, [pc, #4]	; (10001204 <XMC_SCU_CLOCK_GatePeripheralClock+0x20>)
100011fe:	625a      	str	r2, [r3, #36]	; 0x24
void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
  XMC_SCU_LockProtectedBits();
}
10001200:	4770      	bx	lr
10001202:	46c0      	nop			; (mov r8, r8)
10001204:	40010000 	.word	0x40010000
10001208:	40010300 	.word	0x40010300

1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
1000120c:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
1000120e:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001210:	4a08      	ldr	r2, [pc, #32]	; (10001234 <XMC_SCU_CLOCK_UngatePeripheralClock+0x28>)
10001212:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001214:	6a53      	ldr	r3, [r2, #36]	; 0x24
10001216:	4219      	tst	r1, r3
10001218:	d1fc      	bne.n	10001214 <XMC_SCU_CLOCK_UngatePeripheralClock+0x8>
/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000121a:	2180      	movs	r1, #128	; 0x80

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
1000121c:	4a06      	ldr	r2, [pc, #24]	; (10001238 <XMC_SCU_CLOCK_UngatePeripheralClock+0x2c>)
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
1000121e:	05c9      	lsls	r1, r1, #23

/* API which ungates a clock note at its source */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  XMC_SCU_UnlockProtectedBits();
  SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
10001220:	6913      	ldr	r3, [r2, #16]
10001222:	4318      	orrs	r0, r3
10001224:	6110      	str	r0, [r2, #16]
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001226:	6813      	ldr	r3, [r2, #0]
10001228:	420b      	tst	r3, r1
1000122a:	d1fc      	bne.n	10001226 <XMC_SCU_CLOCK_UngatePeripheralClock+0x1a>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
1000122c:	22c3      	movs	r2, #195	; 0xc3
1000122e:	4b01      	ldr	r3, [pc, #4]	; (10001234 <XMC_SCU_CLOCK_UngatePeripheralClock+0x28>)
10001230:	625a      	str	r2, [r3, #36]	; 0x24
  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
  {
    /* Wait voltage suply stabilization */
  }
  XMC_SCU_LockProtectedBits();
}
10001232:	4770      	bx	lr
10001234:	40010000 	.word	0x40010000
10001238:	40010300 	.word	0x40010300

1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* Checks the status of peripheral clock gating */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
  return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
1000123c:	4b03      	ldr	r3, [pc, #12]	; (1000124c <XMC_SCU_CLOCK_IsPeripheralClockGated+0x10>)
1000123e:	689b      	ldr	r3, [r3, #8]
10001240:	4018      	ands	r0, r3
10001242:	1e43      	subs	r3, r0, #1
10001244:	4198      	sbcs	r0, r3
10001246:	b2c0      	uxtb	r0, r0
}
10001248:	4770      	bx	lr
1000124a:	46c0      	nop			; (mov r8, r8)
1000124c:	40010300 	.word	0x40010300

10001250 <XMC_SCU_CLOCK_ScaleMCLKFrequency>:
}


/* A utility routine which updates the fractional dividers in steps */
void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
{
10001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001252:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001254:	2404      	movs	r4, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001256:	4a2d      	ldr	r2, [pc, #180]	; (1000130c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xbc>)
10001258:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
1000125a:	6a53      	ldr	r3, [r2, #36]	; 0x24
1000125c:	421c      	tst	r4, r3
1000125e:	d1fc      	bne.n	1000125a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa>
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001260:	4a2b      	ldr	r2, [pc, #172]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001262:	4d2c      	ldr	r5, [pc, #176]	; (10001314 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc4>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001264:	6814      	ldr	r4, [r2, #0]

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001266:	6813      	ldr	r3, [r2, #0]
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
10001268:	0424      	lsls	r4, r4, #16

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000126a:	401d      	ands	r5, r3
1000126c:	4b2a      	ldr	r3, [pc, #168]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
  uint32_t curr_idiv;

  XMC_SCU_UnlockProtectedBits();

  /* Take a snapshot of value already programmed into IDIV */
  curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
1000126e:	0e24      	lsrs	r4, r4, #24
10001270:	432b      	orrs	r3, r5
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
10001272:	430b      	orrs	r3, r1
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001274:	2180      	movs	r1, #128	; 0x80

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#else
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001276:	6013      	str	r3, [r2, #0]
                   (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
                   (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
#endif

  while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001278:	05c9      	lsls	r1, r1, #23
1000127a:	6813      	ldr	r3, [r2, #0]
1000127c:	420b      	tst	r3, r1
1000127e:	d1fc      	bne.n	1000127a <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x2a>
  {
    /* Spin until the core supply stabilizes */
  }

  if(curr_idiv <= idiv)
10001280:	4284      	cmp	r4, r0
10001282:	d929      	bls.n	100012d8 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x88>

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001284:	2180      	movs	r1, #128	; 0x80
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001286:	4b25      	ldr	r3, [pc, #148]	; (1000131c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
10001288:	0086      	lsls	r6, r0, #2
1000128a:	4a21      	ldr	r2, [pc, #132]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
1000128c:	469c      	mov	ip, r3
1000128e:	4f22      	ldr	r7, [pc, #136]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
10001290:	05c9      	lsls	r1, r1, #23
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
10001292:	42b4      	cmp	r4, r6
10001294:	d90c      	bls.n	100012b0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
10001296:	4665      	mov	r5, ip
10001298:	6813      	ldr	r3, [r2, #0]
/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
1000129a:	08a4      	lsrs	r4, r4, #2

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
1000129c:	402b      	ands	r3, r5
1000129e:	433b      	orrs	r3, r7
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
100012a0:	0225      	lsls	r5, r4, #8
100012a2:	432b      	orrs	r3, r5
{
  while (curr_idiv > (target_idiv * 4UL))
  {
    curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */

    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012a4:	6013      	str	r3, [r2, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012a6:	6813      	ldr	r3, [r2, #0]
100012a8:	420b      	tst	r3, r1
100012aa:	d1fc      	bne.n	100012a6 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x56>
}

/* Utility routine to perform frequency up scaling */
static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
{
  while (curr_idiv > (target_idiv * 4UL))
100012ac:	42b4      	cmp	r4, r6
100012ae:	d8f2      	bhi.n	10001296 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x46>
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012b0:	4a17      	ldr	r2, [pc, #92]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
100012b2:	4b1a      	ldr	r3, [pc, #104]	; (1000131c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
100012b4:	6811      	ldr	r1, [r2, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100012b6:	0200      	lsls	r0, r0, #8
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012b8:	400b      	ands	r3, r1
100012ba:	4917      	ldr	r1, [pc, #92]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
100012bc:	430b      	orrs	r3, r1
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012be:	2180      	movs	r1, #128	; 0x80
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
100012c0:	4303      	orrs	r3, r0
  {
    /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
    XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
  }

  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012c2:	6013      	str	r3, [r2, #0]
                   (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

  while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012c4:	05c9      	lsls	r1, r1, #23
100012c6:	6813      	ldr	r3, [r2, #0]
100012c8:	420b      	tst	r3, r1
100012ca:	d1fc      	bne.n	100012c6 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x76>
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
100012cc:	22c3      	movs	r2, #195	; 0xc3
100012ce:	4b0f      	ldr	r3, [pc, #60]	; (1000130c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xbc>)
100012d0:	625a      	str	r2, [r3, #36]	; 0x24
    /* Wait voltage suply stabilization */
  }

  XMC_SCU_LockProtectedBits();

  SystemCoreClockUpdate();
100012d2:	f7ff fee3 	bl	1000109c <SystemCoreClockUpdate>

}
100012d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012d8:	2180      	movs	r1, #128	; 0x80
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012da:	4a0d      	ldr	r2, [pc, #52]	; (10001310 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc0>)
100012dc:	4f0f      	ldr	r7, [pc, #60]	; (1000131c <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xcc>)
100012de:	4e0e      	ldr	r6, [pc, #56]	; (10001318 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xc8>)
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012e0:	05c9      	lsls	r1, r1, #23

/* Utility routine to perform frequency down scaling */
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
100012e2:	00a3      	lsls	r3, r4, #2
100012e4:	4298      	cmp	r0, r3
100012e6:	d9e3      	bls.n	100012b0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x60>
  {
    if(0U == curr_idiv)
100012e8:	2c00      	cmp	r4, #0
100012ea:	d00a      	beq.n	10001302 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xb2>
100012ec:	02a5      	lsls	r5, r4, #10
100012ee:	1c1c      	adds	r4, r3, #0
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012f0:	6813      	ldr	r3, [r2, #0]
100012f2:	403b      	ands	r3, r7
100012f4:	4333      	orrs	r3, r6
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
100012f6:	432b      	orrs	r3, r5
    if(0U == curr_idiv)
    {
      curr_idiv = 1U;
    }
    curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
    SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)) |
100012f8:	6013      	str	r3, [r2, #0]
                     (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
                     (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);

    while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
100012fa:	6813      	ldr	r3, [r2, #0]
100012fc:	420b      	tst	r3, r1
100012fe:	d1fc      	bne.n	100012fa <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xaa>
10001300:	e7ef      	b.n	100012e2 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0x92>
static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
{

  while ((curr_idiv * 4UL) < target_idiv)
  {
    if(0U == curr_idiv)
10001302:	2580      	movs	r5, #128	; 0x80
10001304:	2404      	movs	r4, #4
10001306:	00ed      	lsls	r5, r5, #3
10001308:	e7f2      	b.n	100012f0 <XMC_SCU_CLOCK_ScaleMCLKFrequency+0xa0>
1000130a:	46c0      	nop			; (mov r8, r8)
1000130c:	40010000 	.word	0x40010000
10001310:	40010300 	.word	0x40010300
10001314:	c00fff00 	.word	0xc00fff00
10001318:	3ff00000 	.word	0x3ff00000
1000131c:	c00f00ff 	.word	0xc00f00ff

10001320 <XMC_SCU_CLOCK_Init>:
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001320:	23c0      	movs	r3, #192	; 0xc0

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
10001322:	2104      	movs	r1, #4
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001324:	4a0b      	ldr	r2, [pc, #44]	; (10001354 <XMC_SCU_CLOCK_Init+0x34>)
}


/* API which initializes the clock tree ofthe device */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
10001326:	b510      	push	{r4, lr}
}

/* API to make protected bitfields available for modification */
void XMC_SCU_UnlockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
10001328:	6253      	str	r3, [r2, #36]	; 0x24

  while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
1000132a:	6a53      	ldr	r3, [r2, #36]	; 0x24
1000132c:	4219      	tst	r1, r3
1000132e:	d1fc      	bne.n	1000132a <XMC_SCU_CLOCK_Init+0xa>
10001330:	6882      	ldr	r2, [r0, #8]
10001332:	6841      	ldr	r1, [r0, #4]
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001334:	4c08      	ldr	r4, [pc, #32]	; (10001358 <XMC_SCU_CLOCK_Init+0x38>)
10001336:	4311      	orrs	r1, r2
10001338:	6823      	ldr	r3, [r4, #0]
1000133a:	4a08      	ldr	r2, [pc, #32]	; (1000135c <XMC_SCU_CLOCK_Init+0x3c>)
1000133c:	4013      	ands	r3, r2
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
1000133e:	22c3      	movs	r2, #195	; 0xc3
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
                   config->rtc_src |
10001340:	430b      	orrs	r3, r1
  SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
                    config->dclk_src;

#endif
  /* Update PCLK selection mux. */
  SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSEL_Msk)) |
10001342:	6023      	str	r3, [r4, #0]
}

/* API to lock protected bitfields from being modified */
void XMC_SCU_LockProtectedBits(void)
{
  SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
10001344:	4b03      	ldr	r3, [pc, #12]	; (10001354 <XMC_SCU_CLOCK_Init+0x34>)
10001346:	625a      	str	r2, [r3, #36]	; 0x24

  /* Close the lock opened above. */
  XMC_SCU_LockProtectedBits();

  /* Update the dividers now */
  XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
10001348:	7843      	ldrb	r3, [r0, #1]
1000134a:	7801      	ldrb	r1, [r0, #0]
1000134c:	1c18      	adds	r0, r3, #0
1000134e:	f7ff ff7f 	bl	10001250 <XMC_SCU_CLOCK_ScaleMCLKFrequency>

}
10001352:	bd10      	pop	{r4, pc}
10001354:	40010000 	.word	0x40010000
10001358:	40010300 	.word	0x40010300
1000135c:	fff0ffff 	.word	0xfff0ffff

10001360 <XMC_SCU_INTERRUPT_SetEventHandler>:

/*
 * API to assign the event handler function to be executed on occurrence of the selected event
 */
XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRUPT_EVENT_HANDLER_t handler)
{
10001360:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001362:	07c3      	lsls	r3, r0, #31
10001364:	d413      	bmi.n	1000138e <XMC_SCU_INTERRUPT_SetEventHandler+0x2e>
10001366:	2300      	movs	r3, #0
10001368:	2401      	movs	r4, #1
1000136a:	e001      	b.n	10001370 <XMC_SCU_INTERRUPT_SetEventHandler+0x10>
1000136c:	2b20      	cmp	r3, #32
1000136e:	d00c      	beq.n	1000138a <XMC_SCU_INTERRUPT_SetEventHandler+0x2a>
10001370:	1c02      	adds	r2, r0, #0
  {
    index++;
10001372:	3301      	adds	r3, #1
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;

  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
10001374:	40da      	lsrs	r2, r3
10001376:	4214      	tst	r4, r2
10001378:	d0f8      	beq.n	1000136c <XMC_SCU_INTERRUPT_SetEventHandler+0xc>
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
  {
    status = XMC_SCU_STATUS_ERROR;
1000137a:	2001      	movs	r0, #1
  while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
  {
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
1000137c:	2b20      	cmp	r3, #32
1000137e:	d003      	beq.n	10001388 <XMC_SCU_INTERRUPT_SetEventHandler+0x28>
    status = XMC_SCU_STATUS_ERROR;
  }
  else
  {
    event_handler_list[index] = handler;
    status = XMC_SCU_STATUS_OK;
10001380:	2000      	movs	r0, #0
  {
    status = XMC_SCU_STATUS_ERROR;
  }
  else
  {
    event_handler_list[index] = handler;
10001382:	4a04      	ldr	r2, [pc, #16]	; (10001394 <XMC_SCU_INTERRUPT_SetEventHandler+0x34>)
10001384:	009b      	lsls	r3, r3, #2
10001386:	5099      	str	r1, [r3, r2]
    status = XMC_SCU_STATUS_OK;
  }

  return (status);
}
10001388:	bd10      	pop	{r4, pc}
    index++;
  }

  if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
  {
    status = XMC_SCU_STATUS_ERROR;
1000138a:	2001      	movs	r0, #1
1000138c:	e7fc      	b.n	10001388 <XMC_SCU_INTERRUPT_SetEventHandler+0x28>
  XMC_SCU_STATUS_t status;

  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(event));
  XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);

  index = 0U;
1000138e:	2300      	movs	r3, #0
10001390:	e7f6      	b.n	10001380 <XMC_SCU_INTERRUPT_SetEventHandler+0x20>
10001392:	46c0      	nop			; (mov r8, r8)
10001394:	20000860 	.word	0x20000860

10001398 <XMC_SCU_IRQHandler>:

/*
 * A common function to execute callback functions for multiple events
 */
void XMC_SCU_IRQHandler(uint32_t sr_num)
{
10001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
1000139a:	4910      	ldr	r1, [pc, #64]	; (100013dc <XMC_SCU_IRQHandler+0x44>)
/* API to get the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  XMC_SCU_INTERRUPT_EVENT_t tmp;

  tmp = SCU_INTERRUPT->SRRAW;
1000139c:	4b10      	ldr	r3, [pc, #64]	; (100013e0 <XMC_SCU_IRQHandler+0x48>)
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
1000139e:	0080      	lsls	r0, r0, #2
/* API to get the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
  XMC_SCU_INTERRUPT_EVENT_t tmp;

  tmp = SCU_INTERRUPT->SRRAW;
100013a0:	681a      	ldr	r2, [r3, #0]
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100013a2:	5845      	ldr	r5, [r0, r1]
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013a4:	2400      	movs	r4, #0
  uint32_t index;
  XMC_SCU_INTERRUPT_EVENT_t event;
  XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
100013a6:	4015      	ands	r5, r2
}

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
  SCU_INTERRUPT->SRCLR |= (uint32_t)event;
100013a8:	689a      	ldr	r2, [r3, #8]
100013aa:	432a      	orrs	r2, r5
100013ac:	609a      	str	r2, [r3, #8]

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013ae:	2d00      	cmp	r5, #0
100013b0:	d013      	beq.n	100013da <XMC_SCU_IRQHandler+0x42>
  {
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
100013b2:	2601      	movs	r6, #1
    {
      event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
      event_handler = event_handler_list[index];
100013b4:	4f0b      	ldr	r7, [pc, #44]	; (100013e4 <XMC_SCU_IRQHandler+0x4c>)
100013b6:	e001      	b.n	100013bc <XMC_SCU_IRQHandler+0x24>

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013b8:	2c20      	cmp	r4, #32
100013ba:	d00e      	beq.n	100013da <XMC_SCU_IRQHandler+0x42>
  {
    if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
100013bc:	1c2b      	adds	r3, r5, #0
100013be:	40e3      	lsrs	r3, r4
100013c0:	421e      	tst	r6, r3
100013c2:	d007      	beq.n	100013d4 <XMC_SCU_IRQHandler+0x3c>
    {
      event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
100013c4:	1c33      	adds	r3, r6, #0
100013c6:	40a3      	lsls	r3, r4
100013c8:	439d      	bics	r5, r3
100013ca:	00a3      	lsls	r3, r4, #2
      event_handler = event_handler_list[index];
100013cc:	59db      	ldr	r3, [r3, r7]
      if (event_handler != NULL)
100013ce:	2b00      	cmp	r3, #0
100013d0:	d000      	beq.n	100013d4 <XMC_SCU_IRQHandler+0x3c>
      {
        event_handler();
100013d2:	4798      	blx	r3
      }

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
100013d4:	3401      	adds	r4, #1

  index = 0U;
  event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
  XMC_SCU_INTERRUPT_ClearEventStatus(event);

  while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
100013d6:	2d00      	cmp	r5, #0
100013d8:	d1ee      	bne.n	100013b8 <XMC_SCU_IRQHandler+0x20>

      /* break; XMC1: Only PULSE interrupts */
    }
    index++;
  }
}
100013da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100013dc:	10003288 	.word	0x10003288
100013e0:	40010038 	.word	0x40010038
100013e4:	20000860 	.word	0x20000860

100013e8 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100013e8:	b538      	push	{r3, r4, r5, lr}
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
100013ea:	4b0a      	ldr	r3, [pc, #40]	; (10001414 <XMC_CCU4_Init+0x2c>)
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
100013ec:	1c04      	adds	r4, r0, #0
100013ee:	1c0d      	adds	r5, r1, #0
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
  switch ((uint32_t)module)
100013f0:	4298      	cmp	r0, r3
100013f2:	d102      	bne.n	100013fa <XMC_CCU4_Init+0x12>
  {
    case (uint32_t)CCU40:
      XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
100013f4:	2004      	movs	r0, #4
100013f6:	f7ff ff09 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
100013fa:	2280      	movs	r2, #128	; 0x80
100013fc:	68e3      	ldr	r3, [r4, #12]
100013fe:	0052      	lsls	r2, r2, #1
10001400:	4313      	orrs	r3, r2
10001402:	60e3      	str	r3, [r4, #12]
  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
  
  gctrl = module->GCTRL;
10001404:	6821      	ldr	r1, [r4, #0]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
10001406:	4b04      	ldr	r3, [pc, #16]	; (10001418 <XMC_CCU4_Init+0x30>)
10001408:	400b      	ands	r3, r1
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
1000140a:	03a9      	lsls	r1, r5, #14
1000140c:	4319      	orrs	r1, r3
  
  module->GCTRL = gctrl;
1000140e:	6021      	str	r1, [r4, #0]
}
10001410:	bd38      	pop	{r3, r4, r5, pc}
10001412:	46c0      	nop			; (mov r8, r8)
10001414:	48040000 	.word	0x48040000
10001418:	ffff3fff 	.word	0xffff3fff

1000141c <XMC_CCU4_SLICE_CompareInit>:
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
1000141c:	680b      	ldr	r3, [r1, #0]
1000141e:	6143      	str	r3, [r0, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
10001420:	794b      	ldrb	r3, [r1, #5]
10001422:	069b      	lsls	r3, r3, #26
10001424:	0fdb      	lsrs	r3, r3, #31
10001426:	051b      	lsls	r3, r3, #20
10001428:	6043      	str	r3, [r0, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
1000142a:	790b      	ldrb	r3, [r1, #4]
1000142c:	071b      	lsls	r3, r3, #28
1000142e:	0f1b      	lsrs	r3, r3, #28
10001430:	6243      	str	r3, [r0, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
10001432:	794b      	ldrb	r3, [r1, #5]
10001434:	071b      	lsls	r3, r3, #28
10001436:	0f1b      	lsrs	r3, r3, #28
10001438:	6203      	str	r3, [r0, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
1000143a:	794b      	ldrb	r3, [r1, #5]
1000143c:	06db      	lsls	r3, r3, #27
1000143e:	0fdb      	lsrs	r3, r3, #31
10001440:	6183      	str	r3, [r0, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
10001442:	790b      	ldrb	r3, [r1, #4]
10001444:	091b      	lsrs	r3, r3, #4
10001446:	62c3      	str	r3, [r0, #44]	; 0x2c
}
10001448:	4770      	bx	lr
1000144a:	46c0      	nop			; (mov r8, r8)

1000144c <XMC_CCU4_SLICE_SetPrescaler>:
{
  uint32_t fpc;
  
  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
1000144c:	6a82      	ldr	r2, [r0, #40]	; 0x28
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
1000144e:	4b03      	ldr	r3, [pc, #12]	; (1000145c <XMC_CCU4_SLICE_SetPrescaler+0x10>)
10001450:	4013      	ands	r3, r2
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
10001452:	020a      	lsls	r2, r1, #8
10001454:	4313      	orrs	r3, r2
  slice->FPC = fpc;
10001456:	6283      	str	r3, [r0, #40]	; 0x28
  /* 
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the 
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
10001458:	6241      	str	r1, [r0, #36]	; 0x24
}
1000145a:	4770      	bx	lr
1000145c:	fffff0ff 	.word	0xfffff0ff

10001460 <XMC_CCU4_SLICE_SetInterruptNode>:

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001460:	23a8      	movs	r3, #168	; 0xa8

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
10001462:	b530      	push	{r4, r5, lr}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001464:	58c5      	ldr	r5, [r0, r3]
10001466:	2909      	cmp	r1, #9
10001468:	d80b      	bhi.n	10001482 <XMC_CCU4_SLICE_SetInterruptNode+0x22>
1000146a:	4b07      	ldr	r3, [pc, #28]	; (10001488 <XMC_CCU4_SLICE_SetInterruptNode+0x28>)
1000146c:	0089      	lsls	r1, r1, #2
1000146e:	58cc      	ldr	r4, [r1, r3]
10001470:	43e3      	mvns	r3, r4
10001472:	4c06      	ldr	r4, [pc, #24]	; (1000148c <XMC_CCU4_SLICE_SetInterruptNode+0x2c>)
10001474:	5909      	ldr	r1, [r1, r4]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
  srs |= (uint32_t)sr << pos;
10001476:	408a      	lsls	r2, r1
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
      pos  = CCU4_CC4_SRS_E2SR_Pos;
      break;
  }
  
  srs &= ~mask; 
10001478:	402b      	ands	r3, r5
  srs |= (uint32_t)sr << pos;
1000147a:	431a      	orrs	r2, r3
  slice->SRS = srs;
1000147c:	23a8      	movs	r3, #168	; 0xa8
1000147e:	50c2      	str	r2, [r0, r3]
}
10001480:	bd30      	pop	{r4, r5, pc}

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  
  srs = slice->SRS;
10001482:	210c      	movs	r1, #12
10001484:	4b02      	ldr	r3, [pc, #8]	; (10001490 <XMC_CCU4_SLICE_SetInterruptNode+0x30>)
10001486:	e7f6      	b.n	10001476 <XMC_CCU4_SLICE_SetInterruptNode+0x16>
10001488:	100032bc 	.word	0x100032bc
1000148c:	10003294 	.word	0x10003294
10001490:	ffffcfff 	.word	0xffffcfff

10001494 <XMC_GPIO_SetHardwareControl>:
  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
}

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
10001494:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
10001496:	2403      	movs	r4, #3
10001498:	0049      	lsls	r1, r1, #1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000149a:	408a      	lsls	r2, r1
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
1000149c:	408c      	lsls	r4, r1
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
1000149e:	1c11      	adds	r1, r2, #0
void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
100014a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
100014a2:	43a3      	bics	r3, r4
100014a4:	6743      	str	r3, [r0, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
100014a6:	6f43      	ldr	r3, [r0, #116]	; 0x74
100014a8:	4319      	orrs	r1, r3
100014aa:	6741      	str	r1, [r0, #116]	; 0x74
}
100014ac:	bd10      	pop	{r4, pc}
100014ae:	46c0      	nop			; (mov r8, r8)

100014b0 <__aeabi_uidiv>:
 * API IMPLEMENTATION - aeabi routines
 **********************************************************************************************************************/
/* This function performs unsigned integer division */
uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
{
  MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
100014b0:	2204      	movs	r2, #4
100014b2:	4b03      	ldr	r3, [pc, #12]	; (100014c0 <__aeabi_uidiv+0x10>)
100014b4:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100014b6:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
100014b8:	6259      	str	r1, [r3, #36]	; 0x24

  return ((uint32_t) MATH->QUOT);
100014ba:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
100014bc:	4770      	bx	lr
100014be:	46c0      	nop			; (mov r8, r8)
100014c0:	40030000 	.word	0x40030000

100014c4 <__aeabi_idiv>:

/* This function performs signed integer division */
int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
{
  MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
100014c4:	2200      	movs	r2, #0
100014c6:	4b03      	ldr	r3, [pc, #12]	; (100014d4 <__aeabi_idiv+0x10>)
100014c8:	635a      	str	r2, [r3, #52]	; 0x34
  MATH->DVD     = dividend;
100014ca:	6218      	str	r0, [r3, #32]
  MATH->DVS     = divisor;
100014cc:	6259      	str	r1, [r3, #36]	; 0x24

  return ((int32_t) MATH->QUOT);
100014ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
100014d0:	4770      	bx	lr
100014d2:	46c0      	nop			; (mov r8, r8)
100014d4:	40030000 	.word	0x40030000

100014d8 <XMC_RTC_Start>:
/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
100014d8:	2201      	movs	r2, #1
100014da:	4905      	ldr	r1, [pc, #20]	; (100014f0 <XMC_RTC_Start+0x18>)
100014dc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
100014de:	421a      	tst	r2, r3
100014e0:	d1fc      	bne.n	100014dc <XMC_RTC_Start+0x4>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
100014e2:	2301      	movs	r3, #1
100014e4:	4a03      	ldr	r2, [pc, #12]	; (100014f4 <XMC_RTC_Start+0x1c>)
100014e6:	6851      	ldr	r1, [r2, #4]
100014e8:	430b      	orrs	r3, r1
100014ea:	6053      	str	r3, [r2, #4]
}
100014ec:	4770      	bx	lr
100014ee:	46c0      	nop			; (mov r8, r8)
100014f0:	40010000 	.word	0x40010000
100014f4:	40010a00 	.word	0x40010a00

100014f8 <XMC_RTC_Stop>:
/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
100014f8:	2201      	movs	r2, #1
100014fa:	4905      	ldr	r1, [pc, #20]	; (10001510 <XMC_RTC_Stop+0x18>)
100014fc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
100014fe:	421a      	tst	r2, r3
10001500:	d1fc      	bne.n	100014fc <XMC_RTC_Stop+0x4>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
10001502:	2101      	movs	r1, #1
10001504:	4a03      	ldr	r2, [pc, #12]	; (10001514 <XMC_RTC_Stop+0x1c>)
10001506:	6853      	ldr	r3, [r2, #4]
10001508:	438b      	bics	r3, r1
1000150a:	6053      	str	r3, [r2, #4]
}
1000150c:	4770      	bx	lr
1000150e:	46c0      	nop			; (mov r8, r8)
10001510:	40010000 	.word	0x40010000
10001514:	40010a00 	.word	0x40010a00

10001518 <XMC_RTC_SetPrescaler>:
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
10001518:	2201      	movs	r2, #1
1000151a:	4906      	ldr	r1, [pc, #24]	; (10001534 <XMC_RTC_SetPrescaler+0x1c>)
1000151c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
1000151e:	421a      	tst	r2, r3
10001520:	d1fc      	bne.n	1000151c <XMC_RTC_SetPrescaler+0x4>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
10001522:	4a05      	ldr	r2, [pc, #20]	; (10001538 <XMC_RTC_SetPrescaler+0x20>)
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
10001524:	0400      	lsls	r0, r0, #16
  
  while((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
10001526:	6853      	ldr	r3, [r2, #4]
10001528:	041b      	lsls	r3, r3, #16
1000152a:	0c1b      	lsrs	r3, r3, #16
1000152c:	4318      	orrs	r0, r3
1000152e:	6050      	str	r0, [r2, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
10001530:	4770      	bx	lr
10001532:	46c0      	nop			; (mov r8, r8)
10001534:	40010000 	.word	0x40010000
10001538:	40010a00 	.word	0x40010a00

1000153c <XMC_VADC_GLOBAL_Init>:
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
1000153c:	22ff      	movs	r2, #255	; 0xff
}


/* API to initialize global resources */
void XMC_VADC_GLOBAL_Init(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_GLOBAL_CONFIG_t *config)
{
1000153e:	b538      	push	{r3, r4, r5, lr}
10001540:	1c0d      	adds	r5, r1, #0
10001542:	1c04      	adds	r4, r0, #0
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
10001544:	4b0d      	ldr	r3, [pc, #52]	; (1000157c <XMC_VADC_GLOBAL_Init+0x40>)
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
10001546:	2001      	movs	r0, #1
   * Please refer to the XMC1000 Errata sheet V1.4 released 2014-06 Errata ID : ADC_AI.003 Additonal bit to enable ADC
   * function
   */

#if defined (COMPARATOR)
  COMPARATOR->ORCCTRL = (uint32_t)0xFF;
10001548:	601a      	str	r2, [r3, #0]
#endif

#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_VADC);
1000154a:	f7ff fe5f 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
  XMC_ASSERT("XMC_VADC_GLOBAL_Init:Wrong Module Pointer", (global_ptr == VADC))

  /* Enable the VADC module*/
  XMC_VADC_GLOBAL_EnableModule();

  global_ptr->CLC = (uint32_t)(config->clc);
1000154e:	696b      	ldr	r3, [r5, #20]
10001550:	6023      	str	r3, [r4, #0]

  /* Clock configuration */

#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  global_ptr->GLOBCFG  = (uint32_t)(config->clock_config.globcfg | (uint32_t)(VADC_GLOBCFG_DIVWC_Msk));
10001552:	2380      	movs	r3, #128	; 0x80
10001554:	686a      	ldr	r2, [r5, #4]
10001556:	021b      	lsls	r3, r3, #8
10001558:	4313      	orrs	r3, r2
1000155a:	2280      	movs	r2, #128	; 0x80
1000155c:	50a3      	str	r3, [r4, r2]
#endif

  /* ICLASS-0 configuration */
  global_ptr->GLOBICLASS[0] = (uint32_t)(config->class0.globiclass);
1000155e:	23a0      	movs	r3, #160	; 0xa0
10001560:	68aa      	ldr	r2, [r5, #8]
10001562:	50e2      	str	r2, [r4, r3]

  /* ICLASS-1 configuration */
  global_ptr->GLOBICLASS[1] = (uint32_t)(config->class1.globiclass);
10001564:	68ea      	ldr	r2, [r5, #12]
10001566:	3304      	adds	r3, #4
10001568:	50e2      	str	r2, [r4, r3]


  /*Result generation related configuration */
  global_ptr->GLOBRCR = (uint32_t)(config->globrcr);
1000156a:	692a      	ldr	r2, [r5, #16]
1000156c:	33dd      	adds	r3, #221	; 0xdd
1000156e:	33ff      	adds	r3, #255	; 0xff
10001570:	50e2      	str	r2, [r4, r3]

#if (XMC_VADC_BOUNDARY_AVAILABLE == 1U)

  /* Boundaries */
  global_ptr->GLOBBOUND = (uint32_t)(config->globbound);
10001572:	682a      	ldr	r2, [r5, #0]
10001574:	3bc9      	subs	r3, #201	; 0xc9
10001576:	3bff      	subs	r3, #255	; 0xff
10001578:	50e2      	str	r2, [r4, r3]

  /* From the Errata sheet of XMC1100 V1.7*/
  XMC_VADC_CONV_ENABLE_FOR_XMC11 = 1U;
#endif

}
1000157a:	bd38      	pop	{r3, r4, r5, pc}
1000157c:	40010500 	.word	0x40010500

10001580 <XMC_VADC_GLOBAL_InputClassInit>:
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong Conversion Type", ((conv_type) <= XMC_VADC_GROUP_CONV_EMUX))
  XMC_ASSERT("XMC_VADC_GLOBAL_InputClassInit:Wrong ICLASS set number", (set_num < XMC_VADC_MAX_ICLASS_SET))

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
10001580:	2a00      	cmp	r2, #0
10001582:	d005      	beq.n	10001590 <XMC_VADC_GLOBAL_InputClassInit+0x10>
                                      (uint32_t)(VADC_GLOBICLASS_CMS_Msk | VADC_GLOBICLASS_STCS_Msk);
#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  }
  else
  {
    global_ptr->GLOBICLASS[set_num] = config.globiclass & (uint32_t)(VADC_GLOBICLASS_CME_Msk | VADC_GLOBICLASS_STCE_Msk);
10001584:	4a05      	ldr	r2, [pc, #20]	; (1000159c <XMC_VADC_GLOBAL_InputClassInit+0x1c>)
10001586:	3328      	adds	r3, #40	; 0x28
10001588:	4011      	ands	r1, r2
1000158a:	009b      	lsls	r3, r3, #2
1000158c:	5019      	str	r1, [r3, r0]
  }
#endif
}
1000158e:	4770      	bx	lr

#if(XMC_VADC_EMUX_AVAILABLE == 1U)
  if (conv_type == XMC_VADC_GROUP_CONV_STD )
  {
#endif
    global_ptr->GLOBICLASS[set_num] = config.globiclass &
10001590:	4a03      	ldr	r2, [pc, #12]	; (100015a0 <XMC_VADC_GLOBAL_InputClassInit+0x20>)
10001592:	3328      	adds	r3, #40	; 0x28
10001594:	4011      	ands	r1, r2
10001596:	009b      	lsls	r3, r3, #2
10001598:	5019      	str	r1, [r3, r0]
1000159a:	e7f8      	b.n	1000158e <XMC_VADC_GLOBAL_InputClassInit+0xe>
1000159c:	071f0000 	.word	0x071f0000
100015a0:	0000071f 	.word	0x0000071f

100015a4 <XMC_VADC_GLOBAL_StartupCalibration>:
  VADC_G_TypeDef *group_ptr;
#endif
  
  XMC_ASSERT("XMC_VADC_GLOBAL_StartupCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)VADC_GLOBCFG_SUCAL_Msk;
100015a4:	2380      	movs	r3, #128	; 0x80
100015a6:	2180      	movs	r1, #128	; 0x80
100015a8:	58c2      	ldr	r2, [r0, r3]
100015aa:	0609      	lsls	r1, r1, #24
100015ac:	430a      	orrs	r2, r1
100015ae:	50c2      	str	r2, [r0, r3]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
100015b0:	4a0c      	ldr	r2, [pc, #48]	; (100015e4 <XMC_VADC_GLOBAL_StartupCalibration+0x40>)
100015b2:	58d1      	ldr	r1, [r2, r3]
100015b4:	23c0      	movs	r3, #192	; 0xc0
100015b6:	029b      	lsls	r3, r3, #10
100015b8:	4219      	tst	r1, r3
100015ba:	d005      	beq.n	100015c8 <XMC_VADC_GLOBAL_StartupCalibration+0x24>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
100015bc:	2180      	movs	r1, #128	; 0x80
100015be:	2080      	movs	r0, #128	; 0x80
100015c0:	0549      	lsls	r1, r1, #21
100015c2:	5813      	ldr	r3, [r2, r0]
100015c4:	420b      	tst	r3, r1
100015c6:	d1fc      	bne.n	100015c2 <XMC_VADC_GLOBAL_StartupCalibration+0x1e>
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  /* Loop until all active groups finish calibration */
  for(i=0U; i<XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    group_ptr = g_xmc_vadc_group_array[i];
    if ( (group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_ANONS_Msk)
100015c8:	2380      	movs	r3, #128	; 0x80
100015ca:	4a07      	ldr	r2, [pc, #28]	; (100015e8 <XMC_VADC_GLOBAL_StartupCalibration+0x44>)
100015cc:	58d1      	ldr	r1, [r2, r3]
100015ce:	23c0      	movs	r3, #192	; 0xc0
100015d0:	029b      	lsls	r3, r3, #10
100015d2:	4219      	tst	r1, r3
100015d4:	d005      	beq.n	100015e2 <XMC_VADC_GLOBAL_StartupCalibration+0x3e>
    {
      /* This group is active. Loop until it finishes calibration */
      while((group_ptr->ARBCFG) & (uint32_t)VADC_G_ARBCFG_CAL_Msk)
100015d6:	2180      	movs	r1, #128	; 0x80
100015d8:	2080      	movs	r0, #128	; 0x80
100015da:	0549      	lsls	r1, r1, #21
100015dc:	5813      	ldr	r3, [r2, r0]
100015de:	420b      	tst	r3, r1
100015e0:	d1fc      	bne.n	100015dc <XMC_VADC_GLOBAL_StartupCalibration+0x38>
         XMC_VADC_SHS_START_UP_CAL_ACTIVE )
  {
    /* NOP */
  }
#endif
}
100015e2:	4770      	bx	lr
100015e4:	48030400 	.word	0x48030400
100015e8:	48030800 	.word	0x48030800

100015ec <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>:
  global_ptr->GLOBEVNP |= (uint32_t)(node << VADC_GLOBEVNP_REV0NP_Pos);
}

/* API to bind request source event with a service request line */
void XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(XMC_VADC_GLOBAL_t *const global_ptr, XMC_VADC_SR_t sr)
{
100015ec:	b510      	push	{r4, lr}
  uint32_t node;
  
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode:Wrong Module Pointer", (global_ptr == VADC))

  if (sr >= XMC_VADC_SR_SHARED_SR0)
100015ee:	2903      	cmp	r1, #3
100015f0:	d900      	bls.n	100015f4 <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode+0x8>
  {
    node = (uint32_t)sr - (uint32_t)XMC_VADC_SR_SHARED_SR0;
100015f2:	3904      	subs	r1, #4
  else
  {
    node = (uint32_t)sr;
  }

  global_ptr->GLOBEVNP &= ~((uint32_t)VADC_GLOBEVNP_SEV0NP_Msk);
100015f4:	23a0      	movs	r3, #160	; 0xa0
100015f6:	240f      	movs	r4, #15
100015f8:	005b      	lsls	r3, r3, #1
100015fa:	58c2      	ldr	r2, [r0, r3]
100015fc:	43a2      	bics	r2, r4
100015fe:	50c2      	str	r2, [r0, r3]
  global_ptr->GLOBEVNP |= (uint32_t) (node << VADC_GLOBEVNP_SEV0NP_Pos);
10001600:	58c2      	ldr	r2, [r0, r3]
10001602:	4311      	orrs	r1, r2
10001604:	50c1      	str	r1, [r0, r3]
}
10001606:	bd10      	pop	{r4, pc}

10001608 <XMC_VADC_GROUP_Init>:
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001608:	23a0      	movs	r3, #160	; 0xa0
1000160a:	58c2      	ldr	r2, [r0, r3]
1000160c:	469c      	mov	ip, r3

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000160e:	4b30      	ldr	r3, [pc, #192]	; (100016d0 <XMC_VADC_GROUP_Init+0xc8>)
}

/* API to initialize an instance of group of VADC hardware */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)  
void XMC_VADC_GROUP_Init( XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_CONFIG_t *config)
{
10001610:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001612:	401a      	ands	r2, r3
10001614:	1c14      	adds	r4, r2, #0
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
10001616:	271f      	movs	r7, #31
10001618:	794a      	ldrb	r2, [r1, #5]

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000161a:	4d2e      	ldr	r5, [pc, #184]	; (100016d4 <XMC_VADC_GROUP_Init+0xcc>)
1000161c:	0752      	lsls	r2, r2, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
1000161e:	0d52      	lsrs	r2, r2, #21
10001620:	4322      	orrs	r2, r4
10001622:	790c      	ldrb	r4, [r1, #4]
  conv_class &= ~(sample_time_mask);
10001624:	43ba      	bics	r2, r7
10001626:	06e4      	lsls	r4, r4, #27
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
10001628:	0ee4      	lsrs	r4, r4, #27

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
1000162a:	4322      	orrs	r2, r4
  group_ptr->ICLASS[set_num] = conv_class;
1000162c:	4664      	mov	r4, ip
1000162e:	5102      	str	r2, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001630:	5902      	ldr	r2, [r0, r4]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
10001632:	4e29      	ldr	r6, [pc, #164]	; (100016d8 <XMC_VADC_GROUP_Init+0xd0>)

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001634:	402a      	ands	r2, r5
10001636:	1c14      	adds	r4, r2, #0
10001638:	79ca      	ldrb	r2, [r1, #7]
  group_ptr->BOUND = config->g_bound;

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);

}
1000163a:	0752      	lsls	r2, r2, #29
  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
1000163c:	0952      	lsrs	r2, r2, #5
1000163e:	4322      	orrs	r2, r4
10001640:	798c      	ldrb	r4, [r1, #6]
  conv_class &= ~(sample_time_mask);
10001642:	4032      	ands	r2, r6
10001644:	06e4      	lsls	r4, r4, #27
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001646:	0ae4      	lsrs	r4, r4, #11
10001648:	4322      	orrs	r2, r4
  group_ptr->ICLASS[set_num] = conv_class;
1000164a:	4664      	mov	r4, ip
1000164c:	5102      	str	r2, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
1000164e:	3404      	adds	r4, #4
10001650:	5902      	ldr	r2, [r0, r4]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
10001652:	401a      	ands	r2, r3
10001654:	7a4b      	ldrb	r3, [r1, #9]
10001656:	075b      	lsls	r3, r3, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10001658:	0d5b      	lsrs	r3, r3, #21
1000165a:	4313      	orrs	r3, r2
1000165c:	7a0a      	ldrb	r2, [r1, #8]
  conv_class &= ~(sample_time_mask);
1000165e:	43bb      	bics	r3, r7
10001660:	06d2      	lsls	r2, r2, #27
  {
    conv_mode_pos    = (uint32_t) VADC_G_ICLASS_CMS_Pos;
    conv_mode_mask   = (uint32_t) VADC_G_ICLASS_CMS_Msk;
    sample_time_pos  = (uint32_t) VADC_G_ICLASS_STCS_Pos;
    sample_time_mask = (uint32_t) VADC_G_ICLASS_STCS_Msk;
    sample_time      = (uint32_t) config.sample_time_std_conv;
10001662:	0ed2      	lsrs	r2, r2, #27

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
  conv_class &= ~(sample_time_mask);
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
10001664:	4313      	orrs	r3, r2
  group_ptr->ICLASS[set_num] = conv_class;
10001666:	5103      	str	r3, [r0, r4]
    sample_time      = (uint32_t) config.sampling_phase_emux_channel;
    conv_mode        = (XMC_VADC_CONVMODE_t)config.conversion_mode_emux;
  }

  /* Determine the class */
  conv_class  = group_ptr->ICLASS[set_num];
10001668:	5903      	ldr	r3, [r0, r4]
1000166a:	7a8a      	ldrb	r2, [r1, #10]

  /* Program the class register */
  conv_class &= ~(conv_mode_mask);
1000166c:	401d      	ands	r5, r3
1000166e:	7acb      	ldrb	r3, [r1, #11]
10001670:	06d2      	lsls	r2, r2, #27
10001672:	075b      	lsls	r3, r3, #29
  conv_class |= (uint32_t)((uint32_t) conv_mode << conv_mode_pos);
10001674:	095b      	lsrs	r3, r3, #5
10001676:	432b      	orrs	r3, r5
  conv_class &= ~(sample_time_mask);
10001678:	4033      	ands	r3, r6
  conv_class |= (uint32_t)(sample_time <<  sample_time_pos);
1000167a:	0ad2      	lsrs	r2, r2, #11
1000167c:	4313      	orrs	r3, r2
  group_ptr->ICLASS[set_num] = conv_class;
1000167e:	5103      	str	r3, [r0, r4]
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_STD, 0U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class0, XMC_VADC_GROUP_CONV_EMUX, 0U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_STD, 1U);
  XMC_VADC_GROUP_InputClassInit(group_ptr, config->class1, XMC_VADC_GROUP_CONV_EMUX, 1U);

  group_ptr->ARBCFG = config->g_arbcfg;
10001680:	2380      	movs	r3, #128	; 0x80
10001682:	690a      	ldr	r2, [r1, #16]
10001684:	50c2      	str	r2, [r0, r3]

  group_ptr->BOUND = config->g_bound;
10001686:	68ca      	ldr	r2, [r1, #12]
10001688:	3338      	adds	r3, #56	; 0x38
1000168a:	50c2      	str	r2, [r0, r3]
1000168c:	78cb      	ldrb	r3, [r1, #3]
1000168e:	071d      	lsls	r5, r3, #28
10001690:	06df      	lsls	r7, r3, #27
10001692:	069c      	lsls	r4, r3, #26
10001694:	065b      	lsls	r3, r3, #25
10001696:	0fda      	lsrs	r2, r3, #31
10001698:	884b      	ldrh	r3, [r1, #2]
1000169a:	0fff      	lsrs	r7, r7, #31
1000169c:	059b      	lsls	r3, r3, #22
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);
1000169e:	099e      	lsrs	r6, r3, #6
100016a0:	780b      	ldrb	r3, [r1, #0]
100016a2:	2180      	movs	r1, #128	; 0x80
100016a4:	075b      	lsls	r3, r3, #29
{
  uint32_t   emux_config;

  XMC_ASSERT("XMC_VADC_GROUP_ExternalMuxControlInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
100016a6:	0f5b      	lsrs	r3, r3, #29
100016a8:	4333      	orrs	r3, r6
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
100016aa:	26f8      	movs	r6, #248	; 0xf8
100016ac:	0076      	lsls	r6, r6, #1
100016ae:	5183      	str	r3, [r0, r6]
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
100016b0:	5983      	ldr	r3, [r0, r6]
100016b2:	0609      	lsls	r1, r1, #24

  emux_config = ((uint32_t)emux_cfg.starting_external_channel << (uint32_t)VADC_G_EMUXCTR_EMUXSET_Pos) |
              ((uint32_t)emux_cfg.connected_channel << (uint32_t)VADC_G_EMUXCTR_EMUXCH_Pos);

  group_ptr->EMUXCTR  = emux_config;
  emux_config = ((uint32_t)emux_cfg.emux_coding << (uint32_t)VADC_G_EMUXCTR_EMXCOD_Pos)  |
100016b4:	073f      	lsls	r7, r7, #28
100016b6:	430b      	orrs	r3, r1
100016b8:	0fad      	lsrs	r5, r5, #30
100016ba:	433b      	orrs	r3, r7
                ((uint32_t)emux_cfg.emux_mode  << (uint32_t)VADC_G_EMUXCTR_EMUXMODE_Pos)|
100016bc:	06ad      	lsls	r5, r5, #26
100016be:	0fe4      	lsrs	r4, r4, #31
100016c0:	432b      	orrs	r3, r5
                ((uint32_t)emux_cfg.stce_usage << (uint32_t)VADC_G_EMUXCTR_EMXST_Pos);
100016c2:	0764      	lsls	r4, r4, #29
100016c4:	4323      	orrs	r3, r4
100016c6:	1c19      	adds	r1, r3, #0

#if (XMC_VADC_EMUX_CH_SEL_STYLE == 1U)
  emux_config |= ((uint32_t)emux_cfg.emux_channel_select_style << (uint32_t)VADC_G_EMUXCTR_EMXCSS_Pos);
100016c8:	0793      	lsls	r3, r2, #30
#endif
  group_ptr->EMUXCTR  |= (emux_config | ((uint32_t)VADC_G_EMUXCTR_EMXWC_Msk)) ;
100016ca:	430b      	orrs	r3, r1
100016cc:	5183      	str	r3, [r0, r6]

  /* External mux configuration */
  XMC_VADC_GROUP_ExternalMuxControlInit(group_ptr,config->emux_config);

}
100016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100016d0:	fffff8ff 	.word	0xfffff8ff
100016d4:	f8ffffff 	.word	0xf8ffffff
100016d8:	ffe0ffff 	.word	0xffe0ffff

100016dc <XMC_VADC_GROUP_SetPowerMode>:
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
100016dc:	2280      	movs	r2, #128	; 0x80
  group_ptr->ICLASS[set_num] = conv_class;
}

/* API which sets the power mode of analog converter of a VADC group */
void XMC_VADC_GROUP_SetPowerMode(XMC_VADC_GROUP_t *const group_ptr, const XMC_VADC_GROUP_POWERMODE_t power_mode)
{
100016de:	b510      	push	{r4, lr}
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
100016e0:	2403      	movs	r4, #3
  uint32_t arbcfg;

  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_SetPowerMode:Wrong Power Mode", (power_mode <= XMC_VADC_GROUP_POWERMODE_NORMAL))

  arbcfg = group_ptr->ARBCFG;
100016e2:	5883      	ldr	r3, [r0, r2]

  arbcfg &= ~((uint32_t)VADC_G_ARBCFG_ANONC_Msk);
100016e4:	43a3      	bics	r3, r4
  arbcfg |= (uint32_t)power_mode;
100016e6:	4319      	orrs	r1, r3

  group_ptr->ARBCFG = arbcfg;
100016e8:	5081      	str	r1, [r0, r2]
}
100016ea:	bd10      	pop	{r4, pc}

100016ec <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>:
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong SHS Pointer",
             (shs_ptr == (XMC_VADC_GLOBAL_SHS_t*)(void*)SHS0))
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
100016ec:	2900      	cmp	r1, #0
100016ee:	d007      	beq.n	10001700 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x14>
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
100016f0:	2901      	cmp	r1, #1
100016f2:	d000      	beq.n	100016f6 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0xa>
  }
  else
  {
    /* for MISRA*/
  }
}
100016f4:	4770      	bx	lr
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
  }
  else if (group_num == XMC_VADC_GROUP_INDEX_1 )
  {
    shs_ptr->TIMCFG1 |= (uint32_t)SHS_TIMCFG1_AT_Msk;
100016f6:	2384      	movs	r3, #132	; 0x84
100016f8:	58c2      	ldr	r2, [r0, r3]
100016fa:	4311      	orrs	r1, r2
100016fc:	50c1      	str	r1, [r0, r3]
100016fe:	e7f9      	b.n	100016f4 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x8>
  XMC_ASSERT("XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode:Wrong Index number",(group_num <= XMC_VADC_GROUP_INDEX_1))

  /* Set the converted to Accelerated mode from compatible mode*/
  if (group_num == XMC_VADC_GROUP_INDEX_0 )
  {
    shs_ptr->TIMCFG0 |= (uint32_t)SHS_TIMCFG0_AT_Msk;
10001700:	2280      	movs	r2, #128	; 0x80
10001702:	2301      	movs	r3, #1
10001704:	5881      	ldr	r1, [r0, r2]
10001706:	430b      	orrs	r3, r1
10001708:	5083      	str	r3, [r0, r2]
1000170a:	e7f3      	b.n	100016f4 <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode+0x8>

1000170c <XMC_VADC_GLOBAL_BackgroundInit>:
 *  XMC_VADC_GROUP_BackgroundEnableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundDisableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundDisableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR &= ~((uint32_t)VADC_G_ARBPR_ASEN2_Msk);
1000170c:	4b27      	ldr	r3, [pc, #156]	; (100017ac <XMC_VADC_GLOBAL_BackgroundInit+0xa0>)
}
#endif /* XMC_VADC_GSCAN_AVAILABLE */

/* API to initialize background scan request source hardware */
void XMC_VADC_GLOBAL_BackgroundInit(XMC_VADC_GLOBAL_t *const global_ptr, const XMC_VADC_BACKGROUND_CONFIG_t *config)
{
1000170e:	b5f0      	push	{r4, r5, r6, r7, lr}
10001710:	4646      	mov	r6, r8
10001712:	4698      	mov	r8, r3
10001714:	2284      	movs	r2, #132	; 0x84
10001716:	464f      	mov	r7, r9
10001718:	4644      	mov	r4, r8
1000171a:	468c      	mov	ip, r1
1000171c:	5899      	ldr	r1, [r3, r2]
1000171e:	4b24      	ldr	r3, [pc, #144]	; (100017b0 <XMC_VADC_GLOBAL_BackgroundInit+0xa4>)
10001720:	b4c0      	push	{r6, r7}
10001722:	4019      	ands	r1, r3
10001724:	50a1      	str	r1, [r4, r2]
10001726:	4923      	ldr	r1, [pc, #140]	; (100017b4 <XMC_VADC_GLOBAL_BackgroundInit+0xa8>)
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10001728:	2703      	movs	r7, #3
1000172a:	588c      	ldr	r4, [r1, r2]
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
1000172c:	4e22      	ldr	r6, [pc, #136]	; (100017b8 <XMC_VADC_GLOBAL_BackgroundInit+0xac>)
1000172e:	4023      	ands	r3, r4
10001730:	508b      	str	r3, [r1, r2]
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10001732:	4663      	mov	r3, ip
10001734:	781b      	ldrb	r3, [r3, #0]
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
10001736:	46b1      	mov	r9, r6
  {
    XMC_VADC_GROUP_BackgroundDisableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
10001738:	401f      	ands	r7, r3
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
1000173a:	1c3d      	adds	r5, r7, #0
1000173c:	1e6c      	subs	r4, r5, #1
1000173e:	41a5      	sbcs	r5, r4
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
10001740:	4644      	mov	r4, r8
10001742:	58a4      	ldr	r4, [r4, r2]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
10001744:	071b      	lsls	r3, r3, #28
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
10001746:	4034      	ands	r4, r6
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
  
    /* Program the start mode */
    reg |= conv_start_mask;

    g_xmc_vadc_group_array[i]->ARBPR = reg;
10001748:	4646      	mov	r6, r8
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
1000174a:	0f9b      	lsrs	r3, r3, #30
1000174c:	021b      	lsls	r3, r3, #8
  }
  
  conv_start_mask = (uint32_t) 0;
  if (XMC_VADC_STARTMODE_WFS != (XMC_VADC_STARTMODE_t)config->conv_start_mode)
  {
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
1000174e:	02ed      	lsls	r5, r5, #11
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
10001750:	431c      	orrs	r4, r3
  
    /* Program the start mode */
    reg |= conv_start_mask;
10001752:	432c      	orrs	r4, r5

    g_xmc_vadc_group_array[i]->ARBPR = reg;
10001754:	50b4      	str	r4, [r6, r2]
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
10001756:	464e      	mov	r6, r9
    conv_start_mask = (uint32_t)VADC_G_ARBPR_CSM2_Msk;
  }
  
  for(i=0U; i < XMC_VADC_MAXIMUM_NUM_GROUPS; i++)
  {
    reg = g_xmc_vadc_group_array[i]->ARBPR;
10001758:	588c      	ldr	r4, [r1, r2]

    reg &= ~(uint32_t)(VADC_G_ARBPR_PRIO2_Msk);
1000175a:	4026      	ands	r6, r4

    /* Program the priority of the request source */
    reg |= (uint32_t)((uint32_t)config->req_src_priority << VADC_G_ARBPR_PRIO2_Pos);
1000175c:	4333      	orrs	r3, r6
  
    /* Program the start mode */
    reg |= conv_start_mask;
1000175e:	432b      	orrs	r3, r5

    g_xmc_vadc_group_array[i]->ARBPR = reg;
10001760:	508b      	str	r3, [r1, r2]
  
  }
  #endif

  /* program BRSCTRL register */
  global_ptr->BRSCTRL = (uint32_t)(config->asctrl | (uint32_t)VADC_BRSCTRL_XTWC_Msk | (uint32_t)VADC_BRSCTRL_GTWC_Msk);
10001762:	4662      	mov	r2, ip
10001764:	4b15      	ldr	r3, [pc, #84]	; (100017bc <XMC_VADC_GLOBAL_BackgroundInit+0xb0>)
10001766:	6852      	ldr	r2, [r2, #4]
10001768:	4313      	orrs	r3, r2
1000176a:	2280      	movs	r2, #128	; 0x80
1000176c:	0092      	lsls	r2, r2, #2
1000176e:	5083      	str	r3, [r0, r2]

  /* program BRSMR register */
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
10001770:	4663      	mov	r3, ip
10001772:	2201      	movs	r2, #1
10001774:	689b      	ldr	r3, [r3, #8]
10001776:	4313      	orrs	r3, r2
10001778:	2281      	movs	r2, #129	; 0x81
1000177a:	0092      	lsls	r2, r2, #2
1000177c:	5083      	str	r3, [r0, r2]
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
1000177e:	2f02      	cmp	r7, #2
10001780:	d00e      	beq.n	100017a0 <XMC_VADC_GLOBAL_BackgroundInit+0x94>
 *  XMC_VADC_GROUP_BackgroundDisableArbitrationSlot()<BR>
 */
__STATIC_INLINE void XMC_VADC_GROUP_BackgroundEnableArbitrationSlot(XMC_VADC_GROUP_t *const group_ptr)
{
  XMC_ASSERT("XMC_VADC_GROUP_BackgroundEnableArbitrationSlot:Wrong Group Pointer",  XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->ARBPR |= (uint32_t)VADC_G_ARBPR_ASEN2_Msk;
10001782:	2384      	movs	r3, #132	; 0x84
10001784:	2080      	movs	r0, #128	; 0x80
10001786:	4a09      	ldr	r2, [pc, #36]	; (100017ac <XMC_VADC_GLOBAL_BackgroundInit+0xa0>)
10001788:	04c0      	lsls	r0, r0, #19
1000178a:	58d1      	ldr	r1, [r2, r3]
1000178c:	4301      	orrs	r1, r0
1000178e:	50d1      	str	r1, [r2, r3]
10001790:	4908      	ldr	r1, [pc, #32]	; (100017b4 <XMC_VADC_GLOBAL_BackgroundInit+0xa8>)
10001792:	58ca      	ldr	r2, [r1, r3]
10001794:	4302      	orrs	r2, r0
10001796:	50ca      	str	r2, [r1, r3]
  {
    XMC_VADC_GROUP_BackgroundEnableArbitrationSlot((XMC_VADC_GROUP_t *)g_xmc_vadc_group_array[i]);
  }
  #endif
  
}
10001798:	bc0c      	pop	{r2, r3}
1000179a:	4690      	mov	r8, r2
1000179c:	4699      	mov	r9, r3
1000179e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  global_ptr->BRSMR = (uint32_t)((config->asmr)| (uint32_t)((uint32_t)XMC_VADC_GATEMODE_IGNORE << VADC_BRSMR_ENGT_Pos));
  
#if (XMC_VADC_GROUP_AVAILABLE ==1U)
  if (XMC_VADC_STARTMODE_CNR == (XMC_VADC_STARTMODE_t)(config->conv_start_mode))
  {
    global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_RPTDIS_Msk;
100017a0:	2180      	movs	r1, #128	; 0x80
100017a2:	5883      	ldr	r3, [r0, r2]
100017a4:	0249      	lsls	r1, r1, #9
100017a6:	430b      	orrs	r3, r1
100017a8:	5083      	str	r3, [r0, r2]
100017aa:	e7ea      	b.n	10001782 <XMC_VADC_GLOBAL_BackgroundInit+0x76>
100017ac:	48030400 	.word	0x48030400
100017b0:	fbffffff 	.word	0xfbffffff
100017b4:	48030800 	.word	0x48030800
100017b8:	fffffcff 	.word	0xfffffcff
100017bc:	00808000 	.word	0x00808000

100017c0 <XMC_VADC_GROUP_ChannelInit>:

#if (XMC_VADC_GROUP_AVAILABLE ==1U)
/* API to initialize a channel unit */
void XMC_VADC_GROUP_ChannelInit(XMC_VADC_GROUP_t *const group_ptr, const uint32_t ch_num,
                                        const XMC_VADC_CHANNEL_CONFIG_t *config)
{
100017c0:	b570      	push	{r4, r5, r6, lr}
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
100017c2:	2401      	movs	r4, #1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
100017c4:	2588      	movs	r5, #136	; 0x88
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
100017c6:	408c      	lsls	r4, r1
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
100017c8:	5943      	ldr	r3, [r0, r5]
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
100017ca:	43a3      	bics	r3, r4


  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_ChannelInit:Wrong Channel Number", ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))
  
  prio  = (uint32_t)config->channel_priority;
100017cc:	7b14      	ldrb	r4, [r2, #12]

  /* Priority channel */
  ch_assign  = group_ptr->CHASS;
  ch_assign &= ~((uint32_t)((uint32_t)1 << ch_num));
  ch_assign |= (uint32_t)(prio << ch_num);
100017ce:	408c      	lsls	r4, r1
100017d0:	4323      	orrs	r3, r4
  group_ptr->CHASS = ch_assign;
100017d2:	5143      	str	r3, [r0, r5]

  /* Alias channel */
  if (config->alias_channel >= (int32_t)0)
100017d4:	7b53      	ldrb	r3, [r2, #13]
100017d6:	b25c      	sxtb	r4, r3
100017d8:	2c00      	cmp	r4, #0
100017da:	db0c      	blt.n	100017f6 <XMC_VADC_GROUP_ChannelInit+0x36>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
100017dc:	2901      	cmp	r1, #1
100017de:	d021      	beq.n	10001824 <XMC_VADC_GROUP_ChannelInit+0x64>
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
100017e0:	2900      	cmp	r1, #0
100017e2:	d017      	beq.n	10001814 <XMC_VADC_GROUP_ChannelInit+0x54>
100017e4:	1c1c      	adds	r4, r3, #0
100017e6:	2300      	movs	r3, #0
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
100017e8:	b264      	sxtb	r4, r4
100017ea:	409c      	lsls	r4, r3
100017ec:	26b0      	movs	r6, #176	; 0xb0
100017ee:	1c23      	adds	r3, r4, #0
100017f0:	5985      	ldr	r5, [r0, r6]
100017f2:	432b      	orrs	r3, r5
100017f4:	5183      	str	r3, [r0, r6]
  }

  group_ptr->BFL |= config->bfl;
100017f6:	24c8      	movs	r4, #200	; 0xc8
100017f8:	6855      	ldr	r5, [r2, #4]
100017fa:	5903      	ldr	r3, [r0, r4]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
100017fc:	3180      	adds	r1, #128	; 0x80
    }

    group_ptr->ALIAS |= (uint32_t)(config->alias_channel << mask);
  }

  group_ptr->BFL |= config->bfl;
100017fe:	432b      	orrs	r3, r5
10001800:	5103      	str	r3, [r0, r4]

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
10001802:	3408      	adds	r4, #8
10001804:	6895      	ldr	r5, [r2, #8]
10001806:	5903      	ldr	r3, [r0, r4]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
10001808:	0089      	lsls	r1, r1, #2
  }

  group_ptr->BFL |= config->bfl;

#if (XMC_VADC_BOUNDARY_FLAG_SELECT == 1U)
  group_ptr->BFLC |= config->bflc;
1000180a:	432b      	orrs	r3, r5
1000180c:	5103      	str	r3, [r0, r4]
#endif
  /* Program the CHCTR register */
  group_ptr->CHCTR[ch_num] = config->chctr;
1000180e:	6813      	ldr	r3, [r2, #0]
10001810:	500b      	str	r3, [r1, r0]

}
10001812:	bd70      	pop	{r4, r5, r6, pc}
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
    }
    else if ((uint32_t)0 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS0_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS0_Msk);
10001814:	24b0      	movs	r4, #176	; 0xb0
10001816:	251f      	movs	r5, #31
10001818:	5903      	ldr	r3, [r0, r4]
1000181a:	43ab      	bics	r3, r5
1000181c:	5103      	str	r3, [r0, r4]
1000181e:	7b54      	ldrb	r4, [r2, #13]
10001820:	2300      	movs	r3, #0
10001822:	e7e1      	b.n	100017e8 <XMC_VADC_GROUP_ChannelInit+0x28>
  {
    mask = (uint32_t)0;
    if ((uint32_t)1 == ch_num)
    {
      mask = VADC_G_ALIAS_ALIAS1_Pos;
      group_ptr->ALIAS &= ~(uint32_t)(VADC_G_ALIAS_ALIAS1_Msk);
10001824:	24b0      	movs	r4, #176	; 0xb0
10001826:	4b03      	ldr	r3, [pc, #12]	; (10001834 <XMC_VADC_GROUP_ChannelInit+0x74>)
10001828:	5905      	ldr	r5, [r0, r4]
1000182a:	402b      	ands	r3, r5
1000182c:	5103      	str	r3, [r0, r4]
1000182e:	7b54      	ldrb	r4, [r2, #13]
10001830:	2308      	movs	r3, #8
10001832:	e7d9      	b.n	100017e8 <XMC_VADC_GROUP_ChannelInit+0x28>
10001834:	ffffe0ff 	.word	0xffffe0ff

10001838 <_init>:
  }
}

/* Init */
void _init(void)
{}
10001838:	4770      	bx	lr
1000183a:	46c0      	nop			; (mov r8, r8)

1000183c <TIMER_Start>:
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
1000183c:	2226      	movs	r2, #38	; 0x26
1000183e:	5c82      	ldrb	r2, [r0, r2]

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
10001840:	1c03      	adds	r3, r0, #0
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
10001842:	2001      	movs	r0, #1
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
10001844:	2a00      	cmp	r2, #0
10001846:	d007      	beq.n	10001858 <TIMER_Start+0x1c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001848:	2221      	movs	r2, #33	; 0x21
1000184a:	5c9a      	ldrb	r2, [r3, r2]
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
1000184c:	2000      	movs	r0, #0

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000184e:	2a00      	cmp	r2, #0
10001850:	d102      	bne.n	10001858 <TIMER_Start+0x1c>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
10001852:	695b      	ldr	r3, [r3, #20]
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10001854:	3201      	adds	r2, #1
10001856:	60da      	str	r2, [r3, #12]
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
10001858:	4770      	bx	lr
1000185a:	46c0      	nop			; (mov r8, r8)

1000185c <TIMER_Stop>:
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
1000185c:	2321      	movs	r3, #33	; 0x21
1000185e:	5cc2      	ldrb	r2, [r0, r3]
#endif
    status = TIMER_STATUS_SUCCESS;
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
10001860:	3b20      	subs	r3, #32
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001862:	2a00      	cmp	r2, #0
10001864:	d001      	beq.n	1000186a <TIMER_Stop+0xe>
  {
    status = TIMER_STATUS_FAILURE;
  }

  return (status);
}
10001866:	1c18      	adds	r0, r3, #0
10001868:	4770      	bx	lr

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
1000186a:	6941      	ldr	r1, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1000186c:	688a      	ldr	r2, [r1, #8]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
1000186e:	4213      	tst	r3, r2
10001870:	d0f9      	beq.n	10001866 <TIMER_Stop+0xa>
10001872:	2226      	movs	r2, #38	; 0x26
10001874:	5c82      	ldrb	r2, [r0, r2]
10001876:	2a00      	cmp	r2, #0
10001878:	d0f5      	beq.n	10001866 <TIMER_Stop+0xa>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
1000187a:	6908      	ldr	r0, [r1, #16]
1000187c:	4303      	orrs	r3, r0
1000187e:	610b      	str	r3, [r1, #16]
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
       }
#endif
    status = TIMER_STATUS_SUCCESS;
10001880:	2300      	movs	r3, #0
10001882:	e7f0      	b.n	10001866 <TIMER_Stop+0xa>

10001884 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
10001884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
10001886:	2321      	movs	r3, #33	; 0x21
10001888:	5cc7      	ldrb	r7, [r0, r3]
1000188a:	2f00      	cmp	r7, #0
1000188c:	d046      	beq.n	1000191c <TIMER_SetTimeInterval+0x98>
  status = TIMER_STATUS_FAILURE;

  if (false == TIMER_GetTimerStatus(handle_ptr))
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
1000188e:	6882      	ldr	r2, [r0, #8]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
10001890:	2301      	movs	r3, #1

  if (false == TIMER_GetTimerStatus(handle_ptr))
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
10001892:	428a      	cmp	r2, r1
10001894:	d840      	bhi.n	10001918 <TIMER_SetTimeInterval+0x94>
10001896:	6845      	ldr	r5, [r0, #4]
10001898:	42a9      	cmp	r1, r5
1000189a:	d83d      	bhi.n	10001918 <TIMER_SetTimeInterval+0x94>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
1000189c:	0beb      	lsrs	r3, r5, #15
1000189e:	4299      	cmp	r1, r3
100018a0:	d949      	bls.n	10001936 <TIMER_SetTimeInterval+0xb2>
100018a2:	2300      	movs	r3, #0
100018a4:	260e      	movs	r6, #14
100018a6:	1c2a      	adds	r2, r5, #0
      {
        lprescaler++;
100018a8:	1c5c      	adds	r4, r3, #1
100018aa:	1af3      	subs	r3, r6, r3
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
100018ac:	40da      	lsrs	r2, r3
      {
        lprescaler++;
100018ae:	1c23      	adds	r3, r4, #0
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
100018b0:	4291      	cmp	r1, r2
100018b2:	d8f8      	bhi.n	100018a6 <TIMER_SetTimeInterval+0x22>
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
100018b4:	2301      	movs	r3, #1
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
100018b6:	2f00      	cmp	r7, #0
100018b8:	d12e      	bne.n	10001918 <TIMER_SetTimeInterval+0x94>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
100018ba:	6903      	ldr	r3, [r0, #16]
100018bc:	1c05      	adds	r5, r0, #0
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
100018be:	69c0      	ldr	r0, [r0, #28]
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
100018c0:	681a      	ldr	r2, [r3, #0]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
100018c2:	7903      	ldrb	r3, [r0, #4]
100018c4:	370f      	adds	r7, #15
100018c6:	b2e6      	uxtb	r6, r4
100018c8:	43bb      	bics	r3, r7
100018ca:	403c      	ands	r4, r7
100018cc:	4323      	orrs	r3, r4
100018ce:	7103      	strb	r3, [r0, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
100018d0:	1c08      	adds	r0, r1, #0
100018d2:	2300      	movs	r3, #0
100018d4:	2100      	movs	r1, #0
100018d6:	f001 f8fd 	bl	10002ad4 <__aeabi_lmul>
100018da:	2320      	movs	r3, #32
100018dc:	425b      	negs	r3, r3
100018de:	18e3      	adds	r3, r4, r3
100018e0:	d422      	bmi.n	10001928 <TIMER_SetTimeInterval+0xa4>
100018e2:	1c08      	adds	r0, r1, #0
100018e4:	40d8      	lsrs	r0, r3
100018e6:	40e1      	lsrs	r1, r4
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
100018e8:	4a14      	ldr	r2, [pc, #80]	; (1000193c <TIMER_SetTimeInterval+0xb8>)
100018ea:	2300      	movs	r3, #0
100018ec:	f001 f8d2 	bl	10002a94 <__aeabi_uldivmod>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
100018f0:	b280      	uxth	r0, r0
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
100018f2:	2801      	cmp	r0, #1
100018f4:	d900      	bls.n	100018f8 <TIMER_SetTimeInterval+0x74>
        {
          (handle_ptr->period_value)--;
100018f6:	3801      	subs	r0, #1
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
100018f8:	210f      	movs	r1, #15
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
        {
          (handle_ptr->period_value)--;
100018fa:	8468      	strh	r0, [r5, #34]	; 0x22
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
100018fc:	4031      	ands	r1, r6
100018fe:	6968      	ldr	r0, [r5, #20]
10001900:	f7ff fda4 	bl	1000144c <XMC_CCU4_SLICE_SetPrescaler>
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
10001904:	696b      	ldr	r3, [r5, #20]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10001906:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
10001908:	635a      	str	r2, [r3, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
1000190a:	2200      	movs	r2, #0
1000190c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
1000190e:	692b      	ldr	r3, [r5, #16]
10001910:	68ea      	ldr	r2, [r5, #12]
10001912:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10001914:	611a      	str	r2, [r3, #16]
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
10001916:	2300      	movs	r3, #0
      }
#endif
    }
  }
  return (status);
}
10001918:	1c18      	adds	r0, r3, #0
1000191a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
1000191c:	6943      	ldr	r3, [r0, #20]
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
1000191e:	689a      	ldr	r2, [r3, #8]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
10001920:	2301      	movs	r3, #1

  if (false == TIMER_GetTimerStatus(handle_ptr))
10001922:	07d2      	lsls	r2, r2, #31
10001924:	d4f8      	bmi.n	10001918 <TIMER_SetTimeInterval+0x94>
10001926:	e7b2      	b.n	1000188e <TIMER_SetTimeInterval+0xa>
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
10001928:	2320      	movs	r3, #32
1000192a:	1c0a      	adds	r2, r1, #0
1000192c:	1b1b      	subs	r3, r3, r4
1000192e:	409a      	lsls	r2, r3
10001930:	40e0      	lsrs	r0, r4
10001932:	4310      	orrs	r0, r2
10001934:	e7d7      	b.n	100018e6 <TIMER_SetTimeInterval+0x62>
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
10001936:	2400      	movs	r4, #0
10001938:	e7bc      	b.n	100018b4 <TIMER_SetTimeInterval+0x30>
1000193a:	46c0      	nop			; (mov r8, r8)
1000193c:	05f5e100 	.word	0x05f5e100

10001940 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
10001940:	b570      	push	{r4, r5, r6, lr}
10001942:	1c04      	adds	r4, r0, #0
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
10001944:	6900      	ldr	r0, [r0, #16]
10001946:	f000 f94d 	bl	10001be4 <GLOBAL_CCU4_Init>
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC |= ((uint32_t) 1) << slice_number;
1000194a:	2601      	movs	r6, #1
1000194c:	1c05      	adds	r5, r0, #0
1000194e:	1c30      	adds	r0, r6, #0

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
10001950:	6923      	ldr	r3, [r4, #16]
10001952:	6899      	ldr	r1, [r3, #8]
10001954:	7e23      	ldrb	r3, [r4, #24]
10001956:	68ca      	ldr	r2, [r1, #12]
10001958:	4098      	lsls	r0, r3
1000195a:	1c03      	adds	r3, r0, #0
1000195c:	4313      	orrs	r3, r2
1000195e:	60cb      	str	r3, [r1, #12]
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
10001960:	6960      	ldr	r0, [r4, #20]
10001962:	69e1      	ldr	r1, [r4, #28]
10001964:	f7ff fd5a 	bl	1000141c <XMC_CCU4_SLICE_CompareInit>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
10001968:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
1000196a:	6960      	ldr	r0, [r4, #20]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
1000196c:	68e2      	ldr	r2, [r4, #12]
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
1000196e:	6343      	str	r3, [r0, #52]	; 0x34
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
10001970:	2300      	movs	r3, #0
10001972:	63c3      	str	r3, [r0, #60]	; 0x3c
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
10001974:	6923      	ldr	r3, [r4, #16]
10001976:	689b      	ldr	r3, [r3, #8]
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;  
10001978:	611a      	str	r2, [r3, #16]
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
1000197a:	2325      	movs	r3, #37	; 0x25
1000197c:	5ce3      	ldrb	r3, [r4, r3]
1000197e:	2b00      	cmp	r3, #0
10001980:	d10d      	bne.n	1000199e <TIMER_CCU4_lInit+0x5e>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR |= (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
10001982:	2302      	movs	r3, #2
10001984:	6902      	ldr	r2, [r0, #16]
10001986:	4313      	orrs	r3, r2
10001988:	6103      	str	r3, [r0, #16]
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
1000198a:	2226      	movs	r2, #38	; 0x26
1000198c:	2301      	movs	r3, #1
1000198e:	54a3      	strb	r3, [r4, r2]

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
10001990:	3a02      	subs	r2, #2
10001992:	5ca2      	ldrb	r2, [r4, r2]
10001994:	2a00      	cmp	r2, #0
10001996:	d000      	beq.n	1000199a <TIMER_CCU4_lInit+0x5a>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
10001998:	60c3      	str	r3, [r0, #12]
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
  }

  return (status);
}
1000199a:	1c28      	adds	r0, r5, #0
1000199c:	bd70      	pop	{r4, r5, r6, pc}

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
1000199e:	2320      	movs	r3, #32
100019a0:	2100      	movs	r1, #0
100019a2:	5ce2      	ldrb	r2, [r4, r3]
100019a4:	f7ff fd5c 	bl	10001460 <XMC_CCU4_SLICE_SetInterruptNode>
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
                                                const XMC_CCU4_SLICE_IRQ_ID_t event)
{
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
100019a8:	23a4      	movs	r3, #164	; 0xa4
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
100019aa:	6960      	ldr	r0, [r4, #20]
100019ac:	58c2      	ldr	r2, [r0, r3]
100019ae:	4316      	orrs	r6, r2
100019b0:	50c6      	str	r6, [r0, r3]
100019b2:	e7e6      	b.n	10001982 <TIMER_CCU4_lInit+0x42>

100019b4 <TIMER_Init>:

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
100019b4:	2226      	movs	r2, #38	; 0x26
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
100019b6:	b508      	push	{r3, lr}

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
100019b8:	5c82      	ldrb	r2, [r0, r2]
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
100019ba:	1c03      	adds	r3, r0, #0
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
100019bc:	2000      	movs	r0, #0
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
100019be:	2a00      	cmp	r2, #0
100019c0:	d103      	bne.n	100019ca <TIMER_Init+0x16>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
100019c2:	3221      	adds	r2, #33	; 0x21
100019c4:	5c9a      	ldrb	r2, [r3, r2]
100019c6:	2a00      	cmp	r2, #0
100019c8:	d000      	beq.n	100019cc <TIMER_Init+0x18>
    }
#endif
  }

  return (status);
}
100019ca:	bd08      	pop	{r3, pc}
100019cc:	1c18      	adds	r0, r3, #0
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
100019ce:	f7ff ffb7 	bl	10001940 <TIMER_CCU4_lInit>
100019d2:	e7fa      	b.n	100019ca <TIMER_Init+0x16>

100019d4 <RTC_lConfigureInterrupts>:
}
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
100019d4:	b510      	push	{r4, lr}
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
100019d6:	6843      	ldr	r3, [r0, #4]
}
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
100019d8:	1c04      	adds	r4, r0, #0
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
100019da:	78da      	ldrb	r2, [r3, #3]
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
100019dc:	7898      	ldrb	r0, [r3, #2]
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
100019de:	0092      	lsls	r2, r2, #2
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
100019e0:	0040      	lsls	r0, r0, #1
100019e2:	4310      	orrs	r0, r2
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
100019e4:	785a      	ldrb	r2, [r3, #1]
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
100019e6:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
100019e8:	791a      	ldrb	r2, [r3, #4]
100019ea:	00d2      	lsls	r2, r2, #3
100019ec:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
100019ee:	795a      	ldrb	r2, [r3, #5]
100019f0:	0152      	lsls	r2, r2, #5
100019f2:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
100019f4:	799a      	ldrb	r2, [r3, #6]
100019f6:	0192      	lsls	r2, r2, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
100019f8:	4310      	orrs	r0, r2
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
100019fa:	d104      	bne.n	10001a06 <RTC_lConfigureInterrupts+0x32>
#endif
    interrupt_configured = true;
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
100019fc:	79db      	ldrb	r3, [r3, #7]
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
  uint32_t regval;
  bool interrupt_configured = false;
100019fe:	2000      	movs	r0, #0
#endif
    interrupt_configured = true;
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
10001a00:	2b01      	cmp	r3, #1
10001a02:	d007      	beq.n	10001a14 <RTC_lConfigureInterrupts+0x40>
		interrupt_configured = true;
	}


  return (interrupt_configured);
}
10001a04:	bd10      	pop	{r4, pc}

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
  {
    XMC_RTC_EnableEvent(regval);
10001a06:	f7ff fbe5 	bl	100011d4 <XMC_RTC_EnableEvent>
10001a0a:	6863      	ldr	r3, [r4, #4]
		XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_NMIREQ_RTC_PI);
#endif
#if ((UC_FAMILY == XMC4) && (RTC_TIMER_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
#endif
    interrupt_configured = true;
10001a0c:	2001      	movs	r0, #1
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
10001a0e:	79db      	ldrb	r3, [r3, #7]
10001a10:	2b01      	cmp	r3, #1
10001a12:	d1f7      	bne.n	10001a04 <RTC_lConfigureInterrupts+0x30>
	{
		XMC_RTC_EnableEvent((uint32_t)XMC_RTC_EVENT_ALARM);
10001a14:	2080      	movs	r0, #128	; 0x80
10001a16:	0040      	lsls	r0, r0, #1
10001a18:	f7ff fbdc 	bl	100011d4 <XMC_RTC_EnableEvent>
#endif
#if ((UC_FAMILY == XMC4) && (RTC_ALARM_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
#endif

		interrupt_configured = true;
10001a1c:	2001      	movs	r0, #1
10001a1e:	e7f1      	b.n	10001a04 <RTC_lConfigureInterrupts+0x30>

10001a20 <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(const RTC_t *const handler)
{
10001a20:	b538      	push	{r3, r4, r5, lr}
10001a22:	1c04      	adds	r4, r0, #0
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(
      		(GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM,handler->config->ai_listener);
    }
  #else
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_PERIODIC,
10001a24:	6843      	ldr	r3, [r0, #4]
10001a26:	2002      	movs	r0, #2
10001a28:	6899      	ldr	r1, [r3, #8]
10001a2a:	f000 f8d7 	bl	10001bdc <GLOBAL_SCU_XMC1_RegisterCallback>
                                                                   handler->config->pi_listener);

    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
10001a2e:	6863      	ldr	r3, [r4, #4]
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC4_RegisterCallback(
      		(GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM,handler->config->ai_listener);
    }
  #else
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_PERIODIC,
10001a30:	1c05      	adds	r5, r0, #0
                                                                   handler->config->pi_listener);

    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
10001a32:	79da      	ldrb	r2, [r3, #7]
10001a34:	2000      	movs	r0, #0
10001a36:	2a01      	cmp	r2, #1
10001a38:	d000      	beq.n	10001a3c <RTC_lRegister_Callbacks+0x1c>
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)((uint32_t)pi_status & (uint32_t)ai_status);
}
10001a3a:	bd38      	pop	{r3, r4, r5, pc}
    pi_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_PERIODIC,
                                                                   handler->config->pi_listener);

    if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
    {
      ai_status = (XMC_RTC_STATUS_t)GLOBAL_SCU_XMC1_RegisterCallback((GLOBAL_SCU_XMC1_EVENT_t)GLOBAL_SCU_XMC1_EVENT_RTC_ALARM,
10001a3c:	68d9      	ldr	r1, [r3, #12]
10001a3e:	3004      	adds	r0, #4
10001a40:	f000 f8cc 	bl	10001bdc <GLOBAL_SCU_XMC1_RegisterCallback>
10001a44:	4028      	ands	r0, r5
10001a46:	b2c0      	uxtb	r0, r0
10001a48:	e7f7      	b.n	10001a3a <RTC_lRegister_Callbacks+0x1a>
10001a4a:	46c0      	nop			; (mov r8, r8)

10001a4c <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
10001a4c:	b538      	push	{r3, r4, r5, lr}
10001a4e:	1c05      	adds	r5, r0, #0

#if (RTC_INTERRUPT_ENABLED == 1)
#if (UC_FAMILY == XMC4)
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC4_Init(GLOBAL_SCU_HANDLE);
#else
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_HANDLE);
10001a50:	4812      	ldr	r0, [pc, #72]	; (10001a9c <RTC_Init+0x50>)
10001a52:	f000 f869 	bl	10001b28 <GLOBAL_SCU_XMC1_Init>
10001a56:	1e04      	subs	r4, r0, #0
#endif
  if (rtc_initstatus == RTC_STATUS_SUCCESS)
10001a58:	d102      	bne.n	10001a60 <RTC_Init+0x14>
  {
#endif
      if (handler->initialized == false)
10001a5a:	7a2b      	ldrb	r3, [r5, #8]
10001a5c:	2b00      	cmp	r3, #0
10001a5e:	d001      	beq.n	10001a64 <RTC_Init+0x18>
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
}
10001a60:	1c20      	adds	r0, r4, #0
10001a62:	bd38      	pop	{r3, r4, r5, pc}
  {
#endif
      if (handler->initialized == false)
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init(handler->time_alarm_config);
10001a64:	6828      	ldr	r0, [r5, #0]
10001a66:	f7ff fb85 	bl	10001174 <XMC_RTC_Init>

        if (status == XMC_RTC_STATUS_OK)
10001a6a:	2800      	cmp	r0, #0
10001a6c:	d001      	beq.n	10001a72 <RTC_Init+0x26>
            rtc_initstatus = RTC_STATUS_SUCCESS;
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
10001a6e:	2401      	movs	r4, #1
10001a70:	e7f6      	b.n	10001a60 <RTC_Init+0x14>
        status = XMC_RTC_Init(handler->time_alarm_config);

        if (status == XMC_RTC_STATUS_OK)
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
10001a72:	1c28      	adds	r0, r5, #0
10001a74:	f7ff ffae 	bl	100019d4 <RTC_lConfigureInterrupts>

          if (interrupt_configured == true)
10001a78:	2800      	cmp	r0, #0
10001a7a:	d106      	bne.n	10001a8a <RTC_Init+0x3e>
          }

          if (status == XMC_RTC_STATUS_OK)
          {
          	/* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
10001a7c:	686b      	ldr	r3, [r5, #4]
10001a7e:	781b      	ldrb	r3, [r3, #0]
10001a80:	2b01      	cmp	r3, #1
10001a82:	d008      	beq.n	10001a96 <RTC_Init+0x4a>
            {
              RTC_Start();
            }
            handler->initialized = true;
10001a84:	2301      	movs	r3, #1
10001a86:	722b      	strb	r3, [r5, #8]
10001a88:	e7ea      	b.n	10001a60 <RTC_Init+0x14>
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);

          if (interrupt_configured == true)
          {
            status = RTC_lRegister_Callbacks(handler);
10001a8a:	1c28      	adds	r0, r5, #0
10001a8c:	f7ff ffc8 	bl	10001a20 <RTC_lRegister_Callbacks>
          }

          if (status == XMC_RTC_STATUS_OK)
10001a90:	2800      	cmp	r0, #0
10001a92:	d1e5      	bne.n	10001a60 <RTC_Init+0x14>
10001a94:	e7f2      	b.n	10001a7c <RTC_Init+0x30>
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
	XMC_RTC_Start();
10001a96:	f7ff fd1f 	bl	100014d8 <XMC_RTC_Start>
10001a9a:	e7f3      	b.n	10001a84 <RTC_Init+0x38>
10001a9c:	2000057c 	.word	0x2000057c

10001aa0 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
10001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    INTERRUPT_Enable(handler);
  }
#endif

#if(UC_FAMILY == XMC1)
  NVIC_SetPriority(handler->node, handler->priority);
10001aa2:	7805      	ldrb	r5, [r0, #0]
10001aa4:	7843      	ldrb	r3, [r0, #1]
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
10001aa6:	b26a      	sxtb	r2, r5
10001aa8:	2a00      	cmp	r2, #0
10001aaa:	db20      	blt.n	10001aee <INTERRUPT_Init+0x4e>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001aac:	0892      	lsrs	r2, r2, #2
10001aae:	491c      	ldr	r1, [pc, #112]	; (10001b20 <INTERRUPT_Init+0x80>)
10001ab0:	2403      	movs	r4, #3
10001ab2:	0092      	lsls	r2, r2, #2
10001ab4:	1851      	adds	r1, r2, r1
10001ab6:	22ff      	movs	r2, #255	; 0xff
10001ab8:	27c0      	movs	r7, #192	; 0xc0
10001aba:	402c      	ands	r4, r5
10001abc:	00e4      	lsls	r4, r4, #3
10001abe:	4694      	mov	ip, r2
10001ac0:	40a2      	lsls	r2, r4
10001ac2:	00bf      	lsls	r7, r7, #2
10001ac4:	59ce      	ldr	r6, [r1, r7]
10001ac6:	4396      	bics	r6, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001ac8:	019a      	lsls	r2, r3, #6
10001aca:	4663      	mov	r3, ip
10001acc:	401a      	ands	r2, r3
10001ace:	1c13      	adds	r3, r2, #0
10001ad0:	40a3      	lsls	r3, r4
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001ad2:	4333      	orrs	r3, r6
10001ad4:	51cb      	str	r3, [r1, r7]
#if (UC_SERIES == XMC14)
  XMC_SCU_SetInterruptControl((uint8_t)handler->node, (XMC_SCU_IRQCTRL_t)((handler->node << 8) | handler->irqctrl));
#endif

  /* Enable the interrupt if enable_at_init is enabled */
  if (handler->enable_at_init == true)
10001ad6:	7883      	ldrb	r3, [r0, #2]
10001ad8:	2b00      	cmp	r3, #0
10001ada:	d006      	beq.n	10001aea <INTERRUPT_Init+0x4a>
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10001adc:	231f      	movs	r3, #31
10001ade:	401d      	ands	r5, r3
10001ae0:	3b1e      	subs	r3, #30
10001ae2:	40ab      	lsls	r3, r5
10001ae4:	1c1d      	adds	r5, r3, #0
10001ae6:	4b0e      	ldr	r3, [pc, #56]	; (10001b20 <INTERRUPT_Init+0x80>)
10001ae8:	601d      	str	r5, [r3, #0]
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
}
10001aea:	2000      	movs	r0, #0
10001aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10001aee:	490d      	ldr	r1, [pc, #52]	; (10001b24 <INTERRUPT_Init+0x84>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001af0:	27ff      	movs	r7, #255	; 0xff
10001af2:	468c      	mov	ip, r1
10001af4:	220f      	movs	r2, #15
10001af6:	2103      	movs	r1, #3
10001af8:	b2ec      	uxtb	r4, r5
10001afa:	4022      	ands	r2, r4
10001afc:	4021      	ands	r1, r4
10001afe:	1c3c      	adds	r4, r7, #0
10001b00:	00c9      	lsls	r1, r1, #3
10001b02:	408c      	lsls	r4, r1
10001b04:	3a08      	subs	r2, #8
10001b06:	0892      	lsrs	r2, r2, #2
10001b08:	0092      	lsls	r2, r2, #2
10001b0a:	4462      	add	r2, ip
10001b0c:	69d6      	ldr	r6, [r2, #28]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001b0e:	019b      	lsls	r3, r3, #6
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b10:	43a6      	bics	r6, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001b12:	403b      	ands	r3, r7
10001b14:	408b      	lsls	r3, r1
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b16:	1c31      	adds	r1, r6, #0
10001b18:	4319      	orrs	r1, r3
10001b1a:	61d1      	str	r1, [r2, #28]
10001b1c:	e7db      	b.n	10001ad6 <INTERRUPT_Init+0x36>
10001b1e:	46c0      	nop			; (mov r8, r8)
10001b20:	e000e100 	.word	0xe000e100
10001b24:	e000ed00 	.word	0xe000ed00

10001b28 <GLOBAL_SCU_XMC1_Init>:

/*  Function to configure SCU Interrupts based on  user configuration.
 * 
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_XMC1_t*const handle)
{
10001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
10001b2a:	4647      	mov	r7, r8
10001b2c:	b480      	push	{r7}
  GLOBAL_SCU_XMC1_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
10001b2e:	7903      	ldrb	r3, [r0, #4]
	handle->initialized = true;
    initstatus = GLOBAL_SCU_XMC1_STATUS_SUCCESS;
  }
  else
  {
    initstatus = GLOBAL_SCU_XMC1_STATUS_FAILURE;
10001b30:	2601      	movs	r6, #1
{
  GLOBAL_SCU_XMC1_STATUS_t initstatus;

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
10001b32:	2b00      	cmp	r3, #0
10001b34:	d003      	beq.n	10001b3e <GLOBAL_SCU_XMC1_Init+0x16>
  {
    initstatus = GLOBAL_SCU_XMC1_STATUS_FAILURE;
  }
  	
  return (initstatus);
}
10001b36:	1c30      	adds	r0, r6, #0
10001b38:	bc04      	pop	{r2}
10001b3a:	4690      	mov	r8, r2
10001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b3e:	25c0      	movs	r5, #192	; 0xc0

  XMC_ASSERT("GLOBAL_SCU_XMC1_Init: NULL handle", (handle != NULL));

  if (handle->initialized == false)
  {
    NVIC_SetPriority((IRQn_Type)0U,(uint32_t)handle->config->priority[0]);
10001b40:	6804      	ldr	r4, [r0, #0]
10001b42:	491a      	ldr	r1, [pc, #104]	; (10001bac <GLOBAL_SCU_XMC1_Init+0x84>)
10001b44:	00ad      	lsls	r5, r5, #2
10001b46:	7822      	ldrb	r2, [r4, #0]
10001b48:	594f      	ldr	r7, [r1, r5]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001b4a:	33ff      	adds	r3, #255	; 0xff
10001b4c:	0192      	lsls	r2, r2, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b4e:	439f      	bics	r7, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001b50:	401a      	ands	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b52:	433a      	orrs	r2, r7
10001b54:	514a      	str	r2, [r1, r5]
10001b56:	594a      	ldr	r2, [r1, r5]
10001b58:	4f15      	ldr	r7, [pc, #84]	; (10001bb0 <GLOBAL_SCU_XMC1_Init+0x88>)
10001b5a:	4694      	mov	ip, r2
  	NVIC_SetPriority((IRQn_Type)1U,(uint32_t)handle->config->priority[1]);
10001b5c:	7862      	ldrb	r2, [r4, #1]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001b5e:	0192      	lsls	r2, r2, #6
10001b60:	401a      	ands	r2, r3
10001b62:	0212      	lsls	r2, r2, #8
10001b64:	4690      	mov	r8, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b66:	4662      	mov	r2, ip
10001b68:	4017      	ands	r7, r2
10001b6a:	4642      	mov	r2, r8
10001b6c:	433a      	orrs	r2, r7
10001b6e:	514a      	str	r2, [r1, r5]
  	NVIC_SetPriority((IRQn_Type)2U,(uint32_t)handle->config->priority[2]);
10001b70:	78a2      	ldrb	r2, [r4, #2]
10001b72:	594f      	ldr	r7, [r1, r5]
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001b74:	0192      	lsls	r2, r2, #6
10001b76:	4013      	ands	r3, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b78:	4a0e      	ldr	r2, [pc, #56]	; (10001bb4 <GLOBAL_SCU_XMC1_Init+0x8c>)
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001b7a:	041b      	lsls	r3, r3, #16
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001b7c:	403a      	ands	r2, r7
10001b7e:	4313      	orrs	r3, r2
10001b80:	514b      	str	r3, [r1, r5]

  	/* enable the IRQ0 */
  	if (handle->config->enable_at_init[0] == true)
10001b82:	78e3      	ldrb	r3, [r4, #3]
10001b84:	2b00      	cmp	r3, #0
10001b86:	d000      	beq.n	10001b8a <GLOBAL_SCU_XMC1_Init+0x62>
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10001b88:	600e      	str	r6, [r1, #0]
  	  XMC_SCU_SetInterruptControl(0, XMC_SCU_IRQCTRL_SCU_SR0_IRQ0);
#endif
  	  NVIC_EnableIRQ((IRQn_Type)0U);
  	}
  	/* enable the IRQ1 */
  	if (handle->config->enable_at_init[1] == true)
10001b8a:	7923      	ldrb	r3, [r4, #4]
10001b8c:	2b00      	cmp	r3, #0
10001b8e:	d002      	beq.n	10001b96 <GLOBAL_SCU_XMC1_Init+0x6e>
10001b90:	2202      	movs	r2, #2
10001b92:	4b06      	ldr	r3, [pc, #24]	; (10001bac <GLOBAL_SCU_XMC1_Init+0x84>)
10001b94:	601a      	str	r2, [r3, #0]
  	  XMC_SCU_SetInterruptControl(1, XMC_SCU_IRQCTRL_SCU_SR1_IRQ1);
#endif
  	  NVIC_EnableIRQ((IRQn_Type)1U);
  	}
  	/* enable the IRQ2 */
  	if (handle->config->enable_at_init[2] == true)
10001b96:	7963      	ldrb	r3, [r4, #5]
10001b98:	2b00      	cmp	r3, #0
10001b9a:	d002      	beq.n	10001ba2 <GLOBAL_SCU_XMC1_Init+0x7a>
10001b9c:	2204      	movs	r2, #4
10001b9e:	4b03      	ldr	r3, [pc, #12]	; (10001bac <GLOBAL_SCU_XMC1_Init+0x84>)
10001ba0:	601a      	str	r2, [r3, #0]
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(2, XMC_SCU_IRQCTRL_SCU_SR2_IRQ2);
#endif
      NVIC_EnableIRQ((IRQn_Type)2U);
  	}
	handle->initialized = true;
10001ba2:	2301      	movs	r3, #1
    initstatus = GLOBAL_SCU_XMC1_STATUS_SUCCESS;
10001ba4:	2600      	movs	r6, #0
#if (UC_SERIES == XMC14)
  	  XMC_SCU_SetInterruptControl(2, XMC_SCU_IRQCTRL_SCU_SR2_IRQ2);
#endif
      NVIC_EnableIRQ((IRQn_Type)2U);
  	}
	handle->initialized = true;
10001ba6:	7103      	strb	r3, [r0, #4]
10001ba8:	e7c5      	b.n	10001b36 <GLOBAL_SCU_XMC1_Init+0xe>
10001baa:	46c0      	nop			; (mov r8, r8)
10001bac:	e000e100 	.word	0xe000e100
10001bb0:	ffff00ff 	.word	0xffff00ff
10001bb4:	ff00ffff 	.word	0xff00ffff

10001bb8 <SCU_0_IRQHandler>:
#if (UC_SERIES != XMC14)
/*
 * @brief  SCU_0 Interrupt Handler
 */
void SCU_0_IRQHandler(void)
{
10001bb8:	b508      	push	{r3, lr}
  XMC_SCU_IRQHandler(0U);
10001bba:	2000      	movs	r0, #0
10001bbc:	f7ff fbec 	bl	10001398 <XMC_SCU_IRQHandler>
}
10001bc0:	bd08      	pop	{r3, pc}
10001bc2:	46c0      	nop			; (mov r8, r8)

10001bc4 <SCU_1_IRQHandler>:

/*  SCU_1 Interrupt Handler.
 * 
 */
void SCU_1_IRQHandler(void)
{
10001bc4:	b508      	push	{r3, lr}
  XMC_SCU_IRQHandler(1U);
10001bc6:	2001      	movs	r0, #1
10001bc8:	f7ff fbe6 	bl	10001398 <XMC_SCU_IRQHandler>
}
10001bcc:	bd08      	pop	{r3, pc}
10001bce:	46c0      	nop			; (mov r8, r8)

10001bd0 <SCU_2_IRQHandler>:

/*  SCU2 Interrupt Handler.
 *
 */
void SCU_2_IRQHandler(void)
{
10001bd0:	b508      	push	{r3, lr}
  XMC_SCU_IRQHandler(2U);
10001bd2:	2002      	movs	r0, #2
10001bd4:	f7ff fbe0 	bl	10001398 <XMC_SCU_IRQHandler>
}
10001bd8:	bd08      	pop	{r3, pc}
10001bda:	46c0      	nop			; (mov r8, r8)

10001bdc <GLOBAL_SCU_XMC1_RegisterCallback>:
/*
 * @brief  Function to register callback event
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_RegisterCallback(const GLOBAL_SCU_XMC1_EVENT_t event,
                                                          const GLOBAL_SCU_XMC1_EVENT_HANDLER_t handler)
{
10001bdc:	b508      	push	{r3, lr}
  GLOBAL_SCU_XMC1_STATUS_t status;

  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: Invalid event", (GLOBAL_SCU_XMC1_CHECK_EVENT(event)));
  XMC_ASSERT("GLOBAL_SCU_XMC1_RegisterCallback: NULL Handle", (handler != NULL));
  
  status = (GLOBAL_SCU_XMC1_STATUS_t)XMC_SCU_INTERRUPT_SetEventHandler(event, handler);
10001bde:	f7ff fbbf 	bl	10001360 <XMC_SCU_INTERRUPT_SetEventHandler>

  return (status);
}
10001be2:	bd08      	pop	{r3, pc}

10001be4 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
10001be4:	b510      	push	{r4, lr}
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
10001be6:	7b43      	ldrb	r3, [r0, #13]
10001be8:	2b00      	cmp	r3, #0
10001bea:	d10c      	bne.n	10001c06 <GLOBAL_CCU4_Init+0x22>
10001bec:	1c04      	adds	r4, r0, #0
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
10001bee:	7b01      	ldrb	r1, [r0, #12]
10001bf0:	6880      	ldr	r0, [r0, #8]
10001bf2:	f7ff fbf9 	bl	100013e8 <XMC_CCU4_Init>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC |= (uint32_t) CCU4_GIDLC_SPRB_Msk;
10001bf6:	2180      	movs	r1, #128	; 0x80
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
10001bf8:	68a2      	ldr	r2, [r4, #8]
10001bfa:	0049      	lsls	r1, r1, #1
10001bfc:	68d3      	ldr	r3, [r2, #12]
10001bfe:	430b      	orrs	r3, r1
10001c00:	60d3      	str	r3, [r2, #12]
    /* Restricts multiple initializations */
    handle->is_initialized = true;
10001c02:	2301      	movs	r3, #1
10001c04:	7363      	strb	r3, [r4, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
}
10001c06:	2000      	movs	r0, #0
10001c08:	bd10      	pop	{r4, pc}
10001c0a:	46c0      	nop			; (mov r8, r8)

10001c0c <GLOBAL_ADC_Init>:
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/**
 * This function initializes all instances of the ADC Global APP and low level app.
 */
GLOBAL_ADC_STATUS_t GLOBAL_ADC_Init(GLOBAL_ADC_t *const handle_ptr)
{
10001c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001c0e:	464f      	mov	r7, r9
10001c10:	4646      	mov	r6, r8
10001c12:	b4c0      	push	{r6, r7}
  XMC_ASSERT("GLOBAL_ADC_Init:Invalid handle_ptr", (handle_ptr != NULL))
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
  uint32_t group_index;
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
10001c14:	7d03      	ldrb	r3, [r0, #20]
10001c16:	2b02      	cmp	r3, #2
10001c18:	d004      	beq.n	10001c24 <GLOBAL_ADC_Init+0x18>
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
  }
  return (handle_ptr->init_state);
}
10001c1a:	1c18      	adds	r0, r3, #0
10001c1c:	bc0c      	pop	{r2, r3}
10001c1e:	4690      	mov	r8, r2
10001c20:	4699      	mov	r9, r3
10001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001c24:	1c04      	adds	r4, r0, #0
#endif

  if (GLOBAL_ADC_UNINITIALIZED == handle_ptr->init_state)
  {  
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);
10001c26:	68c0      	ldr	r0, [r0, #12]
10001c28:	68a1      	ldr	r1, [r4, #8]
10001c2a:	f7ff fc87 	bl	1000153c <XMC_VADC_GLOBAL_Init>

__STATIC_INLINE void XMC_VADC_GLOBAL_DisablePostCalibration(XMC_VADC_GLOBAL_t *const global_ptr, uint32_t group_number)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_DisablePostCalibration:Wrong Module Pointer", (global_ptr == VADC))

  global_ptr->GLOBCFG |= (uint32_t)((uint32_t)1 << ((uint32_t)VADC_GLOBCFG_DPCAL0_Pos + group_number));
10001c2e:	2380      	movs	r3, #128	; 0x80
10001c30:	4698      	mov	r8, r3
10001c32:	3b7f      	subs	r3, #127	; 0x7f
10001c34:	1c25      	adds	r5, r4, #0

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10001c36:	2600      	movs	r6, #0
10001c38:	4699      	mov	r9, r3

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
10001c3a:	2700      	movs	r7, #0
    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
    {
      /*Initialize Group*/
      XMC_VADC_GROUP_Init(handle_ptr->group_ptrs_array[group_index]->group_handle,
10001c3c:	682b      	ldr	r3, [r5, #0]
10001c3e:	cb03      	ldmia	r3!, {r0, r1}
10001c40:	f7ff fce2 	bl	10001608 <XMC_VADC_GROUP_Init>
    		            handle_ptr->group_ptrs_array[group_index]->group_config_handle);

      /* Switch on the converter of the Group[group_index]*/
      XMC_VADC_GROUP_SetPowerMode(handle_ptr->group_ptrs_array[group_index]->group_handle,
10001c44:	682b      	ldr	r3, [r5, #0]
10001c46:	2103      	movs	r1, #3
10001c48:	6818      	ldr	r0, [r3, #0]
10001c4a:	f7ff fd47 	bl	100016dc <XMC_VADC_GROUP_SetPowerMode>
                                  XMC_VADC_GROUP_POWERMODE_NORMAL);

      /* Disable the post calibration option for the respective group*/
      if ((bool)false == handle_ptr->group_ptrs_array[group_index]->post_calibration)
10001c4e:	682b      	ldr	r3, [r5, #0]
10001c50:	7a1b      	ldrb	r3, [r3, #8]
10001c52:	2b00      	cmp	r3, #0
10001c54:	d10a      	bne.n	10001c6c <GLOBAL_ADC_Init+0x60>
10001c56:	4643      	mov	r3, r8
      {
        XMC_VADC_GLOBAL_DisablePostCalibration(handle_ptr->module_ptr,group_index);
10001c58:	68e1      	ldr	r1, [r4, #12]
10001c5a:	4648      	mov	r0, r9
10001c5c:	58ca      	ldr	r2, [r1, r3]
10001c5e:	1c33      	adds	r3, r6, #0
10001c60:	3310      	adds	r3, #16
10001c62:	4098      	lsls	r0, r3
10001c64:	1c03      	adds	r3, r0, #0
10001c66:	4313      	orrs	r3, r2
10001c68:	4642      	mov	r2, r8
10001c6a:	508b      	str	r3, [r1, r2]
      }

#if(XMC_VADC_SHS_AVAILABLE == 1U)
      XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode(handle_ptr->global_shs_ptr, (XMC_VADC_GROUP_INDEX_t)group_index);
10001c6c:	b2f1      	uxtb	r1, r6
10001c6e:	6920      	ldr	r0, [r4, #16]
10001c70:	f7ff fd3c 	bl	100016ec <XMC_VADC_GLOBAL_SHS_EnableAcceleratedMode>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
10001c74:	cd08      	ldmia	r5!, {r3}
10001c76:	725f      	strb	r7, [r3, #9]
    /* Initialize an instance of Global hardware */
    XMC_VADC_GLOBAL_Init(handle_ptr->module_ptr, handle_ptr->global_config_handle);

    /* Initialize all the Groups */
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
    for(group_index = (uint32_t)0; group_index < XMC_VADC_MAXIMUM_NUM_GROUPS; group_index++)
10001c78:	2e01      	cmp	r6, #1
10001c7a:	d105      	bne.n	10001c88 <GLOBAL_ADC_Init+0x7c>
#endif

      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
10001c7c:	7d63      	ldrb	r3, [r4, #21]
10001c7e:	2b00      	cmp	r3, #0
10001c80:	d104      	bne.n	10001c8c <GLOBAL_ADC_Init+0x80>
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
    }
    handle_ptr->init_state = GLOBAL_ADC_SUCCESS;
10001c82:	2300      	movs	r3, #0
10001c84:	7523      	strb	r3, [r4, #20]
10001c86:	e7c8      	b.n	10001c1a <GLOBAL_ADC_Init+0xe>
10001c88:	2601      	movs	r6, #1
10001c8a:	e7d7      	b.n	10001c3c <GLOBAL_ADC_Init+0x30>
      handle_ptr->group_ptrs_array[group_index]->state = GLOBAL_ADC_SUCCESS;
    }
#endif /* _XMC_VADC_GROUP_AVAILABLE_ */
    if((bool)true == handle_ptr->enable_startup_calibration)
    {
    	XMC_VADC_GLOBAL_StartupCalibration(handle_ptr->module_ptr);
10001c8c:	68e0      	ldr	r0, [r4, #12]
10001c8e:	f7ff fc89 	bl	100015a4 <XMC_VADC_GLOBAL_StartupCalibration>
10001c92:	e7f6      	b.n	10001c82 <GLOBAL_ADC_Init+0x76>

10001c94 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
10001c94:	b510      	push	{r4, lr}
10001c96:	1c04      	adds	r4, r0, #0
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
10001c98:	7b01      	ldrb	r1, [r0, #12]
10001c9a:	1d02      	adds	r2, r0, #4
10001c9c:	6800      	ldr	r0, [r0, #0]
10001c9e:	f7ff fa2b 	bl	100010f8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
10001ca2:	6820      	ldr	r0, [r4, #0]
10001ca4:	7b21      	ldrb	r1, [r4, #12]
10001ca6:	7b62      	ldrb	r2, [r4, #13]
10001ca8:	f7ff fbf4 	bl	10001494 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
}
10001cac:	2000      	movs	r0, #0
10001cae:	bd10      	pop	{r4, pc}

10001cb0 <SystemCoreSetup>:
};
 
void SystemCoreSetup(void)
{

}
10001cb0:	4770      	bx	lr
10001cb2:	46c0      	nop			; (mov r8, r8)

10001cb4 <CLOCK_XMC1_Init>:
  CLOCK_XMC1_STATUS_t status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t loci_event_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t stdbyclkfail_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t loss_ext_clock_event_status = CLOCK_XMC1_STATUS_SUCCESS;
  CLOCK_XMC1_STATUS_t dco1_out_sync_status = CLOCK_XMC1_STATUS_SUCCESS;
  if (handle->init_status == false)
10001cb4:	7803      	ldrb	r3, [r0, #0]
10001cb6:	2b00      	cmp	r3, #0
10001cb8:	d101      	bne.n	10001cbe <CLOCK_XMC1_Init+0xa>
#endif
    status = (CLOCK_XMC1_STATUS_t)(((uint32_t)loci_event_status) | ((uint32_t)stdbyclkfail_status) |
    		                       ((uint32_t)loss_ext_clock_event_status) | ((uint32_t)dco1_out_sync_status));
    if (CLOCK_XMC1_STATUS_SUCCESS == status)
    {
      handle->init_status = true;
10001cba:	3301      	adds	r3, #1
10001cbc:	7003      	strb	r3, [r0, #0]
    }
  }
  return (status);
}
10001cbe:	2000      	movs	r0, #0
10001cc0:	4770      	bx	lr
10001cc2:	46c0      	nop			; (mov r8, r8)

10001cc4 <SystemCoreClockSetup>:

/**********************************************************************************************************************
* API IMPLEMENTATION
**********************************************************************************************************************/
void SystemCoreClockSetup(void)
{
10001cc4:	b530      	push	{r4, r5, lr}
10001cc6:	b085      	sub	sp, #20
/* LOCAL DATA STRUCTURES */
const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC1_0_CONFIG =
10001cc8:	a801      	add	r0, sp, #4
10001cca:	1c02      	adds	r2, r0, #0
10001ccc:	4b03      	ldr	r3, [pc, #12]	; (10001cdc <SystemCoreClockSetup+0x18>)
10001cce:	cb32      	ldmia	r3!, {r1, r4, r5}
10001cd0:	c232      	stmia	r2!, {r1, r4, r5}
  .idiv = 1U,  /**< 8 Bit integer divider */

};

  /* Configure FDIV, IDIV, PCLKSEL dividers*/
  XMC_SCU_CLOCK_Init(&CLOCK_XMC1_0_CONFIG);
10001cd2:	f7ff fb25 	bl	10001320 <XMC_SCU_CLOCK_Init>
}
10001cd6:	b005      	add	sp, #20
10001cd8:	bd30      	pop	{r4, r5, pc}
10001cda:	46c0      	nop			; (mov r8, r8)
10001cdc:	10003384 	.word	0x10003384

10001ce0 <ADC_MEASUREMENT_Init>:
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/* Initialization routine to call ADC LLD API's */
ADC_MEASUREMENT_STATUS_t ADC_MEASUREMENT_Init(ADC_MEASUREMENT_t *const handle_ptr)
{
10001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10001ce2:	464f      	mov	r7, r9
10001ce4:	4646      	mov	r6, r8
10001ce6:	b4c0      	push	{r6, r7}
  uint8_t j;
  ADC_MEASUREMENT_STATUS_t status;

  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
10001ce8:	7e03      	ldrb	r3, [r0, #24]
10001cea:	2b02      	cmp	r3, #2
10001cec:	d004      	beq.n	10001cf8 <ADC_MEASUREMENT_Init+0x18>
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
    }
    handle_ptr->init_state = status;
  }
  return (handle_ptr->init_state);
}
10001cee:	1c18      	adds	r0, r3, #0
10001cf0:	bc0c      	pop	{r2, r3}
10001cf2:	4690      	mov	r8, r2
10001cf4:	4699      	mov	r9, r3
10001cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10001cf8:	1c04      	adds	r4, r0, #0
  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
10001cfa:	68c0      	ldr	r0, [r0, #12]
10001cfc:	f7ff ff86 	bl	10001c0c <GLOBAL_ADC_Init>
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10001d00:	68e3      	ldr	r3, [r4, #12]
  XMC_ASSERT("ADC_MEASUREMENT_Init:Invalid handle_ptr", (handle_ptr != NULL))

  if (ADC_MEASUREMENT_STATUS_UNINITIALIZED == handle_ptr->init_state)
  {
    /* Call the function to initialise Clock and ADC global functional units*/
    status = (ADC_MEASUREMENT_STATUS_t) GLOBAL_ADC_Init(handle_ptr->global_handle);
10001d02:	1c05      	adds	r5, r0, #0
  
    /*Initialize the Global Conversion class 0*/
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
10001d04:	68d8      	ldr	r0, [r3, #12]
10001d06:	68a3      	ldr	r3, [r4, #8]
10001d08:	2200      	movs	r2, #0
10001d0a:	6819      	ldr	r1, [r3, #0]
10001d0c:	2300      	movs	r3, #0
10001d0e:	f7ff fc37 	bl	10001580 <XMC_VADC_GLOBAL_InputClassInit>
    XMC_VADC_GLOBAL_InputClassInit(handle_ptr->global_handle->module_ptr,*handle_ptr->iclass_config_handle,
    		                              XMC_VADC_GROUP_CONV_STD,ADC_MEASUREMENT_ICLASS_NUM_XMC11);
#endif
  
    /* Initialize the Background Scan hardware */
    XMC_VADC_GLOBAL_BackgroundInit(handle_ptr->global_handle->module_ptr, handle_ptr->backgnd_config_handle);
10001d12:	68e3      	ldr	r3, [r4, #12]
10001d14:	6861      	ldr	r1, [r4, #4]
10001d16:	68d8      	ldr	r0, [r3, #12]
10001d18:	f7ff fcf8 	bl	1000170c <XMC_VADC_GLOBAL_BackgroundInit>
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
10001d1c:	23c0      	movs	r3, #192	; 0xc0
10001d1e:	005b      	lsls	r3, r3, #1
10001d20:	4698      	mov	r8, r3
10001d22:	3b80      	subs	r3, #128	; 0x80
10001d24:	3bff      	subs	r3, #255	; 0xff
10001d26:	2700      	movs	r7, #0
10001d28:	4699      	mov	r9, r3
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
    {
      indexed = handle_ptr->array->channel_array[j];
10001d2a:	6822      	ldr	r2, [r4, #0]
10001d2c:	00bb      	lsls	r3, r7, #2
10001d2e:	589e      	ldr	r6, [r3, r2]
#if (XMC_VADC_GROUP_AVAILABLE == 1U)
      /* Initialize for configured channels*/
      XMC_VADC_GROUP_ChannelInit(indexed->group_handle,(uint32_t)indexed->ch_num, indexed->ch_handle);
10001d30:	7b71      	ldrb	r1, [r6, #13]
10001d32:	68b0      	ldr	r0, [r6, #8]
10001d34:	6832      	ldr	r2, [r6, #0]
10001d36:	f7ff fd43 	bl	100017c0 <XMC_VADC_GROUP_ChannelInit>
__STATIC_INLINE void XMC_VADC_GROUP_ResultInit(XMC_VADC_GROUP_t *const group_ptr,
                                               const uint32_t res_reg_num,
                                               const XMC_VADC_RESULT_CONFIG_t *config)
{
  XMC_ASSERT("XMC_VADC_GROUP_ResultInit:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  group_ptr->RCR[res_reg_num] = config->g_rcr;
10001d3a:	21a0      	movs	r1, #160	; 0xa0
10001d3c:	0089      	lsls	r1, r1, #2
10001d3e:	468c      	mov	ip, r1
  
      /* Initialize for configured result registers */
      XMC_VADC_GROUP_ResultInit(indexed->group_handle, (uint32_t)indexed->ch_handle->result_reg_number,
10001d40:	6833      	ldr	r3, [r6, #0]
10001d42:	6872      	ldr	r2, [r6, #4]
10001d44:	789b      	ldrb	r3, [r3, #2]
10001d46:	68b1      	ldr	r1, [r6, #8]
10001d48:	071b      	lsls	r3, r3, #28
10001d4a:	6812      	ldr	r2, [r2, #0]
10001d4c:	0e9b      	lsrs	r3, r3, #26
10001d4e:	4463      	add	r3, ip
10001d50:	505a      	str	r2, [r3, r1]
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Module Pointer", (global_ptr == VADC))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Group Number",((grp_num) < XMC_VADC_MAXIMUM_NUM_GROUPS))
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundAddChannelToSequence:Wrong Channel Number",
             ((ch_num) < XMC_VADC_NUM_CHANNELS_PER_GROUP))

  global_ptr->BRSSEL[grp_num] |= (uint32_t)((uint32_t)1 << ch_num);
10001d52:	4642      	mov	r2, r8
                                indexed->res_handle);
#endif
      /* Add all channels into the Background Request Source Channel Select Register */
      XMC_VADC_GLOBAL_BackgroundAddChannelToSequence(handle_ptr->global_handle->module_ptr,
10001d54:	68e3      	ldr	r3, [r4, #12]
10001d56:	68d8      	ldr	r0, [r3, #12]
10001d58:	7b33      	ldrb	r3, [r6, #12]
10001d5a:	009b      	lsls	r3, r3, #2
10001d5c:	18c3      	adds	r3, r0, r3
10001d5e:	5899      	ldr	r1, [r3, r2]
10001d60:	7b72      	ldrb	r2, [r6, #13]
10001d62:	464e      	mov	r6, r9
10001d64:	4096      	lsls	r6, r2
10001d66:	1c32      	adds	r2, r6, #0
10001d68:	430a      	orrs	r2, r1
10001d6a:	4641      	mov	r1, r8
10001d6c:	505a      	str	r2, [r3, r1]
#if (XMC_VADC_GROUP_AVAILABLE == 0U)
    /* Initialize the global result register */
    XMC_VADC_GLOBAL_ResultInit(handle_ptr->global_handle->module_ptr,handle_ptr->array->res_handle);
#endif

    for (j = (uint8_t)0; j < (uint8_t)ADC_MEASUREMENT_MAXCHANNELS; j++)
10001d6e:	2f01      	cmp	r7, #1
10001d70:	d144      	bne.n	10001dfc <ADC_MEASUREMENT_Init+0x11c>
        status |= (ADC_MEASUREMENT_STATUS_t) ANALOG_IO_Init(indexed->analog_io_config);
      }
#endif
    }
#if(UC_SERIES != XMC11)
    if ((handle_ptr->backgnd_config_handle->req_src_interrupt) && (handle_ptr->req_src_intr_handle != NULL ))
10001d72:	6863      	ldr	r3, [r4, #4]
10001d74:	7a1b      	ldrb	r3, [r3, #8]
10001d76:	071b      	lsls	r3, r3, #28
10001d78:	d52d      	bpl.n	10001dd6 <ADC_MEASUREMENT_Init+0xf6>
10001d7a:	6923      	ldr	r3, [r4, #16]
10001d7c:	2b00      	cmp	r3, #0
10001d7e:	d02a      	beq.n	10001dd6 <ADC_MEASUREMENT_Init+0xf6>
    {
#if (UC_FAMILY == XMC1)
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
10001d80:	681a      	ldr	r2, [r3, #0]
10001d82:	685b      	ldr	r3, [r3, #4]
10001d84:	b2d6      	uxtb	r6, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
10001d86:	b271      	sxtb	r1, r6
10001d88:	4699      	mov	r9, r3
10001d8a:	2900      	cmp	r1, #0
10001d8c:	db38      	blt.n	10001e00 <ADC_MEASUREMENT_Init+0x120>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001d8e:	2603      	movs	r6, #3
10001d90:	4b27      	ldr	r3, [pc, #156]	; (10001e30 <ADC_MEASUREMENT_Init+0x150>)
10001d92:	0889      	lsrs	r1, r1, #2
10001d94:	0089      	lsls	r1, r1, #2
10001d96:	18cf      	adds	r7, r1, r3
10001d98:	4032      	ands	r2, r6
10001d9a:	23c0      	movs	r3, #192	; 0xc0
10001d9c:	00d6      	lsls	r6, r2, #3
10001d9e:	22ff      	movs	r2, #255	; 0xff
10001da0:	009b      	lsls	r3, r3, #2
10001da2:	58f9      	ldr	r1, [r7, r3]
10001da4:	469c      	mov	ip, r3
10001da6:	1c13      	adds	r3, r2, #0
10001da8:	40b3      	lsls	r3, r6
10001daa:	4399      	bics	r1, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001dac:	464b      	mov	r3, r9
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001dae:	4688      	mov	r8, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001db0:	0199      	lsls	r1, r3, #6
10001db2:	400a      	ands	r2, r1
10001db4:	40b2      	lsls	r2, r6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001db6:	4643      	mov	r3, r8
10001db8:	4313      	orrs	r3, r2
10001dba:	4662      	mov	r2, ip
10001dbc:	50bb      	str	r3, [r7, r2]
      NVIC_SetPriority((IRQn_Type)handle_ptr->req_src_intr_handle->node_id,
                        NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                        handle_ptr->req_src_intr_handle->priority, handle_ptr->req_src_intr_handle->sub_priority));
#endif
      /* Connect background Request Source Event to NVIC node */
      XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode(handle_ptr->global_handle->module_ptr,
10001dbe:	7e61      	ldrb	r1, [r4, #25]
10001dc0:	f7ff fc14 	bl	100015ec <XMC_VADC_GLOBAL_BackgroundSetReqSrcEventInterruptNode>
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
10001dc4:	221f      	movs	r2, #31
    		                                         (XMC_VADC_SR_t) handle_ptr->srv_req_node);
    
      /* Enable Background Scan Request source IRQ */
      NVIC_EnableIRQ((IRQn_Type)handle_ptr->req_src_intr_handle->node_id);
10001dc6:	6923      	ldr	r3, [r4, #16]
10001dc8:	681b      	ldr	r3, [r3, #0]
10001dca:	4013      	ands	r3, r2
10001dcc:	3a1e      	subs	r2, #30
10001dce:	409a      	lsls	r2, r3
10001dd0:	1c13      	adds	r3, r2, #0
10001dd2:	4a17      	ldr	r2, [pc, #92]	; (10001e30 <ADC_MEASUREMENT_Init+0x150>)
10001dd4:	6013      	str	r3, [r2, #0]
    /* Enable Background Scan Request source IRQ */
    NVIC_EnableIRQ((IRQn_Type)handle_ptr->result_intr_handle->node_id);
#endif
#endif
    /* Mux Configuration is done*/
    if (handle_ptr->mux_config != NULL)
10001dd6:	6963      	ldr	r3, [r4, #20]
10001dd8:	2b00      	cmp	r3, #0
10001dda:	d000      	beq.n	10001dde <ADC_MEASUREMENT_Init+0xfe>
    {
    	(handle_ptr->mux_config)();
10001ddc:	4798      	blx	r3
    }
  
    if (handle_ptr->start_conversion != (bool)false)
10001dde:	7ea3      	ldrb	r3, [r4, #26]
10001de0:	2b00      	cmp	r3, #0
10001de2:	d008      	beq.n	10001df6 <ADC_MEASUREMENT_Init+0x116>
 *  None.
 */
__STATIC_INLINE void XMC_VADC_GLOBAL_BackgroundTriggerConversion(XMC_VADC_GLOBAL_t *const global_ptr)
{
  XMC_ASSERT("XMC_VADC_GLOBAL_BackgroundTriggerConversion:Wrong Module Pointer", (global_ptr == VADC))
  global_ptr->BRSMR |= (uint32_t)VADC_BRSMR_LDEV_Msk;
10001de4:	2281      	movs	r2, #129	; 0x81
10001de6:	2080      	movs	r0, #128	; 0x80
    {
      /* Start conversion manually using load event trigger*/
      XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10001de8:	68e3      	ldr	r3, [r4, #12]
10001dea:	0092      	lsls	r2, r2, #2
10001dec:	68d9      	ldr	r1, [r3, #12]
10001dee:	0080      	lsls	r0, r0, #2
10001df0:	588b      	ldr	r3, [r1, r2]
10001df2:	4303      	orrs	r3, r0
10001df4:	508b      	str	r3, [r1, r2]
    }
    handle_ptr->init_state = status;
10001df6:	7625      	strb	r5, [r4, #24]
10001df8:	1c2b      	adds	r3, r5, #0
10001dfa:	e778      	b.n	10001cee <ADC_MEASUREMENT_Init+0xe>
10001dfc:	2701      	movs	r7, #1
10001dfe:	e794      	b.n	10001d2a <ADC_MEASUREMENT_Init+0x4a>
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001e00:	220f      	movs	r2, #15
10001e02:	4b0c      	ldr	r3, [pc, #48]	; (10001e34 <ADC_MEASUREMENT_Init+0x154>)
10001e04:	3702      	adds	r7, #2
10001e06:	4032      	ands	r2, r6
10001e08:	403e      	ands	r6, r7
10001e0a:	37fc      	adds	r7, #252	; 0xfc
10001e0c:	469c      	mov	ip, r3
10001e0e:	1c3b      	adds	r3, r7, #0
10001e10:	00f6      	lsls	r6, r6, #3
10001e12:	40b3      	lsls	r3, r6
10001e14:	3a08      	subs	r2, #8
10001e16:	0892      	lsrs	r2, r2, #2
10001e18:	0092      	lsls	r2, r2, #2
10001e1a:	4462      	add	r2, ip
10001e1c:	69d1      	ldr	r1, [r2, #28]
10001e1e:	4399      	bics	r1, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
10001e20:	464b      	mov	r3, r9
10001e22:	019b      	lsls	r3, r3, #6
10001e24:	403b      	ands	r3, r7
10001e26:	40b3      	lsls	r3, r6
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
10001e28:	4319      	orrs	r1, r3
10001e2a:	61d1      	str	r1, [r2, #28]
10001e2c:	e7c7      	b.n	10001dbe <ADC_MEASUREMENT_Init+0xde>
10001e2e:	46c0      	nop			; (mov r8, r8)
10001e30:	e000e100 	.word	0xe000e100
10001e34:	e000ed00 	.word	0xe000ed00

10001e38 <ADC_MEASUREMENT_StartConversion>:
10001e38:	2281      	movs	r2, #129	; 0x81
void ADC_MEASUREMENT_StartConversion(ADC_MEASUREMENT_t *const handle_ptr)
{
  XMC_ASSERT("ADC_MEASUREMENT_Start:Invalid handle_ptr", (handle_ptr != NULL))

  /* Generate a load event to start background request source conversion*/
  XMC_VADC_GLOBAL_BackgroundTriggerConversion(handle_ptr->global_handle->module_ptr);
10001e3a:	68c3      	ldr	r3, [r0, #12]
10001e3c:	2080      	movs	r0, #128	; 0x80
10001e3e:	68d9      	ldr	r1, [r3, #12]
10001e40:	0092      	lsls	r2, r2, #2
10001e42:	588b      	ldr	r3, [r1, r2]
10001e44:	0080      	lsls	r0, r0, #2
10001e46:	4303      	orrs	r3, r0
10001e48:	508b      	str	r3, [r1, r2]
}
10001e4a:	4770      	bx	lr

10001e4c <ADC_MEASUREMENT_GetResult>:
                                                                const uint32_t res_reg)
{
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Group Pointer", XMC_VADC_CHECK_GROUP_PTR(group_ptr))
  XMC_ASSERT("XMC_VADC_GROUP_GetResult:Wrong Result Register", ((res_reg) < XMC_VADC_NUM_RESULT_REGISTERS))

  return ((XMC_VADC_RESULT_SIZE_t)group_ptr->RES[res_reg]);
10001e4c:	21c0      	movs	r1, #192	; 0xc0
10001e4e:	0089      	lsls	r1, r1, #2
10001e50:	468c      	mov	ip, r1
{
  XMC_VADC_RESULT_SIZE_t result;

  XMC_ASSERT("ADC_MEASUREMENT_GetResult:Invalid handle_ptr", (handle_ptr != NULL))

  result = XMC_VADC_GROUP_GetResult(handle_ptr->group_handle, handle_ptr->ch_handle->result_reg_number);
10001e52:	6803      	ldr	r3, [r0, #0]
10001e54:	6882      	ldr	r2, [r0, #8]
10001e56:	789b      	ldrb	r3, [r3, #2]
10001e58:	071b      	lsls	r3, r3, #28
10001e5a:	0e9b      	lsrs	r3, r3, #26
10001e5c:	4463      	add	r3, ip
10001e5e:	5898      	ldr	r0, [r3, r2]

  return (result);
10001e60:	b280      	uxth	r0, r0
}
10001e62:	4770      	bx	lr

10001e64 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
DAVE_STATUS_t DAVE_Init(void)
{
10001e64:	b508      	push	{r3, lr}
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);
10001e66:	4811      	ldr	r0, [pc, #68]	; (10001eac <DAVE_Init+0x48>)
10001e68:	f7ff ff24 	bl	10001cb4 <CLOCK_XMC1_Init>

  if (init_status == DAVE_STATUS_SUCCESS)
10001e6c:	2800      	cmp	r0, #0
10001e6e:	d000      	beq.n	10001e72 <DAVE_Init+0xe>
  {
	 /**  Initialization of DIGITAL_IO APP instance BGT24 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BGT24); 
   }  
  return init_status;
} /**  End of function DAVE_Init */
10001e70:	bd08      	pop	{r3, pc}
     init_status = (DAVE_STATUS_t)CLOCK_XMC1_Init(&CLOCK_XMC1_0);

  if (init_status == DAVE_STATUS_SUCCESS)
  {
	 /**  Initialization of RTC APP instance RTC_0 */
	 init_status = (DAVE_STATUS_t)RTC_Init(&RTC_0); 
10001e72:	480f      	ldr	r0, [pc, #60]	; (10001eb0 <DAVE_Init+0x4c>)
10001e74:	f7ff fdea 	bl	10001a4c <RTC_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10001e78:	2800      	cmp	r0, #0
10001e7a:	d1f9      	bne.n	10001e70 <DAVE_Init+0xc>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
10001e7c:	480d      	ldr	r0, [pc, #52]	; (10001eb4 <DAVE_Init+0x50>)
10001e7e:	f7ff fd99 	bl	100019b4 <TIMER_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10001e82:	2800      	cmp	r0, #0
10001e84:	d1f4      	bne.n	10001e70 <DAVE_Init+0xc>
  {
	 /**  Initialization of ADC_MEASUREMENT APP instance ADC_MEASUREMENT_0 */
	 init_status = (DAVE_STATUS_t)ADC_MEASUREMENT_Init(&ADC_MEASUREMENT_0); 
10001e86:	480c      	ldr	r0, [pc, #48]	; (10001eb8 <DAVE_Init+0x54>)
10001e88:	f7ff ff2a 	bl	10001ce0 <ADC_MEASUREMENT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10001e8c:	2800      	cmp	r0, #0
10001e8e:	d1ef      	bne.n	10001e70 <DAVE_Init+0xc>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
10001e90:	480a      	ldr	r0, [pc, #40]	; (10001ebc <DAVE_Init+0x58>)
10001e92:	f7ff fe05 	bl	10001aa0 <INTERRUPT_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10001e96:	2800      	cmp	r0, #0
10001e98:	d1ea      	bne.n	10001e70 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance LED */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&Approaching); 
10001e9a:	4809      	ldr	r0, [pc, #36]	; (10001ec0 <DAVE_Init+0x5c>)
10001e9c:	f7ff fefa 	bl	10001c94 <DIGITAL_IO_Init>
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
10001ea0:	2800      	cmp	r0, #0
10001ea2:	d1e5      	bne.n	10001e70 <DAVE_Init+0xc>
  {
	 /**  Initialization of DIGITAL_IO APP instance BGT24 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BGT24); 
10001ea4:	4807      	ldr	r0, [pc, #28]	; (10001ec4 <DAVE_Init+0x60>)
10001ea6:	f7ff fef5 	bl	10001c94 <DIGITAL_IO_Init>
10001eaa:	e7e1      	b.n	10001e70 <DAVE_Init+0xc>
10001eac:	200008e8 	.word	0x200008e8
10001eb0:	20000570 	.word	0x20000570
10001eb4:	20000548 	.word	0x20000548
10001eb8:	200005d4 	.word	0x200005d4
10001ebc:	10003308 	.word	0x10003308
10001ec0:	10003374 	.word	0x10003374
10001ec4:	10003354 	.word	0x10003354

10001ec8 <radarsense2go_startacq>:

	return;
}

void radarsense2go_startacq(void)
{
10001ec8:	4b07      	ldr	r3, [pc, #28]	; (10001ee8 <radarsense2go_startacq+0x20>)
10001eca:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10001ecc:	7b19      	ldrb	r1, [r3, #12]
10001ece:	2380      	movs	r3, #128	; 0x80
10001ed0:	025b      	lsls	r3, r3, #9
10001ed2:	408b      	lsls	r3, r1
10001ed4:	6053      	str	r3, [r2, #4]
10001ed6:	4b05      	ldr	r3, [pc, #20]	; (10001eec <radarsense2go_startacq+0x24>)
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
10001ed8:	46c0      	nop			; (mov r8, r8)
10001eda:	3b01      	subs	r3, #1
	static uint32_t BGT24_settle;
	/* Turn BGT24 on */
	DIGITAL_IO_SetOutputLow(&BGT24);
	/* delay until BGT24 is settled */
	BGT24_settle=46875;
	while(BGT24_settle!=0)
10001edc:	2b00      	cmp	r3, #0
10001ede:	d1fb      	bne.n	10001ed8 <radarsense2go_startacq+0x10>
10001ee0:	4a03      	ldr	r2, [pc, #12]	; (10001ef0 <radarsense2go_startacq+0x28>)
	{
		BGT24_settle--;
		__NOP();
	}
	return;
}
10001ee2:	6013      	str	r3, [r2, #0]
10001ee4:	4770      	bx	lr
10001ee6:	46c0      	nop			; (mov r8, r8)
10001ee8:	10003354 	.word	0x10003354
10001eec:	0000b71b 	.word	0x0000b71b
10001ef0:	200008f4 	.word	0x200008f4

10001ef4 <radarsense2go_endacq>:

void radarsense2go_endacq(void)
{
10001ef4:	4b03      	ldr	r3, [pc, #12]	; (10001f04 <radarsense2go_endacq+0x10>)
	/* BGT24 off time */
	DIGITAL_IO_SetOutputLow(&BGT24);
	return;
}
10001ef6:	681a      	ldr	r2, [r3, #0]
10001ef8:	7b19      	ldrb	r1, [r3, #12]
10001efa:	2380      	movs	r3, #128	; 0x80
10001efc:	025b      	lsls	r3, r3, #9
10001efe:	408b      	lsls	r3, r1
10001f00:	6053      	str	r3, [r2, #4]
10001f02:	4770      	bx	lr
10001f04:	10003354 	.word	0x10003354

10001f08 <radarsense2go_result>:
		int16_t *adc_aqc_array_Q,
		uint16_t size_of_array_acq,
		XMC_RADARSENSE2GO_MOTION_t motion,
		uint32_t max_frq_mag,
		uint32_t max_frq_index)
{
10001f08:	b5f0      	push	{r4, r5, r6, r7, lr}
10001f0a:	4647      	mov	r7, r8
10001f0c:	4698      	mov	r8, r3
10001f0e:	1c0c      	adds	r4, r1, #0
10001f10:	1c06      	adds	r6, r0, #0
10001f12:	b480      	push	{r7}
10001f14:	ab06      	add	r3, sp, #24
10001f16:	881d      	ldrh	r5, [r3, #0]
	/* place your application code for ISR context execution here */
	/* e.g. threshold calibration */
	memcpy(g_sampling_data_I, adc_aqc_array_I, size_of_array_acq * sizeof(uint16_t));
10001f18:	1c11      	adds	r1, r2, #0
10001f1a:	006d      	lsls	r5, r5, #1
		int16_t *adc_aqc_array_Q,
		uint16_t size_of_array_acq,
		XMC_RADARSENSE2GO_MOTION_t motion,
		uint32_t max_frq_mag,
		uint32_t max_frq_index)
{
10001f1c:	ab07      	add	r3, sp, #28
	/* place your application code for ISR context execution here */
	/* e.g. threshold calibration */
	memcpy(g_sampling_data_I, adc_aqc_array_I, size_of_array_acq * sizeof(uint16_t));
10001f1e:	1c2a      	adds	r2, r5, #0
10001f20:	4810      	ldr	r0, [pc, #64]	; (10001f64 <radarsense2go_result+0x5c>)
		int16_t *adc_aqc_array_Q,
		uint16_t size_of_array_acq,
		XMC_RADARSENSE2GO_MOTION_t motion,
		uint32_t max_frq_mag,
		uint32_t max_frq_index)
{
10001f22:	781f      	ldrb	r7, [r3, #0]
	/* place your application code for ISR context execution here */
	/* e.g. threshold calibration */
	memcpy(g_sampling_data_I, adc_aqc_array_I, size_of_array_acq * sizeof(uint16_t));
10001f24:	f001 f9a6 	bl	10003274 <memcpy>
	memcpy(g_sampling_data_Q, adc_aqc_array_Q, size_of_array_acq * sizeof(uint16_t));
10001f28:	4641      	mov	r1, r8
10001f2a:	1c2a      	adds	r2, r5, #0
10001f2c:	480e      	ldr	r0, [pc, #56]	; (10001f68 <radarsense2go_result+0x60>)
10001f2e:	f001 f9a1 	bl	10003274 <memcpy>
	memcpy(g_fft_data, &fft_magnitude_array[1], (size_of_array_mag - 1) * sizeof(uint32_t));
10001f32:	1e62      	subs	r2, r4, #1
10001f34:	0092      	lsls	r2, r2, #2
10001f36:	1d31      	adds	r1, r6, #4
10001f38:	480c      	ldr	r0, [pc, #48]	; (10001f6c <radarsense2go_result+0x64>)
10001f3a:	f001 f99b 	bl	10003274 <memcpy>

	g_motion = motion;
10001f3e:	4b0c      	ldr	r3, [pc, #48]	; (10001f70 <radarsense2go_result+0x68>)
10001f40:	701f      	strb	r7, [r3, #0]

	if (motion == XMC_MOTION_DETECT_APPROACHING || motion == XMC_MOTION_DETECT_DEPARTING)
10001f42:	2f01      	cmp	r7, #1
10001f44:	d905      	bls.n	10001f52 <radarsense2go_result+0x4a>
	{
		g_max_frq_index = max_frq_index * 5.5F; // 1408 Hz/ 2 / 256 (FFT SIZE) / 2
	}
	else
	{
		g_max_frq_index = 0.0F; // Do not show max frequency in case of no motion
10001f46:	2200      	movs	r2, #0
10001f48:	4b0a      	ldr	r3, [pc, #40]	; (10001f74 <radarsense2go_result+0x6c>)
10001f4a:	601a      	str	r2, [r3, #0]
	}

	return;
}
10001f4c:	bc04      	pop	{r2}
10001f4e:	4690      	mov	r8, r2
10001f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

	g_motion = motion;

	if (motion == XMC_MOTION_DETECT_APPROACHING || motion == XMC_MOTION_DETECT_DEPARTING)
	{
		g_max_frq_index = max_frq_index * 5.5F; // 1408 Hz/ 2 / 256 (FFT SIZE) / 2
10001f52:	9809      	ldr	r0, [sp, #36]	; 0x24
10001f54:	f000 ff50 	bl	10002df8 <__aeabi_ui2f>
10001f58:	4907      	ldr	r1, [pc, #28]	; (10001f78 <radarsense2go_result+0x70>)
10001f5a:	f000 fe1b 	bl	10002b94 <__aeabi_fmul>
10001f5e:	4b05      	ldr	r3, [pc, #20]	; (10001f74 <radarsense2go_result+0x6c>)
10001f60:	6018      	str	r0, [r3, #0]
10001f62:	e7f3      	b.n	10001f4c <radarsense2go_result+0x44>
10001f64:	20000948 	.word	0x20000948
10001f68:	20000b48 	.word	0x20000b48
10001f6c:	20000d48 	.word	0x20000d48
10001f70:	2000063d 	.word	0x2000063d
10001f74:	20000944 	.word	0x20000944
10001f78:	40b00000 	.word	0x40b00000

10001f7c <radarsense2go_trigger>:
	return;
}

void radarsense2go_trigger(XMC_RADARSENSE2GO_MOTION_t detection_state)
{
	motion_last=detection_state;
10001f7c:	4b10      	ldr	r3, [pc, #64]	; (10001fc0 <radarsense2go_trigger+0x44>)
10001f7e:	7018      	strb	r0, [r3, #0]
	if (detection_state == XMC_MOTION_DETECT_APPROACHING) // || detection_state == XMC_MOTION_DETECT_DEPARTING)
10001f80:	2800      	cmp	r0, #0
10001f82:	d00f      	beq.n	10001fa4 <radarsense2go_trigger+0x28>
	{
		DIGITAL_IO_SetOutputLow(&Approaching);
		DIGITAL_IO_SetOutputHigh(&Receding);
	}
	else if (detection_state == XMC_MOTION_DETECT_DEPARTING)
10001f84:	2801      	cmp	r0, #1
10001f86:	d000      	beq.n	10001f8a <radarsense2go_trigger+0xe>
		DIGITAL_IO_SetOutputHigh(&Approaching);
		DIGITAL_IO_SetOutputHigh(&Receding);
	}
	*/
	return;
}
10001f88:	4770      	bx	lr
10001f8a:	4b0e      	ldr	r3, [pc, #56]	; (10001fc4 <radarsense2go_trigger+0x48>)
10001f8c:	681a      	ldr	r2, [r3, #0]
10001f8e:	7b19      	ldrb	r1, [r3, #12]
10001f90:	2380      	movs	r3, #128	; 0x80
10001f92:	025b      	lsls	r3, r3, #9
10001f94:	408b      	lsls	r3, r1
10001f96:	6053      	str	r3, [r2, #4]
10001f98:	4b0b      	ldr	r3, [pc, #44]	; (10001fc8 <radarsense2go_trigger+0x4c>)
10001f9a:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10001f9c:	7b1b      	ldrb	r3, [r3, #12]
10001f9e:	4098      	lsls	r0, r3
10001fa0:	6050      	str	r0, [r2, #4]
10001fa2:	e7f1      	b.n	10001f88 <radarsense2go_trigger+0xc>
10001fa4:	4b08      	ldr	r3, [pc, #32]	; (10001fc8 <radarsense2go_trigger+0x4c>)
10001fa6:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10001fa8:	7b19      	ldrb	r1, [r3, #12]
10001faa:	2380      	movs	r3, #128	; 0x80
10001fac:	025b      	lsls	r3, r3, #9
10001fae:	408b      	lsls	r3, r1
10001fb0:	6053      	str	r3, [r2, #4]
10001fb2:	4b04      	ldr	r3, [pc, #16]	; (10001fc4 <radarsense2go_trigger+0x48>)
10001fb4:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
10001fb6:	7b19      	ldrb	r1, [r3, #12]
10001fb8:	2301      	movs	r3, #1
10001fba:	408b      	lsls	r3, r1
10001fbc:	6053      	str	r3, [r2, #4]
10001fbe:	e7e3      	b.n	10001f88 <radarsense2go_trigger+0xc>
10001fc0:	20000628 	.word	0x20000628
10001fc4:	10003364 	.word	0x10003364
10001fc8:	10003374 	.word	0x10003374

10001fcc <main>:


int main(void)
{
10001fcc:	b570      	push	{r4, r5, r6, lr}
10001fce:	b084      	sub	sp, #16
	bool running = false;

	DAVE_Init(); /* Initialization of DAVE APPs  */
10001fd0:	f7ff ff48 	bl	10001e64 <DAVE_Init>
10001fd4:	4b24      	ldr	r3, [pc, #144]	; (10002068 <main+0x9c>)
	DIGITAL_IO_SetOutputHigh(&Approaching);
	DIGITAL_IO_SetOutputHigh(&Receding);

	DIGITAL_IO_SetOutputLow(&BGT24);

	radarsense2go_init(
10001fd6:	4e25      	ldr	r6, [pc, #148]	; (1000206c <main+0xa0>)
10001fd8:	6819      	ldr	r1, [r3, #0]
10001fda:	7b1a      	ldrb	r2, [r3, #12]
10001fdc:	2301      	movs	r3, #1
10001fde:	1c18      	adds	r0, r3, #0
10001fe0:	4090      	lsls	r0, r2
10001fe2:	4a23      	ldr	r2, [pc, #140]	; (10002070 <main+0xa4>)
10001fe4:	6048      	str	r0, [r1, #4]
10001fe6:	6811      	ldr	r1, [r2, #0]
10001fe8:	7b12      	ldrb	r2, [r2, #12]
10001fea:	4093      	lsls	r3, r2
10001fec:	604b      	str	r3, [r1, #4]
10001fee:	4b21      	ldr	r3, [pc, #132]	; (10002074 <main+0xa8>)
10001ff0:	681a      	ldr	r2, [r3, #0]

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
10001ff2:	7b19      	ldrb	r1, [r3, #12]
10001ff4:	2380      	movs	r3, #128	; 0x80
10001ff6:	025b      	lsls	r3, r3, #9
10001ff8:	408b      	lsls	r3, r1
10001ffa:	491f      	ldr	r1, [pc, #124]	; (10002078 <main+0xac>)
10001ffc:	6053      	str	r3, [r2, #4]
10001ffe:	8808      	ldrh	r0, [r1, #0]
10002000:	ab02      	add	r3, sp, #8
10002002:	8018      	strh	r0, [r3, #0]
10002004:	7889      	ldrb	r1, [r1, #2]
10002006:	4a1d      	ldr	r2, [pc, #116]	; (1000207c <main+0xb0>)
10002008:	7099      	strb	r1, [r3, #2]
1000200a:	4669      	mov	r1, sp
1000200c:	4b1c      	ldr	r3, [pc, #112]	; (10002080 <main+0xb4>)
1000200e:	9303      	str	r3, [sp, #12]
10002010:	1d33      	adds	r3, r6, #4
10002012:	cb11      	ldmia	r3!, {r0, r4}
10002014:	c111      	stmia	r1!, {r0, r4}
}


int main(void)
{
	bool running = false;
10002016:	2400      	movs	r4, #0
	DIGITAL_IO_SetOutputHigh(&Approaching);
	DIGITAL_IO_SetOutputHigh(&Receding);

	DIGITAL_IO_SetOutputLow(&BGT24);

	radarsense2go_init(
10002018:	6851      	ldr	r1, [r2, #4]
1000201a:	6833      	ldr	r3, [r6, #0]
1000201c:	6810      	ldr	r0, [r2, #0]
1000201e:	6892      	ldr	r2, [r2, #8]
10002020:	f000 f83a 	bl	10002098 <radarsense2go_init>
			radarsense2go_algorithm,
			radarsense2go_powerdown,
			&TIMER_0
	);

	radarsense2go_regcb_startacq ( radarsense2go_startacq );
10002024:	4817      	ldr	r0, [pc, #92]	; (10002084 <main+0xb8>)
10002026:	f000 f8eb 	bl	10002200 <radarsense2go_regcb_startacq>
	radarsense2go_regcb_endacq ( radarsense2go_endacq );
1000202a:	4817      	ldr	r0, [pc, #92]	; (10002088 <main+0xbc>)
1000202c:	f000 f8f6 	bl	1000221c <radarsense2go_regcb_endacq>
	radarsense2go_regcb_result ( radarsense2go_result );
10002030:	4816      	ldr	r0, [pc, #88]	; (1000208c <main+0xc0>)
10002032:	f000 f8d7 	bl	100021e4 <radarsense2go_regcb_result>
	radarsense2go_regcb_trigger ( radarsense2go_trigger );
10002036:	4816      	ldr	r0, [pc, #88]	; (10002090 <main+0xc4>)
10002038:	f000 f8fe 	bl	10002238 <radarsense2go_regcb_trigger>
1000203c:	4d15      	ldr	r5, [pc, #84]	; (10002094 <main+0xc8>)

	while (1)
	{
		if (running == false)
1000203e:	2c00      	cmp	r4, #0
10002040:	d105      	bne.n	1000204e <main+0x82>
		{
			if (start == true)
10002042:	782b      	ldrb	r3, [r5, #0]
10002044:	2b00      	cmp	r3, #0
10002046:	d0fc      	beq.n	10002042 <main+0x76>
			{
				running = true;
				radarsense2go_start();
10002048:	f000 f892 	bl	10002170 <radarsense2go_start>
	{
		if (running == false)
		{
			if (start == true)
			{
				running = true;
1000204c:	2401      	movs	r4, #1
				radarsense2go_start();
			}
		}
		else
		{
			if (start == false)
1000204e:	782b      	ldrb	r3, [r5, #0]
10002050:	2b00      	cmp	r3, #0
10002052:	d005      	beq.n	10002060 <main+0x94>
			{
				running = false;
				radarsense2go_stop();
			}

			radarsense2go_set_detection_threshold(radarsense2go_algorithm.trigger_det_level);
10002054:	6870      	ldr	r0, [r6, #4]
10002056:	f000 f8a3 	bl	100021a0 <radarsense2go_set_detection_threshold>

			/* place your application code for main execution here */
			/* e.g. communication on peripherals */
			radarsense2go_exitmain(); /* only need to be called if
1000205a:	f000 f8ab 	bl	100021b4 <radarsense2go_exitmain>
1000205e:	e7ee      	b.n	1000203e <main+0x72>
		else
		{
			if (start == false)
			{
				running = false;
				radarsense2go_stop();
10002060:	f000 f892 	bl	10002188 <radarsense2go_stop>
		}
		else
		{
			if (start == false)
			{
				running = false;
10002064:	2400      	movs	r4, #0
10002066:	e7f5      	b.n	10002054 <main+0x88>
10002068:	10003374 	.word	0x10003374
1000206c:	2000062c 	.word	0x2000062c
10002070:	10003364 	.word	0x10003364
10002074:	10003354 	.word	0x10003354
10002078:	20000638 	.word	0x20000638
1000207c:	20000640 	.word	0x20000640
10002080:	20000548 	.word	0x20000548
10002084:	10001ec9 	.word	0x10001ec9
10002088:	10001ef5 	.word	0x10001ef5
1000208c:	10001f09 	.word	0x10001f09
10002090:	10001f7d 	.word	0x10001f7d
10002094:	2000063c 	.word	0x2000063c

10002098 <radarsense2go_init>:
10002098:	b082      	sub	sp, #8
1000209a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000209c:	1c0c      	adds	r4, r1, #0
1000209e:	b085      	sub	sp, #20
100020a0:	9102      	str	r1, [sp, #8]
100020a2:	930b      	str	r3, [sp, #44]	; 0x2c
100020a4:	1c19      	adds	r1, r3, #0
100020a6:	4b25      	ldr	r3, [pc, #148]	; (1000213c <radarsense2go_init+0xa4>)
100020a8:	4e25      	ldr	r6, [pc, #148]	; (10002140 <radarsense2go_init+0xa8>)
100020aa:	601c      	str	r4, [r3, #0]
100020ac:	4b25      	ldr	r3, [pc, #148]	; (10002144 <radarsense2go_init+0xac>)
100020ae:	9203      	str	r2, [sp, #12]
100020b0:	b2d2      	uxtb	r2, r2
100020b2:	701a      	strb	r2, [r3, #0]
100020b4:	ad0b      	add	r5, sp, #44	; 0x2c
100020b6:	9001      	str	r0, [sp, #4]
100020b8:	6030      	str	r0, [r6, #0]
100020ba:	7a2f      	ldrb	r7, [r5, #8]
100020bc:	4b22      	ldr	r3, [pc, #136]	; (10002148 <radarsense2go_init+0xb0>)
100020be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
100020c0:	701f      	strb	r7, [r3, #0]
100020c2:	4b22      	ldr	r3, [pc, #136]	; (1000214c <radarsense2go_init+0xb4>)
100020c4:	601d      	str	r5, [r3, #0]
100020c6:	b2cb      	uxtb	r3, r1
100020c8:	2b00      	cmp	r3, #0
100020ca:	d100      	bne.n	100020ce <radarsense2go_init+0x36>
100020cc:	3301      	adds	r3, #1
100020ce:	4920      	ldr	r1, [pc, #128]	; (10002150 <radarsense2go_init+0xb8>)
100020d0:	700b      	strb	r3, [r1, #0]
100020d2:	ab0e      	add	r3, sp, #56	; 0x38
100020d4:	789d      	ldrb	r5, [r3, #2]
100020d6:	491f      	ldr	r1, [pc, #124]	; (10002154 <radarsense2go_init+0xbc>)
100020d8:	700d      	strb	r5, [r1, #0]
100020da:	2501      	movs	r5, #1
100020dc:	7859      	ldrb	r1, [r3, #1]
100020de:	4b1e      	ldr	r3, [pc, #120]	; (10002158 <radarsense2go_init+0xc0>)
100020e0:	7019      	strb	r1, [r3, #0]
100020e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
100020e4:	4b1d      	ldr	r3, [pc, #116]	; (1000215c <radarsense2go_init+0xc4>)
100020e6:	6019      	str	r1, [r3, #0]
100020e8:	1c2b      	adds	r3, r5, #0
100020ea:	4093      	lsls	r3, r2
100020ec:	4a1c      	ldr	r2, [pc, #112]	; (10002160 <radarsense2go_init+0xc8>)
100020ee:	491d      	ldr	r1, [pc, #116]	; (10002164 <radarsense2go_init+0xcc>)
100020f0:	6013      	str	r3, [r2, #0]
100020f2:	3301      	adds	r3, #1
100020f4:	4358      	muls	r0, r3
100020f6:	f7ff f9db 	bl	100014b0 <__aeabi_uidiv>
100020fa:	21fa      	movs	r1, #250	; 0xfa
100020fc:	1a20      	subs	r0, r4, r0
100020fe:	0089      	lsls	r1, r1, #2
10002100:	03c0      	lsls	r0, r0, #15
10002102:	f7ff f9d5 	bl	100014b0 <__aeabi_uidiv>
10002106:	b280      	uxth	r0, r0
10002108:	f7ff fa06 	bl	10001518 <XMC_RTC_SetPrescaler>
1000210c:	2164      	movs	r1, #100	; 0x64
1000210e:	6833      	ldr	r3, [r6, #0]
10002110:	980f      	ldr	r0, [sp, #60]	; 0x3c
10002112:	4359      	muls	r1, r3
10002114:	f7ff fbb6 	bl	10001884 <TIMER_SetTimeInterval>
10002118:	23d1      	movs	r3, #209	; 0xd1
1000211a:	2004      	movs	r0, #4
1000211c:	4a12      	ldr	r2, [pc, #72]	; (10002168 <radarsense2go_init+0xd0>)
1000211e:	011b      	lsls	r3, r3, #4
10002120:	58d1      	ldr	r1, [r2, r3]
10002122:	4381      	bics	r1, r0
10002124:	50d1      	str	r1, [r2, r3]
10002126:	2102      	movs	r1, #2
10002128:	58d0      	ldr	r0, [r2, r3]
1000212a:	4301      	orrs	r1, r0
1000212c:	50d1      	str	r1, [r2, r3]
1000212e:	4b0f      	ldr	r3, [pc, #60]	; (1000216c <radarsense2go_init+0xd4>)
10002130:	601d      	str	r5, [r3, #0]
10002132:	b005      	add	sp, #20
10002134:	bcf0      	pop	{r4, r5, r6, r7}
10002136:	bc08      	pop	{r3}
10002138:	b002      	add	sp, #8
1000213a:	4718      	bx	r3
1000213c:	2000090c 	.word	0x2000090c
10002140:	200008f8 	.word	0x200008f8
10002144:	20000940 	.word	0x20000940
10002148:	20000914 	.word	0x20000914
1000214c:	20000930 	.word	0x20000930
10002150:	20000941 	.word	0x20000941
10002154:	2000091c 	.word	0x2000091c
10002158:	20000915 	.word	0x20000915
1000215c:	200008fc 	.word	0x200008fc
10002160:	20000900 	.word	0x20000900
10002164:	000186a0 	.word	0x000186a0
10002168:	e000e000 	.word	0xe000e000
1000216c:	20000920 	.word	0x20000920

10002170 <radarsense2go_start>:
10002170:	b508      	push	{r3, lr}
10002172:	4b04      	ldr	r3, [pc, #16]	; (10002184 <radarsense2go_start+0x14>)
10002174:	2001      	movs	r0, #1
10002176:	681b      	ldr	r3, [r3, #0]
10002178:	2b00      	cmp	r3, #0
1000217a:	d002      	beq.n	10002182 <radarsense2go_start+0x12>
1000217c:	f7ff f9ac 	bl	100014d8 <XMC_RTC_Start>
10002180:	2000      	movs	r0, #0
10002182:	bd08      	pop	{r3, pc}
10002184:	20000920 	.word	0x20000920

10002188 <radarsense2go_stop>:
10002188:	b508      	push	{r3, lr}
1000218a:	4b04      	ldr	r3, [pc, #16]	; (1000219c <radarsense2go_stop+0x14>)
1000218c:	2001      	movs	r0, #1
1000218e:	681b      	ldr	r3, [r3, #0]
10002190:	2b00      	cmp	r3, #0
10002192:	d002      	beq.n	1000219a <radarsense2go_stop+0x12>
10002194:	f7ff f9b0 	bl	100014f8 <XMC_RTC_Stop>
10002198:	2000      	movs	r0, #0
1000219a:	bd08      	pop	{r3, pc}
1000219c:	20000920 	.word	0x20000920

100021a0 <radarsense2go_set_detection_threshold>:
100021a0:	4b03      	ldr	r3, [pc, #12]	; (100021b0 <radarsense2go_set_detection_threshold+0x10>)
100021a2:	681a      	ldr	r2, [r3, #0]
100021a4:	4282      	cmp	r2, r0
100021a6:	d000      	beq.n	100021aa <radarsense2go_set_detection_threshold+0xa>
100021a8:	6018      	str	r0, [r3, #0]
100021aa:	2000      	movs	r0, #0
100021ac:	4770      	bx	lr
100021ae:	46c0      	nop			; (mov r8, r8)
100021b0:	20000930 	.word	0x20000930

100021b4 <radarsense2go_exitmain>:
100021b4:	4b08      	ldr	r3, [pc, #32]	; (100021d8 <radarsense2go_exitmain+0x24>)
100021b6:	2001      	movs	r0, #1
100021b8:	681b      	ldr	r3, [r3, #0]
100021ba:	2b00      	cmp	r3, #0
100021bc:	d00a      	beq.n	100021d4 <radarsense2go_exitmain+0x20>
100021be:	2200      	movs	r2, #0
100021c0:	4b06      	ldr	r3, [pc, #24]	; (100021dc <radarsense2go_exitmain+0x28>)
100021c2:	4907      	ldr	r1, [pc, #28]	; (100021e0 <radarsense2go_exitmain+0x2c>)
100021c4:	701a      	strb	r2, [r3, #0]
100021c6:	22d1      	movs	r2, #209	; 0xd1
100021c8:	0112      	lsls	r2, r2, #4
100021ca:	588b      	ldr	r3, [r1, r2]
100021cc:	3001      	adds	r0, #1
100021ce:	4383      	bics	r3, r0
100021d0:	2000      	movs	r0, #0
100021d2:	508b      	str	r3, [r1, r2]
100021d4:	4770      	bx	lr
100021d6:	46c0      	nop			; (mov r8, r8)
100021d8:	20000920 	.word	0x20000920
100021dc:	20000908 	.word	0x20000908
100021e0:	e000e000 	.word	0xe000e000

100021e4 <radarsense2go_regcb_result>:
100021e4:	4b04      	ldr	r3, [pc, #16]	; (100021f8 <radarsense2go_regcb_result+0x14>)
100021e6:	681a      	ldr	r2, [r3, #0]
100021e8:	2301      	movs	r3, #1
100021ea:	2a00      	cmp	r2, #0
100021ec:	d002      	beq.n	100021f4 <radarsense2go_regcb_result+0x10>
100021ee:	4b03      	ldr	r3, [pc, #12]	; (100021fc <radarsense2go_regcb_result+0x18>)
100021f0:	6018      	str	r0, [r3, #0]
100021f2:	2300      	movs	r3, #0
100021f4:	1c18      	adds	r0, r3, #0
100021f6:	4770      	bx	lr
100021f8:	20000920 	.word	0x20000920
100021fc:	2000093c 	.word	0x2000093c

10002200 <radarsense2go_regcb_startacq>:
10002200:	4b04      	ldr	r3, [pc, #16]	; (10002214 <radarsense2go_regcb_startacq+0x14>)
10002202:	681a      	ldr	r2, [r3, #0]
10002204:	2301      	movs	r3, #1
10002206:	2a00      	cmp	r2, #0
10002208:	d002      	beq.n	10002210 <radarsense2go_regcb_startacq+0x10>
1000220a:	4b03      	ldr	r3, [pc, #12]	; (10002218 <radarsense2go_regcb_startacq+0x18>)
1000220c:	6018      	str	r0, [r3, #0]
1000220e:	2300      	movs	r3, #0
10002210:	1c18      	adds	r0, r3, #0
10002212:	4770      	bx	lr
10002214:	20000920 	.word	0x20000920
10002218:	20000938 	.word	0x20000938

1000221c <radarsense2go_regcb_endacq>:
1000221c:	4b04      	ldr	r3, [pc, #16]	; (10002230 <radarsense2go_regcb_endacq+0x14>)
1000221e:	681a      	ldr	r2, [r3, #0]
10002220:	2301      	movs	r3, #1
10002222:	2a00      	cmp	r2, #0
10002224:	d002      	beq.n	1000222c <radarsense2go_regcb_endacq+0x10>
10002226:	4b03      	ldr	r3, [pc, #12]	; (10002234 <radarsense2go_regcb_endacq+0x18>)
10002228:	6018      	str	r0, [r3, #0]
1000222a:	2300      	movs	r3, #0
1000222c:	1c18      	adds	r0, r3, #0
1000222e:	4770      	bx	lr
10002230:	20000920 	.word	0x20000920
10002234:	20000904 	.word	0x20000904

10002238 <radarsense2go_regcb_trigger>:
10002238:	4b04      	ldr	r3, [pc, #16]	; (1000224c <radarsense2go_regcb_trigger+0x14>)
1000223a:	681a      	ldr	r2, [r3, #0]
1000223c:	2301      	movs	r3, #1
1000223e:	2a00      	cmp	r2, #0
10002240:	d002      	beq.n	10002248 <radarsense2go_regcb_trigger+0x10>
10002242:	4b03      	ldr	r3, [pc, #12]	; (10002250 <radarsense2go_regcb_trigger+0x18>)
10002244:	6018      	str	r0, [r3, #0]
10002246:	2300      	movs	r3, #0
10002248:	1c18      	adds	r0, r3, #0
1000224a:	4770      	bx	lr
1000224c:	20000920 	.word	0x20000920
10002250:	20000910 	.word	0x20000910

10002254 <CCU40_2_IRQHandler>:
10002254:	b5f0      	push	{r4, r5, r6, r7, lr}
10002256:	4644      	mov	r4, r8
10002258:	465f      	mov	r7, fp
1000225a:	4656      	mov	r6, sl
1000225c:	464d      	mov	r5, r9
1000225e:	b4f0      	push	{r4, r5, r6, r7}
10002260:	4bb8      	ldr	r3, [pc, #736]	; (10002544 <CCU40_2_IRQHandler+0x2f0>)
10002262:	b087      	sub	sp, #28
10002264:	4698      	mov	r8, r3
10002266:	681a      	ldr	r2, [r3, #0]
10002268:	4bb7      	ldr	r3, [pc, #732]	; (10002548 <CCU40_2_IRQHandler+0x2f4>)
1000226a:	429a      	cmp	r2, r3
1000226c:	d100      	bne.n	10002270 <CCU40_2_IRQHandler+0x1c>
1000226e:	e100      	b.n	10002472 <CCU40_2_IRQHandler+0x21e>
10002270:	4cb6      	ldr	r4, [pc, #728]	; (1000254c <CCU40_2_IRQHandler+0x2f8>)
10002272:	4db7      	ldr	r5, [pc, #732]	; (10002550 <CCU40_2_IRQHandler+0x2fc>)
10002274:	6823      	ldr	r3, [r4, #0]
10002276:	3b01      	subs	r3, #1
10002278:	429a      	cmp	r2, r3
1000227a:	d240      	bcs.n	100022fe <CCU40_2_IRQHandler+0xaa>
1000227c:	782b      	ldrb	r3, [r5, #0]
1000227e:	2b00      	cmp	r3, #0
10002280:	d000      	beq.n	10002284 <CCU40_2_IRQHandler+0x30>
10002282:	e143      	b.n	1000250c <CCU40_2_IRQHandler+0x2b8>
10002284:	4cb3      	ldr	r4, [pc, #716]	; (10002554 <CCU40_2_IRQHandler+0x300>)
10002286:	4eb4      	ldr	r6, [pc, #720]	; (10002558 <CCU40_2_IRQHandler+0x304>)
10002288:	4fb4      	ldr	r7, [pc, #720]	; (1000255c <CCU40_2_IRQHandler+0x308>)
1000228a:	48b5      	ldr	r0, [pc, #724]	; (10002560 <CCU40_2_IRQHandler+0x30c>)
1000228c:	6034      	str	r4, [r6, #0]
1000228e:	603c      	str	r4, [r7, #0]
10002290:	f7ff fdd2 	bl	10001e38 <ADC_MEASUREMENT_StartConversion>
10002294:	1c22      	adds	r2, r4, #0
10002296:	1c21      	adds	r1, r4, #0
10002298:	6833      	ldr	r3, [r6, #0]
1000229a:	4293      	cmp	r3, r2
1000229c:	d0fc      	beq.n	10002298 <CCU40_2_IRQHandler+0x44>
1000229e:	683b      	ldr	r3, [r7, #0]
100022a0:	428b      	cmp	r3, r1
100022a2:	d0f9      	beq.n	10002298 <CCU40_2_IRQHandler+0x44>
100022a4:	782b      	ldrb	r3, [r5, #0]
100022a6:	2b00      	cmp	r3, #0
100022a8:	d002      	beq.n	100022b0 <CCU40_2_IRQHandler+0x5c>
100022aa:	2001      	movs	r0, #1
100022ac:	f7fe ff9a 	bl	100011e4 <XMC_SCU_CLOCK_GatePeripheralClock>
100022b0:	4643      	mov	r3, r8
100022b2:	681a      	ldr	r2, [r3, #0]
100022b4:	6833      	ldr	r3, [r6, #0]
100022b6:	48ab      	ldr	r0, [pc, #684]	; (10002564 <CCU40_2_IRQHandler+0x310>)
100022b8:	0051      	lsls	r1, r2, #1
100022ba:	b29b      	uxth	r3, r3
100022bc:	520b      	strh	r3, [r1, r0]
100022be:	6834      	ldr	r4, [r6, #0]
100022c0:	48a9      	ldr	r0, [pc, #676]	; (10002568 <CCU40_2_IRQHandler+0x314>)
100022c2:	b21b      	sxth	r3, r3
100022c4:	520c      	strh	r4, [r1, r0]
100022c6:	48a9      	ldr	r0, [pc, #676]	; (1000256c <CCU40_2_IRQHandler+0x318>)
100022c8:	3201      	adds	r2, #1
100022ca:	6804      	ldr	r4, [r0, #0]
100022cc:	46a4      	mov	ip, r4
100022ce:	4463      	add	r3, ip
100022d0:	6003      	str	r3, [r0, #0]
100022d2:	683b      	ldr	r3, [r7, #0]
100022d4:	48a6      	ldr	r0, [pc, #664]	; (10002570 <CCU40_2_IRQHandler+0x31c>)
100022d6:	b29b      	uxth	r3, r3
100022d8:	520b      	strh	r3, [r1, r0]
100022da:	683c      	ldr	r4, [r7, #0]
100022dc:	48a5      	ldr	r0, [pc, #660]	; (10002574 <CCU40_2_IRQHandler+0x320>)
100022de:	b21b      	sxth	r3, r3
100022e0:	520c      	strh	r4, [r1, r0]
100022e2:	49a5      	ldr	r1, [pc, #660]	; (10002578 <CCU40_2_IRQHandler+0x324>)
100022e4:	6808      	ldr	r0, [r1, #0]
100022e6:	4684      	mov	ip, r0
100022e8:	4463      	add	r3, ip
100022ea:	600b      	str	r3, [r1, #0]
100022ec:	4643      	mov	r3, r8
100022ee:	601a      	str	r2, [r3, #0]
100022f0:	b007      	add	sp, #28
100022f2:	bc3c      	pop	{r2, r3, r4, r5}
100022f4:	4690      	mov	r8, r2
100022f6:	4699      	mov	r9, r3
100022f8:	46a2      	mov	sl, r4
100022fa:	46ab      	mov	fp, r5
100022fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100022fe:	782b      	ldrb	r3, [r5, #0]
10002300:	2b00      	cmp	r3, #0
10002302:	d000      	beq.n	10002306 <CCU40_2_IRQHandler+0xb2>
10002304:	e10f      	b.n	10002526 <CCU40_2_IRQHandler+0x2d2>
10002306:	4b93      	ldr	r3, [pc, #588]	; (10002554 <CCU40_2_IRQHandler+0x300>)
10002308:	4e93      	ldr	r6, [pc, #588]	; (10002558 <CCU40_2_IRQHandler+0x304>)
1000230a:	4699      	mov	r9, r3
1000230c:	4f93      	ldr	r7, [pc, #588]	; (1000255c <CCU40_2_IRQHandler+0x308>)
1000230e:	4894      	ldr	r0, [pc, #592]	; (10002560 <CCU40_2_IRQHandler+0x30c>)
10002310:	6033      	str	r3, [r6, #0]
10002312:	603b      	str	r3, [r7, #0]
10002314:	f7ff fd90 	bl	10001e38 <ADC_MEASUREMENT_StartConversion>
10002318:	464a      	mov	r2, r9
1000231a:	4649      	mov	r1, r9
1000231c:	6833      	ldr	r3, [r6, #0]
1000231e:	4293      	cmp	r3, r2
10002320:	d0fc      	beq.n	1000231c <CCU40_2_IRQHandler+0xc8>
10002322:	683b      	ldr	r3, [r7, #0]
10002324:	428b      	cmp	r3, r1
10002326:	d0f9      	beq.n	1000231c <CCU40_2_IRQHandler+0xc8>
10002328:	782b      	ldrb	r3, [r5, #0]
1000232a:	2b00      	cmp	r3, #0
1000232c:	d000      	beq.n	10002330 <CCU40_2_IRQHandler+0xdc>
1000232e:	e0f6      	b.n	1000251e <CCU40_2_IRQHandler+0x2ca>
10002330:	4642      	mov	r2, r8
10002332:	6812      	ldr	r2, [r2, #0]
10002334:	6833      	ldr	r3, [r6, #0]
10002336:	488c      	ldr	r0, [pc, #560]	; (10002568 <CCU40_2_IRQHandler+0x314>)
10002338:	6831      	ldr	r1, [r6, #0]
1000233a:	0052      	lsls	r2, r2, #1
1000233c:	5281      	strh	r1, [r0, r2]
1000233e:	498b      	ldr	r1, [pc, #556]	; (1000256c <CCU40_2_IRQHandler+0x318>)
10002340:	4d88      	ldr	r5, [pc, #544]	; (10002564 <CCU40_2_IRQHandler+0x310>)
10002342:	4689      	mov	r9, r1
10002344:	6809      	ldr	r1, [r1, #0]
10002346:	b29b      	uxth	r3, r3
10002348:	468c      	mov	ip, r1
1000234a:	4649      	mov	r1, r9
1000234c:	52ab      	strh	r3, [r5, r2]
1000234e:	b21b      	sxth	r3, r3
10002350:	4463      	add	r3, ip
10002352:	600b      	str	r3, [r1, #0]
10002354:	683b      	ldr	r3, [r7, #0]
10002356:	4986      	ldr	r1, [pc, #536]	; (10002570 <CCU40_2_IRQHandler+0x31c>)
10002358:	b29b      	uxth	r3, r3
1000235a:	528b      	strh	r3, [r1, r2]
1000235c:	4e86      	ldr	r6, [pc, #536]	; (10002578 <CCU40_2_IRQHandler+0x324>)
1000235e:	4682      	mov	sl, r0
10002360:	468b      	mov	fp, r1
10002362:	4884      	ldr	r0, [pc, #528]	; (10002574 <CCU40_2_IRQHandler+0x320>)
10002364:	6839      	ldr	r1, [r7, #0]
10002366:	b21b      	sxth	r3, r3
10002368:	5281      	strh	r1, [r0, r2]
1000236a:	6832      	ldr	r2, [r6, #0]
1000236c:	4694      	mov	ip, r2
1000236e:	4642      	mov	r2, r8
10002370:	4463      	add	r3, ip
10002372:	6033      	str	r3, [r6, #0]
10002374:	4b74      	ldr	r3, [pc, #464]	; (10002548 <CCU40_2_IRQHandler+0x2f4>)
10002376:	6013      	str	r3, [r2, #0]
10002378:	4b80      	ldr	r3, [pc, #512]	; (1000257c <CCU40_2_IRQHandler+0x328>)
1000237a:	681b      	ldr	r3, [r3, #0]
1000237c:	2b00      	cmp	r3, #0
1000237e:	d000      	beq.n	10002382 <CCU40_2_IRQHandler+0x12e>
10002380:	4798      	blx	r3
10002382:	4b7f      	ldr	r3, [pc, #508]	; (10002580 <CCU40_2_IRQHandler+0x32c>)
10002384:	6818      	ldr	r0, [r3, #0]
10002386:	f7ff fa69 	bl	1000185c <TIMER_Stop>
1000238a:	464b      	mov	r3, r9
1000238c:	6819      	ldr	r1, [r3, #0]
1000238e:	4b7d      	ldr	r3, [pc, #500]	; (10002584 <CCU40_2_IRQHandler+0x330>)
10002390:	1c28      	adds	r0, r5, #0
10002392:	4698      	mov	r8, r3
10002394:	781a      	ldrb	r2, [r3, #0]
10002396:	f000 f935 	bl	10002604 <lradarsense2go_remove_mean>
1000239a:	4643      	mov	r3, r8
1000239c:	6831      	ldr	r1, [r6, #0]
1000239e:	781a      	ldrb	r2, [r3, #0]
100023a0:	4658      	mov	r0, fp
100023a2:	f000 f92f 	bl	10002604 <lradarsense2go_remove_mean>
100023a6:	1c28      	adds	r0, r5, #0
100023a8:	6821      	ldr	r1, [r4, #0]
100023aa:	f000 f9bd 	bl	10002728 <lradarsense2go_window_hanning>
100023ae:	4658      	mov	r0, fp
100023b0:	6821      	ldr	r1, [r4, #0]
100023b2:	f000 f9b9 	bl	10002728 <lradarsense2go_window_hanning>
100023b6:	6823      	ldr	r3, [r4, #0]
100023b8:	1c29      	adds	r1, r5, #0
100023ba:	005e      	lsls	r6, r3, #1
100023bc:	1c32      	adds	r2, r6, #0
100023be:	4872      	ldr	r0, [pc, #456]	; (10002588 <CCU40_2_IRQHandler+0x334>)
100023c0:	f000 ff58 	bl	10003274 <memcpy>
100023c4:	1c32      	adds	r2, r6, #0
100023c6:	4659      	mov	r1, fp
100023c8:	4870      	ldr	r0, [pc, #448]	; (1000258c <CCU40_2_IRQHandler+0x338>)
100023ca:	f000 ff53 	bl	10003274 <memcpy>
100023ce:	4b70      	ldr	r3, [pc, #448]	; (10002590 <CCU40_2_IRQHandler+0x33c>)
100023d0:	1c28      	adds	r0, r5, #0
100023d2:	4699      	mov	r9, r3
100023d4:	4643      	mov	r3, r8
100023d6:	4649      	mov	r1, r9
100023d8:	781a      	ldrb	r2, [r3, #0]
100023da:	f000 f9f9 	bl	100027d0 <lradarsense2go_fft>
100023de:	4b6d      	ldr	r3, [pc, #436]	; (10002594 <CCU40_2_IRQHandler+0x340>)
100023e0:	ae04      	add	r6, sp, #16
100023e2:	469b      	mov	fp, r3
100023e4:	6823      	ldr	r3, [r4, #0]
100023e6:	4f6c      	ldr	r7, [pc, #432]	; (10002598 <CCU40_2_IRQHandler+0x344>)
100023e8:	9300      	str	r3, [sp, #0]
100023ea:	4b6c      	ldr	r3, [pc, #432]	; (1000259c <CCU40_2_IRQHandler+0x348>)
100023ec:	1c30      	adds	r0, r6, #0
100023ee:	781b      	ldrb	r3, [r3, #0]
100023f0:	1c29      	adds	r1, r5, #0
100023f2:	9301      	str	r3, [sp, #4]
100023f4:	464a      	mov	r2, r9
100023f6:	465b      	mov	r3, fp
100023f8:	f000 fa9e 	bl	10002938 <lradarsense2go_calc_mag>
100023fc:	1c3b      	adds	r3, r7, #0
100023fe:	1c32      	adds	r2, r6, #0
10002400:	ca03      	ldmia	r2!, {r0, r1}
10002402:	c303      	stmia	r3!, {r0, r1}
10002404:	4b66      	ldr	r3, [pc, #408]	; (100025a0 <CCU40_2_IRQHandler+0x34c>)
10002406:	6832      	ldr	r2, [r6, #0]
10002408:	681b      	ldr	r3, [r3, #0]
1000240a:	429a      	cmp	r2, r3
1000240c:	d853      	bhi.n	100024b6 <CCU40_2_IRQHandler+0x262>
1000240e:	4b65      	ldr	r3, [pc, #404]	; (100025a4 <CCU40_2_IRQHandler+0x350>)
10002410:	4d65      	ldr	r5, [pc, #404]	; (100025a8 <CCU40_2_IRQHandler+0x354>)
10002412:	681b      	ldr	r3, [r3, #0]
10002414:	2b00      	cmp	r3, #0
10002416:	d003      	beq.n	10002420 <CCU40_2_IRQHandler+0x1cc>
10002418:	782a      	ldrb	r2, [r5, #0]
1000241a:	2a01      	cmp	r2, #1
1000241c:	d100      	bne.n	10002420 <CCU40_2_IRQHandler+0x1cc>
1000241e:	e08b      	b.n	10002538 <CCU40_2_IRQHandler+0x2e4>
10002420:	4b62      	ldr	r3, [pc, #392]	; (100025ac <CCU40_2_IRQHandler+0x358>)
10002422:	681e      	ldr	r6, [r3, #0]
10002424:	2e00      	cmp	r6, #0
10002426:	d00f      	beq.n	10002448 <CCU40_2_IRQHandler+0x1f4>
10002428:	6823      	ldr	r3, [r4, #0]
1000242a:	4658      	mov	r0, fp
1000242c:	0859      	lsrs	r1, r3, #1
1000242e:	b29b      	uxth	r3, r3
10002430:	9300      	str	r3, [sp, #0]
10002432:	2302      	movs	r3, #2
10002434:	9301      	str	r3, [sp, #4]
10002436:	683b      	ldr	r3, [r7, #0]
10002438:	3101      	adds	r1, #1
1000243a:	9302      	str	r3, [sp, #8]
1000243c:	687b      	ldr	r3, [r7, #4]
1000243e:	b289      	uxth	r1, r1
10002440:	9303      	str	r3, [sp, #12]
10002442:	4652      	mov	r2, sl
10002444:	4b4b      	ldr	r3, [pc, #300]	; (10002574 <CCU40_2_IRQHandler+0x320>)
10002446:	47b0      	blx	r6
10002448:	782b      	ldrb	r3, [r5, #0]
1000244a:	2b00      	cmp	r3, #0
1000244c:	d12c      	bne.n	100024a8 <CCU40_2_IRQHandler+0x254>
1000244e:	23d1      	movs	r3, #209	; 0xd1
10002450:	2104      	movs	r1, #4
10002452:	4a57      	ldr	r2, [pc, #348]	; (100025b0 <CCU40_2_IRQHandler+0x35c>)
10002454:	011b      	lsls	r3, r3, #4
10002456:	58d0      	ldr	r0, [r2, r3]
10002458:	4301      	orrs	r1, r0
1000245a:	2002      	movs	r0, #2
1000245c:	50d1      	str	r1, [r2, r3]
1000245e:	58d1      	ldr	r1, [r2, r3]
10002460:	4381      	bics	r1, r0
10002462:	50d1      	str	r1, [r2, r3]
10002464:	4953      	ldr	r1, [pc, #332]	; (100025b4 <CCU40_2_IRQHandler+0x360>)
10002466:	7809      	ldrb	r1, [r1, #0]
10002468:	2900      	cmp	r1, #0
1000246a:	d120      	bne.n	100024ae <CCU40_2_IRQHandler+0x25a>
1000246c:	4b52      	ldr	r3, [pc, #328]	; (100025b8 <CCU40_2_IRQHandler+0x364>)
1000246e:	7019      	strb	r1, [r3, #0]
10002470:	e73e      	b.n	100022f0 <CCU40_2_IRQHandler+0x9c>
10002472:	22d1      	movs	r2, #209	; 0xd1
10002474:	2004      	movs	r0, #4
10002476:	494e      	ldr	r1, [pc, #312]	; (100025b0 <CCU40_2_IRQHandler+0x35c>)
10002478:	0112      	lsls	r2, r2, #4
1000247a:	588b      	ldr	r3, [r1, r2]
1000247c:	4383      	bics	r3, r0
1000247e:	508b      	str	r3, [r1, r2]
10002480:	4b4e      	ldr	r3, [pc, #312]	; (100025bc <CCU40_2_IRQHandler+0x368>)
10002482:	681b      	ldr	r3, [r3, #0]
10002484:	2b00      	cmp	r3, #0
10002486:	d000      	beq.n	1000248a <CCU40_2_IRQHandler+0x236>
10002488:	4798      	blx	r3
1000248a:	4b3d      	ldr	r3, [pc, #244]	; (10002580 <CCU40_2_IRQHandler+0x32c>)
1000248c:	6818      	ldr	r0, [r3, #0]
1000248e:	f7ff f9d5 	bl	1000183c <TIMER_Start>
10002492:	2300      	movs	r3, #0
10002494:	4642      	mov	r2, r8
10002496:	6013      	str	r3, [r2, #0]
10002498:	4a34      	ldr	r2, [pc, #208]	; (1000256c <CCU40_2_IRQHandler+0x318>)
1000249a:	6013      	str	r3, [r2, #0]
1000249c:	4a36      	ldr	r2, [pc, #216]	; (10002578 <CCU40_2_IRQHandler+0x324>)
1000249e:	6013      	str	r3, [r2, #0]
100024a0:	2201      	movs	r2, #1
100024a2:	4b45      	ldr	r3, [pc, #276]	; (100025b8 <CCU40_2_IRQHandler+0x364>)
100024a4:	701a      	strb	r2, [r3, #0]
100024a6:	e723      	b.n	100022f0 <CCU40_2_IRQHandler+0x9c>
100024a8:	3b01      	subs	r3, #1
100024aa:	702b      	strb	r3, [r5, #0]
100024ac:	e7cf      	b.n	1000244e <CCU40_2_IRQHandler+0x1fa>
100024ae:	58d1      	ldr	r1, [r2, r3]
100024b0:	4381      	bics	r1, r0
100024b2:	50d1      	str	r1, [r2, r3]
100024b4:	e71c      	b.n	100022f0 <CCU40_2_IRQHandler+0x9c>
100024b6:	4643      	mov	r3, r8
100024b8:	781a      	ldrb	r2, [r3, #0]
100024ba:	4b38      	ldr	r3, [pc, #224]	; (1000259c <CCU40_2_IRQHandler+0x348>)
100024bc:	4832      	ldr	r0, [pc, #200]	; (10002588 <CCU40_2_IRQHandler+0x334>)
100024be:	781b      	ldrb	r3, [r3, #0]
100024c0:	4932      	ldr	r1, [pc, #200]	; (1000258c <CCU40_2_IRQHandler+0x338>)
100024c2:	9300      	str	r3, [sp, #0]
100024c4:	4b3e      	ldr	r3, [pc, #248]	; (100025c0 <CCU40_2_IRQHandler+0x36c>)
100024c6:	f000 fac1 	bl	10002a4c <lradarsense2go_calc_direction>
100024ca:	4b36      	ldr	r3, [pc, #216]	; (100025a4 <CCU40_2_IRQHandler+0x350>)
100024cc:	1c06      	adds	r6, r0, #0
100024ce:	681b      	ldr	r3, [r3, #0]
100024d0:	4d35      	ldr	r5, [pc, #212]	; (100025a8 <CCU40_2_IRQHandler+0x354>)
100024d2:	2b00      	cmp	r3, #0
100024d4:	d002      	beq.n	100024dc <CCU40_2_IRQHandler+0x288>
100024d6:	782a      	ldrb	r2, [r5, #0]
100024d8:	2a00      	cmp	r2, #0
100024da:	d030      	beq.n	1000253e <CCU40_2_IRQHandler+0x2ea>
100024dc:	4b33      	ldr	r3, [pc, #204]	; (100025ac <CCU40_2_IRQHandler+0x358>)
100024de:	681b      	ldr	r3, [r3, #0]
100024e0:	469c      	mov	ip, r3
100024e2:	2b00      	cmp	r3, #0
100024e4:	d00e      	beq.n	10002504 <CCU40_2_IRQHandler+0x2b0>
100024e6:	6823      	ldr	r3, [r4, #0]
100024e8:	9601      	str	r6, [sp, #4]
100024ea:	0859      	lsrs	r1, r3, #1
100024ec:	b29b      	uxth	r3, r3
100024ee:	9300      	str	r3, [sp, #0]
100024f0:	683b      	ldr	r3, [r7, #0]
100024f2:	3101      	adds	r1, #1
100024f4:	9302      	str	r3, [sp, #8]
100024f6:	687b      	ldr	r3, [r7, #4]
100024f8:	b289      	uxth	r1, r1
100024fa:	9303      	str	r3, [sp, #12]
100024fc:	4658      	mov	r0, fp
100024fe:	4652      	mov	r2, sl
10002500:	4b1c      	ldr	r3, [pc, #112]	; (10002574 <CCU40_2_IRQHandler+0x320>)
10002502:	47e0      	blx	ip
10002504:	4b2f      	ldr	r3, [pc, #188]	; (100025c4 <CCU40_2_IRQHandler+0x370>)
10002506:	781b      	ldrb	r3, [r3, #0]
10002508:	702b      	strb	r3, [r5, #0]
1000250a:	e7a0      	b.n	1000244e <CCU40_2_IRQHandler+0x1fa>
1000250c:	2001      	movs	r0, #1
1000250e:	f7fe fe7d 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
10002512:	2001      	movs	r0, #1
10002514:	f7fe fe92 	bl	1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>
10002518:	2800      	cmp	r0, #0
1000251a:	d1fa      	bne.n	10002512 <CCU40_2_IRQHandler+0x2be>
1000251c:	e6b2      	b.n	10002284 <CCU40_2_IRQHandler+0x30>
1000251e:	2001      	movs	r0, #1
10002520:	f7fe fe60 	bl	100011e4 <XMC_SCU_CLOCK_GatePeripheralClock>
10002524:	e704      	b.n	10002330 <CCU40_2_IRQHandler+0xdc>
10002526:	2001      	movs	r0, #1
10002528:	f7fe fe70 	bl	1000120c <XMC_SCU_CLOCK_UngatePeripheralClock>
1000252c:	2001      	movs	r0, #1
1000252e:	f7fe fe85 	bl	1000123c <XMC_SCU_CLOCK_IsPeripheralClockGated>
10002532:	2800      	cmp	r0, #0
10002534:	d1fa      	bne.n	1000252c <CCU40_2_IRQHandler+0x2d8>
10002536:	e6e6      	b.n	10002306 <CCU40_2_IRQHandler+0xb2>
10002538:	2002      	movs	r0, #2
1000253a:	4798      	blx	r3
1000253c:	e770      	b.n	10002420 <CCU40_2_IRQHandler+0x1cc>
1000253e:	4798      	blx	r3
10002540:	e7cc      	b.n	100024dc <CCU40_2_IRQHandler+0x288>
10002542:	46c0      	nop			; (mov r8, r8)
10002544:	20000654 	.word	0x20000654
10002548:	000003e7 	.word	0x000003e7
1000254c:	20000900 	.word	0x20000900
10002550:	2000091c 	.word	0x2000091c
10002554:	0000ffff 	.word	0x0000ffff
10002558:	2000064c 	.word	0x2000064c
1000255c:	20000650 	.word	0x20000650
10002560:	200005d4 	.word	0x200005d4
10002564:	20001148 	.word	0x20001148
10002568:	20001748 	.word	0x20001748
1000256c:	2000092c 	.word	0x2000092c
10002570:	20001f48 	.word	0x20001f48
10002574:	20001b48 	.word	0x20001b48
10002578:	20000918 	.word	0x20000918
1000257c:	20000904 	.word	0x20000904
10002580:	200008fc 	.word	0x200008fc
10002584:	20000940 	.word	0x20000940
10002588:	20002148 	.word	0x20002148
1000258c:	20000f48 	.word	0x20000f48
10002590:	20001948 	.word	0x20001948
10002594:	20001d48 	.word	0x20001d48
10002598:	20000924 	.word	0x20000924
1000259c:	20000914 	.word	0x20000914
100025a0:	20000930 	.word	0x20000930
100025a4:	20000910 	.word	0x20000910
100025a8:	20000934 	.word	0x20000934
100025ac:	2000093c 	.word	0x2000093c
100025b0:	e000e000 	.word	0xe000e000
100025b4:	20000915 	.word	0x20000915
100025b8:	20000908 	.word	0x20000908
100025bc:	20000938 	.word	0x20000938
100025c0:	20001348 	.word	0x20001348
100025c4:	20000941 	.word	0x20000941

100025c8 <RTC_ISR>:
100025c8:	b508      	push	{r3, lr}
100025ca:	4b03      	ldr	r3, [pc, #12]	; (100025d8 <RTC_ISR+0x10>)
100025cc:	781b      	ldrb	r3, [r3, #0]
100025ce:	2b00      	cmp	r3, #0
100025d0:	d101      	bne.n	100025d6 <RTC_ISR+0xe>
100025d2:	f7ff fe3f 	bl	10002254 <CCU40_2_IRQHandler>
100025d6:	bd08      	pop	{r3, pc}
100025d8:	20000908 	.word	0x20000908

100025dc <VADC0_C0_0_IRQHandler>:
100025dc:	b508      	push	{r3, lr}
100025de:	4805      	ldr	r0, [pc, #20]	; (100025f4 <VADC0_C0_0_IRQHandler+0x18>)
100025e0:	f7ff fc34 	bl	10001e4c <ADC_MEASUREMENT_GetResult>
100025e4:	4b04      	ldr	r3, [pc, #16]	; (100025f8 <VADC0_C0_0_IRQHandler+0x1c>)
100025e6:	6018      	str	r0, [r3, #0]
100025e8:	4804      	ldr	r0, [pc, #16]	; (100025fc <VADC0_C0_0_IRQHandler+0x20>)
100025ea:	f7ff fc2f 	bl	10001e4c <ADC_MEASUREMENT_GetResult>
100025ee:	4b04      	ldr	r3, [pc, #16]	; (10002600 <VADC0_C0_0_IRQHandler+0x24>)
100025f0:	6018      	str	r0, [r3, #0]
100025f2:	bd08      	pop	{r3, pc}
100025f4:	200005c4 	.word	0x200005c4
100025f8:	2000064c 	.word	0x2000064c
100025fc:	20000610 	.word	0x20000610
10002600:	20000650 	.word	0x20000650

10002604 <lradarsense2go_remove_mean>:
10002604:	2380      	movs	r3, #128	; 0x80
10002606:	b5f0      	push	{r4, r5, r6, r7, lr}
10002608:	465f      	mov	r7, fp
1000260a:	4656      	mov	r6, sl
1000260c:	464d      	mov	r5, r9
1000260e:	4644      	mov	r4, r8
10002610:	025b      	lsls	r3, r3, #9
10002612:	4093      	lsls	r3, r2
10002614:	b4f0      	push	{r4, r5, r6, r7}
10002616:	40d1      	lsrs	r1, r2
10002618:	b083      	sub	sp, #12
1000261a:	0c1a      	lsrs	r2, r3, #16
1000261c:	d06a      	beq.n	100026f4 <lradarsense2go_remove_mean+0xf0>
1000261e:	2403      	movs	r4, #3
10002620:	0743      	lsls	r3, r0, #29
10002622:	0f9b      	lsrs	r3, r3, #30
10002624:	425b      	negs	r3, r3
10002626:	b289      	uxth	r1, r1
10002628:	4023      	ands	r3, r4
1000262a:	1e16      	subs	r6, r2, #0
1000262c:	429e      	cmp	r6, r3
1000262e:	d868      	bhi.n	10002702 <lradarsense2go_remove_mean+0xfe>
10002630:	2a04      	cmp	r2, #4
10002632:	dd00      	ble.n	10002636 <lradarsense2go_remove_mean+0x32>
10002634:	e069      	b.n	1000270a <lradarsense2go_remove_mean+0x106>
10002636:	1c16      	adds	r6, r2, #0
10002638:	8803      	ldrh	r3, [r0, #0]
1000263a:	1a5b      	subs	r3, r3, r1
1000263c:	8003      	strh	r3, [r0, #0]
1000263e:	2e01      	cmp	r6, #1
10002640:	d068      	beq.n	10002714 <lradarsense2go_remove_mean+0x110>
10002642:	8843      	ldrh	r3, [r0, #2]
10002644:	1a5b      	subs	r3, r3, r1
10002646:	8043      	strh	r3, [r0, #2]
10002648:	2e02      	cmp	r6, #2
1000264a:	d069      	beq.n	10002720 <lradarsense2go_remove_mean+0x11c>
1000264c:	8883      	ldrh	r3, [r0, #4]
1000264e:	1a5b      	subs	r3, r3, r1
10002650:	8083      	strh	r3, [r0, #4]
10002652:	2e04      	cmp	r6, #4
10002654:	d161      	bne.n	1000271a <lradarsense2go_remove_mean+0x116>
10002656:	88c3      	ldrh	r3, [r0, #6]
10002658:	1a5b      	subs	r3, r3, r1
1000265a:	80c3      	strh	r3, [r0, #6]
1000265c:	2304      	movs	r3, #4
1000265e:	469c      	mov	ip, r3
10002660:	42b2      	cmp	r2, r6
10002662:	d047      	beq.n	100026f4 <lradarsense2go_remove_mean+0xf0>
10002664:	1b93      	subs	r3, r2, r6
10002666:	1f1f      	subs	r7, r3, #4
10002668:	08bf      	lsrs	r7, r7, #2
1000266a:	3701      	adds	r7, #1
1000266c:	469a      	mov	sl, r3
1000266e:	00bb      	lsls	r3, r7, #2
10002670:	469b      	mov	fp, r3
10002672:	1e53      	subs	r3, r2, #1
10002674:	1b9b      	subs	r3, r3, r6
10002676:	2b02      	cmp	r3, #2
10002678:	d924      	bls.n	100026c4 <lradarsense2go_remove_mean+0xc0>
1000267a:	2300      	movs	r3, #0
1000267c:	0076      	lsls	r6, r6, #1
1000267e:	1986      	adds	r6, r0, r6
10002680:	4690      	mov	r8, r2
10002682:	1c35      	adds	r5, r6, #0
10002684:	1c3a      	adds	r2, r7, #0
10002686:	1c1f      	adds	r7, r3, #0
10002688:	9001      	str	r0, [sp, #4]
1000268a:	6834      	ldr	r4, [r6, #0]
1000268c:	6870      	ldr	r0, [r6, #4]
1000268e:	1a63      	subs	r3, r4, r1
10002690:	0c24      	lsrs	r4, r4, #16
10002692:	1a64      	subs	r4, r4, r1
10002694:	041b      	lsls	r3, r3, #16
10002696:	0c1b      	lsrs	r3, r3, #16
10002698:	0424      	lsls	r4, r4, #16
1000269a:	431c      	orrs	r4, r3
1000269c:	6873      	ldr	r3, [r6, #4]
1000269e:	1a40      	subs	r0, r0, r1
100026a0:	0c1b      	lsrs	r3, r3, #16
100026a2:	1a5b      	subs	r3, r3, r1
100026a4:	0400      	lsls	r0, r0, #16
100026a6:	041b      	lsls	r3, r3, #16
100026a8:	0c00      	lsrs	r0, r0, #16
100026aa:	4303      	orrs	r3, r0
100026ac:	3701      	adds	r7, #1
100026ae:	602c      	str	r4, [r5, #0]
100026b0:	606b      	str	r3, [r5, #4]
100026b2:	3608      	adds	r6, #8
100026b4:	3508      	adds	r5, #8
100026b6:	42ba      	cmp	r2, r7
100026b8:	d8e7      	bhi.n	1000268a <lradarsense2go_remove_mean+0x86>
100026ba:	4642      	mov	r2, r8
100026bc:	9801      	ldr	r0, [sp, #4]
100026be:	44dc      	add	ip, fp
100026c0:	45da      	cmp	sl, fp
100026c2:	d017      	beq.n	100026f4 <lradarsense2go_remove_mean+0xf0>
100026c4:	4663      	mov	r3, ip
100026c6:	005c      	lsls	r4, r3, #1
100026c8:	1905      	adds	r5, r0, r4
100026ca:	882b      	ldrh	r3, [r5, #0]
100026cc:	1a5b      	subs	r3, r3, r1
100026ce:	802b      	strh	r3, [r5, #0]
100026d0:	4663      	mov	r3, ip
100026d2:	3301      	adds	r3, #1
100026d4:	4293      	cmp	r3, r2
100026d6:	da0d      	bge.n	100026f4 <lradarsense2go_remove_mean+0xf0>
100026d8:	1ca3      	adds	r3, r4, #2
100026da:	18c3      	adds	r3, r0, r3
100026dc:	881d      	ldrh	r5, [r3, #0]
100026de:	1a6d      	subs	r5, r5, r1
100026e0:	801d      	strh	r5, [r3, #0]
100026e2:	4663      	mov	r3, ip
100026e4:	3302      	adds	r3, #2
100026e6:	429a      	cmp	r2, r3
100026e8:	dd04      	ble.n	100026f4 <lradarsense2go_remove_mean+0xf0>
100026ea:	3404      	adds	r4, #4
100026ec:	1900      	adds	r0, r0, r4
100026ee:	8803      	ldrh	r3, [r0, #0]
100026f0:	1a59      	subs	r1, r3, r1
100026f2:	8001      	strh	r1, [r0, #0]
100026f4:	b003      	add	sp, #12
100026f6:	bc3c      	pop	{r2, r3, r4, r5}
100026f8:	4690      	mov	r8, r2
100026fa:	4699      	mov	r9, r3
100026fc:	46a2      	mov	sl, r4
100026fe:	46ab      	mov	fp, r5
10002700:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002702:	1c1e      	adds	r6, r3, #0
10002704:	2a04      	cmp	r2, #4
10002706:	dc00      	bgt.n	1000270a <lradarsense2go_remove_mean+0x106>
10002708:	e795      	b.n	10002636 <lradarsense2go_remove_mean+0x32>
1000270a:	2300      	movs	r3, #0
1000270c:	469c      	mov	ip, r3
1000270e:	2e00      	cmp	r6, #0
10002710:	d0a8      	beq.n	10002664 <lradarsense2go_remove_mean+0x60>
10002712:	e791      	b.n	10002638 <lradarsense2go_remove_mean+0x34>
10002714:	2301      	movs	r3, #1
10002716:	469c      	mov	ip, r3
10002718:	e7a2      	b.n	10002660 <lradarsense2go_remove_mean+0x5c>
1000271a:	2303      	movs	r3, #3
1000271c:	469c      	mov	ip, r3
1000271e:	e79f      	b.n	10002660 <lradarsense2go_remove_mean+0x5c>
10002720:	2302      	movs	r3, #2
10002722:	469c      	mov	ip, r3
10002724:	e79c      	b.n	10002660 <lradarsense2go_remove_mean+0x5c>
10002726:	46c0      	nop			; (mov r8, r8)

10002728 <lradarsense2go_window_hanning>:
10002728:	b5f0      	push	{r4, r5, r6, r7, lr}
1000272a:	4657      	mov	r7, sl
1000272c:	4645      	mov	r5, r8
1000272e:	464e      	mov	r6, r9
10002730:	4680      	mov	r8, r0
10002732:	2080      	movs	r0, #128	; 0x80
10002734:	1c0c      	adds	r4, r1, #0
10002736:	b4e0      	push	{r5, r6, r7}
10002738:	0040      	lsls	r0, r0, #1
1000273a:	f7fe fec3 	bl	100014c4 <__aeabi_idiv>
1000273e:	1063      	asrs	r3, r4, #1
10002740:	469a      	mov	sl, r3
10002742:	2b00      	cmp	r3, #0
10002744:	dd3c      	ble.n	100027c0 <lradarsense2go_window_hanning+0x98>
10002746:	0043      	lsls	r3, r0, #1
10002748:	4699      	mov	r9, r3
1000274a:	4653      	mov	r3, sl
1000274c:	005b      	lsls	r3, r3, #1
1000274e:	469c      	mov	ip, r3
10002750:	4646      	mov	r6, r8
10002752:	2780      	movs	r7, #128	; 0x80
10002754:	4644      	mov	r4, r8
10002756:	4d1d      	ldr	r5, [pc, #116]	; (100027cc <lradarsense2go_window_hanning+0xa4>)
10002758:	4466      	add	r6, ip
1000275a:	3580      	adds	r5, #128	; 0x80
1000275c:	01ff      	lsls	r7, r7, #7
1000275e:	2300      	movs	r3, #0
10002760:	5eea      	ldrsh	r2, [r5, r3]
10002762:	2300      	movs	r3, #0
10002764:	5ee1      	ldrsh	r1, [r4, r3]
10002766:	1abb      	subs	r3, r7, r2
10002768:	434b      	muls	r3, r1
1000276a:	13db      	asrs	r3, r3, #15
1000276c:	8023      	strh	r3, [r4, #0]
1000276e:	3402      	adds	r4, #2
10002770:	444d      	add	r5, r9
10002772:	42b4      	cmp	r4, r6
10002774:	d1f3      	bne.n	1000275e <lradarsense2go_window_hanning+0x36>
10002776:	4655      	mov	r5, sl
10002778:	4654      	mov	r4, sl
1000277a:	4345      	muls	r5, r0
1000277c:	3540      	adds	r5, #64	; 0x40
1000277e:	1a2d      	subs	r5, r5, r0
10002780:	45a4      	cmp	ip, r4
10002782:	dd18      	ble.n	100027b6 <lradarsense2go_window_hanning+0x8e>
10002784:	4b11      	ldr	r3, [pc, #68]	; (100027cc <lradarsense2go_window_hanning+0xa4>)
10002786:	006d      	lsls	r5, r5, #1
10002788:	195d      	adds	r5, r3, r5
1000278a:	4653      	mov	r3, sl
1000278c:	0099      	lsls	r1, r3, #2
1000278e:	4441      	add	r1, r8
10002790:	1c0e      	adds	r6, r1, #0
10002792:	2180      	movs	r1, #128	; 0x80
10002794:	0064      	lsls	r4, r4, #1
10002796:	0040      	lsls	r0, r0, #1
10002798:	4444      	add	r4, r8
1000279a:	4240      	negs	r0, r0
1000279c:	01c9      	lsls	r1, r1, #7
1000279e:	2300      	movs	r3, #0
100027a0:	5eea      	ldrsh	r2, [r5, r3]
100027a2:	2300      	movs	r3, #0
100027a4:	5ee7      	ldrsh	r7, [r4, r3]
100027a6:	1a8b      	subs	r3, r1, r2
100027a8:	437b      	muls	r3, r7
100027aa:	13db      	asrs	r3, r3, #15
100027ac:	8023      	strh	r3, [r4, #0]
100027ae:	3402      	adds	r4, #2
100027b0:	182d      	adds	r5, r5, r0
100027b2:	42b4      	cmp	r4, r6
100027b4:	d1f3      	bne.n	1000279e <lradarsense2go_window_hanning+0x76>
100027b6:	bc1c      	pop	{r2, r3, r4}
100027b8:	4690      	mov	r8, r2
100027ba:	4699      	mov	r9, r3
100027bc:	46a2      	mov	sl, r4
100027be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100027c0:	005b      	lsls	r3, r3, #1
100027c2:	2540      	movs	r5, #64	; 0x40
100027c4:	2400      	movs	r4, #0
100027c6:	469c      	mov	ip, r3
100027c8:	e7d9      	b.n	1000277e <lradarsense2go_window_hanning+0x56>
100027ca:	46c0      	nop			; (mov r8, r8)
100027cc:	20000658 	.word	0x20000658

100027d0 <lradarsense2go_fft>:
100027d0:	2301      	movs	r3, #1
100027d2:	b5f0      	push	{r4, r5, r6, r7, lr}
100027d4:	465f      	mov	r7, fp
100027d6:	4656      	mov	r6, sl
100027d8:	464d      	mov	r5, r9
100027da:	4644      	mov	r4, r8
100027dc:	4093      	lsls	r3, r2
100027de:	b4f0      	push	{r4, r5, r6, r7}
100027e0:	b089      	sub	sp, #36	; 0x24
100027e2:	9006      	str	r0, [sp, #24]
100027e4:	1e58      	subs	r0, r3, #1
100027e6:	9107      	str	r1, [sp, #28]
100027e8:	469b      	mov	fp, r3
100027ea:	2800      	cmp	r0, #0
100027ec:	dd2d      	ble.n	1000284a <lradarsense2go_fft+0x7a>
100027ee:	9b06      	ldr	r3, [sp, #24]
100027f0:	2401      	movs	r4, #1
100027f2:	1c9e      	adds	r6, r3, #2
100027f4:	9b07      	ldr	r3, [sp, #28]
100027f6:	2100      	movs	r1, #0
100027f8:	1c9d      	adds	r5, r3, #2
100027fa:	465f      	mov	r7, fp
100027fc:	46a9      	mov	r9, r5
100027fe:	1c3b      	adds	r3, r7, #0
10002800:	105b      	asrs	r3, r3, #1
10002802:	18ca      	adds	r2, r1, r3
10002804:	4290      	cmp	r0, r2
10002806:	dbfb      	blt.n	10002800 <lradarsense2go_fft+0x30>
10002808:	1e5a      	subs	r2, r3, #1
1000280a:	4011      	ands	r1, r2
1000280c:	18c9      	adds	r1, r1, r3
1000280e:	42a1      	cmp	r1, r4
10002810:	dd13      	ble.n	1000283a <lradarsense2go_fft+0x6a>
10002812:	8833      	ldrh	r3, [r6, #0]
10002814:	9a06      	ldr	r2, [sp, #24]
10002816:	469c      	mov	ip, r3
10002818:	004b      	lsls	r3, r1, #1
1000281a:	18d2      	adds	r2, r2, r3
1000281c:	8815      	ldrh	r5, [r2, #0]
1000281e:	8035      	strh	r5, [r6, #0]
10002820:	4665      	mov	r5, ip
10002822:	8015      	strh	r5, [r2, #0]
10002824:	464a      	mov	r2, r9
10002826:	9d07      	ldr	r5, [sp, #28]
10002828:	8812      	ldrh	r2, [r2, #0]
1000282a:	46ac      	mov	ip, r5
1000282c:	4690      	mov	r8, r2
1000282e:	464a      	mov	r2, r9
10002830:	4463      	add	r3, ip
10002832:	881d      	ldrh	r5, [r3, #0]
10002834:	8015      	strh	r5, [r2, #0]
10002836:	4642      	mov	r2, r8
10002838:	801a      	strh	r2, [r3, #0]
1000283a:	2302      	movs	r3, #2
1000283c:	469c      	mov	ip, r3
1000283e:	3401      	adds	r4, #1
10002840:	3602      	adds	r6, #2
10002842:	44e1      	add	r9, ip
10002844:	42bc      	cmp	r4, r7
10002846:	d1da      	bne.n	100027fe <lradarsense2go_fft+0x2e>
10002848:	46bb      	mov	fp, r7
1000284a:	2307      	movs	r3, #7
1000284c:	9305      	str	r3, [sp, #20]
1000284e:	3b06      	subs	r3, #6
10002850:	9304      	str	r3, [sp, #16]
10002852:	465b      	mov	r3, fp
10002854:	2b01      	cmp	r3, #1
10002856:	dd65      	ble.n	10002924 <lradarsense2go_fft+0x154>
10002858:	9b04      	ldr	r3, [sp, #16]
1000285a:	005e      	lsls	r6, r3, #1
1000285c:	2b00      	cmp	r3, #0
1000285e:	dd5b      	ble.n	10002918 <lradarsense2go_fft+0x148>
10002860:	9b06      	ldr	r3, [sp, #24]
10002862:	9302      	str	r3, [sp, #8]
10002864:	9b07      	ldr	r3, [sp, #28]
10002866:	9303      	str	r3, [sp, #12]
10002868:	9b04      	ldr	r3, [sp, #16]
1000286a:	009b      	lsls	r3, r3, #2
1000286c:	4699      	mov	r9, r3
1000286e:	2300      	movs	r3, #0
10002870:	469a      	mov	sl, r3
10002872:	4653      	mov	r3, sl
10002874:	9a05      	ldr	r2, [sp, #20]
10002876:	492f      	ldr	r1, [pc, #188]	; (10002934 <lradarsense2go_fft+0x164>)
10002878:	4093      	lsls	r3, r2
1000287a:	1c1a      	adds	r2, r3, #0
1000287c:	005b      	lsls	r3, r3, #1
1000287e:	5acb      	ldrh	r3, [r1, r3]
10002880:	3240      	adds	r2, #64	; 0x40
10002882:	0052      	lsls	r2, r2, #1
10002884:	425b      	negs	r3, r3
10002886:	5a8a      	ldrh	r2, [r1, r2]
10002888:	b29b      	uxth	r3, r3
1000288a:	45d3      	cmp	fp, sl
1000288c:	dd38      	ble.n	10002900 <lradarsense2go_fft+0x130>
1000288e:	b212      	sxth	r2, r2
10002890:	b21b      	sxth	r3, r3
10002892:	4657      	mov	r7, sl
10002894:	4690      	mov	r8, r2
10002896:	469c      	mov	ip, r3
10002898:	4648      	mov	r0, r9
1000289a:	9d03      	ldr	r5, [sp, #12]
1000289c:	9c02      	ldr	r4, [sp, #8]
1000289e:	9701      	str	r7, [sp, #4]
100028a0:	5fa3      	ldrsh	r3, [r4, r6]
100028a2:	4667      	mov	r7, ip
100028a4:	5faa      	ldrsh	r2, [r5, r6]
100028a6:	4641      	mov	r1, r8
100028a8:	4357      	muls	r7, r2
100028aa:	4359      	muls	r1, r3
100028ac:	13ff      	asrs	r7, r7, #15
100028ae:	13c9      	asrs	r1, r1, #15
100028b0:	1bc9      	subs	r1, r1, r7
100028b2:	4667      	mov	r7, ip
100028b4:	437b      	muls	r3, r7
100028b6:	4647      	mov	r7, r8
100028b8:	437a      	muls	r2, r7
100028ba:	13db      	asrs	r3, r3, #15
100028bc:	13d2      	asrs	r2, r2, #15
100028be:	189b      	adds	r3, r3, r2
100028c0:	2700      	movs	r7, #0
100028c2:	5fe2      	ldrsh	r2, [r4, r7]
100028c4:	b289      	uxth	r1, r1
100028c6:	1052      	asrs	r2, r2, #1
100028c8:	1a52      	subs	r2, r2, r1
100028ca:	53a2      	strh	r2, [r4, r6]
100028cc:	2700      	movs	r7, #0
100028ce:	5fea      	ldrsh	r2, [r5, r7]
100028d0:	b29b      	uxth	r3, r3
100028d2:	1052      	asrs	r2, r2, #1
100028d4:	1ad2      	subs	r2, r2, r3
100028d6:	53aa      	strh	r2, [r5, r6]
100028d8:	2700      	movs	r7, #0
100028da:	5fe2      	ldrsh	r2, [r4, r7]
100028dc:	1052      	asrs	r2, r2, #1
100028de:	1889      	adds	r1, r1, r2
100028e0:	8021      	strh	r1, [r4, #0]
100028e2:	2100      	movs	r1, #0
100028e4:	5e6a      	ldrsh	r2, [r5, r1]
100028e6:	1824      	adds	r4, r4, r0
100028e8:	1052      	asrs	r2, r2, #1
100028ea:	189b      	adds	r3, r3, r2
100028ec:	802b      	strh	r3, [r5, #0]
100028ee:	9b01      	ldr	r3, [sp, #4]
100028f0:	182d      	adds	r5, r5, r0
100028f2:	4699      	mov	r9, r3
100028f4:	44b1      	add	r9, r6
100028f6:	464b      	mov	r3, r9
100028f8:	9301      	str	r3, [sp, #4]
100028fa:	45cb      	cmp	fp, r9
100028fc:	dcd0      	bgt.n	100028a0 <lradarsense2go_fft+0xd0>
100028fe:	4681      	mov	r9, r0
10002900:	2301      	movs	r3, #1
10002902:	469c      	mov	ip, r3
10002904:	9b02      	ldr	r3, [sp, #8]
10002906:	44e2      	add	sl, ip
10002908:	3302      	adds	r3, #2
1000290a:	9302      	str	r3, [sp, #8]
1000290c:	9b03      	ldr	r3, [sp, #12]
1000290e:	3302      	adds	r3, #2
10002910:	9303      	str	r3, [sp, #12]
10002912:	9b04      	ldr	r3, [sp, #16]
10002914:	459a      	cmp	sl, r3
10002916:	d1ac      	bne.n	10002872 <lradarsense2go_fft+0xa2>
10002918:	9b05      	ldr	r3, [sp, #20]
1000291a:	9604      	str	r6, [sp, #16]
1000291c:	3b01      	subs	r3, #1
1000291e:	9305      	str	r3, [sp, #20]
10002920:	45b3      	cmp	fp, r6
10002922:	dc99      	bgt.n	10002858 <lradarsense2go_fft+0x88>
10002924:	b009      	add	sp, #36	; 0x24
10002926:	bc3c      	pop	{r2, r3, r4, r5}
10002928:	4690      	mov	r8, r2
1000292a:	4699      	mov	r9, r3
1000292c:	46a2      	mov	sl, r4
1000292e:	46ab      	mov	fp, r5
10002930:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002932:	46c0      	nop			; (mov r8, r8)
10002934:	20000658 	.word	0x20000658

10002938 <lradarsense2go_calc_mag>:
10002938:	b5f0      	push	{r4, r5, r6, r7, lr}
1000293a:	465f      	mov	r7, fp
1000293c:	4656      	mov	r6, sl
1000293e:	464d      	mov	r5, r9
10002940:	4644      	mov	r4, r8
10002942:	b4f0      	push	{r4, r5, r6, r7}
10002944:	b085      	sub	sp, #20
10002946:	4692      	mov	sl, r2
10002948:	aa0e      	add	r2, sp, #56	; 0x38
1000294a:	9101      	str	r1, [sp, #4]
1000294c:	ca02      	ldmia	r2!, {r1}
1000294e:	9002      	str	r0, [sp, #8]
10002950:	7812      	ldrb	r2, [r2, #0]
10002952:	0849      	lsrs	r1, r1, #1
10002954:	468b      	mov	fp, r1
10002956:	2a01      	cmp	r2, #1
10002958:	d02b      	beq.n	100029b2 <lradarsense2go_calc_mag+0x7a>
1000295a:	2900      	cmp	r1, #0
1000295c:	d100      	bne.n	10002960 <lradarsense2go_calc_mag+0x28>
1000295e:	e06f      	b.n	10002a40 <lradarsense2go_calc_mag+0x108>
10002960:	9a01      	ldr	r2, [sp, #4]
10002962:	2400      	movs	r4, #0
10002964:	2600      	movs	r6, #0
10002966:	2100      	movs	r1, #0
10002968:	2500      	movs	r5, #0
1000296a:	46d8      	mov	r8, fp
1000296c:	4694      	mov	ip, r2
1000296e:	4662      	mov	r2, ip
10002970:	5f12      	ldrsh	r2, [r2, r4]
10002972:	4650      	mov	r0, sl
10002974:	5f00      	ldrsh	r0, [r0, r4]
10002976:	4352      	muls	r2, r2
10002978:	4340      	muls	r0, r0
1000297a:	1812      	adds	r2, r2, r0
1000297c:	601a      	str	r2, [r3, #0]
1000297e:	1e10      	subs	r0, r2, #0
10002980:	42b0      	cmp	r0, r6
10002982:	d200      	bcs.n	10002986 <lradarsense2go_calc_mag+0x4e>
10002984:	1c30      	adds	r0, r6, #0
10002986:	42b2      	cmp	r2, r6
10002988:	d900      	bls.n	1000298c <lradarsense2go_calc_mag+0x54>
1000298a:	1c29      	adds	r1, r5, #0
1000298c:	3501      	adds	r5, #1
1000298e:	3402      	adds	r4, #2
10002990:	3304      	adds	r3, #4
10002992:	1c06      	adds	r6, r0, #0
10002994:	4545      	cmp	r5, r8
10002996:	d1ea      	bne.n	1000296e <lradarsense2go_calc_mag+0x36>
10002998:	4680      	mov	r8, r0
1000299a:	9b02      	ldr	r3, [sp, #8]
1000299c:	4642      	mov	r2, r8
1000299e:	1c18      	adds	r0, r3, #0
100029a0:	601a      	str	r2, [r3, #0]
100029a2:	6059      	str	r1, [r3, #4]
100029a4:	b005      	add	sp, #20
100029a6:	bc3c      	pop	{r2, r3, r4, r5}
100029a8:	4690      	mov	r8, r2
100029aa:	4699      	mov	r9, r3
100029ac:	46a2      	mov	sl, r4
100029ae:	46ab      	mov	fp, r5
100029b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100029b2:	2900      	cmp	r1, #0
100029b4:	d044      	beq.n	10002a40 <lradarsense2go_calc_mag+0x108>
100029b6:	469c      	mov	ip, r3
100029b8:	2300      	movs	r3, #0
100029ba:	2100      	movs	r1, #0
100029bc:	4699      	mov	r9, r3
100029be:	4698      	mov	r8, r3
100029c0:	1c1f      	adds	r7, r3, #0
100029c2:	4650      	mov	r0, sl
100029c4:	9103      	str	r1, [sp, #12]
100029c6:	9b01      	ldr	r3, [sp, #4]
100029c8:	5fdb      	ldrsh	r3, [r3, r7]
100029ca:	5fc2      	ldrsh	r2, [r0, r7]
100029cc:	435b      	muls	r3, r3
100029ce:	4352      	muls	r2, r2
100029d0:	189b      	adds	r3, r3, r2
100029d2:	4662      	mov	r2, ip
100029d4:	6013      	str	r3, [r2, #0]
100029d6:	4a1c      	ldr	r2, [pc, #112]	; (10002a48 <lradarsense2go_calc_mag+0x110>)
100029d8:	4293      	cmp	r3, r2
100029da:	d82e      	bhi.n	10002a3a <lradarsense2go_calc_mag+0x102>
100029dc:	4682      	mov	sl, r0
100029de:	3201      	adds	r2, #1
100029e0:	0892      	lsrs	r2, r2, #2
100029e2:	4293      	cmp	r3, r2
100029e4:	d3fc      	bcc.n	100029e0 <lradarsense2go_calc_mag+0xa8>
100029e6:	4650      	mov	r0, sl
100029e8:	1e11      	subs	r1, r2, #0
100029ea:	d023      	beq.n	10002a34 <lradarsense2go_calc_mag+0xfc>
100029ec:	2200      	movs	r2, #0
100029ee:	4682      	mov	sl, r0
100029f0:	1888      	adds	r0, r1, r2
100029f2:	1a1e      	subs	r6, r3, r0
100029f4:	1845      	adds	r5, r0, r1
100029f6:	1c1c      	adds	r4, r3, #0
100029f8:	4298      	cmp	r0, r3
100029fa:	d800      	bhi.n	100029fe <lradarsense2go_calc_mag+0xc6>
100029fc:	1c34      	adds	r4, r6, #0
100029fe:	4298      	cmp	r0, r3
10002a00:	d800      	bhi.n	10002a04 <lradarsense2go_calc_mag+0xcc>
10002a02:	1c2a      	adds	r2, r5, #0
10002a04:	0852      	lsrs	r2, r2, #1
10002a06:	0889      	lsrs	r1, r1, #2
10002a08:	1c23      	adds	r3, r4, #0
10002a0a:	2900      	cmp	r1, #0
10002a0c:	d1f0      	bne.n	100029f0 <lradarsense2go_calc_mag+0xb8>
10002a0e:	4663      	mov	r3, ip
10002a10:	4650      	mov	r0, sl
10002a12:	601a      	str	r2, [r3, #0]
10002a14:	4542      	cmp	r2, r8
10002a16:	d902      	bls.n	10002a1e <lradarsense2go_calc_mag+0xe6>
10002a18:	464b      	mov	r3, r9
10002a1a:	4690      	mov	r8, r2
10002a1c:	9303      	str	r3, [sp, #12]
10002a1e:	2301      	movs	r3, #1
10002a20:	469a      	mov	sl, r3
10002a22:	3303      	adds	r3, #3
10002a24:	44d1      	add	r9, sl
10002a26:	469a      	mov	sl, r3
10002a28:	3702      	adds	r7, #2
10002a2a:	44d4      	add	ip, sl
10002a2c:	45d9      	cmp	r9, fp
10002a2e:	d1ca      	bne.n	100029c6 <lradarsense2go_calc_mag+0x8e>
10002a30:	9903      	ldr	r1, [sp, #12]
10002a32:	e7b2      	b.n	1000299a <lradarsense2go_calc_mag+0x62>
10002a34:	4663      	mov	r3, ip
10002a36:	601a      	str	r2, [r3, #0]
10002a38:	e7f1      	b.n	10002a1e <lradarsense2go_calc_mag+0xe6>
10002a3a:	2180      	movs	r1, #128	; 0x80
10002a3c:	05c9      	lsls	r1, r1, #23
10002a3e:	e7d5      	b.n	100029ec <lradarsense2go_calc_mag+0xb4>
10002a40:	2300      	movs	r3, #0
10002a42:	2100      	movs	r1, #0
10002a44:	4698      	mov	r8, r3
10002a46:	e7a8      	b.n	1000299a <lradarsense2go_calc_mag+0x62>
10002a48:	3fffffff 	.word	0x3fffffff

10002a4c <lradarsense2go_calc_direction>:
10002a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10002a4e:	4647      	mov	r7, r8
10002a50:	b480      	push	{r7}
10002a52:	b084      	sub	sp, #16
10002a54:	1c1f      	adds	r7, r3, #0
10002a56:	ab0a      	add	r3, sp, #40	; 0x28
10002a58:	781b      	ldrb	r3, [r3, #0]
10002a5a:	1c14      	adds	r4, r2, #0
10002a5c:	1c06      	adds	r6, r0, #0
10002a5e:	1c0d      	adds	r5, r1, #0
10002a60:	4698      	mov	r8, r3
10002a62:	f7ff feb5 	bl	100027d0 <lradarsense2go_fft>
10002a66:	2301      	movs	r3, #1
10002a68:	3401      	adds	r4, #1
10002a6a:	40a3      	lsls	r3, r4
10002a6c:	9300      	str	r3, [sp, #0]
10002a6e:	4643      	mov	r3, r8
10002a70:	a802      	add	r0, sp, #8
10002a72:	9301      	str	r3, [sp, #4]
10002a74:	1c2a      	adds	r2, r5, #0
10002a76:	1c3b      	adds	r3, r7, #0
10002a78:	1c31      	adds	r1, r6, #0
10002a7a:	f7ff ff5d 	bl	10002938 <lradarsense2go_calc_mag>
10002a7e:	227f      	movs	r2, #127	; 0x7f
10002a80:	2000      	movs	r0, #0
10002a82:	9b03      	ldr	r3, [sp, #12]
10002a84:	429a      	cmp	r2, r3
10002a86:	4140      	adcs	r0, r0
10002a88:	b2c0      	uxtb	r0, r0
10002a8a:	b004      	add	sp, #16
10002a8c:	bc04      	pop	{r2}
10002a8e:	4690      	mov	r8, r2
10002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002a92:	46c0      	nop			; (mov r8, r8)

10002a94 <__aeabi_uldivmod>:
10002a94:	2b00      	cmp	r3, #0
10002a96:	d111      	bne.n	10002abc <__aeabi_uldivmod+0x28>
10002a98:	2a00      	cmp	r2, #0
10002a9a:	d10f      	bne.n	10002abc <__aeabi_uldivmod+0x28>
10002a9c:	2900      	cmp	r1, #0
10002a9e:	d100      	bne.n	10002aa2 <__aeabi_uldivmod+0xe>
10002aa0:	2800      	cmp	r0, #0
10002aa2:	d002      	beq.n	10002aaa <__aeabi_uldivmod+0x16>
10002aa4:	2100      	movs	r1, #0
10002aa6:	43c9      	mvns	r1, r1
10002aa8:	1c08      	adds	r0, r1, #0
10002aaa:	b407      	push	{r0, r1, r2}
10002aac:	4802      	ldr	r0, [pc, #8]	; (10002ab8 <__aeabi_uldivmod+0x24>)
10002aae:	a102      	add	r1, pc, #8	; (adr r1, 10002ab8 <__aeabi_uldivmod+0x24>)
10002ab0:	1840      	adds	r0, r0, r1
10002ab2:	9002      	str	r0, [sp, #8]
10002ab4:	bd03      	pop	{r0, r1, pc}
10002ab6:	46c0      	nop			; (mov r8, r8)
10002ab8:	000003d1 	.word	0x000003d1
10002abc:	b403      	push	{r0, r1}
10002abe:	4668      	mov	r0, sp
10002ac0:	b501      	push	{r0, lr}
10002ac2:	9802      	ldr	r0, [sp, #8]
10002ac4:	f000 f84c 	bl	10002b60 <__gnu_uldivmod_helper>
10002ac8:	9b01      	ldr	r3, [sp, #4]
10002aca:	469e      	mov	lr, r3
10002acc:	b002      	add	sp, #8
10002ace:	bc0c      	pop	{r2, r3}
10002ad0:	4770      	bx	lr
10002ad2:	46c0      	nop			; (mov r8, r8)

10002ad4 <__aeabi_lmul>:
10002ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
10002ad6:	464f      	mov	r7, r9
10002ad8:	4646      	mov	r6, r8
10002ada:	0405      	lsls	r5, r0, #16
10002adc:	0c2d      	lsrs	r5, r5, #16
10002ade:	1c2c      	adds	r4, r5, #0
10002ae0:	b4c0      	push	{r6, r7}
10002ae2:	0417      	lsls	r7, r2, #16
10002ae4:	0c16      	lsrs	r6, r2, #16
10002ae6:	0c3f      	lsrs	r7, r7, #16
10002ae8:	4699      	mov	r9, r3
10002aea:	0c03      	lsrs	r3, r0, #16
10002aec:	437c      	muls	r4, r7
10002aee:	4375      	muls	r5, r6
10002af0:	435f      	muls	r7, r3
10002af2:	4373      	muls	r3, r6
10002af4:	197d      	adds	r5, r7, r5
10002af6:	0c26      	lsrs	r6, r4, #16
10002af8:	19ad      	adds	r5, r5, r6
10002afa:	469c      	mov	ip, r3
10002afc:	42af      	cmp	r7, r5
10002afe:	d903      	bls.n	10002b08 <__aeabi_lmul+0x34>
10002b00:	2380      	movs	r3, #128	; 0x80
10002b02:	025b      	lsls	r3, r3, #9
10002b04:	4698      	mov	r8, r3
10002b06:	44c4      	add	ip, r8
10002b08:	464b      	mov	r3, r9
10002b0a:	4351      	muls	r1, r2
10002b0c:	4343      	muls	r3, r0
10002b0e:	0424      	lsls	r4, r4, #16
10002b10:	0c2e      	lsrs	r6, r5, #16
10002b12:	0c24      	lsrs	r4, r4, #16
10002b14:	042d      	lsls	r5, r5, #16
10002b16:	4466      	add	r6, ip
10002b18:	192c      	adds	r4, r5, r4
10002b1a:	1859      	adds	r1, r3, r1
10002b1c:	1989      	adds	r1, r1, r6
10002b1e:	1c20      	adds	r0, r4, #0
10002b20:	bc0c      	pop	{r2, r3}
10002b22:	4690      	mov	r8, r2
10002b24:	4699      	mov	r9, r3
10002b26:	bdf0      	pop	{r4, r5, r6, r7, pc}

10002b28 <__gnu_ldivmod_helper>:
10002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b2a:	b083      	sub	sp, #12
10002b2c:	1c16      	adds	r6, r2, #0
10002b2e:	1c1f      	adds	r7, r3, #0
10002b30:	9000      	str	r0, [sp, #0]
10002b32:	9101      	str	r1, [sp, #4]
10002b34:	f000 f9c8 	bl	10002ec8 <__divdi3>
10002b38:	1c04      	adds	r4, r0, #0
10002b3a:	1c0d      	adds	r5, r1, #0
10002b3c:	1c22      	adds	r2, r4, #0
10002b3e:	1c2b      	adds	r3, r5, #0
10002b40:	1c30      	adds	r0, r6, #0
10002b42:	1c39      	adds	r1, r7, #0
10002b44:	f7ff ffc6 	bl	10002ad4 <__aeabi_lmul>
10002b48:	9a00      	ldr	r2, [sp, #0]
10002b4a:	9b01      	ldr	r3, [sp, #4]
10002b4c:	1a12      	subs	r2, r2, r0
10002b4e:	418b      	sbcs	r3, r1
10002b50:	9908      	ldr	r1, [sp, #32]
10002b52:	1c20      	adds	r0, r4, #0
10002b54:	600a      	str	r2, [r1, #0]
10002b56:	604b      	str	r3, [r1, #4]
10002b58:	1c29      	adds	r1, r5, #0
10002b5a:	b003      	add	sp, #12
10002b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002b5e:	46c0      	nop			; (mov r8, r8)

10002b60 <__gnu_uldivmod_helper>:
10002b60:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b62:	1c14      	adds	r4, r2, #0
10002b64:	b083      	sub	sp, #12
10002b66:	1c1d      	adds	r5, r3, #0
10002b68:	9000      	str	r0, [sp, #0]
10002b6a:	9101      	str	r1, [sp, #4]
10002b6c:	f000 faa4 	bl	100030b8 <__udivdi3>
10002b70:	1c22      	adds	r2, r4, #0
10002b72:	1c2b      	adds	r3, r5, #0
10002b74:	1c06      	adds	r6, r0, #0
10002b76:	1c0f      	adds	r7, r1, #0
10002b78:	f7ff ffac 	bl	10002ad4 <__aeabi_lmul>
10002b7c:	9a00      	ldr	r2, [sp, #0]
10002b7e:	9b01      	ldr	r3, [sp, #4]
10002b80:	1a12      	subs	r2, r2, r0
10002b82:	418b      	sbcs	r3, r1
10002b84:	9908      	ldr	r1, [sp, #32]
10002b86:	1c30      	adds	r0, r6, #0
10002b88:	600a      	str	r2, [r1, #0]
10002b8a:	604b      	str	r3, [r1, #4]
10002b8c:	1c39      	adds	r1, r7, #0
10002b8e:	b003      	add	sp, #12
10002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002b92:	46c0      	nop			; (mov r8, r8)

10002b94 <__aeabi_fmul>:
10002b94:	b5f0      	push	{r4, r5, r6, r7, lr}
10002b96:	465f      	mov	r7, fp
10002b98:	4656      	mov	r6, sl
10002b9a:	464d      	mov	r5, r9
10002b9c:	4644      	mov	r4, r8
10002b9e:	b4f0      	push	{r4, r5, r6, r7}
10002ba0:	0245      	lsls	r5, r0, #9
10002ba2:	0046      	lsls	r6, r0, #1
10002ba4:	0fc4      	lsrs	r4, r0, #31
10002ba6:	b083      	sub	sp, #12
10002ba8:	1c0f      	adds	r7, r1, #0
10002baa:	0a6d      	lsrs	r5, r5, #9
10002bac:	0e36      	lsrs	r6, r6, #24
10002bae:	46a3      	mov	fp, r4
10002bb0:	d045      	beq.n	10002c3e <__aeabi_fmul+0xaa>
10002bb2:	2eff      	cmp	r6, #255	; 0xff
10002bb4:	d025      	beq.n	10002c02 <__aeabi_fmul+0x6e>
10002bb6:	2380      	movs	r3, #128	; 0x80
10002bb8:	041b      	lsls	r3, r3, #16
10002bba:	431d      	orrs	r5, r3
10002bbc:	2300      	movs	r3, #0
10002bbe:	469a      	mov	sl, r3
10002bc0:	00ed      	lsls	r5, r5, #3
10002bc2:	3e7f      	subs	r6, #127	; 0x7f
10002bc4:	9301      	str	r3, [sp, #4]
10002bc6:	027b      	lsls	r3, r7, #9
10002bc8:	0a5b      	lsrs	r3, r3, #9
10002bca:	4698      	mov	r8, r3
10002bcc:	0078      	lsls	r0, r7, #1
10002bce:	0ffb      	lsrs	r3, r7, #31
10002bd0:	0e00      	lsrs	r0, r0, #24
10002bd2:	4699      	mov	r9, r3
10002bd4:	d040      	beq.n	10002c58 <__aeabi_fmul+0xc4>
10002bd6:	28ff      	cmp	r0, #255	; 0xff
10002bd8:	d038      	beq.n	10002c4c <__aeabi_fmul+0xb8>
10002bda:	2380      	movs	r3, #128	; 0x80
10002bdc:	4642      	mov	r2, r8
10002bde:	041b      	lsls	r3, r3, #16
10002be0:	4313      	orrs	r3, r2
10002be2:	00db      	lsls	r3, r3, #3
10002be4:	4698      	mov	r8, r3
10002be6:	2300      	movs	r3, #0
10002be8:	387f      	subs	r0, #127	; 0x7f
10002bea:	464a      	mov	r2, r9
10002bec:	9f01      	ldr	r7, [sp, #4]
10002bee:	1830      	adds	r0, r6, r0
10002bf0:	4062      	eors	r2, r4
10002bf2:	1c41      	adds	r1, r0, #1
10002bf4:	431f      	orrs	r7, r3
10002bf6:	2f0f      	cmp	r7, #15
10002bf8:	d869      	bhi.n	10002cce <__aeabi_fmul+0x13a>
10002bfa:	4e7d      	ldr	r6, [pc, #500]	; (10002df0 <__aeabi_fmul+0x25c>)
10002bfc:	00bf      	lsls	r7, r7, #2
10002bfe:	59f6      	ldr	r6, [r6, r7]
10002c00:	46b7      	mov	pc, r6
10002c02:	2d00      	cmp	r5, #0
10002c04:	d145      	bne.n	10002c92 <__aeabi_fmul+0xfe>
10002c06:	2308      	movs	r3, #8
10002c08:	9301      	str	r3, [sp, #4]
10002c0a:	3b06      	subs	r3, #6
10002c0c:	469a      	mov	sl, r3
10002c0e:	e7da      	b.n	10002bc6 <__aeabi_fmul+0x32>
10002c10:	4693      	mov	fp, r2
10002c12:	4653      	mov	r3, sl
10002c14:	2b02      	cmp	r3, #2
10002c16:	d12f      	bne.n	10002c78 <__aeabi_fmul+0xe4>
10002c18:	465b      	mov	r3, fp
10002c1a:	2401      	movs	r4, #1
10002c1c:	2500      	movs	r5, #0
10002c1e:	401c      	ands	r4, r3
10002c20:	23ff      	movs	r3, #255	; 0xff
10002c22:	026d      	lsls	r5, r5, #9
10002c24:	05db      	lsls	r3, r3, #23
10002c26:	0a6d      	lsrs	r5, r5, #9
10002c28:	07e4      	lsls	r4, r4, #31
10002c2a:	431d      	orrs	r5, r3
10002c2c:	4325      	orrs	r5, r4
10002c2e:	1c28      	adds	r0, r5, #0
10002c30:	b003      	add	sp, #12
10002c32:	bc3c      	pop	{r2, r3, r4, r5}
10002c34:	4690      	mov	r8, r2
10002c36:	4699      	mov	r9, r3
10002c38:	46a2      	mov	sl, r4
10002c3a:	46ab      	mov	fp, r5
10002c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10002c3e:	2d00      	cmp	r5, #0
10002c40:	d12c      	bne.n	10002c9c <__aeabi_fmul+0x108>
10002c42:	2304      	movs	r3, #4
10002c44:	9301      	str	r3, [sp, #4]
10002c46:	3b03      	subs	r3, #3
10002c48:	469a      	mov	sl, r3
10002c4a:	e7bc      	b.n	10002bc6 <__aeabi_fmul+0x32>
10002c4c:	4643      	mov	r3, r8
10002c4e:	425a      	negs	r2, r3
10002c50:	4153      	adcs	r3, r2
10002c52:	2203      	movs	r2, #3
10002c54:	1ad3      	subs	r3, r2, r3
10002c56:	e7c8      	b.n	10002bea <__aeabi_fmul+0x56>
10002c58:	4642      	mov	r2, r8
10002c5a:	2301      	movs	r3, #1
10002c5c:	2a00      	cmp	r2, #0
10002c5e:	d0c4      	beq.n	10002bea <__aeabi_fmul+0x56>
10002c60:	4640      	mov	r0, r8
10002c62:	f000 f913 	bl	10002e8c <__clzsi2>
10002c66:	4642      	mov	r2, r8
10002c68:	1f43      	subs	r3, r0, #5
10002c6a:	409a      	lsls	r2, r3
10002c6c:	2376      	movs	r3, #118	; 0x76
10002c6e:	425b      	negs	r3, r3
10002c70:	1a18      	subs	r0, r3, r0
10002c72:	4690      	mov	r8, r2
10002c74:	2300      	movs	r3, #0
10002c76:	e7b8      	b.n	10002bea <__aeabi_fmul+0x56>
10002c78:	2b03      	cmp	r3, #3
10002c7a:	d100      	bne.n	10002c7e <__aeabi_fmul+0xea>
10002c7c:	e0ad      	b.n	10002dda <__aeabi_fmul+0x246>
10002c7e:	2b01      	cmp	r3, #1
10002c80:	d000      	beq.n	10002c84 <__aeabi_fmul+0xf0>
10002c82:	e08c      	b.n	10002d9e <__aeabi_fmul+0x20a>
10002c84:	465b      	mov	r3, fp
10002c86:	4654      	mov	r4, sl
10002c88:	401c      	ands	r4, r3
10002c8a:	b2e4      	uxtb	r4, r4
10002c8c:	2300      	movs	r3, #0
10002c8e:	2500      	movs	r5, #0
10002c90:	e7c7      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002c92:	230c      	movs	r3, #12
10002c94:	9301      	str	r3, [sp, #4]
10002c96:	3b09      	subs	r3, #9
10002c98:	469a      	mov	sl, r3
10002c9a:	e794      	b.n	10002bc6 <__aeabi_fmul+0x32>
10002c9c:	1c28      	adds	r0, r5, #0
10002c9e:	f000 f8f5 	bl	10002e8c <__clzsi2>
10002ca2:	2676      	movs	r6, #118	; 0x76
10002ca4:	1f43      	subs	r3, r0, #5
10002ca6:	409d      	lsls	r5, r3
10002ca8:	2300      	movs	r3, #0
10002caa:	4276      	negs	r6, r6
10002cac:	1a36      	subs	r6, r6, r0
10002cae:	9301      	str	r3, [sp, #4]
10002cb0:	469a      	mov	sl, r3
10002cb2:	e788      	b.n	10002bc6 <__aeabi_fmul+0x32>
10002cb4:	2580      	movs	r5, #128	; 0x80
10002cb6:	2400      	movs	r4, #0
10002cb8:	03ed      	lsls	r5, r5, #15
10002cba:	23ff      	movs	r3, #255	; 0xff
10002cbc:	e7b1      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002cbe:	4645      	mov	r5, r8
10002cc0:	46cb      	mov	fp, r9
10002cc2:	469a      	mov	sl, r3
10002cc4:	e7a5      	b.n	10002c12 <__aeabi_fmul+0x7e>
10002cc6:	4645      	mov	r5, r8
10002cc8:	4693      	mov	fp, r2
10002cca:	469a      	mov	sl, r3
10002ccc:	e7a1      	b.n	10002c12 <__aeabi_fmul+0x7e>
10002cce:	4643      	mov	r3, r8
10002cd0:	042c      	lsls	r4, r5, #16
10002cd2:	0c1b      	lsrs	r3, r3, #16
10002cd4:	469c      	mov	ip, r3
10002cd6:	0c23      	lsrs	r3, r4, #16
10002cd8:	4644      	mov	r4, r8
10002cda:	0426      	lsls	r6, r4, #16
10002cdc:	1c1c      	adds	r4, r3, #0
10002cde:	0c36      	lsrs	r6, r6, #16
10002ce0:	0c2f      	lsrs	r7, r5, #16
10002ce2:	4374      	muls	r4, r6
10002ce4:	1c35      	adds	r5, r6, #0
10002ce6:	4666      	mov	r6, ip
10002ce8:	437d      	muls	r5, r7
10002cea:	4373      	muls	r3, r6
10002cec:	4377      	muls	r7, r6
10002cee:	18eb      	adds	r3, r5, r3
10002cf0:	0c26      	lsrs	r6, r4, #16
10002cf2:	199e      	adds	r6, r3, r6
10002cf4:	42b5      	cmp	r5, r6
10002cf6:	d903      	bls.n	10002d00 <__aeabi_fmul+0x16c>
10002cf8:	2380      	movs	r3, #128	; 0x80
10002cfa:	025b      	lsls	r3, r3, #9
10002cfc:	469c      	mov	ip, r3
10002cfe:	4467      	add	r7, ip
10002d00:	0424      	lsls	r4, r4, #16
10002d02:	0433      	lsls	r3, r6, #16
10002d04:	0c24      	lsrs	r4, r4, #16
10002d06:	191b      	adds	r3, r3, r4
10002d08:	019d      	lsls	r5, r3, #6
10002d0a:	1e6c      	subs	r4, r5, #1
10002d0c:	41a5      	sbcs	r5, r4
10002d0e:	0e9b      	lsrs	r3, r3, #26
10002d10:	0c36      	lsrs	r6, r6, #16
10002d12:	432b      	orrs	r3, r5
10002d14:	19bd      	adds	r5, r7, r6
10002d16:	01ad      	lsls	r5, r5, #6
10002d18:	431d      	orrs	r5, r3
10002d1a:	012b      	lsls	r3, r5, #4
10002d1c:	d504      	bpl.n	10002d28 <__aeabi_fmul+0x194>
10002d1e:	2301      	movs	r3, #1
10002d20:	0868      	lsrs	r0, r5, #1
10002d22:	401d      	ands	r5, r3
10002d24:	4305      	orrs	r5, r0
10002d26:	1c08      	adds	r0, r1, #0
10002d28:	1c03      	adds	r3, r0, #0
10002d2a:	337f      	adds	r3, #127	; 0x7f
10002d2c:	2b00      	cmp	r3, #0
10002d2e:	dd2c      	ble.n	10002d8a <__aeabi_fmul+0x1f6>
10002d30:	0769      	lsls	r1, r5, #29
10002d32:	d004      	beq.n	10002d3e <__aeabi_fmul+0x1aa>
10002d34:	210f      	movs	r1, #15
10002d36:	4029      	ands	r1, r5
10002d38:	2904      	cmp	r1, #4
10002d3a:	d000      	beq.n	10002d3e <__aeabi_fmul+0x1aa>
10002d3c:	3504      	adds	r5, #4
10002d3e:	0129      	lsls	r1, r5, #4
10002d40:	d503      	bpl.n	10002d4a <__aeabi_fmul+0x1b6>
10002d42:	4b2c      	ldr	r3, [pc, #176]	; (10002df4 <__aeabi_fmul+0x260>)
10002d44:	401d      	ands	r5, r3
10002d46:	1c03      	adds	r3, r0, #0
10002d48:	3380      	adds	r3, #128	; 0x80
10002d4a:	2bfe      	cmp	r3, #254	; 0xfe
10002d4c:	dd17      	ble.n	10002d7e <__aeabi_fmul+0x1ea>
10002d4e:	2401      	movs	r4, #1
10002d50:	23ff      	movs	r3, #255	; 0xff
10002d52:	4014      	ands	r4, r2
10002d54:	2500      	movs	r5, #0
10002d56:	e764      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002d58:	2080      	movs	r0, #128	; 0x80
10002d5a:	03c0      	lsls	r0, r0, #15
10002d5c:	4205      	tst	r5, r0
10002d5e:	d009      	beq.n	10002d74 <__aeabi_fmul+0x1e0>
10002d60:	4643      	mov	r3, r8
10002d62:	4203      	tst	r3, r0
10002d64:	d106      	bne.n	10002d74 <__aeabi_fmul+0x1e0>
10002d66:	4645      	mov	r5, r8
10002d68:	4305      	orrs	r5, r0
10002d6a:	026d      	lsls	r5, r5, #9
10002d6c:	0a6d      	lsrs	r5, r5, #9
10002d6e:	464c      	mov	r4, r9
10002d70:	23ff      	movs	r3, #255	; 0xff
10002d72:	e756      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002d74:	4305      	orrs	r5, r0
10002d76:	026d      	lsls	r5, r5, #9
10002d78:	0a6d      	lsrs	r5, r5, #9
10002d7a:	23ff      	movs	r3, #255	; 0xff
10002d7c:	e751      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002d7e:	2401      	movs	r4, #1
10002d80:	01ad      	lsls	r5, r5, #6
10002d82:	0a6d      	lsrs	r5, r5, #9
10002d84:	b2db      	uxtb	r3, r3
10002d86:	4014      	ands	r4, r2
10002d88:	e74b      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002d8a:	237e      	movs	r3, #126	; 0x7e
10002d8c:	425b      	negs	r3, r3
10002d8e:	1a1b      	subs	r3, r3, r0
10002d90:	2b1b      	cmp	r3, #27
10002d92:	dd07      	ble.n	10002da4 <__aeabi_fmul+0x210>
10002d94:	2401      	movs	r4, #1
10002d96:	2300      	movs	r3, #0
10002d98:	4014      	ands	r4, r2
10002d9a:	2500      	movs	r5, #0
10002d9c:	e741      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002d9e:	1c08      	adds	r0, r1, #0
10002da0:	465a      	mov	r2, fp
10002da2:	e7c1      	b.n	10002d28 <__aeabi_fmul+0x194>
10002da4:	309e      	adds	r0, #158	; 0x9e
10002da6:	1c29      	adds	r1, r5, #0
10002da8:	4085      	lsls	r5, r0
10002daa:	40d9      	lsrs	r1, r3
10002dac:	1e68      	subs	r0, r5, #1
10002dae:	4185      	sbcs	r5, r0
10002db0:	430d      	orrs	r5, r1
10002db2:	076b      	lsls	r3, r5, #29
10002db4:	d004      	beq.n	10002dc0 <__aeabi_fmul+0x22c>
10002db6:	230f      	movs	r3, #15
10002db8:	402b      	ands	r3, r5
10002dba:	2b04      	cmp	r3, #4
10002dbc:	d000      	beq.n	10002dc0 <__aeabi_fmul+0x22c>
10002dbe:	3504      	adds	r5, #4
10002dc0:	016b      	lsls	r3, r5, #5
10002dc2:	d504      	bpl.n	10002dce <__aeabi_fmul+0x23a>
10002dc4:	2401      	movs	r4, #1
10002dc6:	2301      	movs	r3, #1
10002dc8:	4014      	ands	r4, r2
10002dca:	2500      	movs	r5, #0
10002dcc:	e729      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002dce:	2401      	movs	r4, #1
10002dd0:	01ad      	lsls	r5, r5, #6
10002dd2:	0a6d      	lsrs	r5, r5, #9
10002dd4:	4014      	ands	r4, r2
10002dd6:	2300      	movs	r3, #0
10002dd8:	e723      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002dda:	2380      	movs	r3, #128	; 0x80
10002ddc:	03db      	lsls	r3, r3, #15
10002dde:	431d      	orrs	r5, r3
10002de0:	2401      	movs	r4, #1
10002de2:	465b      	mov	r3, fp
10002de4:	026d      	lsls	r5, r5, #9
10002de6:	4023      	ands	r3, r4
10002de8:	1c1c      	adds	r4, r3, #0
10002dea:	0a6d      	lsrs	r5, r5, #9
10002dec:	23ff      	movs	r3, #255	; 0xff
10002dee:	e718      	b.n	10002c22 <__aeabi_fmul+0x8e>
10002df0:	100033a8 	.word	0x100033a8
10002df4:	f7ffffff 	.word	0xf7ffffff

10002df8 <__aeabi_ui2f>:
10002df8:	b510      	push	{r4, lr}
10002dfa:	1e04      	subs	r4, r0, #0
10002dfc:	d035      	beq.n	10002e6a <__aeabi_ui2f+0x72>
10002dfe:	f000 f845 	bl	10002e8c <__clzsi2>
10002e02:	219e      	movs	r1, #158	; 0x9e
10002e04:	1a09      	subs	r1, r1, r0
10002e06:	2996      	cmp	r1, #150	; 0x96
10002e08:	dc09      	bgt.n	10002e1e <__aeabi_ui2f+0x26>
10002e0a:	2808      	cmp	r0, #8
10002e0c:	dd30      	ble.n	10002e70 <__aeabi_ui2f+0x78>
10002e0e:	1c02      	adds	r2, r0, #0
10002e10:	1c23      	adds	r3, r4, #0
10002e12:	3a08      	subs	r2, #8
10002e14:	4093      	lsls	r3, r2
10002e16:	025b      	lsls	r3, r3, #9
10002e18:	0a5b      	lsrs	r3, r3, #9
10002e1a:	b2c8      	uxtb	r0, r1
10002e1c:	e020      	b.n	10002e60 <__aeabi_ui2f+0x68>
10002e1e:	2999      	cmp	r1, #153	; 0x99
10002e20:	dd0c      	ble.n	10002e3c <__aeabi_ui2f+0x44>
10002e22:	2205      	movs	r2, #5
10002e24:	1c23      	adds	r3, r4, #0
10002e26:	1a12      	subs	r2, r2, r0
10002e28:	40d3      	lsrs	r3, r2
10002e2a:	1c1a      	adds	r2, r3, #0
10002e2c:	1c03      	adds	r3, r0, #0
10002e2e:	331b      	adds	r3, #27
10002e30:	409c      	lsls	r4, r3
10002e32:	1c23      	adds	r3, r4, #0
10002e34:	1e5c      	subs	r4, r3, #1
10002e36:	41a3      	sbcs	r3, r4
10002e38:	4313      	orrs	r3, r2
10002e3a:	1c1c      	adds	r4, r3, #0
10002e3c:	2805      	cmp	r0, #5
10002e3e:	dd01      	ble.n	10002e44 <__aeabi_ui2f+0x4c>
10002e40:	1f43      	subs	r3, r0, #5
10002e42:	409c      	lsls	r4, r3
10002e44:	4b0f      	ldr	r3, [pc, #60]	; (10002e84 <__aeabi_ui2f+0x8c>)
10002e46:	4023      	ands	r3, r4
10002e48:	0762      	lsls	r2, r4, #29
10002e4a:	d004      	beq.n	10002e56 <__aeabi_ui2f+0x5e>
10002e4c:	220f      	movs	r2, #15
10002e4e:	4014      	ands	r4, r2
10002e50:	2c04      	cmp	r4, #4
10002e52:	d000      	beq.n	10002e56 <__aeabi_ui2f+0x5e>
10002e54:	3304      	adds	r3, #4
10002e56:	015a      	lsls	r2, r3, #5
10002e58:	d40e      	bmi.n	10002e78 <__aeabi_ui2f+0x80>
10002e5a:	019b      	lsls	r3, r3, #6
10002e5c:	0a5b      	lsrs	r3, r3, #9
10002e5e:	b2c8      	uxtb	r0, r1
10002e60:	025b      	lsls	r3, r3, #9
10002e62:	0a5b      	lsrs	r3, r3, #9
10002e64:	05c0      	lsls	r0, r0, #23
10002e66:	4318      	orrs	r0, r3
10002e68:	bd10      	pop	{r4, pc}
10002e6a:	2000      	movs	r0, #0
10002e6c:	2300      	movs	r3, #0
10002e6e:	e7f7      	b.n	10002e60 <__aeabi_ui2f+0x68>
10002e70:	0263      	lsls	r3, r4, #9
10002e72:	0a5b      	lsrs	r3, r3, #9
10002e74:	b2c8      	uxtb	r0, r1
10002e76:	e7f3      	b.n	10002e60 <__aeabi_ui2f+0x68>
10002e78:	219f      	movs	r1, #159	; 0x9f
10002e7a:	4a02      	ldr	r2, [pc, #8]	; (10002e84 <__aeabi_ui2f+0x8c>)
10002e7c:	1a09      	subs	r1, r1, r0
10002e7e:	4013      	ands	r3, r2
10002e80:	e7eb      	b.n	10002e5a <__aeabi_ui2f+0x62>
10002e82:	46c0      	nop			; (mov r8, r8)
10002e84:	fbffffff 	.word	0xfbffffff

10002e88 <__aeabi_idiv0>:
10002e88:	4770      	bx	lr
10002e8a:	46c0      	nop			; (mov r8, r8)

10002e8c <__clzsi2>:
10002e8c:	211c      	movs	r1, #28
10002e8e:	2301      	movs	r3, #1
10002e90:	041b      	lsls	r3, r3, #16
10002e92:	4298      	cmp	r0, r3
10002e94:	d301      	bcc.n	10002e9a <__clzsi2+0xe>
10002e96:	0c00      	lsrs	r0, r0, #16
10002e98:	3910      	subs	r1, #16
10002e9a:	0a1b      	lsrs	r3, r3, #8
10002e9c:	4298      	cmp	r0, r3
10002e9e:	d301      	bcc.n	10002ea4 <__clzsi2+0x18>
10002ea0:	0a00      	lsrs	r0, r0, #8
10002ea2:	3908      	subs	r1, #8
10002ea4:	091b      	lsrs	r3, r3, #4
10002ea6:	4298      	cmp	r0, r3
10002ea8:	d301      	bcc.n	10002eae <__clzsi2+0x22>
10002eaa:	0900      	lsrs	r0, r0, #4
10002eac:	3904      	subs	r1, #4
10002eae:	a202      	add	r2, pc, #8	; (adr r2, 10002eb8 <__clzsi2+0x2c>)
10002eb0:	5c10      	ldrb	r0, [r2, r0]
10002eb2:	1840      	adds	r0, r0, r1
10002eb4:	4770      	bx	lr
10002eb6:	46c0      	nop			; (mov r8, r8)
10002eb8:	02020304 	.word	0x02020304
10002ebc:	01010101 	.word	0x01010101
	...

10002ec8 <__divdi3>:
10002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
10002eca:	4644      	mov	r4, r8
10002ecc:	465f      	mov	r7, fp
10002ece:	4656      	mov	r6, sl
10002ed0:	464d      	mov	r5, r9
10002ed2:	b4f0      	push	{r4, r5, r6, r7}
10002ed4:	1c1c      	adds	r4, r3, #0
10002ed6:	b085      	sub	sp, #20
10002ed8:	2900      	cmp	r1, #0
10002eda:	da00      	bge.n	10002ede <__divdi3+0x16>
10002edc:	e0a9      	b.n	10003032 <__divdi3+0x16a>
10002ede:	1c0f      	adds	r7, r1, #0
10002ee0:	2100      	movs	r1, #0
10002ee2:	1c06      	adds	r6, r0, #0
10002ee4:	4688      	mov	r8, r1
10002ee6:	1c10      	adds	r0, r2, #0
10002ee8:	1c19      	adds	r1, r3, #0
10002eea:	2c00      	cmp	r4, #0
10002eec:	da00      	bge.n	10002ef0 <__divdi3+0x28>
10002eee:	e097      	b.n	10003020 <__divdi3+0x158>
10002ef0:	1c34      	adds	r4, r6, #0
10002ef2:	1c3d      	adds	r5, r7, #0
10002ef4:	4682      	mov	sl, r0
10002ef6:	4689      	mov	r9, r1
10002ef8:	42b9      	cmp	r1, r7
10002efa:	d873      	bhi.n	10002fe4 <__divdi3+0x11c>
10002efc:	d070      	beq.n	10002fe0 <__divdi3+0x118>
10002efe:	4649      	mov	r1, r9
10002f00:	4650      	mov	r0, sl
10002f02:	f000 f985 	bl	10003210 <__clzdi2>
10002f06:	4683      	mov	fp, r0
10002f08:	1c39      	adds	r1, r7, #0
10002f0a:	1c30      	adds	r0, r6, #0
10002f0c:	f000 f980 	bl	10003210 <__clzdi2>
10002f10:	465b      	mov	r3, fp
10002f12:	1a18      	subs	r0, r3, r0
10002f14:	1c03      	adds	r3, r0, #0
10002f16:	4683      	mov	fp, r0
10002f18:	3b20      	subs	r3, #32
10002f1a:	469c      	mov	ip, r3
10002f1c:	d500      	bpl.n	10002f20 <__divdi3+0x58>
10002f1e:	e09c      	b.n	1000305a <__divdi3+0x192>
10002f20:	2300      	movs	r3, #0
10002f22:	2200      	movs	r2, #0
10002f24:	4651      	mov	r1, sl
10002f26:	9200      	str	r2, [sp, #0]
10002f28:	9301      	str	r3, [sp, #4]
10002f2a:	4663      	mov	r3, ip
10002f2c:	4099      	lsls	r1, r3
10002f2e:	9101      	str	r1, [sp, #4]
10002f30:	4651      	mov	r1, sl
10002f32:	4081      	lsls	r1, r0
10002f34:	9b01      	ldr	r3, [sp, #4]
10002f36:	9100      	str	r1, [sp, #0]
10002f38:	42bb      	cmp	r3, r7
10002f3a:	d900      	bls.n	10002f3e <__divdi3+0x76>
10002f3c:	e083      	b.n	10003046 <__divdi3+0x17e>
10002f3e:	d100      	bne.n	10002f42 <__divdi3+0x7a>
10002f40:	e07e      	b.n	10003040 <__divdi3+0x178>
10002f42:	9a00      	ldr	r2, [sp, #0]
10002f44:	9b01      	ldr	r3, [sp, #4]
10002f46:	1c34      	adds	r4, r6, #0
10002f48:	1c3d      	adds	r5, r7, #0
10002f4a:	1aa4      	subs	r4, r4, r2
10002f4c:	419d      	sbcs	r5, r3
10002f4e:	4663      	mov	r3, ip
10002f50:	2b00      	cmp	r3, #0
10002f52:	da00      	bge.n	10002f56 <__divdi3+0x8e>
10002f54:	e09a      	b.n	1000308c <__divdi3+0x1c4>
10002f56:	2600      	movs	r6, #0
10002f58:	2700      	movs	r7, #0
10002f5a:	9602      	str	r6, [sp, #8]
10002f5c:	9703      	str	r7, [sp, #12]
10002f5e:	3601      	adds	r6, #1
10002f60:	409e      	lsls	r6, r3
10002f62:	9603      	str	r6, [sp, #12]
10002f64:	2601      	movs	r6, #1
10002f66:	4086      	lsls	r6, r0
10002f68:	9602      	str	r6, [sp, #8]
10002f6a:	2800      	cmp	r0, #0
10002f6c:	d100      	bne.n	10002f70 <__divdi3+0xa8>
10002f6e:	e071      	b.n	10003054 <__divdi3+0x18c>
10002f70:	9900      	ldr	r1, [sp, #0]
10002f72:	9a01      	ldr	r2, [sp, #4]
10002f74:	07d3      	lsls	r3, r2, #31
10002f76:	4699      	mov	r9, r3
10002f78:	464b      	mov	r3, r9
10002f7a:	084e      	lsrs	r6, r1, #1
10002f7c:	431e      	orrs	r6, r3
10002f7e:	0857      	lsrs	r7, r2, #1
10002f80:	2300      	movs	r3, #0
10002f82:	2201      	movs	r2, #1
10002f84:	e00c      	b.n	10002fa0 <__divdi3+0xd8>
10002f86:	42af      	cmp	r7, r5
10002f88:	d101      	bne.n	10002f8e <__divdi3+0xc6>
10002f8a:	42a6      	cmp	r6, r4
10002f8c:	d80a      	bhi.n	10002fa4 <__divdi3+0xdc>
10002f8e:	1ba4      	subs	r4, r4, r6
10002f90:	41bd      	sbcs	r5, r7
10002f92:	1924      	adds	r4, r4, r4
10002f94:	416d      	adcs	r5, r5
10002f96:	3801      	subs	r0, #1
10002f98:	18a4      	adds	r4, r4, r2
10002f9a:	415d      	adcs	r5, r3
10002f9c:	2800      	cmp	r0, #0
10002f9e:	d006      	beq.n	10002fae <__divdi3+0xe6>
10002fa0:	42af      	cmp	r7, r5
10002fa2:	d9f0      	bls.n	10002f86 <__divdi3+0xbe>
10002fa4:	3801      	subs	r0, #1
10002fa6:	1924      	adds	r4, r4, r4
10002fa8:	416d      	adcs	r5, r5
10002faa:	2800      	cmp	r0, #0
10002fac:	d1f8      	bne.n	10002fa0 <__divdi3+0xd8>
10002fae:	2220      	movs	r2, #32
10002fb0:	9e02      	ldr	r6, [sp, #8]
10002fb2:	9f03      	ldr	r7, [sp, #12]
10002fb4:	465b      	mov	r3, fp
10002fb6:	4252      	negs	r2, r2
10002fb8:	1936      	adds	r6, r6, r4
10002fba:	416f      	adcs	r7, r5
10002fbc:	1899      	adds	r1, r3, r2
10002fbe:	d45a      	bmi.n	10003076 <__divdi3+0x1ae>
10002fc0:	1c28      	adds	r0, r5, #0
10002fc2:	40c8      	lsrs	r0, r1
10002fc4:	1c2c      	adds	r4, r5, #0
10002fc6:	465b      	mov	r3, fp
10002fc8:	40dc      	lsrs	r4, r3
10002fca:	2900      	cmp	r1, #0
10002fcc:	db68      	blt.n	100030a0 <__divdi3+0x1d8>
10002fce:	1c04      	adds	r4, r0, #0
10002fd0:	408c      	lsls	r4, r1
10002fd2:	1c23      	adds	r3, r4, #0
10002fd4:	4659      	mov	r1, fp
10002fd6:	4088      	lsls	r0, r1
10002fd8:	1c02      	adds	r2, r0, #0
10002fda:	1ab6      	subs	r6, r6, r2
10002fdc:	419f      	sbcs	r7, r3
10002fde:	e003      	b.n	10002fe8 <__divdi3+0x120>
10002fe0:	42b0      	cmp	r0, r6
10002fe2:	d98c      	bls.n	10002efe <__divdi3+0x36>
10002fe4:	2600      	movs	r6, #0
10002fe6:	2700      	movs	r7, #0
10002fe8:	4641      	mov	r1, r8
10002fea:	1e4b      	subs	r3, r1, #1
10002fec:	4199      	sbcs	r1, r3
10002fee:	2300      	movs	r3, #0
10002ff0:	9100      	str	r1, [sp, #0]
10002ff2:	9301      	str	r3, [sp, #4]
10002ff4:	9a00      	ldr	r2, [sp, #0]
10002ff6:	9b01      	ldr	r3, [sp, #4]
10002ff8:	2500      	movs	r5, #0
10002ffa:	4254      	negs	r4, r2
10002ffc:	419d      	sbcs	r5, r3
10002ffe:	1c33      	adds	r3, r6, #0
10003000:	4063      	eors	r3, r4
10003002:	1c18      	adds	r0, r3, #0
10003004:	1c3b      	adds	r3, r7, #0
10003006:	406b      	eors	r3, r5
10003008:	1c19      	adds	r1, r3, #0
1000300a:	9b00      	ldr	r3, [sp, #0]
1000300c:	9c01      	ldr	r4, [sp, #4]
1000300e:	18c0      	adds	r0, r0, r3
10003010:	4161      	adcs	r1, r4
10003012:	b005      	add	sp, #20
10003014:	bc3c      	pop	{r2, r3, r4, r5}
10003016:	4690      	mov	r8, r2
10003018:	4699      	mov	r9, r3
1000301a:	46a2      	mov	sl, r4
1000301c:	46ab      	mov	fp, r5
1000301e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10003020:	4643      	mov	r3, r8
10003022:	43db      	mvns	r3, r3
10003024:	1c0c      	adds	r4, r1, #0
10003026:	4698      	mov	r8, r3
10003028:	1c13      	adds	r3, r2, #0
1000302a:	2100      	movs	r1, #0
1000302c:	4258      	negs	r0, r3
1000302e:	41a1      	sbcs	r1, r4
10003030:	e75e      	b.n	10002ef0 <__divdi3+0x28>
10003032:	2700      	movs	r7, #0
10003034:	4246      	negs	r6, r0
10003036:	418f      	sbcs	r7, r1
10003038:	2101      	movs	r1, #1
1000303a:	4249      	negs	r1, r1
1000303c:	4688      	mov	r8, r1
1000303e:	e752      	b.n	10002ee6 <__divdi3+0x1e>
10003040:	42b1      	cmp	r1, r6
10003042:	d800      	bhi.n	10003046 <__divdi3+0x17e>
10003044:	e77d      	b.n	10002f42 <__divdi3+0x7a>
10003046:	2600      	movs	r6, #0
10003048:	2700      	movs	r7, #0
1000304a:	9602      	str	r6, [sp, #8]
1000304c:	9703      	str	r7, [sp, #12]
1000304e:	2800      	cmp	r0, #0
10003050:	d000      	beq.n	10003054 <__divdi3+0x18c>
10003052:	e78d      	b.n	10002f70 <__divdi3+0xa8>
10003054:	9e02      	ldr	r6, [sp, #8]
10003056:	9f03      	ldr	r7, [sp, #12]
10003058:	e7c6      	b.n	10002fe8 <__divdi3+0x120>
1000305a:	2120      	movs	r1, #32
1000305c:	4653      	mov	r3, sl
1000305e:	1a09      	subs	r1, r1, r0
10003060:	40cb      	lsrs	r3, r1
10003062:	2200      	movs	r2, #0
10003064:	1c19      	adds	r1, r3, #0
10003066:	2300      	movs	r3, #0
10003068:	9200      	str	r2, [sp, #0]
1000306a:	9301      	str	r3, [sp, #4]
1000306c:	464b      	mov	r3, r9
1000306e:	4083      	lsls	r3, r0
10003070:	430b      	orrs	r3, r1
10003072:	9301      	str	r3, [sp, #4]
10003074:	e75c      	b.n	10002f30 <__divdi3+0x68>
10003076:	465a      	mov	r2, fp
10003078:	2320      	movs	r3, #32
1000307a:	1a9b      	subs	r3, r3, r2
1000307c:	1c2a      	adds	r2, r5, #0
1000307e:	409a      	lsls	r2, r3
10003080:	1c20      	adds	r0, r4, #0
10003082:	1c13      	adds	r3, r2, #0
10003084:	465a      	mov	r2, fp
10003086:	40d0      	lsrs	r0, r2
10003088:	4318      	orrs	r0, r3
1000308a:	e79b      	b.n	10002fc4 <__divdi3+0xfc>
1000308c:	2620      	movs	r6, #32
1000308e:	2700      	movs	r7, #0
10003090:	1a33      	subs	r3, r6, r0
10003092:	2600      	movs	r6, #0
10003094:	9602      	str	r6, [sp, #8]
10003096:	9703      	str	r7, [sp, #12]
10003098:	2701      	movs	r7, #1
1000309a:	40df      	lsrs	r7, r3
1000309c:	9703      	str	r7, [sp, #12]
1000309e:	e761      	b.n	10002f64 <__divdi3+0x9c>
100030a0:	465b      	mov	r3, fp
100030a2:	2120      	movs	r1, #32
100030a4:	465d      	mov	r5, fp
100030a6:	1ac9      	subs	r1, r1, r3
100030a8:	1c03      	adds	r3, r0, #0
100030aa:	40ac      	lsls	r4, r5
100030ac:	40cb      	lsrs	r3, r1
100030ae:	1c19      	adds	r1, r3, #0
100030b0:	1c23      	adds	r3, r4, #0
100030b2:	430b      	orrs	r3, r1
100030b4:	e78e      	b.n	10002fd4 <__divdi3+0x10c>
100030b6:	46c0      	nop			; (mov r8, r8)

100030b8 <__udivdi3>:
100030b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100030ba:	4645      	mov	r5, r8
100030bc:	464e      	mov	r6, r9
100030be:	4657      	mov	r7, sl
100030c0:	b4e0      	push	{r5, r6, r7}
100030c2:	1c04      	adds	r4, r0, #0
100030c4:	b082      	sub	sp, #8
100030c6:	1c0d      	adds	r5, r1, #0
100030c8:	4691      	mov	r9, r2
100030ca:	4698      	mov	r8, r3
100030cc:	428b      	cmp	r3, r1
100030ce:	d862      	bhi.n	10003196 <__udivdi3+0xde>
100030d0:	d05f      	beq.n	10003192 <__udivdi3+0xda>
100030d2:	4641      	mov	r1, r8
100030d4:	4648      	mov	r0, r9
100030d6:	f000 f89b 	bl	10003210 <__clzdi2>
100030da:	1c29      	adds	r1, r5, #0
100030dc:	1c06      	adds	r6, r0, #0
100030de:	1c20      	adds	r0, r4, #0
100030e0:	f000 f896 	bl	10003210 <__clzdi2>
100030e4:	2320      	movs	r3, #32
100030e6:	1a31      	subs	r1, r6, r0
100030e8:	425b      	negs	r3, r3
100030ea:	468a      	mov	sl, r1
100030ec:	18c8      	adds	r0, r1, r3
100030ee:	d465      	bmi.n	100031bc <__udivdi3+0x104>
100030f0:	464b      	mov	r3, r9
100030f2:	4083      	lsls	r3, r0
100030f4:	1c1f      	adds	r7, r3, #0
100030f6:	464b      	mov	r3, r9
100030f8:	408b      	lsls	r3, r1
100030fa:	1c1e      	adds	r6, r3, #0
100030fc:	42af      	cmp	r7, r5
100030fe:	d858      	bhi.n	100031b2 <__udivdi3+0xfa>
10003100:	d055      	beq.n	100031ae <__udivdi3+0xf6>
10003102:	1ba4      	subs	r4, r4, r6
10003104:	41bd      	sbcs	r5, r7
10003106:	2800      	cmp	r0, #0
10003108:	da00      	bge.n	1000310c <__udivdi3+0x54>
1000310a:	e077      	b.n	100031fc <__udivdi3+0x144>
1000310c:	2200      	movs	r2, #0
1000310e:	2300      	movs	r3, #0
10003110:	9200      	str	r2, [sp, #0]
10003112:	9301      	str	r3, [sp, #4]
10003114:	3201      	adds	r2, #1
10003116:	4082      	lsls	r2, r0
10003118:	9201      	str	r2, [sp, #4]
1000311a:	2301      	movs	r3, #1
1000311c:	408b      	lsls	r3, r1
1000311e:	9300      	str	r3, [sp, #0]
10003120:	2900      	cmp	r1, #0
10003122:	d03c      	beq.n	1000319e <__udivdi3+0xe6>
10003124:	07fb      	lsls	r3, r7, #31
10003126:	4698      	mov	r8, r3
10003128:	4640      	mov	r0, r8
1000312a:	0872      	lsrs	r2, r6, #1
1000312c:	087b      	lsrs	r3, r7, #1
1000312e:	4302      	orrs	r2, r0
10003130:	2601      	movs	r6, #1
10003132:	2700      	movs	r7, #0
10003134:	e00c      	b.n	10003150 <__udivdi3+0x98>
10003136:	42ab      	cmp	r3, r5
10003138:	d101      	bne.n	1000313e <__udivdi3+0x86>
1000313a:	42a2      	cmp	r2, r4
1000313c:	d80a      	bhi.n	10003154 <__udivdi3+0x9c>
1000313e:	1aa4      	subs	r4, r4, r2
10003140:	419d      	sbcs	r5, r3
10003142:	1924      	adds	r4, r4, r4
10003144:	416d      	adcs	r5, r5
10003146:	3901      	subs	r1, #1
10003148:	19a4      	adds	r4, r4, r6
1000314a:	417d      	adcs	r5, r7
1000314c:	2900      	cmp	r1, #0
1000314e:	d006      	beq.n	1000315e <__udivdi3+0xa6>
10003150:	42ab      	cmp	r3, r5
10003152:	d9f0      	bls.n	10003136 <__udivdi3+0x7e>
10003154:	3901      	subs	r1, #1
10003156:	1924      	adds	r4, r4, r4
10003158:	416d      	adcs	r5, r5
1000315a:	2900      	cmp	r1, #0
1000315c:	d1f8      	bne.n	10003150 <__udivdi3+0x98>
1000315e:	2220      	movs	r2, #32
10003160:	9800      	ldr	r0, [sp, #0]
10003162:	9901      	ldr	r1, [sp, #4]
10003164:	4653      	mov	r3, sl
10003166:	4252      	negs	r2, r2
10003168:	1900      	adds	r0, r0, r4
1000316a:	4169      	adcs	r1, r5
1000316c:	189e      	adds	r6, r3, r2
1000316e:	d43a      	bmi.n	100031e6 <__udivdi3+0x12e>
10003170:	1c2f      	adds	r7, r5, #0
10003172:	40f7      	lsrs	r7, r6
10003174:	4653      	mov	r3, sl
10003176:	40dd      	lsrs	r5, r3
10003178:	2e00      	cmp	r6, #0
1000317a:	db29      	blt.n	100031d0 <__udivdi3+0x118>
1000317c:	1c3c      	adds	r4, r7, #0
1000317e:	40b4      	lsls	r4, r6
10003180:	1c23      	adds	r3, r4, #0
10003182:	4654      	mov	r4, sl
10003184:	40a7      	lsls	r7, r4
10003186:	1c3a      	adds	r2, r7, #0
10003188:	1a80      	subs	r0, r0, r2
1000318a:	4199      	sbcs	r1, r3
1000318c:	9000      	str	r0, [sp, #0]
1000318e:	9101      	str	r1, [sp, #4]
10003190:	e005      	b.n	1000319e <__udivdi3+0xe6>
10003192:	4282      	cmp	r2, r0
10003194:	d99d      	bls.n	100030d2 <__udivdi3+0x1a>
10003196:	2300      	movs	r3, #0
10003198:	2400      	movs	r4, #0
1000319a:	9300      	str	r3, [sp, #0]
1000319c:	9401      	str	r4, [sp, #4]
1000319e:	9800      	ldr	r0, [sp, #0]
100031a0:	9901      	ldr	r1, [sp, #4]
100031a2:	b002      	add	sp, #8
100031a4:	bc1c      	pop	{r2, r3, r4}
100031a6:	4690      	mov	r8, r2
100031a8:	4699      	mov	r9, r3
100031aa:	46a2      	mov	sl, r4
100031ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100031ae:	42a3      	cmp	r3, r4
100031b0:	d9a7      	bls.n	10003102 <__udivdi3+0x4a>
100031b2:	2200      	movs	r2, #0
100031b4:	2300      	movs	r3, #0
100031b6:	9200      	str	r2, [sp, #0]
100031b8:	9301      	str	r3, [sp, #4]
100031ba:	e7b1      	b.n	10003120 <__udivdi3+0x68>
100031bc:	2220      	movs	r2, #32
100031be:	464b      	mov	r3, r9
100031c0:	1a52      	subs	r2, r2, r1
100031c2:	40d3      	lsrs	r3, r2
100031c4:	1c1a      	adds	r2, r3, #0
100031c6:	4643      	mov	r3, r8
100031c8:	408b      	lsls	r3, r1
100031ca:	1c1f      	adds	r7, r3, #0
100031cc:	4317      	orrs	r7, r2
100031ce:	e792      	b.n	100030f6 <__udivdi3+0x3e>
100031d0:	4653      	mov	r3, sl
100031d2:	2420      	movs	r4, #32
100031d4:	4656      	mov	r6, sl
100031d6:	1ae4      	subs	r4, r4, r3
100031d8:	1c3b      	adds	r3, r7, #0
100031da:	40b5      	lsls	r5, r6
100031dc:	40e3      	lsrs	r3, r4
100031de:	1c1c      	adds	r4, r3, #0
100031e0:	1c2b      	adds	r3, r5, #0
100031e2:	4323      	orrs	r3, r4
100031e4:	e7cd      	b.n	10003182 <__udivdi3+0xca>
100031e6:	4652      	mov	r2, sl
100031e8:	2320      	movs	r3, #32
100031ea:	1a9b      	subs	r3, r3, r2
100031ec:	1c2a      	adds	r2, r5, #0
100031ee:	409a      	lsls	r2, r3
100031f0:	1c27      	adds	r7, r4, #0
100031f2:	1c13      	adds	r3, r2, #0
100031f4:	4652      	mov	r2, sl
100031f6:	40d7      	lsrs	r7, r2
100031f8:	431f      	orrs	r7, r3
100031fa:	e7bb      	b.n	10003174 <__udivdi3+0xbc>
100031fc:	2320      	movs	r3, #32
100031fe:	2200      	movs	r2, #0
10003200:	1a58      	subs	r0, r3, r1
10003202:	2300      	movs	r3, #0
10003204:	9200      	str	r2, [sp, #0]
10003206:	9301      	str	r3, [sp, #4]
10003208:	3201      	adds	r2, #1
1000320a:	40c2      	lsrs	r2, r0
1000320c:	9201      	str	r2, [sp, #4]
1000320e:	e784      	b.n	1000311a <__udivdi3+0x62>

10003210 <__clzdi2>:
10003210:	b510      	push	{r4, lr}
10003212:	2900      	cmp	r1, #0
10003214:	d103      	bne.n	1000321e <__clzdi2+0xe>
10003216:	f7ff fe39 	bl	10002e8c <__clzsi2>
1000321a:	3020      	adds	r0, #32
1000321c:	e002      	b.n	10003224 <__clzdi2+0x14>
1000321e:	1c08      	adds	r0, r1, #0
10003220:	f7ff fe34 	bl	10002e8c <__clzsi2>
10003224:	bd10      	pop	{r4, pc}
10003226:	46c0      	nop			; (mov r8, r8)

10003228 <__libc_init_array>:
10003228:	4b0e      	ldr	r3, [pc, #56]	; (10003264 <__libc_init_array+0x3c>)
1000322a:	b570      	push	{r4, r5, r6, lr}
1000322c:	2500      	movs	r5, #0
1000322e:	1c1e      	adds	r6, r3, #0
10003230:	4c0d      	ldr	r4, [pc, #52]	; (10003268 <__libc_init_array+0x40>)
10003232:	1ae4      	subs	r4, r4, r3
10003234:	10a4      	asrs	r4, r4, #2
10003236:	42a5      	cmp	r5, r4
10003238:	d004      	beq.n	10003244 <__libc_init_array+0x1c>
1000323a:	00ab      	lsls	r3, r5, #2
1000323c:	58f3      	ldr	r3, [r6, r3]
1000323e:	4798      	blx	r3
10003240:	3501      	adds	r5, #1
10003242:	e7f8      	b.n	10003236 <__libc_init_array+0xe>
10003244:	f7fe faf8 	bl	10001838 <_init>
10003248:	4b08      	ldr	r3, [pc, #32]	; (1000326c <__libc_init_array+0x44>)
1000324a:	2500      	movs	r5, #0
1000324c:	1c1e      	adds	r6, r3, #0
1000324e:	4c08      	ldr	r4, [pc, #32]	; (10003270 <__libc_init_array+0x48>)
10003250:	1ae4      	subs	r4, r4, r3
10003252:	10a4      	asrs	r4, r4, #2
10003254:	42a5      	cmp	r5, r4
10003256:	d004      	beq.n	10003262 <__libc_init_array+0x3a>
10003258:	00ab      	lsls	r3, r5, #2
1000325a:	58f3      	ldr	r3, [r6, r3]
1000325c:	4798      	blx	r3
1000325e:	3501      	adds	r5, #1
10003260:	e7f8      	b.n	10003254 <__libc_init_array+0x2c>
10003262:	bd70      	pop	{r4, r5, r6, pc}
10003264:	20000858 	.word	0x20000858
10003268:	20000858 	.word	0x20000858
1000326c:	20000858 	.word	0x20000858
10003270:	20000858 	.word	0x20000858

10003274 <memcpy>:
10003274:	2300      	movs	r3, #0
10003276:	b510      	push	{r4, lr}
10003278:	4293      	cmp	r3, r2
1000327a:	d003      	beq.n	10003284 <memcpy+0x10>
1000327c:	5ccc      	ldrb	r4, [r1, r3]
1000327e:	54c4      	strb	r4, [r0, r3]
10003280:	3301      	adds	r3, #1
10003282:	e7f9      	b.n	10003278 <memcpy+0x4>
10003284:	bd10      	pop	{r4, pc}
	...

10003288 <event_masks>:
10003288:	0000 001f 008f ff60 ff70 0000               ......`.p...

10003294 <CSWTCH.37>:
	...
1000329c:	0002 0000 0002 0000 000c 0000 000c 0000     ................
100032ac:	000c 0000 000c 0000 0008 0000 000a 0000     ................

100032bc <CSWTCH.38>:
100032bc:	0003 0000 0003 0000 000c 0000 000c 0000     ................
100032cc:	3000 0000 3000 0000 3000 0000 3000 0000     .0...0...0...0..
100032dc:	0300 0000 0c00 0000                         ........

100032e4 <RTC_0_config>:
100032e4:	0100 0000 0000 0000 25c9 1000 0000 0000     .........%......

100032f4 <RTC_0_time_alarm_config>:
100032f4:	0000 0000 0004 07b2 0100 0000 0000 07b2     ................
10003304:	7fff 0000                                   ....

10003308 <INTERRUPT_0>:
10003308:	0317 0001                                   ....

1000330c <GLOBAL_SCU_XMC1_0_config>:
1000330c:	0303 0103 0101 0000                         ........

10003314 <group_init_handle0>:
	...

10003328 <group_init_handle1>:
	...

1000333c <global_config>:
	...

10003354 <BGT24>:
10003354:	0000 4004 0080 0000 0000 0001 0007 0000     ...@............

10003364 <Receding>:
10003364:	0000 4004 0080 0000 0000 0001 0009 0000     ...@............

10003374 <Approaching>:
10003374:	0000 4004 0080 0000 0000 0001 0006 0000     ...@............
10003384:	0100 0000 0000 0001 0000 0000               ............

10003390 <backgnd_rs_intr_handle>:
10003390:	000f 0000 0002 0000                         ........

10003398 <backgnd_config>:
10003398:	0005 0000 0000 0000 0008 0000               ............

100033a4 <global_iclass_config>:
100033a4:	0001 0000 2cce 1000 2cc6 1000 2cc6 1000     .....,...,...,..
100033b4:	2cbe 1000 2c10 1000 2c10 1000 2cb4 1000     .,...,...,...,..
100033c4:	2cbe 1000 2c10 1000 2cb4 1000 2c10 1000     .,...,...,...,..
100033d4:	2cbe 1000 2c12 1000 2c12 1000 2c12 1000     .,...,...,...,..
100033e4:	2d58 1000                                   X-..

Disassembly of section .VENEER_Code:

2000000c <HardFault_Veneer>:
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
2000000c:	482c      	ldr	r0, [pc, #176]	; (200000c0 <BCCU0_0_Veneer+0x4>)
    MOV PC,R0
2000000e:	4687      	mov	pc, r0
	...

2000002c <SVC_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
2000002c:	4825      	ldr	r0, [pc, #148]	; (200000c4 <BCCU0_0_Veneer+0x8>)
    MOV PC,R0
2000002e:	4687      	mov	pc, r0
	...

20000038 <PendSV_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
20000038:	4823      	ldr	r0, [pc, #140]	; (200000c8 <BCCU0_0_Veneer+0xc>)
    MOV PC,R0
2000003a:	4687      	mov	pc, r0

2000003c <SysTick_Veneer>:
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
2000003c:	4823      	ldr	r0, [pc, #140]	; (200000cc <BCCU0_0_Veneer+0x10>)
    MOV PC,R0
2000003e:	4687      	mov	pc, r0

20000040 <SCU_0_Veneer>:
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
20000040:	4823      	ldr	r0, [pc, #140]	; (200000d0 <BCCU0_0_Veneer+0x14>)
    MOV PC,R0
20000042:	4687      	mov	pc, r0

20000044 <SCU_1_Veneer>:
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
20000044:	4823      	ldr	r0, [pc, #140]	; (200000d4 <BCCU0_0_Veneer+0x18>)
    MOV PC,R0
20000046:	4687      	mov	pc, r0

20000048 <SCU_2_Veneer>:
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
20000048:	4823      	ldr	r0, [pc, #140]	; (200000d8 <BCCU0_0_Veneer+0x1c>)
    MOV PC,R0
2000004a:	4687      	mov	pc, r0

2000004c <SCU_3_Veneer>:
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
2000004c:	4823      	ldr	r0, [pc, #140]	; (200000dc <BCCU0_0_Veneer+0x20>)
    MOV PC,R0
2000004e:	4687      	mov	pc, r0

20000050 <SCU_4_Veneer>:
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
20000050:	4823      	ldr	r0, [pc, #140]	; (200000e0 <BCCU0_0_Veneer+0x24>)
    MOV PC,R0
20000052:	4687      	mov	pc, r0

20000054 <SCU_5_Veneer>:
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
20000054:	4823      	ldr	r0, [pc, #140]	; (200000e4 <BCCU0_0_Veneer+0x28>)
    MOV PC,R0
20000056:	4687      	mov	pc, r0

20000058 <SCU_6_Veneer>:
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
20000058:	4823      	ldr	r0, [pc, #140]	; (200000e8 <BCCU0_0_Veneer+0x2c>)
    MOV PC,R0
2000005a:	4687      	mov	pc, r0

2000005c <MATH_Veneer>:
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
2000005c:	4823      	ldr	r0, [pc, #140]	; (200000ec <BCCU0_0_Veneer+0x30>)
    MOV PC,R0
2000005e:	4687      	mov	pc, r0
20000060:	00000000 	.word	0x00000000

20000064 <USIC0_0_Veneer>:
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
20000064:	4822      	ldr	r0, [pc, #136]	; (200000f0 <BCCU0_0_Veneer+0x34>)
    MOV PC,R0
20000066:	4687      	mov	pc, r0

20000068 <USIC0_1_Veneer>:
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
20000068:	4822      	ldr	r0, [pc, #136]	; (200000f4 <BCCU0_0_Veneer+0x38>)
    MOV PC,R0
2000006a:	4687      	mov	pc, r0

2000006c <USIC0_2_Veneer>:
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
2000006c:	4822      	ldr	r0, [pc, #136]	; (200000f8 <BCCU0_0_Veneer+0x3c>)
    MOV PC,R0
2000006e:	4687      	mov	pc, r0

20000070 <USIC0_3_Veneer>:
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
20000070:	4822      	ldr	r0, [pc, #136]	; (200000fc <BCCU0_0_Veneer+0x40>)
    MOV PC,R0
20000072:	4687      	mov	pc, r0

20000074 <USIC0_4_Veneer>:
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000074:	4822      	ldr	r0, [pc, #136]	; (20000100 <BCCU0_0_Veneer+0x44>)
    MOV PC,R0
20000076:	4687      	mov	pc, r0

20000078 <USIC0_5_Veneer>:
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000078:	4822      	ldr	r0, [pc, #136]	; (20000104 <BCCU0_0_Veneer+0x48>)
    MOV PC,R0
2000007a:	4687      	mov	pc, r0

2000007c <VADC0_C0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
2000007c:	4822      	ldr	r0, [pc, #136]	; (20000108 <BCCU0_0_Veneer+0x4c>)
    MOV PC,R0
2000007e:	4687      	mov	pc, r0

20000080 <VADC0_C0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
20000080:	4822      	ldr	r0, [pc, #136]	; (2000010c <BCCU0_0_Veneer+0x50>)
    MOV PC,R0
20000082:	4687      	mov	pc, r0

20000084 <VADC0_G0_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000084:	4822      	ldr	r0, [pc, #136]	; (20000110 <BCCU0_0_Veneer+0x54>)
    MOV PC,R0
20000086:	4687      	mov	pc, r0

20000088 <VADC0_G0_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000088:	4822      	ldr	r0, [pc, #136]	; (20000114 <BCCU0_0_Veneer+0x58>)
    MOV PC,R0
2000008a:	4687      	mov	pc, r0

2000008c <VADC0_G1_0_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
2000008c:	4822      	ldr	r0, [pc, #136]	; (20000118 <BCCU0_0_Veneer+0x5c>)
    MOV PC,R0
2000008e:	4687      	mov	pc, r0

20000090 <VADC0_G1_1_Veneer>:
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
20000090:	4822      	ldr	r0, [pc, #136]	; (2000011c <BCCU0_0_Veneer+0x60>)
    MOV PC,R0
20000092:	4687      	mov	pc, r0

20000094 <CCU40_0_Veneer>:
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000094:	4822      	ldr	r0, [pc, #136]	; (20000120 <BCCU0_0_Veneer+0x64>)
    MOV PC,R0
20000096:	4687      	mov	pc, r0

20000098 <CCU40_1_Veneer>:
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000098:	4822      	ldr	r0, [pc, #136]	; (20000124 <BCCU0_0_Veneer+0x68>)
    MOV PC,R0
2000009a:	4687      	mov	pc, r0

2000009c <CCU40_2_Veneer>:
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
2000009c:	4822      	ldr	r0, [pc, #136]	; (20000128 <BCCU0_0_Veneer+0x6c>)
    MOV PC,R0
2000009e:	4687      	mov	pc, r0

200000a0 <CCU40_3_Veneer>:
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
200000a0:	4822      	ldr	r0, [pc, #136]	; (2000012c <BCCU0_0_Veneer+0x70>)
    MOV PC,R0
200000a2:	4687      	mov	pc, r0

200000a4 <CCU80_0_Veneer>:
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
200000a4:	4822      	ldr	r0, [pc, #136]	; (20000130 <BCCU0_0_Veneer+0x74>)
    MOV PC,R0
200000a6:	4687      	mov	pc, r0

200000a8 <CCU80_1_Veneer>:
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
200000a8:	4822      	ldr	r0, [pc, #136]	; (20000134 <BCCU0_0_Veneer+0x78>)
    MOV PC,R0
200000aa:	4687      	mov	pc, r0

200000ac <POSIF0_0_Veneer>:
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
200000ac:	4822      	ldr	r0, [pc, #136]	; (20000138 <BCCU0_0_Veneer+0x7c>)
    MOV PC,R0
200000ae:	4687      	mov	pc, r0

200000b0 <POSIF0_1_Veneer>:
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
200000b0:	4822      	ldr	r0, [pc, #136]	; (2000013c <BCCU0_0_Veneer+0x80>)
    MOV PC,R0
200000b2:	4687      	mov	pc, r0
	...

200000bc <BCCU0_0_Veneer>:
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
200000bc:	4820      	ldr	r0, [pc, #128]	; (20000140 <BCCU0_0_Veneer+0x84>)
    MOV PC,R0
200000be:	4687      	mov	pc, r0
    
    .align 1
    
    .globl HardFault_Veneer
HardFault_Veneer:
    LDR R0, =HardFault_Handler
200000c0:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl SVC_Veneer
SVC_Veneer:
    LDR R0, =SVC_Handler
200000c4:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl PendSV_Veneer
PendSV_Veneer:
    LDR R0, =PendSV_Handler
200000c8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SysTick_Veneer 
SysTick_Veneer:
    LDR R0, =SysTick_Handler
200000cc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_0_Veneer 
SCU_0_Veneer:
    LDR R0, =SCU_0_IRQHandler
200000d0:	10001bb9 	.word	0x10001bb9
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_1_Veneer 
SCU_1_Veneer:
    LDR R0, =SCU_1_IRQHandler
200000d4:	10001bc5 	.word	0x10001bc5
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_2_Veneer
SCU_2_Veneer:
    LDR R0, =SCU_2_IRQHandler
200000d8:	10001bd1 	.word	0x10001bd1
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_3_Veneer 
SCU_3_Veneer:
    LDR R0, =ERU0_0_IRQHandler
200000dc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_4_Veneer 
SCU_4_Veneer:
    LDR R0, =ERU0_1_IRQHandler
200000e0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_5_Veneer 
SCU_5_Veneer:
    LDR R0, =ERU0_2_IRQHandler
200000e4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl SCU_6_Veneer 
SCU_6_Veneer:
    LDR R0, =ERU0_3_IRQHandler
200000e8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl MATH_Veneer 
MATH_Veneer:
    LDR R0, =MATH0_0_IRQHandler
200000ec:	10001099 	.word	0x10001099
    MOV PC,R0
    .long 0
/* ======================================================================== */
    .globl USIC0_0_Veneer
USIC0_0_Veneer:
    LDR R0, =USIC0_0_IRQHandler
200000f0:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_1_Veneer
USIC0_1_Veneer:
    LDR R0, =USIC0_1_IRQHandler
200000f4:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_2_Veneer
USIC0_2_Veneer:
    LDR R0, =USIC0_2_IRQHandler
200000f8:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_3_Veneer
USIC0_3_Veneer:
    LDR R0, =USIC0_3_IRQHandler
200000fc:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_4_Veneer
USIC0_4_Veneer:
    LDR R0, =USIC0_4_IRQHandler
20000100:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl USIC0_5_Veneer
USIC0_5_Veneer:
    LDR R0, =USIC0_5_IRQHandler
20000104:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_0_Veneer 
VADC0_C0_0_Veneer:
    LDR R0, =VADC0_C0_0_IRQHandler
20000108:	100025dd 	.word	0x100025dd
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_C0_1_Veneer
VADC0_C0_1_Veneer:
    LDR R0, =VADC0_C0_1_IRQHandler
2000010c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_0_Veneer
VADC0_G0_0_Veneer:
    LDR R0, =VADC0_G0_0_IRQHandler
20000110:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G0_1_Veneer
VADC0_G0_1_Veneer:
    LDR R0, =VADC0_G0_1_IRQHandler
20000114:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_0_Veneer
VADC0_G1_0_Veneer:
    LDR R0, =VADC0_G1_0_IRQHandler
20000118:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl VADC0_G1_1_Veneer
VADC0_G1_1_Veneer:
    LDR R0, =VADC0_G1_1_IRQHandler
2000011c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_0_Veneer
CCU40_0_Veneer:
    LDR R0, =CCU40_0_IRQHandler
20000120:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_1_Veneer
CCU40_1_Veneer:
    LDR R0, =CCU40_1_IRQHandler
20000124:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_2_Veneer
CCU40_2_Veneer:
    LDR R0, =CCU40_2_IRQHandler
20000128:	10002255 	.word	0x10002255
    MOV PC,R0
/* ======================================================================== */
    .globl CCU40_3_Veneer
CCU40_3_Veneer:
    LDR R0, =CCU40_3_IRQHandler
2000012c:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_0_Veneer
CCU80_0_Veneer:
    LDR R0, =CCU80_0_IRQHandler
20000130:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl CCU80_1_Veneer
CCU80_1_Veneer:
    LDR R0, =CCU80_1_IRQHandler
20000134:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_0_Veneer
POSIF0_0_Veneer:
    LDR R0, =POSIF0_0_IRQHandler
20000138:	10001099 	.word	0x10001099
    MOV PC,R0
/* ======================================================================== */
    .globl POSIF0_1_Veneer
POSIF0_1_Veneer:
    LDR R0, =POSIF0_1_IRQHandler
2000013c:	10001099 	.word	0x10001099
    .long 0
    .long 0
/* ======================================================================== */
    .globl BCCU0_0_Veneer
BCCU0_0_Veneer:
    LDR R0, =BCCU0_0_IRQHandler
20000140:	10001099 	.word	0x10001099
