   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,2
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "syscalls.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text._sbrk,"ax",%progbits
  18              	 .align 2
  19              	 .global _sbrk
  20              	 .code 16
  21              	 .thumb_func
  23              	_sbrk:
  24              	.LFB0:
  25              	 .file 1 "../Libraries/Newlib/syscalls.c"
   1:../Libraries/Newlib/syscalls.c **** /**************************************************************************************************
   2:../Libraries/Newlib/syscalls.c ****  * @file     syscalls.c
   3:../Libraries/Newlib/syscalls.c ****  * @brief    Newlib stubs
   4:../Libraries/Newlib/syscalls.c ****  * @version  V1.5
   5:../Libraries/Newlib/syscalls.c ****  * @date     09 Mar 2016
   6:../Libraries/Newlib/syscalls.c ****  *
   7:../Libraries/Newlib/syscalls.c ****  * @cond
   8:../Libraries/Newlib/syscalls.c ****  **************************************************************************************************
   9:../Libraries/Newlib/syscalls.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/Newlib/syscalls.c ****  * All rights reserved.
  11:../Libraries/Newlib/syscalls.c ****  *
  12:../Libraries/Newlib/syscalls.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/Newlib/syscalls.c ****  * following conditions are met:
  14:../Libraries/Newlib/syscalls.c ****  *
  15:../Libraries/Newlib/syscalls.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/Newlib/syscalls.c ****  * disclaimer.
  17:../Libraries/Newlib/syscalls.c ****  *
  18:../Libraries/Newlib/syscalls.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/Newlib/syscalls.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/Newlib/syscalls.c ****  *
  21:../Libraries/Newlib/syscalls.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/Newlib/syscalls.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/Newlib/syscalls.c ****  *
  24:../Libraries/Newlib/syscalls.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/Newlib/syscalls.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/Newlib/syscalls.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/Newlib/syscalls.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/Newlib/syscalls.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/Newlib/syscalls.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/Newlib/syscalls.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/Newlib/syscalls.c ****  *
  32:../Libraries/Newlib/syscalls.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/Newlib/syscalls.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/Newlib/syscalls.c ****  **************************************************************************************************
  35:../Libraries/Newlib/syscalls.c ****  *
  36:../Libraries/Newlib/syscalls.c ****  * *************************** Change history ********************************
  37:../Libraries/Newlib/syscalls.c ****  * V0.1                  : Initial version
  38:../Libraries/Newlib/syscalls.c ****  * V0.2                  : Label updates
  39:../Libraries/Newlib/syscalls.c ****  * V1.0                  : Made _sbrk device agnostic
  40:../Libraries/Newlib/syscalls.c ****  * V1.1                  : C++ support
  41:../Libraries/Newlib/syscalls.c ****  * V1.2                  : Restored compatibility with old project files
  42:../Libraries/Newlib/syscalls.c ****  * V1.3    Jan 2014, PKB : Encapsulating everything in this file for use only with GCC
  43:../Libraries/Newlib/syscalls.c ****  * V1.4 11 Dec 2015, JFT : Fix heap overflow
  44:../Libraries/Newlib/syscalls.c ****  * V1.5 09 Mar 2016, JFT : Add dso_handle to support destructors call at exit 
  45:../Libraries/Newlib/syscalls.c ****  * @endcond
  46:../Libraries/Newlib/syscalls.c ****  */
  47:../Libraries/Newlib/syscalls.c **** 
  48:../Libraries/Newlib/syscalls.c **** /*
  49:../Libraries/Newlib/syscalls.c ****  * This file contains stubs for standard C library functionality that must
  50:../Libraries/Newlib/syscalls.c ****  * typically be provided for the underlying platform.
  51:../Libraries/Newlib/syscalls.c ****  *
  52:../Libraries/Newlib/syscalls.c ****  */
  53:../Libraries/Newlib/syscalls.c **** #if defined ( __GNUC__ )
  54:../Libraries/Newlib/syscalls.c **** 
  55:../Libraries/Newlib/syscalls.c **** #include <stdint.h>
  56:../Libraries/Newlib/syscalls.c **** #include <errno.h>
  57:../Libraries/Newlib/syscalls.c **** #include <sys/types.h>
  58:../Libraries/Newlib/syscalls.c **** 
  59:../Libraries/Newlib/syscalls.c **** /* c++ destructor dynamic shared object needed if -fuse-cxa-atexit is used*/
  60:../Libraries/Newlib/syscalls.c **** void *__dso_handle __attribute__ ((weak));
  61:../Libraries/Newlib/syscalls.c **** 
  62:../Libraries/Newlib/syscalls.c **** // defined in linker script
  63:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_Start;
  64:../Libraries/Newlib/syscalls.c **** extern caddr_t Heap_Bank1_End;
  65:../Libraries/Newlib/syscalls.c **** caddr_t _sbrk(int nbytes)
  66:../Libraries/Newlib/syscalls.c **** {
  26              	 .loc 1 66 0
  27              	 .cfi_startproc
  28              	.LVL0:
  67:../Libraries/Newlib/syscalls.c ****   static caddr_t heap_ptr = NULL;
  68:../Libraries/Newlib/syscalls.c ****   caddr_t base;
  69:../Libraries/Newlib/syscalls.c **** 
  70:../Libraries/Newlib/syscalls.c ****   if (heap_ptr == NULL) {
  29              	 .loc 1 70 0
  30 0000 0C4A     	 ldr r2,.L7
  66:../Libraries/Newlib/syscalls.c ****   static caddr_t heap_ptr = NULL;
  31              	 .loc 1 66 0
  32 0002 08B5     	 push {r3,lr}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 8
  35              	 .cfi_offset 3,-8
  36              	 .cfi_offset 14,-4
  66:../Libraries/Newlib/syscalls.c ****   static caddr_t heap_ptr = NULL;
  37              	 .loc 1 66 0
  38 0004 031C     	 mov r3,r0
  39              	 .loc 1 70 0
  40 0006 1068     	 ldr r0,[r2]
  41              	.LVL1:
  42 0008 0028     	 cmp r0,#0
  43 000a 0FD0     	 beq .L6
  44              	.L2:
  45              	.LVL2:
  71:../Libraries/Newlib/syscalls.c ****     heap_ptr = (caddr_t)&Heap_Bank1_Start;
  72:../Libraries/Newlib/syscalls.c ****   }
  73:../Libraries/Newlib/syscalls.c **** 
  74:../Libraries/Newlib/syscalls.c ****   base = heap_ptr;
  75:../Libraries/Newlib/syscalls.c **** 
  76:../Libraries/Newlib/syscalls.c ****   /* heap word alignment */
  77:../Libraries/Newlib/syscalls.c ****   nbytes = (nbytes + 3) & ~0x3U;
  46              	 .loc 1 77 0
  47 000c 0321     	 mov r1,#3
  48 000e 0333     	 add r3,r3,#3
  49              	.LVL3:
  50 0010 8B43     	 bic r3,r1
  51              	.LVL4:
  78:../Libraries/Newlib/syscalls.c ****   if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
  52              	 .loc 1 78 0
  53 0012 0949     	 ldr r1,.L7+4
  54 0014 C318     	 add r3,r0,r3
  55 0016 8B42     	 cmp r3,r1
  56 0018 01D2     	 bcs .L3
  79:../Libraries/Newlib/syscalls.c ****   {
  80:../Libraries/Newlib/syscalls.c ****     heap_ptr += nbytes;
  57              	 .loc 1 80 0
  58 001a 1360     	 str r3,[r2]
  59              	.LVL5:
  60              	.L4:
  81:../Libraries/Newlib/syscalls.c ****     return (base);
  82:../Libraries/Newlib/syscalls.c ****   }
  83:../Libraries/Newlib/syscalls.c ****   else
  84:../Libraries/Newlib/syscalls.c ****   {
  85:../Libraries/Newlib/syscalls.c ****     /* Heap overflow */
  86:../Libraries/Newlib/syscalls.c ****     errno = ENOMEM;
  87:../Libraries/Newlib/syscalls.c ****     return ((caddr_t)-1);
  88:../Libraries/Newlib/syscalls.c ****   }
  89:../Libraries/Newlib/syscalls.c **** }
  61              	 .loc 1 89 0
  62              	 
  63 001c 08BD     	 pop {r3,pc}
  64              	.LVL6:
  65              	.L3:
  86:../Libraries/Newlib/syscalls.c ****     return ((caddr_t)-1);
  66              	 .loc 1 86 0
  67 001e FFF7FEFF 	 bl __errno
  68              	.LVL7:
  69 0022 0C23     	 mov r3,#12
  70 0024 0360     	 str r3,[r0]
  87:../Libraries/Newlib/syscalls.c ****   }
  71              	 .loc 1 87 0
  72 0026 0120     	 mov r0,#1
  73 0028 4042     	 neg r0,r0
  74 002a F7E7     	 b .L4
  75              	.LVL8:
  76              	.L6:
  71:../Libraries/Newlib/syscalls.c ****   }
  77              	 .loc 1 71 0
  78 002c 0348     	 ldr r0,.L7+8
  79 002e 1060     	 str r0,[r2]
  80 0030 ECE7     	 b .L2
  81              	.L8:
  82 0032 C046     	 .align 2
  83              	.L7:
  84 0034 00000000 	 .word .LANCHOR0
  85 0038 00000000 	 .word Heap_Bank1_End
  86 003c 00000000 	 .word Heap_Bank1_Start
  87              	 .cfi_endproc
  88              	.LFE0:
  90              	 .section .text._init,"ax",%progbits
  91              	 .align 2
  92              	 .global _init
  93              	 .code 16
  94              	 .thumb_func
  96              	_init:
  97              	.LFB1:
  90:../Libraries/Newlib/syscalls.c **** 
  91:../Libraries/Newlib/syscalls.c **** /* Init */
  92:../Libraries/Newlib/syscalls.c **** void _init(void)
  93:../Libraries/Newlib/syscalls.c **** {}
  98              	 .loc 1 93 0
  99              	 .cfi_startproc
 100              	 .loc 1 93 0
 101              	 
 102 0000 7047     	 bx lr
 103              	 .cfi_endproc
 104              	.LFE1:
 106              	 .weak __dso_handle
 107 0002 C046     	 .section .bss.__dso_handle,"aw",%nobits
 108              	 .align 2
 111              	__dso_handle:
 112 0000 00000000 	 .space 4
 113              	 .section .bss.heap_ptr.4327,"aw",%nobits
 114              	 .align 2
 115              	 .set .LANCHOR0,.+0
 118              	heap_ptr.4327:
 119 0000 00000000 	 .space 4
 120              	 .text
 121              	.Letext0:
 122              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\sys\\types.h"
 123              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\sys\\errno.h"
DEFINED SYMBOLS
                            *ABS*:00000000 syscalls.c
    {standard input}:18     .text._sbrk:00000000 $t
    {standard input}:23     .text._sbrk:00000000 _sbrk
    {standard input}:84     .text._sbrk:00000034 $d
    {standard input}:91     .text._init:00000000 $t
    {standard input}:96     .text._init:00000000 _init
    {standard input}:111    .bss.__dso_handle:00000000 __dso_handle
    {standard input}:108    .bss.__dso_handle:00000000 $d
    {standard input}:114    .bss.heap_ptr.4327:00000000 $d
    {standard input}:118    .bss.heap_ptr.4327:00000000 heap_ptr.4327
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__errno
Heap_Bank1_End
Heap_Bank1_Start
