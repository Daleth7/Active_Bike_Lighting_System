   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,2
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc1_scu.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_SCU_CalcTSEVAR,"ax",%progbits
  18              	 .align 2
  19              	 .code 16
  20              	 .thumb_func
  22              	XMC_SCU_CalcTSEVAR:
  23              	.LFB50:
  24              	 .file 1 "../Libraries/XMCLib/src/xmc1_scu.c"
   1:../Libraries/XMCLib/src/xmc1_scu.c **** /**
   2:../Libraries/XMCLib/src/xmc1_scu.c ****  * @file xmc1_scu.c
   3:../Libraries/XMCLib/src/xmc1_scu.c ****  * @date 2016-04-15
   4:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   5:../Libraries/XMCLib/src/xmc1_scu.c ****  * @cond
   6:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
   7:../Libraries/XMCLib/src/xmc1_scu.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   8:../Libraries/XMCLib/src/xmc1_scu.c ****  *
   9:../Libraries/XMCLib/src/xmc1_scu.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Libraries/XMCLib/src/xmc1_scu.c ****  * All rights reserved.
  11:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  12:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Libraries/XMCLib/src/xmc1_scu.c ****  * following conditions are met:
  14:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  15:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer.
  17:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  18:../Libraries/XMCLib/src/xmc1_scu.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Libraries/XMCLib/src/xmc1_scu.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.
  20:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  21:../Libraries/XMCLib/src/xmc1_scu.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Libraries/XMCLib/src/xmc1_scu.c ****  * products derived from this software without specific prior written permission.
  23:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  24:../Libraries/XMCLib/src/xmc1_scu.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Libraries/XMCLib/src/xmc1_scu.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Libraries/XMCLib/src/xmc1_scu.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Libraries/XMCLib/src/xmc1_scu.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Libraries/XMCLib/src/xmc1_scu.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Libraries/XMCLib/src/xmc1_scu.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Libraries/XMCLib/src/xmc1_scu.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  31:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  32:../Libraries/XMCLib/src/xmc1_scu.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Libraries/XMCLib/src/xmc1_scu.c ****  * Infineon Technologies AG dave@infineon.com).
  34:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  35:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  36:../Libraries/XMCLib/src/xmc1_scu.c ****  * Change History
  37:../Libraries/XMCLib/src/xmc1_scu.c ****  * --------------
  38:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  39:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-02-20:
  40:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Initial <br>
  41:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  42:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-05-20:
  43:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_StartTempMeasurement API is modified
  44:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_ASSERT statements are added in XMC_SCU_INTERRUPT_SetEventHandler
  45:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  46:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-06-20:
  47:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_EnableEvent,XMC_SCU_INTERRUPT_DisableEvent,
  48:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_TriggerEvent,XMC_SCU_INTERUPT_GetEventStatus,
  49:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC_SCU_INTERRUPT_ClearEventStatus APIs are added
  50:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  51:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-09-23:
  52:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - XMC1400 support added
  53:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  54:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2015-11-30:
  55:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Documentation improved
  56:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  57:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-02-29:
  58:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_ScaleMCLKFrequency
  59:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues with down clock frequency scaling
  60:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  61:../Libraries/XMCLib/src/xmc1_scu.c ****  * 2016-04-15:
  62:../Libraries/XMCLib/src/xmc1_scu.c ****  *     - Fixed XMC_SCU_CLOCK_Init for XMC1400
  63:../Libraries/XMCLib/src/xmc1_scu.c ****  *       It solves issues when trying to disable the OSCHP and use the XTAL pins as GPIO
  64:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  65:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  66:../Libraries/XMCLib/src/xmc1_scu.c ****  * @endcond
  67:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  68:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  69:../Libraries/XMCLib/src/xmc1_scu.c **** 
  70:../Libraries/XMCLib/src/xmc1_scu.c **** /**
  71:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  72:../Libraries/XMCLib/src/xmc1_scu.c ****  * @brief SCU low level driver API prototype definition for XMC1 family of microcontrollers <br>
  73:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  74:../Libraries/XMCLib/src/xmc1_scu.c ****  * <b>Detailed description of file</b> <br>
  75:../Libraries/XMCLib/src/xmc1_scu.c ****  * APIs provided in this file cover the following functional blocks of SCU: <br>
  76:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- GCU (APIs prefixed with XMC_SCU_GEN_) <br>
  77:../Libraries/XMCLib/src/xmc1_scu.c ****  * ----Temperature Monitoring, Voltage Monitoring, CCU Start etc
  78:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  79:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- CCU (APIs prefixed with XMC_SCU_CLOCK_)<br>
  80:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Clock initialization, Clock Gating, Sleep Management etc
  81:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  82:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- RCU (APIs prefixed with XMC_SCU_RESET_) <br>
  83:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Reset Init, Cause, Manual Reset Assert/Deassert etc
  84:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  85:../Libraries/XMCLib/src/xmc1_scu.c ****  * -- INTERRUPT (APIs prefixed with XMC_SCU_INTERRUPT_)<br>
  86:../Libraries/XMCLib/src/xmc1_scu.c ****  * ---- Initialization, Manual Assert/Deassert, Acknowledge etc
  87:../Libraries/XMCLib/src/xmc1_scu.c ****  *
  88:../Libraries/XMCLib/src/xmc1_scu.c ****  */
  89:../Libraries/XMCLib/src/xmc1_scu.c **** 
  90:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
  91:../Libraries/XMCLib/src/xmc1_scu.c ****  * HEADER FILES
  92:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
  93:../Libraries/XMCLib/src/xmc1_scu.c **** #include <xmc_scu.h>
  94:../Libraries/XMCLib/src/xmc1_scu.c **** 
  95:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_FAMILY == XMC1
  96:../Libraries/XMCLib/src/xmc1_scu.c **** 
  97:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
  98:../Libraries/XMCLib/src/xmc1_scu.c ****  * MACROS
  99:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 100:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_IRQ_NUM             (3U)  /**< array index value for list of events that can generate S
 101:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_ENABLE  (195UL) /**< Password for enabling protection */
 102:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GCU_PASSWD_PROT_DISABLE (192UL) /**< Password for disabling protection */
 103:../Libraries/XMCLib/src/xmc1_scu.c **** 
 104:../Libraries/XMCLib/src/xmc1_scu.c **** 
 105:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_CHECK_RTCCLKSRC(source)       ( (source == XMC_SCU_CLOCK_RTCCLKSRC_DCO2) || \
 106:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ERU_IOUT0) || \
 107:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP0_OUT) || \
 108:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP1_OUT) || \
 109:../Libraries/XMCLib/src/xmc1_scu.c ****                                                 (source == XMC_SCU_CLOCK_RTCCLKSRC_ACMP2_OUT) ) /**
 110:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 whe
 111:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 clo
 112:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                                 or 
 113:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Msk SCU_GENERAL_INTCR0_INTSEL0_Msk /**< Mask value of Interrupt So
 114:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 0 */
 115:../Libraries/XMCLib/src/xmc1_scu.c **** #define SCU_GENERAL_INTCR_INTSEL_Size SCU_GENERAL_INTCR0_INTSEL1_Pos /**< Bit position value of Int
 116:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          for Node 1 */
 117:../Libraries/XMCLib/src/xmc1_scu.c **** 
 118:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T1   (0x10000F30U) /**< d is a constant data can be retrieved from Flash sector 0 t
 119:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 120:../Libraries/XMCLib/src/xmc1_scu.c **** #define ANA_TSE_T2   (0x10000F31U) /**< e is a constant data can be retrieved from Flash sector 0 t
 121:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 122:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T1 (0x10000F32U) /**< b is a constant data can be retrieved from Flash sector 0 t
 123:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 124:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO_ADJLO_T2 (0x10000F33U) /**< a is a constant data can be retrieved from Flash sector 0 t
 125:../Libraries/XMCLib/src/xmc1_scu.c ****                                          value for DCO calibration */
 126:../Libraries/XMCLib/src/xmc1_scu.c **** 
 127:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 128:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (64U) /**< Maximum supported SCU events for XMC14 device. */
 129:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 130:../Libraries/XMCLib/src/xmc1_scu.c **** #define XMC_SCU_INTERRUPT_EVENT_MAX (32U)  /**< Maximum supported SCU events for XMC11/12/13 device
 131:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 132:../Libraries/XMCLib/src/xmc1_scu.c **** 
 133:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 134:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q22_10 (48000U << 10) /**< used to configures main clock (MCLK) fre
 135:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC14 d
 136:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 137:../Libraries/XMCLib/src/xmc1_scu.c **** #define DCO1_DIV2_FREQUENCY_KHZ_Q24_8 (32000U << 8) /**< used to configures main clock (MCLK) frequ
 138:../Libraries/XMCLib/src/xmc1_scu.c ****                                                          frequency value during runtime for XMC11/1
 139:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 140:../Libraries/XMCLib/src/xmc1_scu.c **** 
 141:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_BmiInstallationReq \
 142:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t requestedBmiValue))0x00000108U)) /**< Pointer to Request BMI ins
 143:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                          available inside ROM. */
 144:../Libraries/XMCLib/src/xmc1_scu.c **** 
 145:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTemperature \
 146:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(void))0x0000010cU)) /**<  Pointer to Calculate chip temperature routine i
 147:../Libraries/XMCLib/src/xmc1_scu.c ****                                                     available inside ROM. */
 148:../Libraries/XMCLib/src/xmc1_scu.c **** 
 149:../Libraries/XMCLib/src/xmc1_scu.c **** #define ROM_CalcTSEVAR \
 150:../Libraries/XMCLib/src/xmc1_scu.c ****         (*((uint32_t (**)(uint32_t temperature))0x00000120U)) /**<  Pointer to Calculate target lev
 151:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                     comparison routine is available
 152:../Libraries/XMCLib/src/xmc1_scu.c ****         
 153:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 154:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL DATA
 155:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 156:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler_list[XMC_SCU_INTERRUPT_EVENT_MAX]; /**< For 
 157:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         functions o
 158:../Libraries/XMCLib/src/xmc1_scu.c ****                                                                                         occurrence.
 159:../Libraries/XMCLib/src/xmc1_scu.c **** 
 160:../Libraries/XMCLib/src/xmc1_scu.c **** static XMC_SCU_INTERRUPT_EVENT_t event_masks[SCU_IRQ_NUM] =
 161:../Libraries/XMCLib/src/xmc1_scu.c **** {
 162:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR |
 163:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED |
 164:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PESRAM |
 165:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC0 |
 166:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 167:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEUSIC1 |
 168:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 169:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 170:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_PEMCAN |
 171:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 172:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 173:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK |
 174:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 175:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_LOCI),
 176:../Libraries/XMCLib/src/xmc1_scu.c **** 
 177:../Libraries/XMCLib/src/xmc1_scu.c ****   (XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL |
 178:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 179:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC |
 180:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 181:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDDPI |
 182:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VDROP |
 183:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_VCLIP |
 184:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_DONE |
 185:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_HIGH |
 186:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_TSE_LOW |
 187:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_WDT_WARN |
 188:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC |
 189:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTC_ALARM |
 190:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED |
 191:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED |
 192:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED |
 193:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED |
 194:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED),
 195:../Libraries/XMCLib/src/xmc1_scu.c **** 
 196:../Libraries/XMCLib/src/xmc1_scu.c ****   (
 197:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 198:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC0 |
 199:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC1 |
 200:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC2 |
 201:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC3 |
 202:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC4 |
 203:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC5 |
 204:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC6 |
 205:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ORC7 |
 206:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 207:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 208:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP0 |
 209:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP1 |
 210:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP2 |
 211:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 212:../Libraries/XMCLib/src/xmc1_scu.c ****    XMC_SCU_INTERRUPT_EVENT_ACMP3 |
 213:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 214:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 215:../Libraries/XMCLib/src/xmc1_scu.c ****    0)
 216:../Libraries/XMCLib/src/xmc1_scu.c **** }; /**<   Defines list of events that can generate SCU interrupt and also indicates SCU events mapp
 217:../Libraries/XMCLib/src/xmc1_scu.c ****          service request number. These event mask values can be used to verify which event is trigg
 218:../Libraries/XMCLib/src/xmc1_scu.c ****          to service request number during runtime. All the event items are tabulated as per service
 219:../Libraries/XMCLib/src/xmc1_scu.c ****          table of SCU. */
 220:../Libraries/XMCLib/src/xmc1_scu.c **** 
 221:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 222:../Libraries/XMCLib/src/xmc1_scu.c ****  * LOCAL ROUTINES
 223:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 224:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 225:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t idiv);
 226:../Libraries/XMCLib/src/xmc1_scu.c **** 
 227:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 228:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t idiv);
 229:../Libraries/XMCLib/src/xmc1_scu.c **** 
 230:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the value which must be installed in ANATSEIx register to get indication in
 231:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_INTERRUPT->SRRAW  bit when the chip temperature is above/below some target/threshold. */
 232:../Libraries/XMCLib/src/xmc1_scu.c **** static uint32_t XMC_SCU_CalcTSEVAR(uint32_t temperature)
 233:../Libraries/XMCLib/src/xmc1_scu.c **** {
  25              	 .loc 1 233 0
  26              	 .cfi_startproc
  27              	.LVL0:
  28 0000 38B5     	 push {r3,r4,r5,lr}
  29              	.LCFI0:
  30              	 .cfi_def_cfa_offset 16
  31              	 .cfi_offset 3,-16
  32              	 .cfi_offset 4,-12
  33              	 .cfi_offset 5,-8
  34              	 .cfi_offset 14,-4
 234:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
 235:../Libraries/XMCLib/src/xmc1_scu.c **** 
 236:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CalcTSEVAR: temperature out of range", (temperature >= 233U) && (temperature 
 237:../Libraries/XMCLib/src/xmc1_scu.c **** 
 238:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = ROM_CalcTSEVAR(temperature);
  35              	 .loc 1 238 0
  36 0002 9025     	 mov r5,#144
  37 0004 6D00     	 lsl r5,r5,#1
  38 0006 2B68     	 ldr r3,[r5]
 233:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t limit;
  39              	 .loc 1 233 0
  40 0008 041C     	 mov r4,r0
  41              	 .loc 1 238 0
  42 000a 9847     	 blx r3
  43              	.LVL1:
 239:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit == 0U)
  44              	 .loc 1 239 0
  45 000c 0028     	 cmp r0,#0
  46 000e 00D0     	 beq .L4
  47              	.LVL2:
  48              	.L2:
 240:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 241:../Libraries/XMCLib/src/xmc1_scu.c ****     limit = ROM_CalcTSEVAR(temperature + 1U);
 242:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
 243:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 244:../Libraries/XMCLib/src/xmc1_scu.c ****       limit = ROM_CalcTSEVAR(temperature - 1U);
 245:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 246:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 247:../Libraries/XMCLib/src/xmc1_scu.c ****   
 248:../Libraries/XMCLib/src/xmc1_scu.c ****   return (limit);
 249:../Libraries/XMCLib/src/xmc1_scu.c **** }
  49              	 .loc 1 249 0
  50              	 
  51              	.LVL3:
  52 0010 38BD     	 pop {r3,r4,r5,pc}
  53              	.LVL4:
  54              	.L4:
 241:../Libraries/XMCLib/src/xmc1_scu.c ****     if (limit == 0U)
  55              	 .loc 1 241 0
  56 0012 601C     	 add r0,r4,#1
  57              	.LVL5:
  58 0014 2B68     	 ldr r3,[r5]
  59 0016 9847     	 blx r3
  60              	.LVL6:
 242:../Libraries/XMCLib/src/xmc1_scu.c ****     {
  61              	 .loc 1 242 0
  62 0018 0028     	 cmp r0,#0
  63 001a F9D1     	 bne .L2
  64              	.LVL7:
  65              	.LBB38:
  66              	.LBB39:
 244:../Libraries/XMCLib/src/xmc1_scu.c ****     }
  67              	 .loc 1 244 0
  68 001c 601E     	 sub r0,r4,#1
  69              	.LVL8:
  70 001e 2B68     	 ldr r3,[r5]
  71 0020 9847     	 blx r3
  72              	.LVL9:
  73 0022 F5E7     	 b .L2
  74              	.LBE39:
  75              	.LBE38:
  76              	 .cfi_endproc
  77              	.LFE50:
  79              	 .section .text.XMC_SCU_INTERRUPT_EnableEvent,"ax",%progbits
  80              	 .align 2
  81              	 .global XMC_SCU_INTERRUPT_EnableEvent
  82              	 .code 16
  83              	 .thumb_func
  85              	XMC_SCU_INTERRUPT_EnableEvent:
  86              	.LFB51:
 250:../Libraries/XMCLib/src/xmc1_scu.c **** 
 251:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 252:../Libraries/XMCLib/src/xmc1_scu.c **** /* This is a local function used to generate the delay until register get updated with new configur
 253:../Libraries/XMCLib/src/xmc1_scu.c **** static void delay(uint32_t cycles)
 254:../Libraries/XMCLib/src/xmc1_scu.c **** {
 255:../Libraries/XMCLib/src/xmc1_scu.c ****   while(cycles > 0U)
 256:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 257:../Libraries/XMCLib/src/xmc1_scu.c ****     __NOP();
 258:../Libraries/XMCLib/src/xmc1_scu.c ****     cycles--;
 259:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 260:../Libraries/XMCLib/src/xmc1_scu.c **** }
 261:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 262:../Libraries/XMCLib/src/xmc1_scu.c **** 
 263:../Libraries/XMCLib/src/xmc1_scu.c **** /**************************************************************************************************
 264:../Libraries/XMCLib/src/xmc1_scu.c ****  * API IMPLEMENTATION
 265:../Libraries/XMCLib/src/xmc1_scu.c ****  **************************************************************************************************
 266:../Libraries/XMCLib/src/xmc1_scu.c ****  #ifdef XMC_ASSERT_ENABLE
 267:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to verify SCU event weather it is valid event or not */
 268:../Libraries/XMCLib/src/xmc1_scu.c **** __STATIC_INLINE bool XMC_SCU_INTERRUPT_IsValidEvent(XMC_SCU_INTERRUPT_EVENT_t event)
 269:../Libraries/XMCLib/src/xmc1_scu.c **** {
 270:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((event == XMC_SCU_INTERRUPT_EVENT_WDT_WARN) ||
 271:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC) ||
 272:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTC_ALARM) ||
 273:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDDPI) ||
 274:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(USIC1)
 275:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC1) ||
 276:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 277:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(CAN)
 278:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEMCAN) ||
 279:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 280:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 281:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK) ||
 282:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC) ||
 283:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 284:../Libraries/XMCLib/src/xmc1_scu.c **** #if defined(COMPARATOR)
 285:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP0) ||
 286:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP1) ||
 287:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP2) ||
 288:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 289:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ACMP3) ||
 290:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 291:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 292:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VDROP) ||
 293:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES != XMC11
 294:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC0) ||
 295:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC1) ||
 296:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC2) ||
 297:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC3) ||
 298:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC4) ||
 299:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC5) ||
 300:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC6) ||
 301:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_ORC7) ||
 302:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 303:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_LOCI) ||
 304:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PESRAM) ||
 305:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_PEUSIC0) ||
 306:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR) ||
 307:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED) ||
 308:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_VCLIP) ||
 309:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL) ||
 310:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED) ||
 311:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED) ||
 312:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED) ||
 313:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED) ||
 314:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED) ||
 315:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_DONE) ||
 316:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_HIGH) ||
 317:../Libraries/XMCLib/src/xmc1_scu.c ****           (event == XMC_SCU_INTERRUPT_EVENT_TSE_LOW));
 318:../Libraries/XMCLib/src/xmc1_scu.c **** }
 319:../Libraries/XMCLib/src/xmc1_scu.c ****  #endif
 320:../Libraries/XMCLib/src/xmc1_scu.c **** 
 321:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to enable the SCU event */
 322:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 323:../Libraries/XMCLib/src/xmc1_scu.c **** {
  87              	 .loc 1 323 0
  88              	 .cfi_startproc
  89              	.LVL10:
 324:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  90              	 .loc 1 324 0
  91 0000 024A     	 ldr r2,.L6
 325:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 326:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 |= (uint32_t)(event >> 32U);
 327:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 328:../Libraries/XMCLib/src/xmc1_scu.c **** }
  92              	 .loc 1 328 0
  93              	 
 324:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)event;
  94              	 .loc 1 324 0
  95 0002 5368     	 ldr r3,[r2,#4]
  96 0004 1843     	 orr r0,r3
  97              	.LVL11:
  98 0006 5060     	 str r0,[r2,#4]
  99              	 .loc 1 328 0
 100 0008 7047     	 bx lr
 101              	.L7:
 102 000a C046     	 .align 2
 103              	.L6:
 104 000c 38000140 	 .word 1073807416
 105              	 .cfi_endproc
 106              	.LFE51:
 108              	 .section .text.XMC_SCU_INTERRUPT_DisableEvent,"ax",%progbits
 109              	 .align 2
 110              	 .global XMC_SCU_INTERRUPT_DisableEvent
 111              	 .code 16
 112              	 .thumb_func
 114              	XMC_SCU_INTERRUPT_DisableEvent:
 115              	.LFB52:
 329:../Libraries/XMCLib/src/xmc1_scu.c **** 
 330:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to disable the SCU event */
 331:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_DisableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 332:../Libraries/XMCLib/src/xmc1_scu.c **** {
 116              	 .loc 1 332 0
 117              	 .cfi_startproc
 118              	.LVL12:
 333:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 119              	 .loc 1 333 0
 120 0000 024A     	 ldr r2,.L9
 334:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 335:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK1 &= (uint32_t)~(event >> 32U);
 336:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 337:../Libraries/XMCLib/src/xmc1_scu.c **** }
 121              	 .loc 1 337 0
 122              	 
 333:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK &= ~(uint32_t)event;
 123              	 .loc 1 333 0
 124 0002 5368     	 ldr r3,[r2,#4]
 125 0004 8343     	 bic r3,r0
 126 0006 5360     	 str r3,[r2,#4]
 127              	 .loc 1 337 0
 128 0008 7047     	 bx lr
 129              	.L10:
 130 000a C046     	 .align 2
 131              	.L9:
 132 000c 38000140 	 .word 1073807416
 133              	 .cfi_endproc
 134              	.LFE52:
 136              	 .section .text.XMC_SCU_INTERRUPT_TriggerEvent,"ax",%progbits
 137              	 .align 2
 138              	 .global XMC_SCU_INTERRUPT_TriggerEvent
 139              	 .code 16
 140              	 .thumb_func
 142              	XMC_SCU_INTERRUPT_TriggerEvent:
 143              	.LFB53:
 338:../Libraries/XMCLib/src/xmc1_scu.c **** 
 339:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to trigger the SCU event */
 340:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_TriggerEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
 341:../Libraries/XMCLib/src/xmc1_scu.c **** {
 144              	 .loc 1 341 0
 145              	 .cfi_startproc
 146              	.LVL13:
 342:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 147              	 .loc 1 342 0
 148 0000 024A     	 ldr r2,.L12
 343:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 344:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET1 |= (uint32_t)(event >> 32U);
 345:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 346:../Libraries/XMCLib/src/xmc1_scu.c **** }
 149              	 .loc 1 346 0
 150              	 
 342:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRSET |= (uint32_t)event;
 151              	 .loc 1 342 0
 152 0002 D368     	 ldr r3,[r2,#12]
 153 0004 1843     	 orr r0,r3
 154              	.LVL14:
 155 0006 D060     	 str r0,[r2,#12]
 156              	 .loc 1 346 0
 157 0008 7047     	 bx lr
 158              	.L13:
 159 000a C046     	 .align 2
 160              	.L12:
 161 000c 38000140 	 .word 1073807416
 162              	 .cfi_endproc
 163              	.LFE53:
 165              	 .section .text.XMC_SCU_INTERUPT_GetEventStatus,"ax",%progbits
 166              	 .align 2
 167              	 .global XMC_SCU_INTERUPT_GetEventStatus
 168              	 .code 16
 169              	 .thumb_func
 171              	XMC_SCU_INTERUPT_GetEventStatus:
 172              	.LFB54:
 347:../Libraries/XMCLib/src/xmc1_scu.c **** 
 348:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to get the SCU event status */
 349:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
 350:../Libraries/XMCLib/src/xmc1_scu.c **** {
 173              	 .loc 1 350 0
 174              	 .cfi_startproc
 351:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t tmp;
 352:../Libraries/XMCLib/src/xmc1_scu.c **** 
 353:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp = SCU_INTERRUPT->SRRAW;
 175              	 .loc 1 353 0
 176 0000 014B     	 ldr r3,.L15
 354:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 355:../Libraries/XMCLib/src/xmc1_scu.c ****   tmp |= ((int64_t)SCU_INTERRUPT->SRRAW1 << 32U);
 356:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 357:../Libraries/XMCLib/src/xmc1_scu.c ****   return (tmp);
 358:../Libraries/XMCLib/src/xmc1_scu.c **** }
 177              	 .loc 1 358 0
 178              	 
 353:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 179              	 .loc 1 353 0
 180 0002 1868     	 ldr r0,[r3]
 181              	.LVL15:
 182              	 .loc 1 358 0
 183 0004 7047     	 bx lr
 184              	.L16:
 185 0006 C046     	 .align 2
 186              	.L15:
 187 0008 38000140 	 .word 1073807416
 188              	 .cfi_endproc
 189              	.LFE54:
 191              	 .section .text.XMC_SCU_INTERRUPT_ClearEventStatus,"ax",%progbits
 192              	 .align 2
 193              	 .global XMC_SCU_INTERRUPT_ClearEventStatus
 194              	 .code 16
 195              	 .thumb_func
 197              	XMC_SCU_INTERRUPT_ClearEventStatus:
 198              	.LFB55:
 359:../Libraries/XMCLib/src/xmc1_scu.c **** 
 360:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to clear the SCU event status */
 361:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
 362:../Libraries/XMCLib/src/xmc1_scu.c **** {
 199              	 .loc 1 362 0
 200              	 .cfi_startproc
 201              	.LVL16:
 363:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 202              	 .loc 1 363 0
 203 0000 024A     	 ldr r2,.L18
 364:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 365:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR1 |= (uint32_t)(event >> 32U);
 366:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 367:../Libraries/XMCLib/src/xmc1_scu.c **** }
 204              	 .loc 1 367 0
 205              	 
 363:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)event;
 206              	 .loc 1 363 0
 207 0002 9368     	 ldr r3,[r2,#8]
 208 0004 1843     	 orr r0,r3
 209              	.LVL17:
 210 0006 9060     	 str r0,[r2,#8]
 211              	 .loc 1 367 0
 212 0008 7047     	 bx lr
 213              	.L19:
 214 000a C046     	 .align 2
 215              	.L18:
 216 000c 38000140 	 .word 1073807416
 217              	 .cfi_endproc
 218              	.LFE55:
 220              	 .section .text.XMC_SCU_LockProtectedBits,"ax",%progbits
 221              	 .align 2
 222              	 .global XMC_SCU_LockProtectedBits
 223              	 .code 16
 224              	 .thumb_func
 226              	XMC_SCU_LockProtectedBits:
 227              	.LFB56:
 368:../Libraries/XMCLib/src/xmc1_scu.c **** 
 369:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to lock protected bitfields from being modified */
 370:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_LockProtectedBits(void)
 371:../Libraries/XMCLib/src/xmc1_scu.c **** {
 228              	 .loc 1 371 0
 229              	 .cfi_startproc
 372:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 230              	 .loc 1 372 0
 231 0000 C322     	 mov r2,#195
 232 0002 014B     	 ldr r3,.L21
 373:../Libraries/XMCLib/src/xmc1_scu.c **** }
 233              	 .loc 1 373 0
 234              	 
 372:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_ENABLE;
 235              	 .loc 1 372 0
 236 0004 5A62     	 str r2,[r3,#36]
 237              	 .loc 1 373 0
 238 0006 7047     	 bx lr
 239              	.L22:
 240              	 .align 2
 241              	.L21:
 242 0008 00000140 	 .word 1073807360
 243              	 .cfi_endproc
 244              	.LFE56:
 246              	 .section .text.XMC_SCU_UnlockProtectedBits,"ax",%progbits
 247              	 .align 2
 248              	 .global XMC_SCU_UnlockProtectedBits
 249              	 .code 16
 250              	 .thumb_func
 252              	XMC_SCU_UnlockProtectedBits:
 253              	.LFB57:
 374:../Libraries/XMCLib/src/xmc1_scu.c **** 
 375:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to make protected bitfields available for modification */
 376:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_UnlockProtectedBits(void)
 377:../Libraries/XMCLib/src/xmc1_scu.c **** {
 254              	 .loc 1 377 0
 255              	 .cfi_startproc
 378:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 256              	 .loc 1 378 0
 257 0000 C023     	 mov r3,#192
 379:../Libraries/XMCLib/src/xmc1_scu.c **** 
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   while(((SCU_GENERAL->PASSWD) & SCU_GENERAL_PASSWD_PROTS_Msk))
 258              	 .loc 1 380 0
 259 0002 0421     	 mov r1,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_GENERAL->PASSWD = SCU_GCU_PASSWD_PROT_DISABLE;
 260              	 .loc 1 378 0
 261 0004 024A     	 ldr r2,.L26
 262 0006 5362     	 str r3,[r2,#36]
 263              	.L24:
 264              	 .loc 1 380 0 discriminator 1
 265 0008 536A     	 ldr r3,[r2,#36]
 266 000a 1942     	 tst r1,r3
 267 000c FCD1     	 bne .L24
 381:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 382:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Loop until the lock is removed */
 383:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 384:../Libraries/XMCLib/src/xmc1_scu.c **** }
 268              	 .loc 1 384 0
 269              	 
 270 000e 7047     	 bx lr
 271              	.L27:
 272              	 .align 2
 273              	.L26:
 274 0010 00000140 	 .word 1073807360
 275              	 .cfi_endproc
 276              	.LFE57:
 278              	 .section .text.XMC_SCU_SupplyMonitorInit,"ax",%progbits
 279              	 .align 2
 280              	 .global XMC_SCU_SupplyMonitorInit
 281              	 .code 16
 282              	 .thumb_func
 284              	XMC_SCU_SupplyMonitorInit:
 285              	.LFB58:
 385:../Libraries/XMCLib/src/xmc1_scu.c **** 
 386:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to initialize power supply monitoring unit */
 387:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SupplyMonitorInit(const XMC_SCU_SUPPLYMONITOR_t *obj)
 388:../Libraries/XMCLib/src/xmc1_scu.c **** {
 286              	 .loc 1 388 0
 287              	 .cfi_startproc
 288              	.LVL18:
 389:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t anavdel;
 390:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t irqmask;
 391:../Libraries/XMCLib/src/xmc1_scu.c **** 
 392:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel = 0UL;
 393:../Libraries/XMCLib/src/xmc1_scu.c **** 
 394:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj-> ext_supply_threshold) << SCU_ANALOG_ANAVDEL_VDEL_SELECT_Pos);
 395:../Libraries/XMCLib/src/xmc1_scu.c ****   anavdel |= (uint32_t)((obj->ext_supply_monitor_speed) << SCU_ANALOG_ANAVDEL_VDEL_TIM_ADJ_Pos);
 289              	 .loc 1 395 0
 290 0000 4368     	 ldr r3,[r0,#4]
 291 0002 0268     	 ldr r2,[r0]
 292 0004 9B00     	 lsl r3,r3,#2
 293 0006 1343     	 orr r3,r2
 294              	.LVL19:
 396:../Libraries/XMCLib/src/xmc1_scu.c **** 
 397:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_at_init))
 295              	 .loc 1 397 0
 296 0008 C27A     	 ldrb r2,[r0,#11]
 297 000a 002A     	 cmp r2,#0
 298 000c 01D0     	 beq .L29
 398:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 399:../Libraries/XMCLib/src/xmc1_scu.c ****     anavdel |= (uint32_t)SCU_ANALOG_ANAVDEL_VDEL_EN_Msk;
 299              	 .loc 1 399 0
 300 000e 1022     	 mov r2,#16
 301 0010 1343     	 orr r3,r2
 302              	.LVL20:
 303              	.L29:
 400:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 401:../Libraries/XMCLib/src/xmc1_scu.c ****    SCU_ANALOG->ANAVDEL = (uint16_t) anavdel;
 304              	 .loc 1 401 0
 305 0012 5022     	 mov r2,#80
 306 0014 0B49     	 ldr r1,.L43
 307 0016 9BB2     	 uxth r3,r3
 308              	.LVL21:
 309 0018 8B52     	 strh r3,[r1,r2]
 310              	.LVL22:
 402:../Libraries/XMCLib/src/xmc1_scu.c **** 
 403:../Libraries/XMCLib/src/xmc1_scu.c ****   irqmask = 0UL;
 404:../Libraries/XMCLib/src/xmc1_scu.c **** 
 405:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_prewarning_int))
 311              	 .loc 1 405 0
 312 001a 037A     	 ldrb r3,[r0,#8]
 406:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 407:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDDPI_Msk;
 313              	 .loc 1 407 0
 314 001c 5A1E     	 sub r2,r3,#1
 315 001e 9341     	 sbc r3,r3,r2
 408:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 409:../Libraries/XMCLib/src/xmc1_scu.c **** 
 410:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vdrop_int))
 316              	 .loc 1 410 0
 317 0020 427A     	 ldrb r2,[r0,#9]
 407:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 318              	 .loc 1 407 0
 319 0022 DB00     	 lsl r3,r3,#3
 320              	.LVL23:
 321              	 .loc 1 410 0
 322 0024 002A     	 cmp r2,#0
 323 0026 01D0     	 beq .L31
 411:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 412:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VDROPI_Msk;
 324              	 .loc 1 412 0
 325 0028 8022     	 mov r2,#128
 326 002a 1343     	 orr r3,r2
 327              	.LVL24:
 328              	.L31:
 413:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 414:../Libraries/XMCLib/src/xmc1_scu.c **** 
 415:../Libraries/XMCLib/src/xmc1_scu.c ****   if(true == (obj->enable_vclip_int))
 329              	 .loc 1 415 0
 330 002c 827A     	 ldrb r2,[r0,#10]
 331 002e 002A     	 cmp r2,#0
 332 0030 02D0     	 beq .L32
 416:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 417:../Libraries/XMCLib/src/xmc1_scu.c ****     irqmask |= (uint32_t)SCU_INTERRUPT_SRMSK_VCLIPI_Msk;
 333              	 .loc 1 417 0
 334 0032 8022     	 mov r2,#128
 335 0034 9203     	 lsl r2,r2,#14
 336 0036 1343     	 orr r3,r2
 337              	.LVL25:
 338              	.L32:
 418:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 419:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_INTERRUPT->SRMSK |= (uint32_t)irqmask;
 339              	 .loc 1 419 0
 340 0038 0349     	 ldr r1,.L43+4
 420:../Libraries/XMCLib/src/xmc1_scu.c **** }
 341              	 .loc 1 420 0
 342              	 
 419:../Libraries/XMCLib/src/xmc1_scu.c **** }
 343              	 .loc 1 419 0
 344 003a 4A68     	 ldr r2,[r1,#4]
 345 003c 1343     	 orr r3,r2
 346              	.LVL26:
 347 003e 4B60     	 str r3,[r1,#4]
 348              	 .loc 1 420 0
 349 0040 7047     	 bx lr
 350              	.L44:
 351 0042 C046     	 .align 2
 352              	.L43:
 353 0044 00100140 	 .word 1073811456
 354 0048 38000140 	 .word 1073807416
 355              	 .cfi_endproc
 356              	.LFE58:
 358              	 .section .text.XMC_SCU_SetTempLowLimit,"ax",%progbits
 359              	 .align 2
 360              	 .global XMC_SCU_SetTempLowLimit
 361              	 .code 16
 362              	 .thumb_func
 364              	XMC_SCU_SetTempLowLimit:
 365              	.LFB59:
 421:../Libraries/XMCLib/src/xmc1_scu.c **** 
 422:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program lower temperature limit */
 423:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempLowLimit(uint32_t limit)
 424:../Libraries/XMCLib/src/xmc1_scu.c **** {
 366              	 .loc 1 424 0
 367              	 .cfi_startproc
 368              	.LVL27:
 369 0000 08B5     	 push {r3,lr}
 370              	.LCFI1:
 371              	 .cfi_def_cfa_offset 8
 372              	 .cfi_offset 3,-8
 373              	 .cfi_offset 14,-4
 425:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 426:../Libraries/XMCLib/src/xmc1_scu.c **** 
 427:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 374              	 .loc 1 427 0
 375 0002 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 376              	.LVL28:
 428:../Libraries/XMCLib/src/xmc1_scu.c **** 
 429:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 430:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 431:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIL = (uint16_t)limit;
 432:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 433:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 434:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 435:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 377              	 .loc 1 435 0
 378 0006 0123     	 mov r3,#1
 429:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 379              	 .loc 1 429 0
 380 0008 0028     	 cmp r0,#0
 381 000a 03D0     	 beq .L46
 431:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 382              	 .loc 1 431 0
 383 000c 024B     	 ldr r3,.L49
 384 000e 80B2     	 uxth r0,r0
 385              	.LVL29:
 386 0010 9886     	 strh r0,[r3,#52]
 425:../Libraries/XMCLib/src/xmc1_scu.c **** 
 387              	 .loc 1 425 0
 388 0012 0023     	 mov r3,#0
 389              	.L46:
 390              	.LVL30:
 436:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 437:../Libraries/XMCLib/src/xmc1_scu.c **** 
 438:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 439:../Libraries/XMCLib/src/xmc1_scu.c **** }
 391              	 .loc 1 439 0
 392 0014 181C     	 mov r0,r3
 393              	 
 394 0016 08BD     	 pop {r3,pc}
 395              	.L50:
 396              	 .align 2
 397              	.L49:
 398 0018 00100140 	 .word 1073811456
 399              	 .cfi_endproc
 400              	.LFE59:
 402              	 .section .text.XMC_SCU_SetTempHighLimit,"ax",%progbits
 403              	 .align 2
 404              	 .global XMC_SCU_SetTempHighLimit
 405              	 .code 16
 406              	 .thumb_func
 408              	XMC_SCU_SetTempHighLimit:
 409              	.LFB60:
 440:../Libraries/XMCLib/src/xmc1_scu.c ****   
 441:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program higher temperature limit */
 442:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_SetTempHighLimit(uint32_t limit)
 443:../Libraries/XMCLib/src/xmc1_scu.c **** {
 410              	 .loc 1 443 0
 411              	 .cfi_startproc
 412              	.LVL31:
 413 0000 08B5     	 push {r3,lr}
 414              	.LCFI2:
 415              	 .cfi_def_cfa_offset 8
 416              	 .cfi_offset 3,-8
 417              	 .cfi_offset 14,-4
 444:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status = XMC_SCU_STATUS_OK;
 445:../Libraries/XMCLib/src/xmc1_scu.c **** 
 446:../Libraries/XMCLib/src/xmc1_scu.c ****   limit = XMC_SCU_CalcTSEVAR(limit);
 418              	 .loc 1 446 0
 419 0002 FFF7FEFF 	 bl XMC_SCU_CalcTSEVAR
 420              	.LVL32:
 447:../Libraries/XMCLib/src/xmc1_scu.c **** 
 448:../Libraries/XMCLib/src/xmc1_scu.c ****   if (limit != 0) 
 449:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 450:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANATSEIH = (uint16_t)limit;
 451:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 452:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 453:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 454:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 421              	 .loc 1 454 0
 422 0006 0123     	 mov r3,#1
 448:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 423              	 .loc 1 448 0
 424 0008 0028     	 cmp r0,#0
 425 000a 03D0     	 beq .L52
 450:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 426              	 .loc 1 450 0
 427 000c 024B     	 ldr r3,.L55
 428 000e 80B2     	 uxth r0,r0
 429              	.LVL33:
 430 0010 1886     	 strh r0,[r3,#48]
 444:../Libraries/XMCLib/src/xmc1_scu.c **** 
 431              	 .loc 1 444 0
 432 0012 0023     	 mov r3,#0
 433              	.L52:
 434              	.LVL34:
 455:../Libraries/XMCLib/src/xmc1_scu.c ****   } 
 456:../Libraries/XMCLib/src/xmc1_scu.c **** 
 457:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 458:../Libraries/XMCLib/src/xmc1_scu.c **** }
 435              	 .loc 1 458 0
 436 0014 181C     	 mov r0,r3
 437              	 
 438 0016 08BD     	 pop {r3,pc}
 439              	.L56:
 440              	 .align 2
 441              	.L55:
 442 0018 00100140 	 .word 1073811456
 443              	 .cfi_endproc
 444              	.LFE60:
 446              	 .section .text.XMC_SCU_SetRawTempLimits,"ax",%progbits
 447              	 .align 2
 448              	 .global XMC_SCU_SetRawTempLimits
 449              	 .code 16
 450              	 .thumb_func
 452              	XMC_SCU_SetRawTempLimits:
 453              	.LFB61:
 459:../Libraries/XMCLib/src/xmc1_scu.c **** 
 460:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program temperature limits as raw digital values into temperature sensor */
 461:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_SetRawTempLimits(const uint32_t lower_temp, const uint32_t upper_temp)
 462:../Libraries/XMCLib/src/xmc1_scu.c **** {
 454              	 .loc 1 462 0
 455              	 .cfi_startproc
 456              	.LVL35:
 463:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 457              	 .loc 1 463 0
 458 0000 024B     	 ldr r3,.L58
 459 0002 89B2     	 uxth r1,r1
 460              	.LVL36:
 464:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 461              	 .loc 1 464 0
 462 0004 80B2     	 uxth r0,r0
 463              	.LVL37:
 463:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIH = (uint16_t)(upper_temp & SCU_ANALOG_ANATSEIH_TSE_IH_Msk);
 464              	 .loc 1 463 0
 465 0006 1986     	 strh r1,[r3,#48]
 465:../Libraries/XMCLib/src/xmc1_scu.c **** }
 466              	 .loc 1 465 0
 467              	 
 464:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSEIL = (uint16_t)(lower_temp & SCU_ANALOG_ANATSEIL_TSE_IL_Msk);
 468              	 .loc 1 464 0
 469 0008 9886     	 strh r0,[r3,#52]
 470              	 .loc 1 465 0
 471 000a 7047     	 bx lr
 472              	.L59:
 473              	 .align 2
 474              	.L58:
 475 000c 00100140 	 .word 1073811456
 476              	 .cfi_endproc
 477              	.LFE61:
 479              	 .section .text.XMC_SCU_StartTempMeasurement,"ax",%progbits
 480              	 .align 2
 481              	 .global XMC_SCU_StartTempMeasurement
 482              	 .code 16
 483              	 .thumb_func
 485              	XMC_SCU_StartTempMeasurement:
 486              	.LFB62:
 466:../Libraries/XMCLib/src/xmc1_scu.c **** 
 467:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to start temperature measurement */
 468:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StartTempMeasurement(void)
 469:../Libraries/XMCLib/src/xmc1_scu.c **** {
 487              	 .loc 1 469 0
 488              	 .cfi_startproc
 470:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 489              	 .loc 1 470 0
 490 0000 0123     	 mov r3,#1
 491 0002 024A     	 ldr r2,.L61
 471:../Libraries/XMCLib/src/xmc1_scu.c **** }
 492              	 .loc 1 471 0
 493              	 
 470:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL |= (uint16_t)SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 494              	 .loc 1 470 0
 495 0004 918C     	 ldrh r1,[r2,#36]
 496 0006 0B43     	 orr r3,r1
 497 0008 9384     	 strh r3,[r2,#36]
 498              	 .loc 1 471 0
 499 000a 7047     	 bx lr
 500              	.L62:
 501              	 .align 2
 502              	.L61:
 503 000c 00100140 	 .word 1073811456
 504              	 .cfi_endproc
 505              	.LFE62:
 507              	 .section .text.XMC_SCU_StopTempMeasurement,"ax",%progbits
 508              	 .align 2
 509              	 .global XMC_SCU_StopTempMeasurement
 510              	 .code 16
 511              	 .thumb_func
 513              	XMC_SCU_StopTempMeasurement:
 514              	.LFB63:
 472:../Libraries/XMCLib/src/xmc1_scu.c **** 
 473:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to stop temperature measurement */
 474:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_StopTempMeasurement(void)
 475:../Libraries/XMCLib/src/xmc1_scu.c **** {
 515              	 .loc 1 475 0
 516              	 .cfi_startproc
 476:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 517              	 .loc 1 476 0
 518 0000 0121     	 mov r1,#1
 519 0002 024A     	 ldr r2,.L64
 477:../Libraries/XMCLib/src/xmc1_scu.c **** }
 520              	 .loc 1 477 0
 521              	 
 476:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANATSECTRL &= (uint16_t)~SCU_ANALOG_ANATSECTRL_TSE_EN_Msk;
 522              	 .loc 1 476 0
 523 0004 938C     	 ldrh r3,[r2,#36]
 524 0006 8B43     	 bic r3,r1
 525 0008 9384     	 strh r3,[r2,#36]
 526              	 .loc 1 477 0
 527 000a 7047     	 bx lr
 528              	.L65:
 529              	 .align 2
 530              	.L64:
 531 000c 00100140 	 .word 1073811456
 532              	 .cfi_endproc
 533              	.LFE63:
 535              	 .section .text.XMC_SCU_HighTemperature,"ax",%progbits
 536              	 .align 2
 537              	 .global XMC_SCU_HighTemperature
 538              	 .code 16
 539              	 .thumb_func
 541              	XMC_SCU_HighTemperature:
 542              	.LFB64:
 478:../Libraries/XMCLib/src/xmc1_scu.c **** 
 479:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature has gone past the ceiling */
 480:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_HighTemperature(void)
 481:../Libraries/XMCLib/src/xmc1_scu.c **** {
 543              	 .loc 1 481 0
 544              	 .cfi_startproc
 482:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 545              	 .loc 1 482 0
 546 0000 024B     	 ldr r3,.L67
 483:../Libraries/XMCLib/src/xmc1_scu.c **** }
 547              	 .loc 1 483 0
 548              	 
 482:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_HIGH_Msk) == SCU_INTERRUPT_SRRAW_TSE_HIGH
 549              	 .loc 1 482 0
 550 0002 1868     	 ldr r0,[r3]
 551 0004 4000     	 lsl r0,r0,#1
 552 0006 C00F     	 lsr r0,r0,#31
 553              	 .loc 1 483 0
 554 0008 7047     	 bx lr
 555              	.L68:
 556 000a C046     	 .align 2
 557              	.L67:
 558 000c 38000140 	 .word 1073807416
 559              	 .cfi_endproc
 560              	.LFE64:
 562              	 .section .text.XMC_SCU_LowTemperature,"ax",%progbits
 563              	 .align 2
 564              	 .global XMC_SCU_LowTemperature
 565              	 .code 16
 566              	 .thumb_func
 568              	XMC_SCU_LowTemperature:
 569              	.LFB65:
 484:../Libraries/XMCLib/src/xmc1_scu.c **** 
 485:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to check if the temperature is lower than normal */
 486:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_LowTemperature(void)
 487:../Libraries/XMCLib/src/xmc1_scu.c **** {
 570              	 .loc 1 487 0
 571              	 .cfi_startproc
 488:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 572              	 .loc 1 488 0
 573 0000 014B     	 ldr r3,.L70
 489:../Libraries/XMCLib/src/xmc1_scu.c **** }
 574              	 .loc 1 489 0
 575              	 
 488:../Libraries/XMCLib/src/xmc1_scu.c ****   return ((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_TSE_LOW_Msk) == SCU_INTERRUPT_SRRAW_TSE_LOW_M
 576              	 .loc 1 488 0
 577 0002 1868     	 ldr r0,[r3]
 578 0004 C00F     	 lsr r0,r0,#31
 579              	 .loc 1 489 0
 580 0006 7047     	 bx lr
 581              	.L71:
 582              	 .align 2
 583              	.L70:
 584 0008 38000140 	 .word 1073807416
 585              	 .cfi_endproc
 586              	.LFE65:
 588              	 .section .text.XMC_SCU_GetTemperature,"ax",%progbits
 589              	 .align 2
 590              	 .global XMC_SCU_GetTemperature
 591              	 .code 16
 592              	 .thumb_func
 594              	XMC_SCU_GetTemperature:
 595              	.LFB66:
 490:../Libraries/XMCLib/src/xmc1_scu.c **** 
 491:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to retrieve the device temperature */
 492:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_GetTemperature(void)
 493:../Libraries/XMCLib/src/xmc1_scu.c **** {
 596              	 .loc 1 493 0
 597              	 .cfi_startproc
 494:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t temperature;
 495:../Libraries/XMCLib/src/xmc1_scu.c **** 
 496:../Libraries/XMCLib/src/xmc1_scu.c ****   temperature = (uint32_t)(SCU_ANALOG->ANATSEMON);
 598              	 .loc 1 496 0
 599 0000 4023     	 mov r3,#64
 600 0002 024A     	 ldr r2,.L73
 497:../Libraries/XMCLib/src/xmc1_scu.c **** 
 498:../Libraries/XMCLib/src/xmc1_scu.c ****   return (temperature);
 499:../Libraries/XMCLib/src/xmc1_scu.c **** }
 601              	 .loc 1 499 0
 602              	 
 496:../Libraries/XMCLib/src/xmc1_scu.c **** 
 603              	 .loc 1 496 0
 604 0004 D05A     	 ldrh r0,[r2,r3]
 605 0006 80B2     	 uxth r0,r0
 606              	.LVL38:
 607              	 .loc 1 499 0
 608 0008 7047     	 bx lr
 609              	.L74:
 610 000a C046     	 .align 2
 611              	.L73:
 612 000c 00100140 	 .word 1073811456
 613              	 .cfi_endproc
 614              	.LFE66:
 616              	 .section .text.XMC_SCU_CalcTemperature,"ax",%progbits
 617              	 .align 2
 618              	 .global XMC_SCU_CalcTemperature
 619              	 .code 16
 620              	 .thumb_func
 622              	XMC_SCU_CalcTemperature:
 623              	.LFB67:
 500:../Libraries/XMCLib/src/xmc1_scu.c **** 
 501:../Libraries/XMCLib/src/xmc1_scu.c **** /* Calculates the die temperature value using ROM function */
 502:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CalcTemperature(void)
 503:../Libraries/XMCLib/src/xmc1_scu.c **** {
 624              	 .loc 1 503 0
 625              	 .cfi_startproc
 626 0000 08B5     	 push {r3,lr}
 627              	.LCFI3:
 628              	 .cfi_def_cfa_offset 8
 629              	 .cfi_offset 3,-8
 630              	 .cfi_offset 14,-4
 504:../Libraries/XMCLib/src/xmc1_scu.c ****   return (ROM_CalcTemperature());
 631              	 .loc 1 504 0
 632 0002 8623     	 mov r3,#134
 633 0004 5B00     	 lsl r3,r3,#1
 634 0006 1B68     	 ldr r3,[r3]
 635 0008 9847     	 blx r3
 636              	.LVL39:
 505:../Libraries/XMCLib/src/xmc1_scu.c **** }
 637              	 .loc 1 505 0
 638              	 
 639 000a 08BD     	 pop {r3,pc}
 640              	 .cfi_endproc
 641              	.LFE67:
 643              	 .section .text.XMC_SCU_CLOCK_SetRtcClockSource,"ax",%progbits
 644              	 .align 2
 645              	 .global XMC_SCU_CLOCK_SetRtcClockSource
 646              	 .code 16
 647              	 .thumb_func
 649              	XMC_SCU_CLOCK_SetRtcClockSource:
 650              	.LFB69:
 506:../Libraries/XMCLib/src/xmc1_scu.c **** 
 507:../Libraries/XMCLib/src/xmc1_scu.c **** 
 508:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which initializes the clock tree ofthe device */
 509:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
 510:../Libraries/XMCLib/src/xmc1_scu.c **** {
 511:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 512:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 513:../Libraries/XMCLib/src/xmc1_scu.c **** 
 514:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 515:../Libraries/XMCLib/src/xmc1_scu.c ****   /* OSCHP source selection - OSC mode */
 516:../Libraries/XMCLib/src/xmc1_scu.c **** 
 517:../Libraries/XMCLib/src/xmc1_scu.c ****   if (config->oschp_mode != XMC_SCU_CLOCK_OSCHP_MODE_DISABLED)
 518:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 519:../Libraries/XMCLib/src/xmc1_scu.c ****     if (OSCHP_GetFrequency() > 20000000U)
 520:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 521:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_ANALOG->ANAOSCHPCTRL |= (uint16_t)SCU_ANALOG_ANAOSCHPCTRL_HYSCTRL_Msk;
 522:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 523:../Libraries/XMCLib/src/xmc1_scu.c **** 
 524:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL = (uint16_t)(SCU_ANALOG->ANAOSCHPCTRL & ~(SCU_ANALOG_ANAOSCHPCTRL_SHBY
 525:../Libraries/XMCLib/src/xmc1_scu.c ****                                  config->oschp_mode;
 526:../Libraries/XMCLib/src/xmc1_scu.c **** 
 527:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Enable OSC_HP oscillator watchdog*/
 528:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDEN_Msk;
 529:../Libraries/XMCLib/src/xmc1_scu.c **** 
 530:../Libraries/XMCLib/src/xmc1_scu.c ****     do
 531:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 532:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Restart OSC_HP oscillator watchdog */
 533:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_INTERRUPT->SRCLR1 = SCU_INTERRUPT_SRCLR1_LOECI_Msk;
 534:../Libraries/XMCLib/src/xmc1_scu.c ****       SCU_CLK->OSCCSR |= SCU_CLK_OSCCSR_XOWDRES_Msk;
 535:../Libraries/XMCLib/src/xmc1_scu.c **** 
 536:../Libraries/XMCLib/src/xmc1_scu.c ****       /* Wait a few DCO2 cycles for the update of the clock detection result */
 537:../Libraries/XMCLib/src/xmc1_scu.c ****       delay(2500);
 538:../Libraries/XMCLib/src/xmc1_scu.c **** 
 539:../Libraries/XMCLib/src/xmc1_scu.c ****       /* check clock is ok */
 540:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 541:../Libraries/XMCLib/src/xmc1_scu.c ****     while(SCU_INTERRUPT->SRRAW1 & SCU_INTERRUPT_SRRAW1_LOECI_Msk);
 542:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 543:../Libraries/XMCLib/src/xmc1_scu.c ****   else /* (config->oschp_mode == XMC_SCU_CLOCK_OSCHP_MODE_DISABLED) */
 544:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 545:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_ANALOG->ANAOSCHPCTRL |= SCU_ANALOG_ANAOSCHPCTRL_MODE_Msk;
 546:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 547:../Libraries/XMCLib/src/xmc1_scu.c **** 
 548:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOSCLPCTRL = (uint16_t)config->osclp_mode;
 549:../Libraries/XMCLib/src/xmc1_scu.c **** 
 550:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & ~SCU_CLK_CLKCR1_DCLKSEL_Msk) |
 551:../Libraries/XMCLib/src/xmc1_scu.c ****                     config->dclk_src;
 552:../Libraries/XMCLib/src/xmc1_scu.c **** 
 553:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 554:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update PCLK selection mux. */
 555:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_PCLKSEL_Msk | SCU_CLK_CLKCR_RTCCLKSE
 556:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 557:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 558:../Libraries/XMCLib/src/xmc1_scu.c **** 
 559:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Close the lock opened above. */
 560:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 561:../Libraries/XMCLib/src/xmc1_scu.c **** 
 562:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Update the dividers now */
 563:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(config->idiv, config->fdiv);
 564:../Libraries/XMCLib/src/xmc1_scu.c **** 
 565:../Libraries/XMCLib/src/xmc1_scu.c **** }
 566:../Libraries/XMCLib/src/xmc1_scu.c **** 
 567:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which selects one of the available parent clock nodes for a given child clock node */
 568:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetRtcClockSource(const XMC_SCU_CLOCK_RTCCLKSRC_t source)
 569:../Libraries/XMCLib/src/xmc1_scu.c **** {
 651              	 .loc 1 569 0
 652              	 .cfi_startproc
 653              	.LVL40:
 654              	.LBB40:
 655              	.LBB41:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 656              	 .loc 1 378 0
 657 0000 C023     	 mov r3,#192
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 658              	 .loc 1 380 0
 659 0002 0421     	 mov r1,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 660              	 .loc 1 378 0
 661 0004 074A     	 ldr r2,.L79
 662 0006 5362     	 str r3,[r2,#36]
 663              	.L77:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 664              	 .loc 1 380 0
 665 0008 536A     	 ldr r3,[r2,#36]
 666 000a 1942     	 tst r1,r3
 667 000c FCD1     	 bne .L77
 668              	.LBE41:
 669              	.LBE40:
 570:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_CLOCK_SetRtcSourceClock:Wrong Parent Clock", XMC_SCU_CHECK_RTCCLKSRC(source))
 571:../Libraries/XMCLib/src/xmc1_scu.c **** 
 572:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 573:../Libraries/XMCLib/src/xmc1_scu.c **** 
 574:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_RTCCLKSEL_Msk) |
 670              	 .loc 1 574 0
 671 000e 064A     	 ldr r2,.L79+4
 672 0010 064B     	 ldr r3,.L79+8
 673 0012 1168     	 ldr r1,[r2]
 575:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 576:../Libraries/XMCLib/src/xmc1_scu.c **** 
 577:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 578:../Libraries/XMCLib/src/xmc1_scu.c **** }
 674              	 .loc 1 578 0
 675              	 
 574:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 676              	 .loc 1 574 0
 677 0014 0B40     	 and r3,r1
 678 0016 1843     	 orr r0,r3
 679              	.LVL41:
 680 0018 1060     	 str r0,[r2]
 681              	.LBB42:
 682              	.LBB43:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 683              	 .loc 1 372 0
 684 001a C322     	 mov r2,#195
 685 001c 014B     	 ldr r3,.L79
 686 001e 5A62     	 str r2,[r3,#36]
 687              	.LBE43:
 688              	.LBE42:
 689              	 .loc 1 578 0
 690 0020 7047     	 bx lr
 691              	.L80:
 692 0022 C046     	 .align 2
 693              	.L79:
 694 0024 00000140 	 .word 1073807360
 695 0028 00030140 	 .word 1073808128
 696 002c FFFFF1FF 	 .word -917505
 697              	 .cfi_endproc
 698              	.LFE69:
 700              	 .section .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource,"ax",%progbits
 701              	 .align 2
 702              	 .global XMC_SCU_CLOCK_SetFastPeripheralClockSource
 703              	 .code 16
 704              	 .thumb_func
 706              	XMC_SCU_CLOCK_SetFastPeripheralClockSource:
 707              	.LFB70:
 579:../Libraries/XMCLib/src/xmc1_scu.c **** 
 580:../Libraries/XMCLib/src/xmc1_scu.c **** /* API to program the divider placed between fperiph and its parent */
 581:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetFastPeripheralClockSource(const XMC_SCU_CLOCK_PCLKSRC_t source)
 582:../Libraries/XMCLib/src/xmc1_scu.c **** {
 708              	 .loc 1 582 0
 709              	 .cfi_startproc
 710              	.LVL42:
 711              	.LBB44:
 712              	.LBB45:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 713              	 .loc 1 378 0
 714 0000 C023     	 mov r3,#192
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 715              	 .loc 1 380 0
 716 0002 0421     	 mov r1,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 717              	 .loc 1 378 0
 718 0004 074A     	 ldr r2,.L84
 719 0006 5362     	 str r3,[r2,#36]
 720              	.L82:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 721              	 .loc 1 380 0
 722 0008 536A     	 ldr r3,[r2,#36]
 723 000a 1942     	 tst r1,r3
 724 000c FCD1     	 bne .L82
 725              	.LBE45:
 726              	.LBE44:
 583:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 584:../Libraries/XMCLib/src/xmc1_scu.c **** 
 585:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~SCU_CLK_CLKCR_PCLKSEL_Msk) |
 727              	 .loc 1 585 0
 728 000e 064A     	 ldr r2,.L84+4
 729 0010 064B     	 ldr r3,.L84+8
 730 0012 1168     	 ldr r1,[r2]
 586:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 587:../Libraries/XMCLib/src/xmc1_scu.c **** 
 588:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 589:../Libraries/XMCLib/src/xmc1_scu.c **** }
 731              	 .loc 1 589 0
 732              	 
 585:../Libraries/XMCLib/src/xmc1_scu.c ****                    source;
 733              	 .loc 1 585 0
 734 0014 0B40     	 and r3,r1
 735 0016 1843     	 orr r0,r3
 736              	.LVL43:
 737 0018 1060     	 str r0,[r2]
 738              	.LBB46:
 739              	.LBB47:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 740              	 .loc 1 372 0
 741 001a C322     	 mov r2,#195
 742 001c 014B     	 ldr r3,.L84
 743 001e 5A62     	 str r2,[r3,#36]
 744              	.LBE47:
 745              	.LBE46:
 746              	 .loc 1 589 0
 747 0020 7047     	 bx lr
 748              	.L85:
 749 0022 C046     	 .align 2
 750              	.L84:
 751 0024 00000140 	 .word 1073807360
 752 0028 00030140 	 .word 1073808128
 753 002c FFFFFEFF 	 .word -65537
 754              	 .cfi_endproc
 755              	.LFE70:
 757              	 .section .text.XMC_SCU_CLOCK_GatePeripheralClock,"ax",%progbits
 758              	 .align 2
 759              	 .global XMC_SCU_CLOCK_GatePeripheralClock
 760              	 .code 16
 761              	 .thumb_func
 763              	XMC_SCU_CLOCK_GatePeripheralClock:
 764              	.LFB71:
 590:../Libraries/XMCLib/src/xmc1_scu.c **** 
 591:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which gates a clock node at its source */
 592:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_GatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 593:../Libraries/XMCLib/src/xmc1_scu.c **** {
 765              	 .loc 1 593 0
 766              	 .cfi_startproc
 767              	.LVL44:
 768              	.LBB48:
 769              	.LBB49:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 770              	 .loc 1 378 0
 771 0000 C023     	 mov r3,#192
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 772              	 .loc 1 380 0
 773 0002 0421     	 mov r1,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 774              	 .loc 1 378 0
 775 0004 064A     	 ldr r2,.L89
 776 0006 5362     	 str r3,[r2,#36]
 777              	.L87:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 778              	 .loc 1 380 0
 779 0008 536A     	 ldr r3,[r2,#36]
 780 000a 1942     	 tst r1,r3
 781 000c FCD1     	 bne .L87
 782              	.LBE49:
 783              	.LBE48:
 594:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 595:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATSET0 |= (uint32_t)peripheral;
 784              	 .loc 1 595 0
 785 000e 054A     	 ldr r2,.L89+4
 596:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 597:../Libraries/XMCLib/src/xmc1_scu.c **** }
 786              	 .loc 1 597 0
 787              	 
 595:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 788              	 .loc 1 595 0
 789 0010 D368     	 ldr r3,[r2,#12]
 790 0012 1843     	 orr r0,r3
 791              	.LVL45:
 792 0014 D060     	 str r0,[r2,#12]
 793              	.LBB50:
 794              	.LBB51:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 795              	 .loc 1 372 0
 796 0016 C322     	 mov r2,#195
 797 0018 014B     	 ldr r3,.L89
 798 001a 5A62     	 str r2,[r3,#36]
 799              	.LBE51:
 800              	.LBE50:
 801              	 .loc 1 597 0
 802 001c 7047     	 bx lr
 803              	.L90:
 804 001e C046     	 .align 2
 805              	.L89:
 806 0020 00000140 	 .word 1073807360
 807 0024 00030140 	 .word 1073808128
 808              	 .cfi_endproc
 809              	.LFE71:
 811              	 .section .text.XMC_SCU_CLOCK_UngatePeripheralClock,"ax",%progbits
 812              	 .align 2
 813              	 .global XMC_SCU_CLOCK_UngatePeripheralClock
 814              	 .code 16
 815              	 .thumb_func
 817              	XMC_SCU_CLOCK_UngatePeripheralClock:
 818              	.LFB72:
 598:../Libraries/XMCLib/src/xmc1_scu.c **** 
 599:../Libraries/XMCLib/src/xmc1_scu.c **** /* API which ungates a clock note at its source */
 600:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 601:../Libraries/XMCLib/src/xmc1_scu.c **** {
 819              	 .loc 1 601 0
 820              	 .cfi_startproc
 821              	.LVL46:
 822              	.LBB52:
 823              	.LBB53:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 824              	 .loc 1 378 0
 825 0000 C023     	 mov r3,#192
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 826              	 .loc 1 380 0
 827 0002 0421     	 mov r1,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 828              	 .loc 1 378 0
 829 0004 084A     	 ldr r2,.L96
 830 0006 5362     	 str r3,[r2,#36]
 831              	.L92:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 832              	 .loc 1 380 0
 833 0008 536A     	 ldr r3,[r2,#36]
 834 000a 1942     	 tst r1,r3
 835 000c FCD1     	 bne .L92
 836              	.LBE53:
 837              	.LBE52:
 602:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CGATCLR0 |= (uint32_t)peripheral;
 604:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 838              	 .loc 1 604 0
 839 000e 8021     	 mov r1,#128
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 840              	 .loc 1 603 0
 841 0010 064A     	 ldr r2,.L96+4
 842              	 .loc 1 604 0
 843 0012 C905     	 lsl r1,r1,#23
 603:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 844              	 .loc 1 603 0
 845 0014 1369     	 ldr r3,[r2,#16]
 846 0016 1843     	 orr r0,r3
 847              	.LVL47:
 848 0018 1061     	 str r0,[r2,#16]
 849              	.L93:
 850              	 .loc 1 604 0 discriminator 1
 851 001a 1368     	 ldr r3,[r2]
 852 001c 0B42     	 tst r3,r1
 853 001e FCD1     	 bne .L93
 854              	.LBB54:
 855              	.LBB55:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 856              	 .loc 1 372 0
 857 0020 C322     	 mov r2,#195
 858 0022 014B     	 ldr r3,.L96
 859              	.LBE55:
 860              	.LBE54:
 605:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 606:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 607:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 608:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 609:../Libraries/XMCLib/src/xmc1_scu.c **** }
 861              	 .loc 1 609 0
 862              	 
 863              	.LBB57:
 864              	.LBB56:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 865              	 .loc 1 372 0
 866 0024 5A62     	 str r2,[r3,#36]
 867              	.LBE56:
 868              	.LBE57:
 869              	 .loc 1 609 0
 870 0026 7047     	 bx lr
 871              	.L97:
 872              	 .align 2
 873              	.L96:
 874 0028 00000140 	 .word 1073807360
 875 002c 00030140 	 .word 1073808128
 876              	 .cfi_endproc
 877              	.LFE72:
 879              	 .section .text.XMC_SCU_CLOCK_IsPeripheralClockGated,"ax",%progbits
 880              	 .align 2
 881              	 .global XMC_SCU_CLOCK_IsPeripheralClockGated
 882              	 .code 16
 883              	 .thumb_func
 885              	XMC_SCU_CLOCK_IsPeripheralClockGated:
 886              	.LFB73:
 610:../Libraries/XMCLib/src/xmc1_scu.c **** 
 611:../Libraries/XMCLib/src/xmc1_scu.c **** /* Checks the status of peripheral clock gating */
 612:../Libraries/XMCLib/src/xmc1_scu.c **** bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
 613:../Libraries/XMCLib/src/xmc1_scu.c **** {
 887              	 .loc 1 613 0
 888              	 .cfi_startproc
 889              	.LVL48:
 614:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 890              	 .loc 1 614 0
 891 0000 034B     	 ldr r3,.L99
 615:../Libraries/XMCLib/src/xmc1_scu.c **** }
 892              	 .loc 1 615 0
 893              	 
 614:../Libraries/XMCLib/src/xmc1_scu.c ****   return (bool)((SCU_CLK->CGATSTAT0 & peripheral) != 0);
 894              	 .loc 1 614 0
 895 0002 9B68     	 ldr r3,[r3,#8]
 896 0004 1840     	 and r0,r3
 897              	.LVL49:
 898 0006 431E     	 sub r3,r0,#1
 899 0008 9841     	 sbc r0,r0,r3
 900 000a C0B2     	 uxtb r0,r0
 901              	 .loc 1 615 0
 902 000c 7047     	 bx lr
 903              	.L100:
 904 000e C046     	 .align 2
 905              	.L99:
 906 0010 00030140 	 .word 1073808128
 907              	 .cfi_endproc
 908              	.LFE73:
 910              	 .section .text.XMC_SCU_CLOCK_ScaleMCLKFrequency,"ax",%progbits
 911              	 .align 2
 912              	 .global XMC_SCU_CLOCK_ScaleMCLKFrequency
 913              	 .code 16
 914              	 .thumb_func
 916              	XMC_SCU_CLOCK_ScaleMCLKFrequency:
 917              	.LFB75:
 616:../Libraries/XMCLib/src/xmc1_scu.c **** 
 617:../Libraries/XMCLib/src/xmc1_scu.c **** /* This API configures main clock (MCLK) frequency to requested frequency value. */
 618:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_SetMCLKFrequency(uint32_t freq_khz)
 619:../Libraries/XMCLib/src/xmc1_scu.c **** {
 620:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 621:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_int;
 622:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio_frac;
 623:../Libraries/XMCLib/src/xmc1_scu.c **** 
 624:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 625:../Libraries/XMCLib/src/xmc1_scu.c ****   if (((SCU_CLK->CLKCR1) & SCU_CLK_CLKCR1_DCLKSEL_Msk) == 0U)
 626:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 627:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = DCO1_DIV2_FREQUENCY_KHZ_Q22_10 / freq_khz;
 628:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 629:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 630:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 631:../Libraries/XMCLib/src/xmc1_scu.c ****      ratio = ((OSCHP_GetFrequency() / 1000U) << 10U) / freq_khz;
 632:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 633:../Libraries/XMCLib/src/xmc1_scu.c **** 
 634:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 635:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffffU)
 636:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 637:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffffU;
 638:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 639:../Libraries/XMCLib/src/xmc1_scu.c **** 
 640:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 10U;
 641:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0x3ffU;
 642:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 643:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = DCO1_DIV2_FREQUENCY_KHZ_Q24_8 / freq_khz;
 644:../Libraries/XMCLib/src/xmc1_scu.c **** 
 645:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Manage overflow */
 646:../Libraries/XMCLib/src/xmc1_scu.c ****   if (ratio > 0xffffU)
 647:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 648:../Libraries/XMCLib/src/xmc1_scu.c ****     ratio = 0xffffU;
 649:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 650:../Libraries/XMCLib/src/xmc1_scu.c **** 
 651:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_int = ratio >> 8U;
 652:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 653:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 654:../Libraries/XMCLib/src/xmc1_scu.c **** 
 655:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_CLOCK_ScaleMCLKFrequency(ratio_int, ratio_frac);
 656:../Libraries/XMCLib/src/xmc1_scu.c **** }
 657:../Libraries/XMCLib/src/xmc1_scu.c **** 
 658:../Libraries/XMCLib/src/xmc1_scu.c **** 
 659:../Libraries/XMCLib/src/xmc1_scu.c **** /* A utility routine which updates the fractional dividers in steps */
 660:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_ScaleMCLKFrequency(uint32_t idiv, uint32_t fdiv)
 661:../Libraries/XMCLib/src/xmc1_scu.c **** {
 918              	 .loc 1 661 0
 919              	 .cfi_startproc
 920              	.LVL50:
 921 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 922              	.LCFI4:
 923              	 .cfi_def_cfa_offset 24
 924              	 .cfi_offset 3,-24
 925              	 .cfi_offset 4,-20
 926              	 .cfi_offset 5,-16
 927              	 .cfi_offset 6,-12
 928              	 .cfi_offset 7,-8
 929              	 .cfi_offset 14,-4
 930              	.LBB66:
 931              	.LBB67:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 932              	 .loc 1 378 0
 933 0002 C023     	 mov r3,#192
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 934              	 .loc 1 380 0
 935 0004 0424     	 mov r4,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 936              	 .loc 1 378 0
 937 0006 2D4A     	 ldr r2,.L120
 938 0008 5362     	 str r3,[r2,#36]
 939              	.L102:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 940              	 .loc 1 380 0
 941 000a 536A     	 ldr r3,[r2,#36]
 942 000c 1C42     	 tst r4,r3
 943 000e FCD1     	 bne .L102
 944              	.LBE67:
 945              	.LBE66:
 662:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Find out current and target value of idiv */
 663:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t curr_idiv;
 664:../Libraries/XMCLib/src/xmc1_scu.c **** 
 665:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 666:../Libraries/XMCLib/src/xmc1_scu.c **** 
 667:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Take a snapshot of value already programmed into IDIV */
 668:../Libraries/XMCLib/src/xmc1_scu.c ****   curr_idiv = (SCU_CLK->CLKCR & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
 946              	 .loc 1 668 0
 947 0010 2B4A     	 ldr r2,.L120+4
 669:../Libraries/XMCLib/src/xmc1_scu.c **** 
 670:../Libraries/XMCLib/src/xmc1_scu.c **** #if (UC_SERIES == XMC14)
 671:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR1 = (SCU_CLK->CLKCR1 & (uint32_t)~(SCU_CLK_CLKCR1_FDIV_Msk)) |
 672:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv >> 8U) << SCU_CLK_CLKCR1_FDIV_Pos);
 673:../Libraries/XMCLib/src/xmc1_scu.c **** 
 674:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 675:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)((fdiv & 0xffU) << SCU_CLK_CLKCR_FDIV_Pos) |
 676:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 677:../Libraries/XMCLib/src/xmc1_scu.c **** #else
 678:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_FDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 948              	 .loc 1 678 0
 949 0012 2C4D     	 ldr r5,.L120+8
 668:../Libraries/XMCLib/src/xmc1_scu.c **** 
 950              	 .loc 1 668 0
 951 0014 1468     	 ldr r4,[r2]
 952              	 .loc 1 678 0
 953 0016 1368     	 ldr r3,[r2]
 668:../Libraries/XMCLib/src/xmc1_scu.c **** 
 954              	 .loc 1 668 0
 955 0018 2404     	 lsl r4,r4,#16
 956              	 .loc 1 678 0
 957 001a 1D40     	 and r5,r3
 958 001c 2A4B     	 ldr r3,.L120+12
 668:../Libraries/XMCLib/src/xmc1_scu.c **** 
 959              	 .loc 1 668 0
 960 001e 240E     	 lsr r4,r4,#24
 961              	.LVL51:
 962 0020 2B43     	 orr r3,r5
 679:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 963              	 .loc 1 679 0
 964 0022 0B43     	 orr r3,r1
 680:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 681:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 682:../Libraries/XMCLib/src/xmc1_scu.c **** 
 683:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR)& SCU_CLK_CLKCR_VDDC2LOW_Msk)
 965              	 .loc 1 683 0
 966 0024 8021     	 mov r1,#128
 967              	.LVL52:
 678:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(fdiv << SCU_CLK_CLKCR_FDIV_Pos) |
 968              	 .loc 1 678 0
 969 0026 1360     	 str r3,[r2]
 970              	 .loc 1 683 0
 971 0028 C905     	 lsl r1,r1,#23
 972              	.L103:
 973              	 .loc 1 683 0 is_stmt 0 discriminator 1
 974 002a 1368     	 ldr r3,[r2]
 975 002c 0B42     	 tst r3,r1
 976 002e FCD1     	 bne .L103
 684:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 685:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Spin until the core supply stabilizes */
 686:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 687:../Libraries/XMCLib/src/xmc1_scu.c **** 
 688:../Libraries/XMCLib/src/xmc1_scu.c ****   if(curr_idiv <= idiv)
 977              	 .loc 1 688 0 is_stmt 1
 978 0030 8442     	 cmp r4,r0
 979 0032 29D9     	 bls .L104
 980              	.LBB68:
 981              	.LBB69:
 689:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 690:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is greater than currently programmed IDIV. So downscale the frequency */
 691:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyDownScaling(curr_idiv, idiv);
 692:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 693:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 694:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 695:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Requested IDIV is lower than currently programmed IDIV. So upscale the frequency */
 696:../Libraries/XMCLib/src/xmc1_scu.c ****     XMC_SCU_CLOCK_lFrequencyUpScaling(curr_idiv, idiv);
 697:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 698:../Libraries/XMCLib/src/xmc1_scu.c **** 
 699:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Msk)
 700:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 701:../Libraries/XMCLib/src/xmc1_scu.c **** 
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 703:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 704:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 705:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 706:../Libraries/XMCLib/src/xmc1_scu.c **** 
 707:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 708:../Libraries/XMCLib/src/xmc1_scu.c **** 
 709:../Libraries/XMCLib/src/xmc1_scu.c ****   SystemCoreClockUpdate();
 710:../Libraries/XMCLib/src/xmc1_scu.c **** 
 711:../Libraries/XMCLib/src/xmc1_scu.c **** }
 712:../Libraries/XMCLib/src/xmc1_scu.c **** 
 713:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency up scaling */
 714:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyUpScaling(uint32_t curr_idiv, uint32_t target_idiv)
 715:../Libraries/XMCLib/src/xmc1_scu.c **** {
 716:../Libraries/XMCLib/src/xmc1_scu.c ****   while (curr_idiv > (target_idiv * 4UL))
 717:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 718:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv = (uint32_t)(curr_idiv >> 2UL);   /* Divide by 4. */
 719:../Libraries/XMCLib/src/xmc1_scu.c **** 
 720:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 721:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 722:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 723:../Libraries/XMCLib/src/xmc1_scu.c **** 
 724:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 982              	 .loc 1 724 0
 983 0034 8021     	 mov r1,#128
 720:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 984              	 .loc 1 720 0
 985 0036 254B     	 ldr r3,.L120+16
 986 0038 8600     	 lsl r6,r0,#2
 987 003a 214A     	 ldr r2,.L120+4
 988 003c 9C46     	 mov ip,r3
 989 003e 224F     	 ldr r7,.L120+12
 990              	 .loc 1 724 0
 991 0040 C905     	 lsl r1,r1,#23
 992              	.LVL53:
 716:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 993              	 .loc 1 716 0
 994 0042 B442     	 cmp r4,r6
 995 0044 0CD9     	 bls .L113
 996              	.LVL54:
 997              	.L112:
 720:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 998              	 .loc 1 720 0
 999 0046 6546     	 mov r5,ip
 1000 0048 1368     	 ldr r3,[r2]
 718:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1001              	 .loc 1 718 0
 1002 004a A408     	 lsr r4,r4,#2
 1003              	.LVL55:
 720:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1004              	 .loc 1 720 0
 1005 004c 2B40     	 and r3,r5
 1006 004e 3B43     	 orr r3,r7
 721:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 1007              	 .loc 1 721 0
 1008 0050 2502     	 lsl r5,r4,#8
 1009 0052 2B43     	 orr r3,r5
 720:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) | 
 1010              	 .loc 1 720 0
 1011 0054 1360     	 str r3,[r2]
 1012              	.L111:
 1013              	 .loc 1 724 0
 1014 0056 1368     	 ldr r3,[r2]
 1015 0058 0B42     	 tst r3,r1
 1016 005a FCD1     	 bne .L111
 716:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1017              	 .loc 1 716 0
 1018 005c B442     	 cmp r4,r6
 1019 005e F2D8     	 bhi .L112
 1020              	.LVL56:
 1021              	.L113:
 1022              	.LBE69:
 1023              	.LBE68:
 699:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1024              	 .loc 1 699 0
 1025 0060 174A     	 ldr r2,.L120+4
 1026 0062 1A4B     	 ldr r3,.L120+16
 1027 0064 1168     	 ldr r1,[r2]
 700:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1028              	 .loc 1 700 0
 1029 0066 0002     	 lsl r0,r0,#8
 1030              	.LVL57:
 699:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1031              	 .loc 1 699 0
 1032 0068 0B40     	 and r3,r1
 1033 006a 1749     	 ldr r1,.L120+12
 1034 006c 0B43     	 orr r3,r1
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1035              	 .loc 1 702 0
 1036 006e 8021     	 mov r1,#128
 700:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1037              	 .loc 1 700 0
 1038 0070 0343     	 orr r3,r0
 699:../Libraries/XMCLib/src/xmc1_scu.c ****                    (uint32_t)(idiv << SCU_CLK_CLKCR_IDIV_Pos) | (uint32_t)(1023UL << SCU_CLK_CLKCR_
 1039              	 .loc 1 699 0
 1040 0072 1360     	 str r3,[r2]
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1041              	 .loc 1 702 0
 1042 0074 C905     	 lsl r1,r1,#23
 1043              	.L110:
 702:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1044              	 .loc 1 702 0 is_stmt 0 discriminator 1
 1045 0076 1368     	 ldr r3,[r2]
 1046 0078 0B42     	 tst r3,r1
 1047 007a FCD1     	 bne .L110
 1048              	.LBB70:
 1049              	.LBB71:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1050              	 .loc 1 372 0 is_stmt 1
 1051 007c C322     	 mov r2,#195
 1052 007e 0F4B     	 ldr r3,.L120
 1053              	.LBE71:
 1054              	.LBE70:
 711:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1055              	 .loc 1 711 0
 1056              	 
 1057              	.LBB73:
 1058              	.LBB72:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1059              	 .loc 1 372 0
 1060 0080 5A62     	 str r2,[r3,#36]
 1061              	.LBE72:
 1062              	.LBE73:
 709:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1063              	 .loc 1 709 0
 1064 0082 FFF7FEFF 	 bl SystemCoreClockUpdate
 1065              	.LVL58:
 711:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1066              	 .loc 1 711 0
 1067 0086 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1068              	.LVL59:
 1069              	.L104:
 1070              	.LBB74:
 1071              	.LBB75:
 725:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 726:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 727:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 728:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 729:../Libraries/XMCLib/src/xmc1_scu.c **** }
 730:../Libraries/XMCLib/src/xmc1_scu.c **** 
 731:../Libraries/XMCLib/src/xmc1_scu.c **** /* Utility routine to perform frequency down scaling */
 732:../Libraries/XMCLib/src/xmc1_scu.c **** static void XMC_SCU_CLOCK_lFrequencyDownScaling(uint32_t curr_idiv, uint32_t target_idiv)
 733:../Libraries/XMCLib/src/xmc1_scu.c **** {
 734:../Libraries/XMCLib/src/xmc1_scu.c **** 
 735:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((curr_idiv * 4UL) < target_idiv)
 736:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 737:../Libraries/XMCLib/src/xmc1_scu.c ****     if(0U == curr_idiv)
 738:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 739:../Libraries/XMCLib/src/xmc1_scu.c ****       curr_idiv = 1U;
 740:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 741:../Libraries/XMCLib/src/xmc1_scu.c ****     curr_idiv  = (uint32_t)(curr_idiv << 2UL);   /* Multiply by 4. */
 742:../Libraries/XMCLib/src/xmc1_scu.c ****     SCU_CLK->CLKCR = (SCU_CLK->CLKCR & (uint32_t)~(SCU_CLK_CLKCR_IDIV_Msk | SCU_CLK_CLKCR_CNTADJ_Ms
 743:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 744:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 745:../Libraries/XMCLib/src/xmc1_scu.c **** 
 746:../Libraries/XMCLib/src/xmc1_scu.c ****     while (SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk)
 1072              	 .loc 1 746 0
 1073 0088 8021     	 mov r1,#128
 742:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1074              	 .loc 1 742 0
 1075 008a 0D4A     	 ldr r2,.L120+4
 1076 008c 0F4F     	 ldr r7,.L120+16
 1077 008e 0E4E     	 ldr r6,.L120+12
 1078              	 .loc 1 746 0
 1079 0090 C905     	 lsl r1,r1,#23
 1080              	.LVL60:
 1081              	.L108:
 735:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1082              	 .loc 1 735 0
 1083 0092 A300     	 lsl r3,r4,#2
 1084 0094 9842     	 cmp r0,r3
 1085 0096 E3D9     	 bls .L113
 737:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1086              	 .loc 1 737 0
 1087 0098 002C     	 cmp r4,#0
 1088 009a 0AD0     	 beq .L114
 1089 009c A502     	 lsl r5,r4,#10
 1090 009e 1C1C     	 mov r4,r3
 1091              	.LVL61:
 1092              	.L106:
 742:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1093              	 .loc 1 742 0
 1094 00a0 1368     	 ldr r3,[r2]
 1095 00a2 3B40     	 and r3,r7
 1096 00a4 3343     	 orr r3,r6
 743:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(1023UL << SCU_CLK_CLKCR_CNTADJ_Pos);
 1097              	 .loc 1 743 0
 1098 00a6 2B43     	 orr r3,r5
 742:../Libraries/XMCLib/src/xmc1_scu.c ****                      (uint32_t)(curr_idiv << SCU_CLK_CLKCR_IDIV_Pos) |
 1099              	 .loc 1 742 0
 1100 00a8 1360     	 str r3,[r2]
 1101              	.L107:
 1102              	 .loc 1 746 0
 1103 00aa 1368     	 ldr r3,[r2]
 1104 00ac 0B42     	 tst r3,r1
 1105 00ae FCD1     	 bne .L107
 1106 00b0 EFE7     	 b .L108
 1107              	.L114:
 737:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1108              	 .loc 1 737 0
 1109 00b2 8025     	 mov r5,#128
 1110 00b4 0424     	 mov r4,#4
 1111              	.LVL62:
 1112 00b6 ED00     	 lsl r5,r5,#3
 1113 00b8 F2E7     	 b .L106
 1114              	.L121:
 1115 00ba C046     	 .align 2
 1116              	.L120:
 1117 00bc 00000140 	 .word 1073807360
 1118 00c0 00030140 	 .word 1073808128
 1119 00c4 00FF0FC0 	 .word -1072693504
 1120 00c8 0000F03F 	 .word 1072693248
 1121 00cc FF000FC0 	 .word -1072758529
 1122              	.LBE75:
 1123              	.LBE74:
 1124              	 .cfi_endproc
 1125              	.LFE75:
 1127              	 .section .text.XMC_SCU_CLOCK_Init,"ax",%progbits
 1128              	 .align 2
 1129              	 .global XMC_SCU_CLOCK_Init
 1130              	 .code 16
 1131              	 .thumb_func
 1133              	XMC_SCU_CLOCK_Init:
 1134              	.LFB68:
 510:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 1135              	 .loc 1 510 0
 1136              	 .cfi_startproc
 1137              	.LVL63:
 1138              	.LBB76:
 1139              	.LBB77:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1140              	 .loc 1 378 0
 1141 0000 C023     	 mov r3,#192
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1142              	 .loc 1 380 0
 1143 0002 0421     	 mov r1,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1144              	 .loc 1 378 0
 1145 0004 0B4A     	 ldr r2,.L125
 1146              	.LBE77:
 1147              	.LBE76:
 510:../Libraries/XMCLib/src/xmc1_scu.c ****   /* Remove protection */
 1148              	 .loc 1 510 0
 1149 0006 10B5     	 push {r4,lr}
 1150              	.LCFI5:
 1151              	 .cfi_def_cfa_offset 8
 1152              	 .cfi_offset 4,-8
 1153              	 .cfi_offset 14,-4
 1154              	.LBB79:
 1155              	.LBB78:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1156              	 .loc 1 378 0
 1157 0008 5362     	 str r3,[r2,#36]
 1158              	.L123:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1159              	 .loc 1 380 0
 1160 000a 536A     	 ldr r3,[r2,#36]
 1161 000c 1942     	 tst r1,r3
 1162 000e FCD1     	 bne .L123
 1163 0010 8268     	 ldr r2,[r0,#8]
 1164 0012 4168     	 ldr r1,[r0,#4]
 1165              	.LBE78:
 1166              	.LBE79:
 555:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1167              	 .loc 1 555 0
 1168 0014 084C     	 ldr r4,.L125+4
 1169 0016 1143     	 orr r1,r2
 1170 0018 2368     	 ldr r3,[r4]
 1171 001a 084A     	 ldr r2,.L125+8
 565:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1172              	 .loc 1 565 0
 1173              	 
 555:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1174              	 .loc 1 555 0
 1175 001c 1340     	 and r3,r2
 1176              	.LBB80:
 1177              	.LBB81:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1178              	 .loc 1 372 0
 1179 001e C322     	 mov r2,#195
 1180              	.LBE81:
 1181              	.LBE80:
 556:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->pclk_src;
 1182              	 .loc 1 556 0
 1183 0020 0B43     	 orr r3,r1
 555:../Libraries/XMCLib/src/xmc1_scu.c ****                    config->rtc_src |
 1184              	 .loc 1 555 0
 1185 0022 2360     	 str r3,[r4]
 1186              	.LBB83:
 1187              	.LBB82:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1188              	 .loc 1 372 0
 1189 0024 034B     	 ldr r3,.L125
 1190 0026 5A62     	 str r2,[r3,#36]
 1191              	.LBE82:
 1192              	.LBE83:
 563:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1193              	 .loc 1 563 0
 1194 0028 4378     	 ldrb r3,[r0,#1]
 1195 002a 0178     	 ldrb r1,[r0]
 1196 002c 181C     	 mov r0,r3
 1197              	.LVL64:
 1198 002e FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1199              	.LVL65:
 565:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1200              	 .loc 1 565 0
 1201 0032 10BD     	 pop {r4,pc}
 1202              	.L126:
 1203              	 .align 2
 1204              	.L125:
 1205 0034 00000140 	 .word 1073807360
 1206 0038 00030140 	 .word 1073808128
 1207 003c FFFFF0FF 	 .word -983041
 1208              	 .cfi_endproc
 1209              	.LFE68:
 1211              	 .global __aeabi_uidiv
 1212              	 .section .text.XMC_SCU_CLOCK_SetMCLKFrequency,"ax",%progbits
 1213              	 .align 2
 1214              	 .global XMC_SCU_CLOCK_SetMCLKFrequency
 1215              	 .code 16
 1216              	 .thumb_func
 1218              	XMC_SCU_CLOCK_SetMCLKFrequency:
 1219              	.LFB74:
 619:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1220              	 .loc 1 619 0
 1221              	 .cfi_startproc
 1222              	.LVL66:
 1223 0000 011C     	 mov r1,r0
 643:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1224              	 .loc 1 643 0
 1225 0002 FA20     	 mov r0,#250
 1226              	.LVL67:
 619:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t ratio;
 1227              	 .loc 1 619 0
 1228 0004 08B5     	 push {r3,lr}
 1229              	.LCFI6:
 1230              	 .cfi_def_cfa_offset 8
 1231              	 .cfi_offset 3,-8
 1232              	 .cfi_offset 14,-4
 643:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1233              	 .loc 1 643 0
 1234 0006 C003     	 lsl r0,r0,#15
 1235 0008 FFF7FEFF 	 bl __aeabi_uidiv
 1236              	.LVL68:
 1237 000c 054B     	 ldr r3,.L129
 1238 000e 011E     	 sub r1,r0,#0
 1239              	.LVL69:
 1240 0010 9942     	 cmp r1,r3
 1241 0012 00D9     	 bls .L128
 1242 0014 191C     	 mov r1,r3
 1243              	.L128:
 1244              	.LVL70:
 652:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 1245              	 .loc 1 652 0
 1246 0016 FF23     	 mov r3,#255
 651:../Libraries/XMCLib/src/xmc1_scu.c ****   ratio_frac = ratio & 0xffU;
 1247              	 .loc 1 651 0
 1248 0018 080A     	 lsr r0,r1,#8
 1249              	.LVL71:
 652:../Libraries/XMCLib/src/xmc1_scu.c **** #endif
 1250              	 .loc 1 652 0
 1251 001a 1940     	 and r1,r3
 1252              	.LVL72:
 655:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1253              	 .loc 1 655 0
 1254 001c FFF7FEFF 	 bl XMC_SCU_CLOCK_ScaleMCLKFrequency
 1255              	.LVL73:
 656:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1256              	 .loc 1 656 0
 1257              	 
 1258 0020 08BD     	 pop {r3,pc}
 1259              	.L130:
 1260 0022 C046     	 .align 2
 1261              	.L129:
 1262 0024 FFFF0000 	 .word 65535
 1263              	 .cfi_endproc
 1264              	.LFE74:
 1266              	 .section .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency,"ax",%progbits
 1267              	 .align 2
 1268              	 .global XMC_SCU_CLOCK_GetPeripheralClockFrequency
 1269              	 .code 16
 1270              	 .thumb_func
 1272              	XMC_SCU_CLOCK_GetPeripheralClockFrequency:
 1273              	.LFB78:
 747:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 748:../Libraries/XMCLib/src/xmc1_scu.c ****     /* Wait voltage suply stabilization */
 749:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 750:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 751:../Libraries/XMCLib/src/xmc1_scu.c **** }
 752:../Libraries/XMCLib/src/xmc1_scu.c **** 
 753:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 754:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional c
 755:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 756:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
 757:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1274              	 .loc 1 757 0
 1275              	 .cfi_startproc
 758:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1276              	 .loc 1 758 0
 1277 0000 014B     	 ldr r3,.L132
 759:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1278              	 .loc 1 759 0
 1279              	 
 758:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock);
 1280              	 .loc 1 758 0
 1281 0002 1868     	 ldr r0,[r3]
 1282              	 .loc 1 759 0
 1283 0004 7047     	 bx lr
 1284              	.L133:
 1285 0006 C046     	 .align 2
 1286              	.L132:
 1287 0008 00000000 	 .word SystemCoreClock
 1288              	 .cfi_endproc
 1289              	.LFE78:
 1291              	 .section .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency,"ax",%progbits
 1292              	 .align 2
 1293              	 .global XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
 1294              	 .code 16
 1295              	 .thumb_func
 1297              	XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:
 1298              	.LFB79:
 760:../Libraries/XMCLib/src/xmc1_scu.c **** 
 761:../Libraries/XMCLib/src/xmc1_scu.c **** /* Provides the clock frequency of peripherals on the peripheral bus that are using a shared functi
 762:../Libraries/XMCLib/src/xmc1_scu.c **** uint32_t XMC_SCU_CLOCK_GetFastPeripheralClockFrequency(void)
 763:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1299              	 .loc 1 763 0
 1300              	 .cfi_startproc
 764:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1301              	 .loc 1 764 0
 1302 0000 044B     	 ldr r3,.L135
 765:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1303              	 .loc 1 765 0
 1304              	 
 764:../Libraries/XMCLib/src/xmc1_scu.c ****   return (SystemCoreClock << ((SCU_CLK->CLKCR & SCU_CLK_CLKCR_PCLKSEL_Msk) >> SCU_CLK_CLKCR_PCLKSEL
 1305              	 .loc 1 764 0
 1306 0002 1868     	 ldr r0,[r3]
 1307 0004 044B     	 ldr r3,.L135+4
 1308 0006 C003     	 lsl r0,r0,#15
 1309 0008 1B68     	 ldr r3,[r3]
 1310 000a C00F     	 lsr r0,r0,#31
 1311 000c 8340     	 lsl r3,r3,r0
 1312 000e 181C     	 mov r0,r3
 1313              	 .loc 1 765 0
 1314 0010 7047     	 bx lr
 1315              	.L136:
 1316 0012 C046     	 .align 2
 1317              	.L135:
 1318 0014 00030140 	 .word 1073808128
 1319 0018 00000000 	 .word SystemCoreClock
 1320              	 .cfi_endproc
 1321              	.LFE79:
 1323              	 .global __aeabi_idiv
 1324              	 .section .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature,"ax",%progbits
 1325              	 .align 2
 1326              	 .global XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
 1327              	 .code 16
 1328              	 .thumb_func
 1330              	XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:
 1331              	.LFB80:
 766:../Libraries/XMCLib/src/xmc1_scu.c **** 
 767:../Libraries/XMCLib/src/xmc1_scu.c **** /* DCO1 clock frequency can be calibrated during runtime to achieve a better accuracy */
 768:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature(int32_t temperature)
 769:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1332              	 .loc 1 769 0
 1333              	 .cfi_startproc
 1334              	.LVL74:
 1335 0000 10B5     	 push {r4,lr}
 1336              	.LCFI7:
 1337              	 .cfi_def_cfa_offset 8
 1338              	 .cfi_offset 4,-8
 1339              	 .cfi_offset 14,-4
 770:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t a;
 771:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t b;
 772:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t d;
 773:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t e;
 774:../Libraries/XMCLib/src/xmc1_scu.c ****   int32_t offset;
 775:../Libraries/XMCLib/src/xmc1_scu.c **** 
 776:../Libraries/XMCLib/src/xmc1_scu.c ****   a = *((uint8_t*)DCO_ADJLO_T2);
 777:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1340              	 .loc 1 777 0
 1341 0002 104B     	 ldr r3,.L140
 1342 0004 1C78     	 ldrb r4,[r3]
 1343              	.LVL75:
 778:../Libraries/XMCLib/src/xmc1_scu.c ****   d = *((uint8_t*)ANA_TSE_T1);
 1344              	 .loc 1 778 0
 1345 0006 104B     	 ldr r3,.L140+4
 1346 0008 1978     	 ldrb r1,[r3]
 1347              	.LVL76:
 776:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1348              	 .loc 1 776 0
 1349 000a 104B     	 ldr r3,.L140+8
 1350              	.LVL77:
 779:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 780:../Libraries/XMCLib/src/xmc1_scu.c **** 
 781:../Libraries/XMCLib/src/xmc1_scu.c ****   offset = b + (((a - b) * (temperature - d)) / (e - d));
 1351              	 .loc 1 781 0
 1352 000c 401A     	 sub r0,r0,r1
 1353              	.LVL78:
 776:../Libraries/XMCLib/src/xmc1_scu.c ****   b = *((uint8_t*)DCO_ADJLO_T1);
 1354              	 .loc 1 776 0
 1355 000e 1B78     	 ldrb r3,[r3]
 1356              	.LVL79:
 1357              	 .loc 1 781 0
 1358 0010 1B1B     	 sub r3,r3,r4
 1359 0012 5843     	 mul r0,r3
 779:../Libraries/XMCLib/src/xmc1_scu.c ****   e = *((uint8_t*)ANA_TSE_T2);
 1360              	 .loc 1 779 0
 1361 0014 0E4B     	 ldr r3,.L140+12
 1362              	.LVL80:
 1363 0016 1B78     	 ldrb r3,[r3]
 1364              	.LVL81:
 1365              	 .loc 1 781 0
 1366 0018 591A     	 sub r1,r3,r1
 1367              	.LVL82:
 1368 001a FFF7FEFF 	 bl __aeabi_idiv
 1369              	.LVL83:
 1370              	.LBB84:
 1371              	.LBB85:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1372              	 .loc 1 378 0
 1373 001e C023     	 mov r3,#192
 1374              	.LBE85:
 1375              	.LBE84:
 1376              	 .loc 1 781 0
 1377 0020 0419     	 add r4,r0,r4
 1378              	.LVL84:
 782:../Libraries/XMCLib/src/xmc1_scu.c ****   offset &= SCU_ANALOG_ANAOFFSET_ADJL_OFFSET_Msk;
 1379              	 .loc 1 782 0
 1380 0022 0F20     	 mov r0,#15
 1381              	.LBB88:
 1382              	.LBB86:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1383              	 .loc 1 380 0
 1384 0024 0421     	 mov r1,#4
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1385              	 .loc 1 378 0
 1386 0026 0B4A     	 ldr r2,.L140+16
 1387              	.LBE86:
 1388              	.LBE88:
 1389              	 .loc 1 782 0
 1390 0028 0440     	 and r4,r0
 1391              	.LVL85:
 1392              	.LBB89:
 1393              	.LBB87:
 378:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1394              	 .loc 1 378 0
 1395 002a 5362     	 str r3,[r2,#36]
 1396              	.L138:
 380:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1397              	 .loc 1 380 0
 1398 002c 536A     	 ldr r3,[r2,#36]
 1399 002e 1942     	 tst r1,r3
 1400 0030 FCD1     	 bne .L138
 1401              	.LBE87:
 1402              	.LBE89:
 783:../Libraries/XMCLib/src/xmc1_scu.c **** 
 784:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_UnlockProtectedBits();
 785:../Libraries/XMCLib/src/xmc1_scu.c ****   SCU_ANALOG->ANAOFFSET = (uint16_t)offset;
 1403              	 .loc 1 785 0
 1404 0032 6C23     	 mov r3,#108
 1405 0034 084A     	 ldr r2,.L140+20
 1406 0036 A4B2     	 uxth r4,r4
 1407              	.LVL86:
 1408 0038 D452     	 strh r4,[r2,r3]
 1409              	.LBB90:
 1410              	.LBB91:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1411              	 .loc 1 372 0
 1412 003a C322     	 mov r2,#195
 1413 003c 054B     	 ldr r3,.L140+16
 1414              	.LBE91:
 1415              	.LBE90:
 786:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_LockProtectedBits();
 787:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1416              	 .loc 1 787 0
 1417              	 
 1418              	.LBB93:
 1419              	.LBB92:
 372:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1420              	 .loc 1 372 0
 1421 003e 5A62     	 str r2,[r3,#36]
 1422              	.LBE92:
 1423              	.LBE93:
 1424              	 .loc 1 787 0
 1425 0040 10BD     	 pop {r4,pc}
 1426              	.L141:
 1427 0042 C046     	 .align 2
 1428              	.L140:
 1429 0044 320F0010 	 .word 268439346
 1430 0048 300F0010 	 .word 268439344
 1431 004c 330F0010 	 .word 268439347
 1432 0050 310F0010 	 .word 268439345
 1433 0054 00000140 	 .word 1073807360
 1434 0058 00100140 	 .word 1073811456
 1435              	 .cfi_endproc
 1436              	.LFE80:
 1438              	 .section .text.XMC_SCU_INTERRUPT_SetEventHandler,"ax",%progbits
 1439              	 .align 2
 1440              	 .global XMC_SCU_INTERRUPT_SetEventHandler
 1441              	 .code 16
 1442              	 .thumb_func
 1444              	XMC_SCU_INTERRUPT_SetEventHandler:
 1445              	.LFB81:
 788:../Libraries/XMCLib/src/xmc1_scu.c **** 
 789:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 790:../Libraries/XMCLib/src/xmc1_scu.c ****  * API to assign the event handler function to be executed on occurrence of the selected event
 791:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 792:../Libraries/XMCLib/src/xmc1_scu.c **** XMC_SCU_STATUS_t XMC_SCU_INTERRUPT_SetEventHandler(XMC_SCU_INTERRUPT_EVENT_t event, XMC_SCU_INTERRU
 793:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1446              	 .loc 1 793 0
 1447              	 .cfi_startproc
 1448              	.LVL87:
 1449 0000 10B5     	 push {r4,lr}
 1450              	.LCFI8:
 1451              	 .cfi_def_cfa_offset 8
 1452              	 .cfi_offset 4,-8
 1453              	 .cfi_offset 14,-4
 794:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 795:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_STATUS_t status;
 796:../Libraries/XMCLib/src/xmc1_scu.c **** 
 797:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid event", XMC_SCU_INTERRUPT_IsValidEvent(eve
 798:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_INTERRUPT_SetEventHandler: Invalid handler", handler != NULL);
 799:../Libraries/XMCLib/src/xmc1_scu.c **** 
 800:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 801:../Libraries/XMCLib/src/xmc1_scu.c **** 
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   while (((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) == 0U) && (index < XMC_SCU_INTERRUPT_EV
 1454              	 .loc 1 802 0
 1455 0002 C307     	 lsl r3,r0,#31
 1456 0004 13D4     	 bmi .L147
 1457 0006 0023     	 mov r3,#0
 1458 0008 0124     	 mov r4,#1
 1459 000a 01E0     	 b .L145
 1460              	.LVL88:
 1461              	.L152:
 1462              	 .loc 1 802 0 is_stmt 0 discriminator 1
 1463 000c 202B     	 cmp r3,#32
 1464 000e 0CD0     	 beq .L151
 1465              	.LVL89:
 1466              	.L145:
 1467              	 .loc 1 802 0
 1468 0010 021C     	 mov r2,r0
 803:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 804:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1469              	 .loc 1 804 0 is_stmt 1
 1470 0012 0133     	 add r3,r3,#1
 1471              	.LVL90:
 802:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1472              	 .loc 1 802 0
 1473 0014 DA40     	 lsr r2,r2,r3
 1474 0016 1442     	 tst r4,r2
 1475 0018 F8D0     	 beq .L152
 805:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 806:../Libraries/XMCLib/src/xmc1_scu.c **** 
 807:../Libraries/XMCLib/src/xmc1_scu.c ****   if (index == XMC_SCU_INTERRUPT_EVENT_MAX)
 808:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 809:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_ERROR;
 1476              	 .loc 1 809 0
 1477 001a 0120     	 mov r0,#1
 1478              	.LVL91:
 807:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1479              	 .loc 1 807 0
 1480 001c 202B     	 cmp r3,#32
 1481 001e 03D0     	 beq .L146
 1482              	.LVL92:
 1483              	.L143:
 810:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 811:../Libraries/XMCLib/src/xmc1_scu.c ****   else
 812:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 813:../Libraries/XMCLib/src/xmc1_scu.c ****     event_handler_list[index] = handler;
 814:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 1484              	 .loc 1 814 0
 1485 0020 0020     	 mov r0,#0
 813:../Libraries/XMCLib/src/xmc1_scu.c ****     status = XMC_SCU_STATUS_OK;
 1486              	 .loc 1 813 0
 1487 0022 044A     	 ldr r2,.L153
 1488 0024 9B00     	 lsl r3,r3,#2
 1489 0026 9950     	 str r1,[r3,r2]
 1490              	.LVL93:
 1491              	.L146:
 815:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 816:../Libraries/XMCLib/src/xmc1_scu.c **** 
 817:../Libraries/XMCLib/src/xmc1_scu.c ****   return (status);
 818:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1492              	 .loc 1 818 0
 1493              	 
 1494 0028 10BD     	 pop {r4,pc}
 1495              	.LVL94:
 1496              	.L151:
 809:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 1497              	 .loc 1 809 0
 1498 002a 0120     	 mov r0,#1
 1499              	.LVL95:
 1500 002c FCE7     	 b .L146
 1501              	.LVL96:
 1502              	.L147:
 800:../Libraries/XMCLib/src/xmc1_scu.c **** 
 1503              	 .loc 1 800 0
 1504 002e 0023     	 mov r3,#0
 1505 0030 F6E7     	 b .L143
 1506              	.L154:
 1507 0032 C046     	 .align 2
 1508              	.L153:
 1509 0034 00000000 	 .word .LANCHOR0
 1510              	 .cfi_endproc
 1511              	.LFE81:
 1513              	 .section .text.XMC_SCU_IRQHandler,"ax",%progbits
 1514              	 .align 2
 1515              	 .global XMC_SCU_IRQHandler
 1516              	 .code 16
 1517              	 .thumb_func
 1519              	XMC_SCU_IRQHandler:
 1520              	.LFB82:
 819:../Libraries/XMCLib/src/xmc1_scu.c **** 
 820:../Libraries/XMCLib/src/xmc1_scu.c **** /*
 821:../Libraries/XMCLib/src/xmc1_scu.c ****  * A common function to execute callback functions for multiple events
 822:../Libraries/XMCLib/src/xmc1_scu.c ****  */
 823:../Libraries/XMCLib/src/xmc1_scu.c **** void XMC_SCU_IRQHandler(uint32_t sr_num)
 824:../Libraries/XMCLib/src/xmc1_scu.c **** {
 1521              	 .loc 1 824 0
 1522              	 .cfi_startproc
 1523              	.LVL97:
 1524 0000 F8B5     	 push {r3,r4,r5,r6,r7,lr}
 1525              	.LCFI9:
 1526              	 .cfi_def_cfa_offset 24
 1527              	 .cfi_offset 3,-24
 1528              	 .cfi_offset 4,-20
 1529              	 .cfi_offset 5,-16
 1530              	 .cfi_offset 6,-12
 1531              	 .cfi_offset 7,-8
 1532              	 .cfi_offset 14,-4
 825:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_ASSERT("XMC_SCU_IRQHandler: Invalid sr_num", sr_num < SCU_IRQ_NUM);
 826:../Libraries/XMCLib/src/xmc1_scu.c **** 
 827:../Libraries/XMCLib/src/xmc1_scu.c ****   uint32_t index;
 828:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_t event;
 829:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_EVENT_HANDLER_t event_handler;
 830:../Libraries/XMCLib/src/xmc1_scu.c **** 
 831:../Libraries/XMCLib/src/xmc1_scu.c ****   index = 0U;
 832:../Libraries/XMCLib/src/xmc1_scu.c ****   event = XMC_SCU_INTERUPT_GetEventStatus() & event_masks[sr_num];
 1533              	 .loc 1 832 0
 1534 0002 1049     	 ldr r1,.L172
 1535              	.LBB94:
 1536              	.LBB95:
 353:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 1537              	 .loc 1 353 0
 1538 0004 104B     	 ldr r3,.L172+4
 1539              	.LBE95:
 1540              	.LBE94:
 1541              	 .loc 1 832 0
 1542 0006 8000     	 lsl r0,r0,#2
 1543              	.LVL98:
 1544              	.LBB97:
 1545              	.LBB96:
 353:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 1546              	 .loc 1 353 0
 1547 0008 1A68     	 ldr r2,[r3]
 1548              	.LVL99:
 1549              	.LBE96:
 1550              	.LBE97:
 1551              	 .loc 1 832 0
 1552 000a 4558     	 ldr r5,[r0,r1]
 833:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 834:../Libraries/XMCLib/src/xmc1_scu.c **** 
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   while ((event != 0) && (index < XMC_SCU_INTERRUPT_EVENT_MAX))
 1553              	 .loc 1 835 0
 1554 000c 0024     	 mov r4,#0
 832:../Libraries/XMCLib/src/xmc1_scu.c ****   XMC_SCU_INTERRUPT_ClearEventStatus(event);
 1555              	 .loc 1 832 0
 1556 000e 1540     	 and r5,r2
 1557              	.LVL100:
 1558              	.LBB98:
 1559              	.LBB99:
 363:../Libraries/XMCLib/src/xmc1_scu.c **** #if UC_SERIES == XMC14
 1560              	 .loc 1 363 0
 1561 0010 9A68     	 ldr r2,[r3,#8]
 1562              	.LVL101:
 1563 0012 2A43     	 orr r2,r5
 1564 0014 9A60     	 str r2,[r3,#8]
 1565              	.LBE99:
 1566              	.LBE98:
 1567              	 .loc 1 835 0
 1568 0016 002D     	 cmp r5,#0
 1569 0018 13D0     	 beq .L155
 836:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 837:../Libraries/XMCLib/src/xmc1_scu.c ****     if ((event & ((XMC_SCU_INTERRUPT_EVENT_t)1 << index)) != 0U)
 1570              	 .loc 1 837 0
 1571 001a 0126     	 mov r6,#1
 838:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 839:../Libraries/XMCLib/src/xmc1_scu.c ****       event &= ~((XMC_SCU_INTERRUPT_EVENT_t)1 << index);
 840:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 1572              	 .loc 1 840 0
 1573 001c 0B4F     	 ldr r7,.L172+8
 1574 001e 01E0     	 b .L166
 1575              	.LVL102:
 1576              	.L171:
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1577              	 .loc 1 835 0 discriminator 1
 1578 0020 202C     	 cmp r4,#32
 1579 0022 0ED0     	 beq .L155
 1580              	.LVL103:
 1581              	.L166:
 837:../Libraries/XMCLib/src/xmc1_scu.c ****     {
 1582              	 .loc 1 837 0
 1583 0024 2B1C     	 mov r3,r5
 1584 0026 E340     	 lsr r3,r3,r4
 1585 0028 1E42     	 tst r6,r3
 1586 002a 07D0     	 beq .L157
 839:../Libraries/XMCLib/src/xmc1_scu.c ****       event_handler = event_handler_list[index];
 1587              	 .loc 1 839 0
 1588 002c 331C     	 mov r3,r6
 1589 002e A340     	 lsl r3,r3,r4
 1590 0030 9D43     	 bic r5,r3
 1591              	.LVL104:
 1592 0032 A300     	 lsl r3,r4,#2
 1593              	 .loc 1 840 0
 1594 0034 DB59     	 ldr r3,[r3,r7]
 1595              	.LVL105:
 841:../Libraries/XMCLib/src/xmc1_scu.c ****       if (event_handler != NULL)
 1596              	 .loc 1 841 0
 1597 0036 002B     	 cmp r3,#0
 1598 0038 00D0     	 beq .L157
 842:../Libraries/XMCLib/src/xmc1_scu.c ****       {
 843:../Libraries/XMCLib/src/xmc1_scu.c ****         event_handler();
 1599              	 .loc 1 843 0
 1600 003a 9847     	 blx r3
 1601              	.LVL106:
 1602              	.L157:
 844:../Libraries/XMCLib/src/xmc1_scu.c ****       }
 845:../Libraries/XMCLib/src/xmc1_scu.c **** 
 846:../Libraries/XMCLib/src/xmc1_scu.c ****       /* break; XMC1: Only PULSE interrupts */
 847:../Libraries/XMCLib/src/xmc1_scu.c ****     }
 848:../Libraries/XMCLib/src/xmc1_scu.c ****     index++;
 1603              	 .loc 1 848 0
 1604 003c 0134     	 add r4,r4,#1
 1605              	.LVL107:
 835:../Libraries/XMCLib/src/xmc1_scu.c ****   {
 1606              	 .loc 1 835 0
 1607 003e 002D     	 cmp r5,#0
 1608 0040 EED1     	 bne .L171
 1609              	.LVL108:
 1610              	.L155:
 849:../Libraries/XMCLib/src/xmc1_scu.c ****   }
 850:../Libraries/XMCLib/src/xmc1_scu.c **** }
 1611              	 .loc 1 850 0
 1612              	 
 1613              	.LVL109:
 1614 0042 F8BD     	 pop {r3,r4,r5,r6,r7,pc}
 1615              	.L173:
 1616              	 .align 2
 1617              	.L172:
 1618 0044 00000000 	 .word .LANCHOR1
 1619 0048 38000140 	 .word 1073807416
 1620 004c 00000000 	 .word .LANCHOR0
 1621              	 .cfi_endproc
 1622              	.LFE82:
 1624              	 .section .bss.event_handler_list,"aw",%nobits
 1625              	 .align 2
 1626              	 .set .LANCHOR0,.+0
 1629              	event_handler_list:
 1630 0000 00000000 	 .space 128
 1630      00000000 
 1630      00000000 
 1630      00000000 
 1630      00000000 
 1631              	 .section .rodata.event_masks,"a",%progbits
 1632              	 .align 2
 1633              	 .set .LANCHOR1,.+0
 1636              	event_masks:
 1637 0000 00001F00 	 .word 2031616
 1638 0004 8F0060FF 	 .word -10485617
 1639 0008 70FF0000 	 .word 65392
 1640              	 .text
 1641              	.Letext0:
 1642              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1643              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1644              	 .file 4 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 1645              	 .file 5 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/XMCLib/inc/xmc_scu.h"
 1646              	 .file 6 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/XMCLib/inc/xmc1_scu.h"
 1647              	 .file 7 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc1_scu.c
    {standard input}:18     .text.XMC_SCU_CalcTSEVAR:00000000 $t
    {standard input}:22     .text.XMC_SCU_CalcTSEVAR:00000000 XMC_SCU_CalcTSEVAR
    {standard input}:80     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 $t
    {standard input}:85     .text.XMC_SCU_INTERRUPT_EnableEvent:00000000 XMC_SCU_INTERRUPT_EnableEvent
    {standard input}:104    .text.XMC_SCU_INTERRUPT_EnableEvent:0000000c $d
    {standard input}:109    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 $t
    {standard input}:114    .text.XMC_SCU_INTERRUPT_DisableEvent:00000000 XMC_SCU_INTERRUPT_DisableEvent
    {standard input}:132    .text.XMC_SCU_INTERRUPT_DisableEvent:0000000c $d
    {standard input}:137    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 $t
    {standard input}:142    .text.XMC_SCU_INTERRUPT_TriggerEvent:00000000 XMC_SCU_INTERRUPT_TriggerEvent
    {standard input}:161    .text.XMC_SCU_INTERRUPT_TriggerEvent:0000000c $d
    {standard input}:166    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 $t
    {standard input}:171    .text.XMC_SCU_INTERUPT_GetEventStatus:00000000 XMC_SCU_INTERUPT_GetEventStatus
    {standard input}:187    .text.XMC_SCU_INTERUPT_GetEventStatus:00000008 $d
    {standard input}:192    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 $t
    {standard input}:197    .text.XMC_SCU_INTERRUPT_ClearEventStatus:00000000 XMC_SCU_INTERRUPT_ClearEventStatus
    {standard input}:216    .text.XMC_SCU_INTERRUPT_ClearEventStatus:0000000c $d
    {standard input}:221    .text.XMC_SCU_LockProtectedBits:00000000 $t
    {standard input}:226    .text.XMC_SCU_LockProtectedBits:00000000 XMC_SCU_LockProtectedBits
    {standard input}:242    .text.XMC_SCU_LockProtectedBits:00000008 $d
    {standard input}:247    .text.XMC_SCU_UnlockProtectedBits:00000000 $t
    {standard input}:252    .text.XMC_SCU_UnlockProtectedBits:00000000 XMC_SCU_UnlockProtectedBits
    {standard input}:274    .text.XMC_SCU_UnlockProtectedBits:00000010 $d
    {standard input}:279    .text.XMC_SCU_SupplyMonitorInit:00000000 $t
    {standard input}:284    .text.XMC_SCU_SupplyMonitorInit:00000000 XMC_SCU_SupplyMonitorInit
    {standard input}:353    .text.XMC_SCU_SupplyMonitorInit:00000044 $d
    {standard input}:359    .text.XMC_SCU_SetTempLowLimit:00000000 $t
    {standard input}:364    .text.XMC_SCU_SetTempLowLimit:00000000 XMC_SCU_SetTempLowLimit
    {standard input}:398    .text.XMC_SCU_SetTempLowLimit:00000018 $d
    {standard input}:403    .text.XMC_SCU_SetTempHighLimit:00000000 $t
    {standard input}:408    .text.XMC_SCU_SetTempHighLimit:00000000 XMC_SCU_SetTempHighLimit
    {standard input}:442    .text.XMC_SCU_SetTempHighLimit:00000018 $d
    {standard input}:447    .text.XMC_SCU_SetRawTempLimits:00000000 $t
    {standard input}:452    .text.XMC_SCU_SetRawTempLimits:00000000 XMC_SCU_SetRawTempLimits
    {standard input}:475    .text.XMC_SCU_SetRawTempLimits:0000000c $d
    {standard input}:480    .text.XMC_SCU_StartTempMeasurement:00000000 $t
    {standard input}:485    .text.XMC_SCU_StartTempMeasurement:00000000 XMC_SCU_StartTempMeasurement
    {standard input}:503    .text.XMC_SCU_StartTempMeasurement:0000000c $d
    {standard input}:508    .text.XMC_SCU_StopTempMeasurement:00000000 $t
    {standard input}:513    .text.XMC_SCU_StopTempMeasurement:00000000 XMC_SCU_StopTempMeasurement
    {standard input}:531    .text.XMC_SCU_StopTempMeasurement:0000000c $d
    {standard input}:536    .text.XMC_SCU_HighTemperature:00000000 $t
    {standard input}:541    .text.XMC_SCU_HighTemperature:00000000 XMC_SCU_HighTemperature
    {standard input}:558    .text.XMC_SCU_HighTemperature:0000000c $d
    {standard input}:563    .text.XMC_SCU_LowTemperature:00000000 $t
    {standard input}:568    .text.XMC_SCU_LowTemperature:00000000 XMC_SCU_LowTemperature
    {standard input}:584    .text.XMC_SCU_LowTemperature:00000008 $d
    {standard input}:589    .text.XMC_SCU_GetTemperature:00000000 $t
    {standard input}:594    .text.XMC_SCU_GetTemperature:00000000 XMC_SCU_GetTemperature
    {standard input}:612    .text.XMC_SCU_GetTemperature:0000000c $d
    {standard input}:617    .text.XMC_SCU_CalcTemperature:00000000 $t
    {standard input}:622    .text.XMC_SCU_CalcTemperature:00000000 XMC_SCU_CalcTemperature
    {standard input}:644    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 $t
    {standard input}:649    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000000 XMC_SCU_CLOCK_SetRtcClockSource
    {standard input}:694    .text.XMC_SCU_CLOCK_SetRtcClockSource:00000024 $d
    {standard input}:701    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 $t
    {standard input}:706    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000000 XMC_SCU_CLOCK_SetFastPeripheralClockSource
    {standard input}:751    .text.XMC_SCU_CLOCK_SetFastPeripheralClockSource:00000024 $d
    {standard input}:758    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 $t
    {standard input}:763    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000000 XMC_SCU_CLOCK_GatePeripheralClock
    {standard input}:806    .text.XMC_SCU_CLOCK_GatePeripheralClock:00000020 $d
    {standard input}:812    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 $t
    {standard input}:817    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000000 XMC_SCU_CLOCK_UngatePeripheralClock
    {standard input}:874    .text.XMC_SCU_CLOCK_UngatePeripheralClock:00000028 $d
    {standard input}:880    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 $t
    {standard input}:885    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000000 XMC_SCU_CLOCK_IsPeripheralClockGated
    {standard input}:906    .text.XMC_SCU_CLOCK_IsPeripheralClockGated:00000010 $d
    {standard input}:911    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 $t
    {standard input}:916    .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:00000000 XMC_SCU_CLOCK_ScaleMCLKFrequency
    {standard input}:1117   .text.XMC_SCU_CLOCK_ScaleMCLKFrequency:000000bc $d
    {standard input}:1128   .text.XMC_SCU_CLOCK_Init:00000000 $t
    {standard input}:1133   .text.XMC_SCU_CLOCK_Init:00000000 XMC_SCU_CLOCK_Init
    {standard input}:1205   .text.XMC_SCU_CLOCK_Init:00000034 $d
    {standard input}:1213   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 $t
    {standard input}:1218   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000000 XMC_SCU_CLOCK_SetMCLKFrequency
    {standard input}:1262   .text.XMC_SCU_CLOCK_SetMCLKFrequency:00000024 $d
    {standard input}:1267   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 $t
    {standard input}:1272   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetPeripheralClockFrequency
    {standard input}:1287   .text.XMC_SCU_CLOCK_GetPeripheralClockFrequency:00000008 $d
    {standard input}:1292   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 $t
    {standard input}:1297   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000000 XMC_SCU_CLOCK_GetFastPeripheralClockFrequency
    {standard input}:1318   .text.XMC_SCU_CLOCK_GetFastPeripheralClockFrequency:00000014 $d
    {standard input}:1325   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 $t
    {standard input}:1330   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000000 XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature
    {standard input}:1429   .text.XMC_SCU_CLOCK_CalibrateOscillatorOnTemperature:00000044 $d
    {standard input}:1439   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 $t
    {standard input}:1444   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000000 XMC_SCU_INTERRUPT_SetEventHandler
    {standard input}:1509   .text.XMC_SCU_INTERRUPT_SetEventHandler:00000034 $d
    {standard input}:1514   .text.XMC_SCU_IRQHandler:00000000 $t
    {standard input}:1519   .text.XMC_SCU_IRQHandler:00000000 XMC_SCU_IRQHandler
    {standard input}:1618   .text.XMC_SCU_IRQHandler:00000044 $d
    {standard input}:1625   .bss.event_handler_list:00000000 $d
    {standard input}:1629   .bss.event_handler_list:00000000 event_handler_list
    {standard input}:1632   .rodata.event_masks:00000000 $d
    {standard input}:1636   .rodata.event_masks:00000000 event_masks
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SystemCoreClockUpdate
__aeabi_uidiv
SystemCoreClock
__aeabi_idiv
