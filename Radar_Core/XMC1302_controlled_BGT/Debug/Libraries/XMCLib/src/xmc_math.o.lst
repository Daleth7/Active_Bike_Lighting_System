   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,2
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "xmc_math.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.XMC_MATH_DIV_IsBusy,"ax",%progbits
  18              	 .align 2
  19              	 .global XMC_MATH_DIV_IsBusy
  20              	 .code 16
  21              	 .thumb_func
  23              	XMC_MATH_DIV_IsBusy:
  24              	.LFB67:
  25              	 .file 1 "../Libraries/XMCLib/src/xmc_math.c"
   1:../Libraries/XMCLib/src/xmc_math.c **** 
   2:../Libraries/XMCLib/src/xmc_math.c **** /**
   3:../Libraries/XMCLib/src/xmc_math.c ****  * @file xmc_math.c
   4:../Libraries/XMCLib/src/xmc_math.c ****  * @date 2015-10-08
   5:../Libraries/XMCLib/src/xmc_math.c ****  *
   6:../Libraries/XMCLib/src/xmc_math.c ****  * @cond
   7:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
   8:../Libraries/XMCLib/src/xmc_math.c ****  * XMClib v2.1.6 - XMC Peripheral Driver Library 
   9:../Libraries/XMCLib/src/xmc_math.c ****  *
  10:../Libraries/XMCLib/src/xmc_math.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  11:../Libraries/XMCLib/src/xmc_math.c ****  * All rights reserved.                        
  12:../Libraries/XMCLib/src/xmc_math.c ****  *                                             
  13:../Libraries/XMCLib/src/xmc_math.c ****  * Redistribution and use in source and binary forms, with or without           
  14:../Libraries/XMCLib/src/xmc_math.c ****  * modification,are permitted provided that the following conditions are met:   
  15:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  16:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions of source code must retain the above copyright notice,      
  17:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer.                        
  18:../Libraries/XMCLib/src/xmc_math.c ****  * 
  19:../Libraries/XMCLib/src/xmc_math.c ****  *   Redistributions in binary form must reproduce the above copyright notice,   
  20:../Libraries/XMCLib/src/xmc_math.c ****  *   this list of conditions and the following disclaimer in the documentation    
  21:../Libraries/XMCLib/src/xmc_math.c ****  *   and/or other materials provided with the distribution.                       
  22:../Libraries/XMCLib/src/xmc_math.c ****  * 
  23:../Libraries/XMCLib/src/xmc_math.c ****  *   Neither the name of the copyright holders nor the names of its contributors 
  24:../Libraries/XMCLib/src/xmc_math.c ****  *   may be used to endorse or promote products derived from this software without
  25:../Libraries/XMCLib/src/xmc_math.c ****  *   specific prior written permission.                                           
  26:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  27:../Libraries/XMCLib/src/xmc_math.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  
  28:../Libraries/XMCLib/src/xmc_math.c ****  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    
  29:../Libraries/XMCLib/src/xmc_math.c ****  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
  30:../Libraries/XMCLib/src/xmc_math.c ****  * ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   
  31:../Libraries/XMCLib/src/xmc_math.c ****  * LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         
  32:../Libraries/XMCLib/src/xmc_math.c ****  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         
  33:../Libraries/XMCLib/src/xmc_math.c ****  * SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    
  34:../Libraries/XMCLib/src/xmc_math.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      
  35:../Libraries/XMCLib/src/xmc_math.c ****  * CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       
  36:../Libraries/XMCLib/src/xmc_math.c ****  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   
  37:../Libraries/XMCLib/src/xmc_math.c ****  * POSSIBILITY OF SUCH DAMAGE.                                                  
  38:../Libraries/XMCLib/src/xmc_math.c ****  *                                                                              
  39:../Libraries/XMCLib/src/xmc_math.c ****  * To improve the quality of the software, users are encouraged to share        
  40:../Libraries/XMCLib/src/xmc_math.c ****  * modifications, enhancements or bug fixes with Infineon Technologies AG       
  41:../Libraries/XMCLib/src/xmc_math.c ****  * dave@infineon.com).                                                          
  42:../Libraries/XMCLib/src/xmc_math.c ****  **********************************************************************************
  43:../Libraries/XMCLib/src/xmc_math.c ****  *
  44:../Libraries/XMCLib/src/xmc_math.c ****  * Change History
  45:../Libraries/XMCLib/src/xmc_math.c ****  * --------------
  46:../Libraries/XMCLib/src/xmc_math.c ****  *
  47:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-06-20: 
  48:../Libraries/XMCLib/src/xmc_math.c ****  *     - Removed version macros and declaration of GetDriverVersion API <br>
  49:../Libraries/XMCLib/src/xmc_math.c ****  *     - Updated copyright and change history section.
  50:../Libraries/XMCLib/src/xmc_math.c ****  *
  51:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-09-23: 
  52:../Libraries/XMCLib/src/xmc_math.c ****  *     - Added SQRT functions
  53:../Libraries/XMCLib/src/xmc_math.c ****  *
  54:../Libraries/XMCLib/src/xmc_math.c ****  * 2015-10-08:
  55:../Libraries/XMCLib/src/xmc_math.c ****  *     - Return values for sin(), cos(), sinh(), cosh(), arctan() are corrected.
  56:../Libraries/XMCLib/src/xmc_math.c ****  *
  57:../Libraries/XMCLib/src/xmc_math.c ****  * @endcond
  58:../Libraries/XMCLib/src/xmc_math.c ****  *
  59:../Libraries/XMCLib/src/xmc_math.c ****  */
  60:../Libraries/XMCLib/src/xmc_math.c **** 
  61:../Libraries/XMCLib/src/xmc_math.c **** /**
  62:../Libraries/XMCLib/src/xmc_math.c ****  *
  63:../Libraries/XMCLib/src/xmc_math.c ****  * @brief MATH driver - API implementation for XMC13 family MATH libraries. <br>
  64:../Libraries/XMCLib/src/xmc_math.c ****  * 
  65:../Libraries/XMCLib/src/xmc_math.c ****  * <b>Detailed description of file</b> <br>
  66:../Libraries/XMCLib/src/xmc_math.c ****  * APIs provided in this file cover the following functional blocks of MATH: <br>
  67:../Libraries/XMCLib/src/xmc_math.c ****  *
  68:../Libraries/XMCLib/src/xmc_math.c ****  */
  69:../Libraries/XMCLib/src/xmc_math.c **** 
  70:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  71:../Libraries/XMCLib/src/xmc_math.c ****  * HEADER FILES
  72:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  73:../Libraries/XMCLib/src/xmc_math.c **** #include <xmc_math.h>
  74:../Libraries/XMCLib/src/xmc_math.c **** 
  75:../Libraries/XMCLib/src/xmc_math.c **** #if defined (MATH)
  76:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  77:../Libraries/XMCLib/src/xmc_math.c ****  * MACROS
  78:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  79:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Circular gain in XMC_MATH_Q0_23_t format ((2^23)/1.646760258121) */
  80:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023       (0x4DBA76U)
  81:../Libraries/XMCLib/src/xmc_math.c **** /* Reciprocal of Hyperbolic gain in XMC_MATH_Q1_22_t format ((2^22)/0.828159360960) */
  82:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22    (0x4D47A1U)
  83:../Libraries/XMCLib/src/xmc_math.c **** /* Signed division is selected */
  84:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_SIGNED_DIVISION                      ((uint32_t) 0 << MATH_DIVCON_USIGN_Pos)
  85:../Libraries/XMCLib/src/xmc_math.c **** /* Unsigned division is selected */
  86:../Libraries/XMCLib/src/xmc_math.c **** #define XMC_MATH_UNSIGNED_DIVISION                    ((uint32_t) 1 << MATH_DIVCON_USIGN_Pos)
  87:../Libraries/XMCLib/src/xmc_math.c **** 
  88:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  89:../Libraries/XMCLib/src/xmc_math.c ****  * ENUMS
  90:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  91:../Libraries/XMCLib/src/xmc_math.c **** 
  92:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  93:../Libraries/XMCLib/src/xmc_math.c ****  * GLOBAL DATA
  94:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  95:../Libraries/XMCLib/src/xmc_math.c **** 
  96:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
  97:../Libraries/XMCLib/src/xmc_math.c ****  * DATA STRUCTURES
  98:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
  99:../Libraries/XMCLib/src/xmc_math.c **** 
 100:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 101:../Libraries/XMCLib/src/xmc_math.c ****  * LOCAL ROUTINES
 102:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 103:../Libraries/XMCLib/src/xmc_math.c **** 
 104:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 105:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Utility functions
 106:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 107:../Libraries/XMCLib/src/xmc_math.c **** 
 108:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the DIV unit is busy */
 109:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_DIV_IsBusy(void)
 110:../Libraries/XMCLib/src/xmc_math.c **** {
  26              	 .loc 1 110 0
  27              	 .cfi_startproc
 111:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 112:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->DIVST & MATH_DIVST_BSY_Msk)
 113:../Libraries/XMCLib/src/xmc_math.c ****   {
 114:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* DIV unit is busy running a division operation */ 
 115:../Libraries/XMCLib/src/xmc_math.c ****   }
 116:../Libraries/XMCLib/src/xmc_math.c ****   else
 117:../Libraries/XMCLib/src/xmc_math.c ****   {
 118:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* DIV unit is idle */ 
 119:../Libraries/XMCLib/src/xmc_math.c ****   }
 120:../Libraries/XMCLib/src/xmc_math.c **** 
 121:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
  28              	 .loc 1 121 0
  29 0000 0120     	 mov r0,#1
 112:../Libraries/XMCLib/src/xmc_math.c ****   {
  30              	 .loc 1 112 0
  31 0002 024B     	 ldr r3,.L2
 122:../Libraries/XMCLib/src/xmc_math.c **** }
  32              	 .loc 1 122 0
  33              	 
 112:../Libraries/XMCLib/src/xmc_math.c ****   {
  34              	 .loc 1 112 0
  35 0004 1B6B     	 ldr r3,[r3,#48]
  36              	.LVL0:
 121:../Libraries/XMCLib/src/xmc_math.c **** }
  37              	 .loc 1 121 0
  38 0006 1840     	 and r0,r3
  39              	 .loc 1 122 0
  40 0008 7047     	 bx lr
  41              	.L3:
  42 000a C046     	 .align 2
  43              	.L2:
  44 000c 00000340 	 .word 1073938432
  45              	 .cfi_endproc
  46              	.LFE67:
  48              	 .section .text.XMC_MATH_CORDIC_IsBusy,"ax",%progbits
  49              	 .align 2
  50              	 .global XMC_MATH_CORDIC_IsBusy
  51              	 .code 16
  52              	 .thumb_func
  54              	XMC_MATH_CORDIC_IsBusy:
  55              	.LFB68:
 123:../Libraries/XMCLib/src/xmc_math.c **** 
 124:../Libraries/XMCLib/src/xmc_math.c **** /* Utility function to check if the CORDIC unit is busy */
 125:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_CORDIC_IsBusy(void)
 126:../Libraries/XMCLib/src/xmc_math.c **** {
  56              	 .loc 1 126 0
  57              	 .cfi_startproc
 127:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 128:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->STATC & MATH_STATC_BSY_Msk)
 129:../Libraries/XMCLib/src/xmc_math.c ****   {
 130:../Libraries/XMCLib/src/xmc_math.c ****     status = true;  /* CORDIC unit is busy running an operation */  
 131:../Libraries/XMCLib/src/xmc_math.c ****   }
 132:../Libraries/XMCLib/src/xmc_math.c ****   else
 133:../Libraries/XMCLib/src/xmc_math.c ****   {
 134:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* CORDIC unit is idle */   
 135:../Libraries/XMCLib/src/xmc_math.c ****   }
 136:../Libraries/XMCLib/src/xmc_math.c **** 
 137:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
  58              	 .loc 1 137 0
  59 0000 0120     	 mov r0,#1
 128:../Libraries/XMCLib/src/xmc_math.c ****   {
  60              	 .loc 1 128 0
  61 0002 024B     	 ldr r3,.L5
 138:../Libraries/XMCLib/src/xmc_math.c **** }
  62              	 .loc 1 138 0
  63              	 
 128:../Libraries/XMCLib/src/xmc_math.c ****   {
  64              	 .loc 1 128 0
  65 0004 1B6C     	 ldr r3,[r3,#64]
  66              	.LVL1:
 137:../Libraries/XMCLib/src/xmc_math.c **** }
  67              	 .loc 1 137 0
  68 0006 1840     	 and r0,r3
  69              	 .loc 1 138 0
  70 0008 7047     	 bx lr
  71              	.L6:
  72 000a C046     	 .align 2
  73              	.L5:
  74 000c 00000340 	 .word 1073938432
  75              	 .cfi_endproc
  76              	.LFE68:
  78              	 .section .text.XMC_MATH_GetEventStatus,"ax",%progbits
  79              	 .align 2
  80              	 .global XMC_MATH_GetEventStatus
  81              	 .code 16
  82              	 .thumb_func
  84              	XMC_MATH_GetEventStatus:
  85              	.LFB69:
 139:../Libraries/XMCLib/src/xmc_math.c **** 
 140:../Libraries/XMCLib/src/xmc_math.c **** /* This functions returns the status of a requested event */
 141:../Libraries/XMCLib/src/xmc_math.c **** bool XMC_MATH_GetEventStatus(const XMC_MATH_EVENT_t event)
 142:../Libraries/XMCLib/src/xmc_math.c **** {
  86              	 .loc 1 142 0
  87              	 .cfi_startproc
  88              	.LVL2:
 143:../Libraries/XMCLib/src/xmc_math.c ****   bool status;
 144:../Libraries/XMCLib/src/xmc_math.c ****   if (MATH->EVFR & (uint32_t) event)
  89              	 .loc 1 144 0
  90 0000 034B     	 ldr r3,.L8
 145:../Libraries/XMCLib/src/xmc_math.c ****   {
 146:../Libraries/XMCLib/src/xmc_math.c ****     status = true; /* Requested event has been detected */
 147:../Libraries/XMCLib/src/xmc_math.c ****   }
 148:../Libraries/XMCLib/src/xmc_math.c ****   else
 149:../Libraries/XMCLib/src/xmc_math.c ****   {
 150:../Libraries/XMCLib/src/xmc_math.c ****     status = false; /* Requested event has not been detected */
 151:../Libraries/XMCLib/src/xmc_math.c ****   }
 152:../Libraries/XMCLib/src/xmc_math.c ****   return (status);
 153:../Libraries/XMCLib/src/xmc_math.c **** }
  91              	 .loc 1 153 0
  92              	 
 144:../Libraries/XMCLib/src/xmc_math.c ****   {
  93              	 .loc 1 144 0
  94 0002 1B69     	 ldr r3,[r3,#16]
  95              	.LVL3:
  96 0004 1840     	 and r0,r3
  97              	.LVL4:
  98 0006 431E     	 sub r3,r0,#1
  99 0008 9841     	 sbc r0,r0,r3
 100              	.LVL5:
 152:../Libraries/XMCLib/src/xmc_math.c **** }
 101              	 .loc 1 152 0
 102 000a C0B2     	 uxtb r0,r0
 103              	 .loc 1 153 0
 104 000c 7047     	 bx lr
 105              	.L9:
 106 000e C046     	 .align 2
 107              	.L8:
 108 0010 00000340 	 .word 1073938432
 109              	 .cfi_endproc
 110              	.LFE69:
 112              	 .section .text.__aeabi_uidiv,"ax",%progbits
 113              	 .align 2
 114              	 .global __aeabi_uidiv
 115              	 .code 16
 116              	 .thumb_func
 118              	__aeabi_uidiv:
 119              	.LFB70:
 154:../Libraries/XMCLib/src/xmc_math.c **** 
 155:../Libraries/XMCLib/src/xmc_math.c **** #ifndef XMC_MATH_DISABLE_DIV_ABI
 156:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 157:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - aeabi routines
 158:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 159:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division */
 160:../Libraries/XMCLib/src/xmc_math.c **** uint32_t __aeabi_uidiv(uint32_t dividend, uint32_t divisor)
 161:../Libraries/XMCLib/src/xmc_math.c **** {
 120              	 .loc 1 161 0
 121              	 .cfi_startproc
 122              	.LVL6:
 162:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 123              	 .loc 1 162 0
 124 0000 0422     	 mov r2,#4
 125 0002 034B     	 ldr r3,.L11
 163:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 164:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 165:../Libraries/XMCLib/src/xmc_math.c **** 
 166:../Libraries/XMCLib/src/xmc_math.c ****   return ((uint32_t) MATH->QUOT);
 167:../Libraries/XMCLib/src/xmc_math.c **** }
 126              	 .loc 1 167 0
 127              	 
 162:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 128              	 .loc 1 162 0
 129 0004 5A63     	 str r2,[r3,#52]
 163:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 130              	 .loc 1 163 0
 131 0006 1862     	 str r0,[r3,#32]
 164:../Libraries/XMCLib/src/xmc_math.c **** 
 132              	 .loc 1 164 0
 133 0008 5962     	 str r1,[r3,#36]
 166:../Libraries/XMCLib/src/xmc_math.c **** }
 134              	 .loc 1 166 0
 135 000a 986A     	 ldr r0,[r3,#40]
 136              	.LVL7:
 137              	 .loc 1 167 0
 138 000c 7047     	 bx lr
 139              	.L12:
 140 000e C046     	 .align 2
 141              	.L11:
 142 0010 00000340 	 .word 1073938432
 143              	 .cfi_endproc
 144              	.LFE70:
 146              	 .section .text.__aeabi_idiv,"ax",%progbits
 147              	 .align 2
 148              	 .global __aeabi_idiv
 149              	 .code 16
 150              	 .thumb_func
 152              	__aeabi_idiv:
 153              	.LFB71:
 168:../Libraries/XMCLib/src/xmc_math.c **** 
 169:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division */
 170:../Libraries/XMCLib/src/xmc_math.c **** int32_t __aeabi_idiv(int32_t dividend, int32_t divisor)
 171:../Libraries/XMCLib/src/xmc_math.c **** {
 154              	 .loc 1 171 0
 155              	 .cfi_startproc
 156              	.LVL8:
 172:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 157              	 .loc 1 172 0
 158 0000 0022     	 mov r2,#0
 159 0002 034B     	 ldr r3,.L14
 173:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 174:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 175:../Libraries/XMCLib/src/xmc_math.c **** 
 176:../Libraries/XMCLib/src/xmc_math.c ****   return ((int32_t) MATH->QUOT);
 177:../Libraries/XMCLib/src/xmc_math.c **** }
 160              	 .loc 1 177 0
 161              	 
 172:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 162              	 .loc 1 172 0
 163 0004 5A63     	 str r2,[r3,#52]
 173:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 164              	 .loc 1 173 0
 165 0006 1862     	 str r0,[r3,#32]
 174:../Libraries/XMCLib/src/xmc_math.c **** 
 166              	 .loc 1 174 0
 167 0008 5962     	 str r1,[r3,#36]
 176:../Libraries/XMCLib/src/xmc_math.c **** }
 168              	 .loc 1 176 0
 169 000a 986A     	 ldr r0,[r3,#40]
 170              	.LVL9:
 171              	 .loc 1 177 0
 172 000c 7047     	 bx lr
 173              	.L15:
 174 000e C046     	 .align 2
 175              	.L14:
 176 0010 00000340 	 .word 1073938432
 177              	 .cfi_endproc
 178              	.LFE71:
 180              	 .section .text.__aeabi_uidivmod,"ax",%progbits
 181              	 .align 2
 182              	 .global __aeabi_uidivmod
 183              	 .code 16
 184              	 .thumb_func
 186              	__aeabi_uidivmod:
 187              	.LFB72:
 178:../Libraries/XMCLib/src/xmc_math.c **** 
 179:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs unsigned integer division modulo */
 180:../Libraries/XMCLib/src/xmc_math.c **** uint64_t __aeabi_uidivmod(uint32_t dividend, uint32_t divisor)
 181:../Libraries/XMCLib/src/xmc_math.c **** {
 188              	 .loc 1 181 0
 189              	 .cfi_startproc
 190              	.LVL10:
 182:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 183:../Libraries/XMCLib/src/xmc_math.c **** 
 184:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_UNSIGNED_DIVISION;
 191              	 .loc 1 184 0
 192 0000 0422     	 mov r2,#4
 193 0002 034B     	 ldr r3,.L17
 185:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 186:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 187:../Libraries/XMCLib/src/xmc_math.c **** 
 188:../Libraries/XMCLib/src/xmc_math.c ****   remainder = ((uint64_t) MATH->RMD) << 32U;
 189:../Libraries/XMCLib/src/xmc_math.c ****   return (remainder | MATH->QUOT);
 190:../Libraries/XMCLib/src/xmc_math.c **** }
 194              	 .loc 1 190 0
 195              	 
 184:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 196              	 .loc 1 184 0
 197 0004 5A63     	 str r2,[r3,#52]
 185:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 198              	 .loc 1 185 0
 199 0006 1862     	 str r0,[r3,#32]
 186:../Libraries/XMCLib/src/xmc_math.c **** 
 200              	 .loc 1 186 0
 201 0008 5962     	 str r1,[r3,#36]
 188:../Libraries/XMCLib/src/xmc_math.c ****   return (remainder | MATH->QUOT);
 202              	 .loc 1 188 0
 203 000a D96A     	 ldr r1,[r3,#44]
 204              	.LVL11:
 189:../Libraries/XMCLib/src/xmc_math.c **** }
 205              	 .loc 1 189 0
 206 000c 986A     	 ldr r0,[r3,#40]
 207              	.LVL12:
 208              	 .loc 1 190 0
 209 000e 7047     	 bx lr
 210              	.L18:
 211              	 .align 2
 212              	.L17:
 213 0010 00000340 	 .word 1073938432
 214              	 .cfi_endproc
 215              	.LFE72:
 217              	 .section .text.__aeabi_idivmod,"ax",%progbits
 218              	 .align 2
 219              	 .global __aeabi_idivmod
 220              	 .code 16
 221              	 .thumb_func
 223              	__aeabi_idivmod:
 224              	.LFB73:
 191:../Libraries/XMCLib/src/xmc_math.c **** 
 192:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs signed integer division modulo */
 193:../Libraries/XMCLib/src/xmc_math.c **** int64_t __aeabi_idivmod(int32_t dividend, int32_t divisor)
 194:../Libraries/XMCLib/src/xmc_math.c **** {
 225              	 .loc 1 194 0
 226              	 .cfi_startproc
 227              	.LVL13:
 195:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t remainder;
 196:../Libraries/XMCLib/src/xmc_math.c ****   uint64_t result;
 197:../Libraries/XMCLib/src/xmc_math.c **** 
 198:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON  = XMC_MATH_SIGNED_DIVISION;
 228              	 .loc 1 198 0
 229 0000 0022     	 mov r2,#0
 230 0002 034B     	 ldr r3,.L20
 199:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 200:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS     = divisor;
 201:../Libraries/XMCLib/src/xmc_math.c **** 
 202:../Libraries/XMCLib/src/xmc_math.c ****   remainder = ((uint64_t) MATH->RMD) << 32U;
 203:../Libraries/XMCLib/src/xmc_math.c ****   result    = (remainder | MATH->QUOT);
 204:../Libraries/XMCLib/src/xmc_math.c ****   return ((int64_t) result);
 205:../Libraries/XMCLib/src/xmc_math.c **** }
 231              	 .loc 1 205 0
 232              	 
 198:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 233              	 .loc 1 198 0
 234 0004 5A63     	 str r2,[r3,#52]
 199:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD     = dividend;
 235              	 .loc 1 199 0
 236 0006 1862     	 str r0,[r3,#32]
 200:../Libraries/XMCLib/src/xmc_math.c **** 
 237              	 .loc 1 200 0
 238 0008 5962     	 str r1,[r3,#36]
 202:../Libraries/XMCLib/src/xmc_math.c ****   result    = (remainder | MATH->QUOT);
 239              	 .loc 1 202 0
 240 000a D96A     	 ldr r1,[r3,#44]
 241              	.LVL14:
 203:../Libraries/XMCLib/src/xmc_math.c ****   return ((int64_t) result);
 242              	 .loc 1 203 0
 243 000c 986A     	 ldr r0,[r3,#40]
 244              	.LVL15:
 245              	 .loc 1 205 0
 246 000e 7047     	 bx lr
 247              	.L21:
 248              	 .align 2
 249              	.L20:
 250 0010 00000340 	 .word 1073938432
 251              	 .cfi_endproc
 252              	.LFE73:
 254              	 .section .text.XMC_MATH_CORDIC_Cos,"ax",%progbits
 255              	 .align 2
 256              	 .global XMC_MATH_CORDIC_Cos
 257              	 .code 16
 258              	 .thumb_func
 260              	XMC_MATH_CORDIC_Cos:
 261              	.LFB74:
 206:../Libraries/XMCLib/src/xmc_math.c **** #endif
 207:../Libraries/XMCLib/src/xmc_math.c **** 
 208:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 209:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Blocking functions
 210:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 211:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 212:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Cos(XMC_MATH_Q0_23_t angle_in_radians)
 213:../Libraries/XMCLib/src/xmc_math.c **** {
 262              	 .loc 1 213 0
 263              	 .cfi_startproc
 264              	.LVL16:
 214:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 215:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 265              	 .loc 1 215 0
 266 0000 0022     	 mov r2,#0
 216:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 267              	 .loc 1 216 0
 268 0002 0A21     	 mov r1,#10
 215:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 269              	 .loc 1 215 0
 270 0004 054B     	 ldr r3,.L23
 217:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 218:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 271              	 .loc 1 218 0
 272 0006 0002     	 lsl r0,r0,#8
 273              	.LVL17:
 215:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 274              	 .loc 1 215 0
 275 0008 1A64     	 str r2,[r3,#64]
 216:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 276              	 .loc 1 216 0
 277 000a 5964     	 str r1,[r3,#68]
 278              	 .loc 1 218 0
 279 000c 1865     	 str r0,[r3,#80]
 219:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 280              	 .loc 1 219 0
 281 000e DA64     	 str r2,[r3,#76]
 220:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 282              	 .loc 1 220 0
 283 0010 034A     	 ldr r2,.L23+4
 221:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 222:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 223:../Libraries/XMCLib/src/xmc_math.c **** }
 284              	 .loc 1 223 0
 285              	 
 220:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 286              	 .loc 1 220 0
 287 0012 9A64     	 str r2,[r3,#72]
 221:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 288              	 .loc 1 221 0
 289 0014 586D     	 ldr r0,[r3,#84]
 290              	.LVL18:
 291 0016 0012     	 asr r0,r0,#8
 292              	.LVL19:
 293              	 .loc 1 223 0
 294 0018 7047     	 bx lr
 295              	.L24:
 296 001a C046     	 .align 2
 297              	.L23:
 298 001c 00000340 	 .word 1073938432
 299 0020 0076BA4D 	 .word 1304065536
 300              	 .cfi_endproc
 301              	.LFE74:
 303              	 .section .text.XMC_MATH_CORDIC_Sin,"ax",%progbits
 304              	 .align 2
 305              	 .global XMC_MATH_CORDIC_Sin
 306              	 .code 16
 307              	 .thumb_func
 309              	XMC_MATH_CORDIC_Sin:
 310              	.LFB75:
 224:../Libraries/XMCLib/src/xmc_math.c **** 
 225:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 226:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_Sin(XMC_MATH_Q0_23_t angle_in_radians)
 227:../Libraries/XMCLib/src/xmc_math.c **** {
 311              	 .loc 1 227 0
 312              	 .cfi_startproc
 313              	.LVL20:
 228:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 229:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 314              	 .loc 1 229 0
 315 0000 0022     	 mov r2,#0
 230:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 316              	 .loc 1 230 0
 317 0002 0A21     	 mov r1,#10
 229:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 318              	 .loc 1 229 0
 319 0004 054B     	 ldr r3,.L26
 231:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 232:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 320              	 .loc 1 232 0
 321 0006 0002     	 lsl r0,r0,#8
 322              	.LVL21:
 229:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 323              	 .loc 1 229 0
 324 0008 1A64     	 str r2,[r3,#64]
 230:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 325              	 .loc 1 230 0
 326 000a 5964     	 str r1,[r3,#68]
 327              	 .loc 1 232 0
 328 000c 1865     	 str r0,[r3,#80]
 233:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 329              	 .loc 1 233 0
 330 000e DA64     	 str r2,[r3,#76]
 234:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 331              	 .loc 1 234 0
 332 0010 034A     	 ldr r2,.L26+4
 235:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 236:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 237:../Libraries/XMCLib/src/xmc_math.c **** }
 333              	 .loc 1 237 0
 334              	 
 234:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 335              	 .loc 1 234 0
 336 0012 9A64     	 str r2,[r3,#72]
 235:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 337              	 .loc 1 235 0
 338 0014 986D     	 ldr r0,[r3,#88]
 339              	.LVL22:
 340 0016 0012     	 asr r0,r0,#8
 341              	.LVL23:
 342              	 .loc 1 237 0
 343 0018 7047     	 bx lr
 344              	.L27:
 345 001a C046     	 .align 2
 346              	.L26:
 347 001c 00000340 	 .word 1073938432
 348 0020 0076BA4D 	 .word 1304065536
 349              	 .cfi_endproc
 350              	.LFE75:
 352              	 .section .text.XMC_MATH_CORDIC_Tan,"ax",%progbits
 353              	 .align 2
 354              	 .global XMC_MATH_CORDIC_Tan
 355              	 .code 16
 356              	 .thumb_func
 358              	XMC_MATH_CORDIC_Tan:
 359              	.LFB76:
 238:../Libraries/XMCLib/src/xmc_math.c **** 
 239:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 240:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tan(XMC_MATH_Q0_23_t angle_in_radians)
 241:../Libraries/XMCLib/src/xmc_math.c **** {
 360              	 .loc 1 241 0
 361              	 .cfi_startproc
 362              	.LVL24:
 242:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 243:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 363              	 .loc 1 243 0
 364 0000 1C22     	 mov r2,#28
 365 0002 084B     	 ldr r3,.L29
 244:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 245:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 246:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 247:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 366              	 .loc 1 247 0
 367 0004 0A21     	 mov r1,#10
 243:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 368              	 .loc 1 243 0
 369 0006 5A60     	 str r2,[r3,#4]
 245:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 370              	 .loc 1 245 0
 371 0008 B022     	 mov r2,#176
 372 000a 1205     	 lsl r2,r2,#20
 373 000c 5A63     	 str r2,[r3,#52]
 246:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 374              	 .loc 1 246 0
 375 000e 0022     	 mov r2,#0
 248:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 249:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 376              	 .loc 1 249 0
 377 0010 0002     	 lsl r0,r0,#8
 378              	.LVL25:
 246:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 379              	 .loc 1 246 0
 380 0012 1A64     	 str r2,[r3,#64]
 247:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 381              	 .loc 1 247 0
 382 0014 5964     	 str r1,[r3,#68]
 383              	 .loc 1 249 0
 384 0016 1865     	 str r0,[r3,#80]
 250:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 385              	 .loc 1 250 0
 386 0018 DA64     	 str r2,[r3,#76]
 251:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 387              	 .loc 1 251 0
 388 001a 034A     	 ldr r2,.L29+4
 252:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 253:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 254:../Libraries/XMCLib/src/xmc_math.c **** }
 389              	 .loc 1 254 0
 390              	 
 251:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 391              	 .loc 1 251 0
 392 001c 9A64     	 str r2,[r3,#72]
 252:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 393              	 .loc 1 252 0
 394 001e 986A     	 ldr r0,[r3,#40]
 395              	.LVL26:
 396              	 .loc 1 254 0
 397 0020 7047     	 bx lr
 398              	.L30:
 399 0022 C046     	 .align 2
 400              	.L29:
 401 0024 00000340 	 .word 1073938432
 402 0028 0076BA4D 	 .word 1304065536
 403              	 .cfi_endproc
 404              	.LFE76:
 406              	 .section .text.XMC_MATH_CORDIC_ArcTan,"ax",%progbits
 407              	 .align 2
 408              	 .global XMC_MATH_CORDIC_ArcTan
 409              	 .code 16
 410              	 .thumb_func
 412              	XMC_MATH_CORDIC_ArcTan:
 413              	.LFB77:
 255:../Libraries/XMCLib/src/xmc_math.c **** 
 256:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given angle in radians */
 257:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_23_t XMC_MATH_CORDIC_ArcTan(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 258:../Libraries/XMCLib/src/xmc_math.c **** {
 414              	 .loc 1 258 0
 415              	 .cfi_startproc
 416              	.LVL27:
 417 0000 10B5     	 push {r4,lr}
 418              	.LCFI0:
 419              	 .cfi_def_cfa_offset 8
 420              	 .cfi_offset 4,-8
 421              	 .cfi_offset 14,-4
 259:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 260:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 422              	 .loc 1 260 0
 423 0002 0022     	 mov r2,#0
 261:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 424              	 .loc 1 261 0
 425 0004 0224     	 mov r4,#2
 260:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 426              	 .loc 1 260 0
 427 0006 054B     	 ldr r3,.L32
 262:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 263:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 428              	 .loc 1 263 0
 429 0008 0902     	 lsl r1,r1,#8
 430              	.LVL28:
 264:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 431              	 .loc 1 264 0
 432 000a 0002     	 lsl r0,r0,#8
 433              	.LVL29:
 260:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 434              	 .loc 1 260 0
 435 000c 1A64     	 str r2,[r3,#64]
 261:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 436              	 .loc 1 261 0
 437 000e 5C64     	 str r4,[r3,#68]
 262:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 438              	 .loc 1 262 0
 439 0010 1A65     	 str r2,[r3,#80]
 263:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 440              	 .loc 1 263 0
 441 0012 D964     	 str r1,[r3,#76]
 442              	 .loc 1 264 0
 443 0014 9864     	 str r0,[r3,#72]
 265:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRZ) >> MATH_CORRZ_RESULT_Pos;
 444              	 .loc 1 265 0
 445 0016 D86D     	 ldr r0,[r3,#92]
 446              	.LVL30:
 266:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_23_t) result);
 267:../Libraries/XMCLib/src/xmc_math.c **** }
 447              	 .loc 1 267 0
 448              	 
 265:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRZ) >> MATH_CORRZ_RESULT_Pos;
 449              	 .loc 1 265 0
 450 0018 0012     	 asr r0,r0,#8
 451              	.LVL31:
 452              	 .loc 1 267 0
 453 001a 10BD     	 pop {r4,pc}
 454              	.L33:
 455              	 .align 2
 456              	.L32:
 457 001c 00000340 	 .word 1073938432
 458              	 .cfi_endproc
 459              	.LFE77:
 461              	 .section .text.XMC_MATH_CORDIC_Cosh,"ax",%progbits
 462              	 .align 2
 463              	 .global XMC_MATH_CORDIC_Cosh
 464              	 .code 16
 465              	 .thumb_func
 467              	XMC_MATH_CORDIC_Cosh:
 468              	.LFB78:
 268:../Libraries/XMCLib/src/xmc_math.c **** 
 269:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 270:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Cosh(XMC_MATH_Q0_23_t angle_in_radians)
 271:../Libraries/XMCLib/src/xmc_math.c **** {
 469              	 .loc 1 271 0
 470              	 .cfi_startproc
 471              	.LVL32:
 272:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 273:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 472              	 .loc 1 273 0
 473 0000 0022     	 mov r2,#0
 274:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 474              	 .loc 1 274 0
 475 0002 0E21     	 mov r1,#14
 273:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 476              	 .loc 1 273 0
 477 0004 054B     	 ldr r3,.L35
 275:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 276:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 478              	 .loc 1 276 0
 479 0006 0002     	 lsl r0,r0,#8
 480              	.LVL33:
 273:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 481              	 .loc 1 273 0
 482 0008 1A64     	 str r2,[r3,#64]
 274:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 483              	 .loc 1 274 0
 484 000a 5964     	 str r1,[r3,#68]
 485              	 .loc 1 276 0
 486 000c 1865     	 str r0,[r3,#80]
 277:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 487              	 .loc 1 277 0
 488 000e DA64     	 str r2,[r3,#76]
 278:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 489              	 .loc 1 278 0
 490 0010 034A     	 ldr r2,.L35+4
 279:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 280:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 281:../Libraries/XMCLib/src/xmc_math.c **** }
 491              	 .loc 1 281 0
 492              	 
 278:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 493              	 .loc 1 278 0
 494 0012 9A64     	 str r2,[r3,#72]
 279:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRX) >> MATH_CORRX_RESULT_Pos;
 495              	 .loc 1 279 0
 496 0014 586D     	 ldr r0,[r3,#84]
 497              	.LVL34:
 498 0016 0012     	 asr r0,r0,#8
 499              	.LVL35:
 500              	 .loc 1 281 0
 501 0018 7047     	 bx lr
 502              	.L36:
 503 001a C046     	 .align 2
 504              	.L35:
 505 001c 00000340 	 .word 1073938432
 506 0020 00A1474D 	 .word 1296539904
 507              	 .cfi_endproc
 508              	.LFE78:
 510              	 .section .text.XMC_MATH_CORDIC_Sinh,"ax",%progbits
 511              	 .align 2
 512              	 .global XMC_MATH_CORDIC_Sinh
 513              	 .code 16
 514              	 .thumb_func
 516              	XMC_MATH_CORDIC_Sinh:
 517              	.LFB79:
 282:../Libraries/XMCLib/src/xmc_math.c **** 
 283:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 284:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q1_22_t XMC_MATH_CORDIC_Sinh(XMC_MATH_Q0_23_t angle_in_radians)
 285:../Libraries/XMCLib/src/xmc_math.c **** {
 518              	 .loc 1 285 0
 519              	 .cfi_startproc
 520              	.LVL36:
 286:../Libraries/XMCLib/src/xmc_math.c ****   int32_t result;
 287:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 521              	 .loc 1 287 0
 522 0000 0022     	 mov r2,#0
 288:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 523              	 .loc 1 288 0
 524 0002 0E21     	 mov r1,#14
 287:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 525              	 .loc 1 287 0
 526 0004 054B     	 ldr r3,.L38
 289:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 290:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 527              	 .loc 1 290 0
 528 0006 0002     	 lsl r0,r0,#8
 529              	.LVL37:
 287:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 530              	 .loc 1 287 0
 531 0008 1A64     	 str r2,[r3,#64]
 288:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 532              	 .loc 1 288 0
 533 000a 5964     	 str r1,[r3,#68]
 534              	 .loc 1 290 0
 535 000c 1865     	 str r0,[r3,#80]
 291:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 536              	 .loc 1 291 0
 537 000e DA64     	 str r2,[r3,#76]
 292:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 538              	 .loc 1 292 0
 539 0010 034A     	 ldr r2,.L38+4
 293:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 294:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q1_22_t) result);
 295:../Libraries/XMCLib/src/xmc_math.c **** }
 540              	 .loc 1 295 0
 541              	 
 292:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 542              	 .loc 1 292 0
 543 0012 9A64     	 str r2,[r3,#72]
 293:../Libraries/XMCLib/src/xmc_math.c ****   result      = ((int32_t)MATH->CORRY) >> MATH_CORRY_RESULT_Pos;
 544              	 .loc 1 293 0
 545 0014 986D     	 ldr r0,[r3,#88]
 546              	.LVL38:
 547 0016 0012     	 asr r0,r0,#8
 548              	.LVL39:
 549              	 .loc 1 295 0
 550 0018 7047     	 bx lr
 551              	.L39:
 552 001a C046     	 .align 2
 553              	.L38:
 554 001c 00000340 	 .word 1073938432
 555 0020 00A1474D 	 .word 1296539904
 556              	 .cfi_endproc
 557              	.LFE79:
 559              	 .section .text.XMC_MATH_CORDIC_Tanh,"ax",%progbits
 560              	 .align 2
 561              	 .global XMC_MATH_CORDIC_Tanh
 562              	 .code 16
 563              	 .thumb_func
 565              	XMC_MATH_CORDIC_Tanh:
 566              	.LFB80:
 296:../Libraries/XMCLib/src/xmc_math.c **** 
 297:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 298:../Libraries/XMCLib/src/xmc_math.c **** XMC_MATH_Q0_11_t XMC_MATH_CORDIC_Tanh(XMC_MATH_Q0_23_t angle_in_radians)
 299:../Libraries/XMCLib/src/xmc_math.c **** {
 567              	 .loc 1 299 0
 568              	 .cfi_startproc
 569              	.LVL40:
 300:../Libraries/XMCLib/src/xmc_math.c ****   uint32_t result;
 301:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 570              	 .loc 1 301 0
 571 0000 1C22     	 mov r2,#28
 572 0002 084B     	 ldr r3,.L41
 302:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 303:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 304:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 305:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 573              	 .loc 1 305 0
 574 0004 0E21     	 mov r1,#14
 301:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 575              	 .loc 1 301 0
 576 0006 5A60     	 str r2,[r3,#4]
 303:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 577              	 .loc 1 303 0
 578 0008 B022     	 mov r2,#176
 579 000a 1205     	 lsl r2,r2,#20
 580 000c 5A63     	 str r2,[r3,#52]
 304:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 581              	 .loc 1 304 0
 582 000e 0022     	 mov r2,#0
 306:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 307:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 583              	 .loc 1 307 0
 584 0010 0002     	 lsl r0,r0,#8
 585              	.LVL41:
 304:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 586              	 .loc 1 304 0
 587 0012 1A64     	 str r2,[r3,#64]
 305:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 588              	 .loc 1 305 0
 589 0014 5964     	 str r1,[r3,#68]
 590              	 .loc 1 307 0
 591 0016 1865     	 str r0,[r3,#80]
 308:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 592              	 .loc 1 308 0
 593 0018 DA64     	 str r2,[r3,#76]
 309:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 594              	 .loc 1 309 0
 595 001a 034A     	 ldr r2,.L41+4
 310:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 311:../Libraries/XMCLib/src/xmc_math.c ****   return ((XMC_MATH_Q0_11_t) result);
 312:../Libraries/XMCLib/src/xmc_math.c **** }
 596              	 .loc 1 312 0
 597              	 
 309:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 598              	 .loc 1 309 0
 599 001c 9A64     	 str r2,[r3,#72]
 310:../Libraries/XMCLib/src/xmc_math.c ****   result       = MATH->QUOT;
 600              	 .loc 1 310 0
 601 001e 986A     	 ldr r0,[r3,#40]
 602              	.LVL42:
 603              	 .loc 1 312 0
 604 0020 7047     	 bx lr
 605              	.L42:
 606 0022 C046     	 .align 2
 607              	.L41:
 608 0024 00000340 	 .word 1073938432
 609 0028 00A1474D 	 .word 1296539904
 610              	 .cfi_endproc
 611              	.LFE80:
 613              	 .section .text.XMC_MATH_CORDIC_CosNB,"ax",%progbits
 614              	 .align 2
 615              	 .global XMC_MATH_CORDIC_CosNB
 616              	 .code 16
 617              	 .thumb_func
 619              	XMC_MATH_CORDIC_CosNB:
 620              	.LFB81:
 313:../Libraries/XMCLib/src/xmc_math.c **** 
 314:../Libraries/XMCLib/src/xmc_math.c **** /**************************************************************************************************
 315:../Libraries/XMCLib/src/xmc_math.c ****  * API IMPLEMENTATION - Non blocking functions
 316:../Libraries/XMCLib/src/xmc_math.c ****  **************************************************************************************************
 317:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the cosine of a given angle in radians */
 318:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CosNB(XMC_MATH_Q0_23_t angle_in_radians)
 319:../Libraries/XMCLib/src/xmc_math.c **** {
 621              	 .loc 1 319 0
 622              	 .cfi_startproc
 623              	.LVL43:
 320:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 624              	 .loc 1 320 0
 625 0000 0022     	 mov r2,#0
 321:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 626              	 .loc 1 321 0
 627 0002 0A21     	 mov r1,#10
 320:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 628              	 .loc 1 320 0
 629 0004 044B     	 ldr r3,.L44
 322:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 323:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 630              	 .loc 1 323 0
 631 0006 0002     	 lsl r0,r0,#8
 632              	.LVL44:
 320:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 633              	 .loc 1 320 0
 634 0008 1A64     	 str r2,[r3,#64]
 321:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 635              	 .loc 1 321 0
 636 000a 5964     	 str r1,[r3,#68]
 637              	 .loc 1 323 0
 638 000c 1865     	 str r0,[r3,#80]
 324:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U;  /* Clear register */
 639              	 .loc 1 324 0
 640 000e DA64     	 str r2,[r3,#76]
 325:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 641              	 .loc 1 325 0
 642 0010 024A     	 ldr r2,.L44+4
 326:../Libraries/XMCLib/src/xmc_math.c **** }
 643              	 .loc 1 326 0
 644              	 
 325:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 645              	 .loc 1 325 0
 646 0012 9A64     	 str r2,[r3,#72]
 647              	 .loc 1 326 0
 648 0014 7047     	 bx lr
 649              	.L45:
 650 0016 C046     	 .align 2
 651              	.L44:
 652 0018 00000340 	 .word 1073938432
 653 001c 0076BA4D 	 .word 1304065536
 654              	 .cfi_endproc
 655              	.LFE81:
 657              	 .section .text.XMC_MATH_CORDIC_SinNB,"ax",%progbits
 658              	 .align 2
 659              	 .global XMC_MATH_CORDIC_SinNB
 660              	 .code 16
 661              	 .thumb_func
 663              	XMC_MATH_CORDIC_SinNB:
 664              	.LFB82:
 327:../Libraries/XMCLib/src/xmc_math.c **** 
 328:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the sine of a given angle in radians */
 329:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinNB(XMC_MATH_Q0_23_t angle_in_radians)
 330:../Libraries/XMCLib/src/xmc_math.c **** {
 665              	 .loc 1 330 0
 666              	 .cfi_startproc
 667              	.LVL45:
 331:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 668              	 .loc 1 331 0
 669 0000 0022     	 mov r2,#0
 332:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 670              	 .loc 1 332 0
 671 0002 0A21     	 mov r1,#10
 331:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 672              	 .loc 1 331 0
 673 0004 044B     	 ldr r3,.L47
 333:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 334:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 674              	 .loc 1 334 0
 675 0006 0002     	 lsl r0,r0,#8
 676              	.LVL46:
 331:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 677              	 .loc 1 331 0
 678 0008 1A64     	 str r2,[r3,#64]
 332:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 679              	 .loc 1 332 0
 680 000a 5964     	 str r1,[r3,#68]
 681              	 .loc 1 334 0
 682 000c 1865     	 str r0,[r3,#80]
 335:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 683              	 .loc 1 335 0
 684 000e DA64     	 str r2,[r3,#76]
 336:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 685              	 .loc 1 336 0
 686 0010 024A     	 ldr r2,.L47+4
 337:../Libraries/XMCLib/src/xmc_math.c **** }
 687              	 .loc 1 337 0
 688              	 
 336:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 689              	 .loc 1 336 0
 690 0012 9A64     	 str r2,[r3,#72]
 691              	 .loc 1 337 0
 692 0014 7047     	 bx lr
 693              	.L48:
 694 0016 C046     	 .align 2
 695              	.L47:
 696 0018 00000340 	 .word 1073938432
 697 001c 0076BA4D 	 .word 1304065536
 698              	 .cfi_endproc
 699              	.LFE82:
 701              	 .section .text.XMC_MATH_CORDIC_TanNB,"ax",%progbits
 702              	 .align 2
 703              	 .global XMC_MATH_CORDIC_TanNB
 704              	 .code 16
 705              	 .thumb_func
 707              	XMC_MATH_CORDIC_TanNB:
 708              	.LFB83:
 338:../Libraries/XMCLib/src/xmc_math.c **** 
 339:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the tangent of a given angle in radians */
 340:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanNB(XMC_MATH_Q0_23_t angle_in_radians)
 341:../Libraries/XMCLib/src/xmc_math.c **** {
 709              	 .loc 1 341 0
 710              	 .cfi_startproc
 711              	.LVL47:
 342:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 712              	 .loc 1 342 0
 713 0000 1C22     	 mov r2,#28
 714 0002 074B     	 ldr r3,.L50
 343:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 344:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 345:../Libraries/XMCLib/src/xmc_math.c **** 
 346:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 347:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 715              	 .loc 1 347 0
 716 0004 0A21     	 mov r1,#10
 342:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 717              	 .loc 1 342 0
 718 0006 5A60     	 str r2,[r3,#4]
 344:../Libraries/XMCLib/src/xmc_math.c **** 
 719              	 .loc 1 344 0
 720 0008 B022     	 mov r2,#176
 721 000a 1205     	 lsl r2,r2,#20
 722 000c 5A63     	 str r2,[r3,#52]
 346:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 723              	 .loc 1 346 0
 724 000e 0022     	 mov r2,#0
 348:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 349:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 725              	 .loc 1 349 0
 726 0010 0002     	 lsl r0,r0,#8
 727              	.LVL48:
 346:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR + \
 728              	 .loc 1 346 0
 729 0012 1A64     	 str r2,[r3,#64]
 347:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 730              	 .loc 1 347 0
 731 0014 5964     	 str r1,[r3,#68]
 732              	 .loc 1 349 0
 733 0016 1865     	 str r0,[r3,#80]
 350:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 734              	 .loc 1 350 0
 735 0018 DA64     	 str r2,[r3,#76]
 351:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 736              	 .loc 1 351 0
 737 001a 024A     	 ldr r2,.L50+4
 352:../Libraries/XMCLib/src/xmc_math.c **** }
 738              	 .loc 1 352 0
 739              	 
 351:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_CIRCULAR_GAIN_IN_Q023 << MATH_CORDX_DATA_Pos;
 740              	 .loc 1 351 0
 741 001c 9A64     	 str r2,[r3,#72]
 742              	 .loc 1 352 0
 743 001e 7047     	 bx lr
 744              	.L51:
 745              	 .align 2
 746              	.L50:
 747 0020 00000340 	 .word 1073938432
 748 0024 0076BA4D 	 .word 1304065536
 749              	 .cfi_endproc
 750              	.LFE83:
 752              	 .section .text.XMC_MATH_CORDIC_ArcTanNB,"ax",%progbits
 753              	 .align 2
 754              	 .global XMC_MATH_CORDIC_ArcTanNB
 755              	 .code 16
 756              	 .thumb_func
 758              	XMC_MATH_CORDIC_ArcTanNB:
 759              	.LFB84:
 353:../Libraries/XMCLib/src/xmc_math.c **** 
 354:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the arc tangent of a given value */
 355:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_ArcTanNB(XMC_MATH_Q8_15_t x, XMC_MATH_Q8_15_t y)
 356:../Libraries/XMCLib/src/xmc_math.c **** {
 760              	 .loc 1 356 0
 761              	 .cfi_startproc
 762              	.LVL49:
 763 0000 10B5     	 push {r4,lr}
 764              	.LCFI1:
 765              	 .cfi_def_cfa_offset 8
 766              	 .cfi_offset 4,-8
 767              	 .cfi_offset 14,-4
 357:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 768              	 .loc 1 357 0
 769 0002 0022     	 mov r2,#0
 358:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 770              	 .loc 1 358 0
 771 0004 0224     	 mov r4,#2
 357:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 772              	 .loc 1 357 0
 773 0006 044B     	 ldr r3,.L53
 359:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 360:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 774              	 .loc 1 360 0
 775 0008 0902     	 lsl r1,r1,#8
 776              	.LVL50:
 361:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 777              	 .loc 1 361 0
 778 000a 0002     	 lsl r0,r0,#8
 779              	.LVL51:
 357:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_CIRCULAR;
 780              	 .loc 1 357 0
 781 000c 1A64     	 str r2,[r3,#64]
 362:../Libraries/XMCLib/src/xmc_math.c **** }
 782              	 .loc 1 362 0
 783              	 
 358:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = 0U; /* Clear register */
 784              	 .loc 1 358 0
 785 000e 5C64     	 str r4,[r3,#68]
 359:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = ((uint32_t) y) << MATH_CORDY_DATA_Pos;
 786              	 .loc 1 359 0
 787 0010 1A65     	 str r2,[r3,#80]
 360:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = ((uint32_t) x) << MATH_CORDX_DATA_Pos;
 788              	 .loc 1 360 0
 789 0012 D964     	 str r1,[r3,#76]
 361:../Libraries/XMCLib/src/xmc_math.c **** }
 790              	 .loc 1 361 0
 791 0014 9864     	 str r0,[r3,#72]
 792              	 .loc 1 362 0
 793 0016 10BD     	 pop {r4,pc}
 794              	.L54:
 795              	 .align 2
 796              	.L53:
 797 0018 00000340 	 .word 1073938432
 798              	 .cfi_endproc
 799              	.LFE84:
 801              	 .section .text.XMC_MATH_CORDIC_CoshNB,"ax",%progbits
 802              	 .align 2
 803              	 .global XMC_MATH_CORDIC_CoshNB
 804              	 .code 16
 805              	 .thumb_func
 807              	XMC_MATH_CORDIC_CoshNB:
 808              	.LFB85:
 363:../Libraries/XMCLib/src/xmc_math.c **** 
 364:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic cosine of a given angle in radians */
 365:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_CoshNB(XMC_MATH_Q0_23_t angle_in_radians)
 366:../Libraries/XMCLib/src/xmc_math.c **** {
 809              	 .loc 1 366 0
 810              	 .cfi_startproc
 811              	.LVL52:
 367:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 812              	 .loc 1 367 0
 813 0000 0022     	 mov r2,#0
 368:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 814              	 .loc 1 368 0
 815 0002 0E21     	 mov r1,#14
 367:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 816              	 .loc 1 367 0
 817 0004 044B     	 ldr r3,.L56
 369:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 370:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 818              	 .loc 1 370 0
 819 0006 0002     	 lsl r0,r0,#8
 820              	.LVL53:
 367:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 821              	 .loc 1 367 0
 822 0008 1A64     	 str r2,[r3,#64]
 368:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 823              	 .loc 1 368 0
 824 000a 5964     	 str r1,[r3,#68]
 825              	 .loc 1 370 0
 826 000c 1865     	 str r0,[r3,#80]
 371:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 827              	 .loc 1 371 0
 828 000e DA64     	 str r2,[r3,#76]
 372:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 829              	 .loc 1 372 0
 830 0010 024A     	 ldr r2,.L56+4
 373:../Libraries/XMCLib/src/xmc_math.c **** }
 831              	 .loc 1 373 0
 832              	 
 372:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 833              	 .loc 1 372 0
 834 0012 9A64     	 str r2,[r3,#72]
 835              	 .loc 1 373 0
 836 0014 7047     	 bx lr
 837              	.L57:
 838 0016 C046     	 .align 2
 839              	.L56:
 840 0018 00000340 	 .word 1073938432
 841 001c 00A1474D 	 .word 1296539904
 842              	 .cfi_endproc
 843              	.LFE85:
 845              	 .section .text.XMC_MATH_CORDIC_SinhNB,"ax",%progbits
 846              	 .align 2
 847              	 .global XMC_MATH_CORDIC_SinhNB
 848              	 .code 16
 849              	 .thumb_func
 851              	XMC_MATH_CORDIC_SinhNB:
 852              	.LFB86:
 374:../Libraries/XMCLib/src/xmc_math.c **** 
 375:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic sine of a given angle in radians */
 376:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_SinhNB(XMC_MATH_Q0_23_t angle_in_radians)
 377:../Libraries/XMCLib/src/xmc_math.c **** {
 853              	 .loc 1 377 0
 854              	 .cfi_startproc
 855              	.LVL54:
 378:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 856              	 .loc 1 378 0
 857 0000 0022     	 mov r2,#0
 379:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 858              	 .loc 1 379 0
 859 0002 0E21     	 mov r1,#14
 378:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 860              	 .loc 1 378 0
 861 0004 044B     	 ldr r3,.L59
 380:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 381:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ = ((uint32_t)angle_in_radians) << MATH_CORDZ_DATA_Pos;
 862              	 .loc 1 381 0
 863 0006 0002     	 lsl r0,r0,#8
 864              	.LVL55:
 378:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 865              	 .loc 1 378 0
 866 0008 1A64     	 str r2,[r3,#64]
 379:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 867              	 .loc 1 379 0
 868 000a 5964     	 str r1,[r3,#68]
 869              	 .loc 1 381 0
 870 000c 1865     	 str r0,[r3,#80]
 382:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = 0U; /* Clear register */
 871              	 .loc 1 382 0
 872 000e DA64     	 str r2,[r3,#76]
 383:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 873              	 .loc 1 383 0
 874 0010 024A     	 ldr r2,.L59+4
 384:../Libraries/XMCLib/src/xmc_math.c **** }
 875              	 .loc 1 384 0
 876              	 
 383:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 877              	 .loc 1 383 0
 878 0012 9A64     	 str r2,[r3,#72]
 879              	 .loc 1 384 0
 880 0014 7047     	 bx lr
 881              	.L60:
 882 0016 C046     	 .align 2
 883              	.L59:
 884 0018 00000340 	 .word 1073938432
 885 001c 00A1474D 	 .word 1296539904
 886              	 .cfi_endproc
 887              	.LFE86:
 889              	 .section .text.XMC_MATH_CORDIC_TanhNB,"ax",%progbits
 890              	 .align 2
 891              	 .global XMC_MATH_CORDIC_TanhNB
 892              	 .code 16
 893              	 .thumb_func
 895              	XMC_MATH_CORDIC_TanhNB:
 896              	.LFB87:
 385:../Libraries/XMCLib/src/xmc_math.c **** 
 386:../Libraries/XMCLib/src/xmc_math.c **** /* This function computes the hyperbolic tangent of a given angle in radians */
 387:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_CORDIC_TanhNB(XMC_MATH_Q0_23_t angle_in_radians)
 388:../Libraries/XMCLib/src/xmc_math.c **** {
 897              	 .loc 1 388 0
 898              	 .cfi_startproc
 899              	.LVL56:
 389:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 900              	 .loc 1 389 0
 901 0000 1C22     	 mov r2,#28
 902 0002 074B     	 ldr r3,.L62
 390:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_DIV_DVSRC_CORRX_IS_SOURCE;      /* Chain the results of CORDIC
 391:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = (uint32_t) 11 << MATH_DIVCON_DVSSRC_Pos;            /* Right Shifts Divisor by 11 
 392:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 393:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 903              	 .loc 1 393 0
 904 0004 0E21     	 mov r1,#14
 389:../Libraries/XMCLib/src/xmc_math.c ****   MATH->GLBCON = (uint32_t) XMC_MATH_DIV_DVDRC_CORRY_IS_SOURCE + \
 905              	 .loc 1 389 0
 906 0006 5A60     	 str r2,[r3,#4]
 391:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC  = 0U; /* Clear register */
 907              	 .loc 1 391 0
 908 0008 B022     	 mov r2,#176
 909 000a 1205     	 lsl r2,r2,#20
 910 000c 5A63     	 str r2,[r3,#52]
 392:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 911              	 .loc 1 392 0
 912 000e 0022     	 mov r2,#0
 394:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 395:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDZ  = ((uint32_t) angle_in_radians) << MATH_CORDZ_DATA_Pos;
 913              	 .loc 1 395 0
 914 0010 0002     	 lsl r0,r0,#8
 915              	.LVL57:
 392:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON    = (uint32_t) XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC + \
 916              	 .loc 1 392 0
 917 0012 1A64     	 str r2,[r3,#64]
 393:../Libraries/XMCLib/src/xmc_math.c ****                  (uint32_t) XMC_MATH_CORDIC_ROTVEC_MODE_ROTATION;
 918              	 .loc 1 393 0
 919 0014 5964     	 str r1,[r3,#68]
 920              	 .loc 1 395 0
 921 0016 1865     	 str r0,[r3,#80]
 396:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY  = 0U; /* Clear register */
 922              	 .loc 1 396 0
 923 0018 DA64     	 str r2,[r3,#76]
 397:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 924              	 .loc 1 397 0
 925 001a 024A     	 ldr r2,.L62+4
 398:../Libraries/XMCLib/src/xmc_math.c **** }
 926              	 .loc 1 398 0
 927              	 
 397:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX  = XMC_MATH_RECIPROC_HYPERBOLIC_GAIN_IN_Q1_22 << MATH_CORDX_DATA_Pos;
 928              	 .loc 1 397 0
 929 001c 9A64     	 str r2,[r3,#72]
 930              	 .loc 1 398 0
 931 001e 7047     	 bx lr
 932              	.L63:
 933              	 .align 2
 934              	.L62:
 935 0020 00000340 	 .word 1073938432
 936 0024 00A1474D 	 .word 1296539904
 937              	 .cfi_endproc
 938              	.LFE87:
 940              	 .section .text.XMC_MATH_DIV_UnsignedDivNB,"ax",%progbits
 941              	 .align 2
 942              	 .global XMC_MATH_DIV_UnsignedDivNB
 943              	 .code 16
 944              	 .thumb_func
 946              	XMC_MATH_DIV_UnsignedDivNB:
 947              	.LFB88:
 399:../Libraries/XMCLib/src/xmc_math.c **** 
 400:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two unsigned arguments */
 401:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedDivNB(uint32_t dividend, uint32_t divisor)
 402:../Libraries/XMCLib/src/xmc_math.c **** {
 948              	 .loc 1 402 0
 949              	 .cfi_startproc
 950              	.LVL58:
 403:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 951              	 .loc 1 403 0
 952 0000 0422     	 mov r2,#4
 953 0002 024B     	 ldr r3,.L65
 404:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 405:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 406:../Libraries/XMCLib/src/xmc_math.c **** }
 954              	 .loc 1 406 0
 955              	 
 403:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 956              	 .loc 1 403 0
 957 0004 5A63     	 str r2,[r3,#52]
 404:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 958              	 .loc 1 404 0
 959 0006 1862     	 str r0,[r3,#32]
 405:../Libraries/XMCLib/src/xmc_math.c **** }
 960              	 .loc 1 405 0
 961 0008 5962     	 str r1,[r3,#36]
 962              	 .loc 1 406 0
 963 000a 7047     	 bx lr
 964              	.L66:
 965              	 .align 2
 966              	.L65:
 967 000c 00000340 	 .word 1073938432
 968              	 .cfi_endproc
 969              	.LFE88:
 971              	 .section .text.XMC_MATH_DIV_SignedDivNB,"ax",%progbits
 972              	 .align 2
 973              	 .global XMC_MATH_DIV_SignedDivNB
 974              	 .code 16
 975              	 .thumb_func
 977              	XMC_MATH_DIV_SignedDivNB:
 978              	.LFB89:
 407:../Libraries/XMCLib/src/xmc_math.c **** 
 408:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs division for given two signed arguments */
 409:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedDivNB(int32_t dividend, int32_t divisor)
 410:../Libraries/XMCLib/src/xmc_math.c **** {
 979              	 .loc 1 410 0
 980              	 .cfi_startproc
 981              	.LVL59:
 411:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 982              	 .loc 1 411 0
 983 0000 0022     	 mov r2,#0
 984 0002 024B     	 ldr r3,.L68
 412:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 413:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 414:../Libraries/XMCLib/src/xmc_math.c **** }
 985              	 .loc 1 414 0
 986              	 
 411:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 987              	 .loc 1 411 0
 988 0004 5A63     	 str r2,[r3,#52]
 412:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 989              	 .loc 1 412 0
 990 0006 1862     	 str r0,[r3,#32]
 413:../Libraries/XMCLib/src/xmc_math.c **** }
 991              	 .loc 1 413 0
 992 0008 5962     	 str r1,[r3,#36]
 993              	 .loc 1 414 0
 994 000a 7047     	 bx lr
 995              	.L69:
 996              	 .align 2
 997              	.L68:
 998 000c 00000340 	 .word 1073938432
 999              	 .cfi_endproc
 1000              	.LFE89:
 1002              	 .section .text.XMC_MATH_DIV_UnsignedModNB,"ax",%progbits
 1003              	 .align 2
 1004              	 .global XMC_MATH_DIV_UnsignedModNB
 1005              	 .code 16
 1006              	 .thumb_func
 1008              	XMC_MATH_DIV_UnsignedModNB:
 1009              	.LFB90:
 415:../Libraries/XMCLib/src/xmc_math.c **** 
 416:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two unsigned arguments */
 417:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_UnsignedModNB(uint32_t dividend, uint32_t divisor)
 418:../Libraries/XMCLib/src/xmc_math.c **** {
 1010              	 .loc 1 418 0
 1011              	 .cfi_startproc
 1012              	.LVL60:
 419:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1013              	 .loc 1 419 0
 1014 0000 0422     	 mov r2,#4
 1015 0002 024B     	 ldr r3,.L71
 420:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 421:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 422:../Libraries/XMCLib/src/xmc_math.c **** }
 1016              	 .loc 1 422 0
 1017              	 
 419:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_UNSIGNED_DIVISION;
 1018              	 .loc 1 419 0
 1019 0004 5A63     	 str r2,[r3,#52]
 420:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1020              	 .loc 1 420 0
 1021 0006 1862     	 str r0,[r3,#32]
 421:../Libraries/XMCLib/src/xmc_math.c **** }
 1022              	 .loc 1 421 0
 1023 0008 5962     	 str r1,[r3,#36]
 1024              	 .loc 1 422 0
 1025 000a 7047     	 bx lr
 1026              	.L72:
 1027              	 .align 2
 1028              	.L71:
 1029 000c 00000340 	 .word 1073938432
 1030              	 .cfi_endproc
 1031              	.LFE90:
 1033              	 .section .text.XMC_MATH_DIV_SignedModNB,"ax",%progbits
 1034              	 .align 2
 1035              	 .global XMC_MATH_DIV_SignedModNB
 1036              	 .code 16
 1037              	 .thumb_func
 1039              	XMC_MATH_DIV_SignedModNB:
 1040              	.LFB91:
 423:../Libraries/XMCLib/src/xmc_math.c **** 
 424:../Libraries/XMCLib/src/xmc_math.c **** /* This function performs modulo operation for given two signed arguments */
 425:../Libraries/XMCLib/src/xmc_math.c **** void XMC_MATH_DIV_SignedModNB(int32_t dividend, int32_t divisor)
 426:../Libraries/XMCLib/src/xmc_math.c **** {
 1041              	 .loc 1 426 0
 1042              	 .cfi_startproc
 1043              	.LVL61:
 427:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1044              	 .loc 1 427 0
 1045 0000 0022     	 mov r2,#0
 1046 0002 024B     	 ldr r3,.L74
 428:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 429:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVS    = divisor;
 430:../Libraries/XMCLib/src/xmc_math.c **** }
 1047              	 .loc 1 430 0
 1048              	 
 427:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DIVCON = XMC_MATH_SIGNED_DIVISION;
 1049              	 .loc 1 427 0
 1050 0004 5A63     	 str r2,[r3,#52]
 428:../Libraries/XMCLib/src/xmc_math.c ****   MATH->DVD    = dividend;
 1051              	 .loc 1 428 0
 1052 0006 1862     	 str r0,[r3,#32]
 429:../Libraries/XMCLib/src/xmc_math.c **** }
 1053              	 .loc 1 429 0
 1054 0008 5962     	 str r1,[r3,#36]
 1055              	 .loc 1 430 0
 1056 000a 7047     	 bx lr
 1057              	.L75:
 1058              	 .align 2
 1059              	.L74:
 1060 000c 00000340 	 .word 1073938432
 1061              	 .cfi_endproc
 1062              	.LFE91:
 1064              	 .section .text.XMC_MATH_CORDIC_Q15_Sqrt,"ax",%progbits
 1065              	 .align 2
 1066              	 .global XMC_MATH_CORDIC_Q15_Sqrt
 1067              	 .code 16
 1068              	 .thumb_func
 1070              	XMC_MATH_CORDIC_Q15_Sqrt:
 1071              	.LFB92:
 431:../Libraries/XMCLib/src/xmc_math.c **** 
 432:../Libraries/XMCLib/src/xmc_math.c **** int16_t XMC_MATH_CORDIC_Q15_Sqrt(int16_t x)
 433:../Libraries/XMCLib/src/xmc_math.c **** {
 1072              	 .loc 1 433 0
 1073              	 .cfi_startproc
 1074              	.LVL62:
 434:../Libraries/XMCLib/src/xmc_math.c ****   int32_t temp;
 435:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1075              	 .loc 1 435 0
 1076 0000 0022     	 mov r2,#0
 1077 0002 0A4B     	 ldr r3,.L77
 436:../Libraries/XMCLib/src/xmc_math.c **** 
 437:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 438:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 439:../Libraries/XMCLib/src/xmc_math.c **** 
 440:../Libraries/XMCLib/src/xmc_math.c ****   temp = (int32_t)x << 15; /* Q30 to handle numbers > 1.0 */
 1078              	 .loc 1 440 0
 1079 0004 C003     	 lsl r0,r0,#15
 1080              	.LVL63:
 435:../Libraries/XMCLib/src/xmc_math.c **** 
 1081              	 .loc 1 435 0
 1082 0006 1A64     	 str r2,[r3,#64]
 437:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 1083              	 .loc 1 437 0
 1084 0008 0632     	 add r2,r2,#6
 1085 000a 5A64     	 str r2,[r3,#68]
 441:../Libraries/XMCLib/src/xmc_math.c **** 
 442:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (temp - 0x10000000U); /* x - 0.25 */
 1086              	 .loc 1 442 0
 1087 000c F022     	 mov r2,#240
 1088 000e 1206     	 lsl r2,r2,#24
 1089 0010 8218     	 add r2,r0,r2
 1090 0012 DA64     	 str r2,[r3,#76]
 443:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (temp + 0x10000000U); /* x + 0.25 */
 1091              	 .loc 1 443 0
 1092 0014 8022     	 mov r2,#128
 1093 0016 5205     	 lsl r2,r2,#21
 1094 0018 9446     	 mov ip,r2
 1095 001a 6044     	 add r0,r0,ip
 1096 001c 9864     	 str r0,[r3,#72]
 444:../Libraries/XMCLib/src/xmc_math.c **** 
 445:../Libraries/XMCLib/src/xmc_math.c ****   return (int16_t)(((MATH->CORRX >> 14) * 39568) >> 16); /* Q16 * Q15 */
 1097              	 .loc 1 445 0
 1098 001e 586D     	 ldr r0,[r3,#84]
 1099 0020 034B     	 ldr r3,.L77+4
 1100 0022 800B     	 lsr r0,r0,#14
 1101 0024 5843     	 mul r0,r3
 446:../Libraries/XMCLib/src/xmc_math.c **** }
 1102              	 .loc 1 446 0
 1103              	 
 445:../Libraries/XMCLib/src/xmc_math.c **** }
 1104              	 .loc 1 445 0
 1105 0026 0014     	 asr r0,r0,#16
 1106              	 .loc 1 446 0
 1107 0028 7047     	 bx lr
 1108              	.L78:
 1109 002a C046     	 .align 2
 1110              	.L77:
 1111 002c 00000340 	 .word 1073938432
 1112 0030 909A0000 	 .word 39568
 1113              	 .cfi_endproc
 1114              	.LFE92:
 1116              	 .section .text.XMC_MATH_CORDIC_Q31_Sqrt,"ax",%progbits
 1117              	 .align 2
 1118              	 .global XMC_MATH_CORDIC_Q31_Sqrt
 1119              	 .code 16
 1120              	 .thumb_func
 1122              	XMC_MATH_CORDIC_Q31_Sqrt:
 1123              	.LFB93:
 447:../Libraries/XMCLib/src/xmc_math.c **** 
 448:../Libraries/XMCLib/src/xmc_math.c **** int32_t XMC_MATH_CORDIC_Q31_Sqrt(int32_t x)
 449:../Libraries/XMCLib/src/xmc_math.c **** {
 1124              	 .loc 1 449 0
 1125              	 .cfi_startproc
 1126              	.LVL64:
 450:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1127              	 .loc 1 450 0
 1128 0000 0022     	 mov r2,#0
 1129 0002 094B     	 ldr r3,.L80
 451:../Libraries/XMCLib/src/xmc_math.c **** 
 452:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CON   = (uint32_t)XMC_MATH_CORDIC_OPERATING_MODE_HYPERBOLIC |
 453:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 454:../Libraries/XMCLib/src/xmc_math.c **** 
 455:../Libraries/XMCLib/src/xmc_math.c ****   x >>= 1;  /* Q30 to handle numbers > 1.0 */
 1130              	 .loc 1 455 0
 1131 0004 4010     	 asr r0,r0,#1
 1132              	.LVL65:
 450:../Libraries/XMCLib/src/xmc_math.c ****   MATH->STATC = 0U; /* Clear register */
 1133              	 .loc 1 450 0
 1134 0006 1A64     	 str r2,[r3,#64]
 452:../Libraries/XMCLib/src/xmc_math.c ****                 (uint32_t)XMC_MATH_CORDIC_ROTVEC_MODE_VECTORING;
 1135              	 .loc 1 452 0
 1136 0008 0632     	 add r2,r2,#6
 1137 000a 5A64     	 str r2,[r3,#68]
 1138              	.LVL66:
 456:../Libraries/XMCLib/src/xmc_math.c **** 
 457:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDY = (x - 0x10000000U); /* x - 0.25 */
 1139              	 .loc 1 457 0
 1140 000c F022     	 mov r2,#240
 1141 000e 1206     	 lsl r2,r2,#24
 1142 0010 8218     	 add r2,r0,r2
 1143 0012 DA64     	 str r2,[r3,#76]
 458:../Libraries/XMCLib/src/xmc_math.c ****   MATH->CORDX = (x + 0x10000000U); /* x + 0.25 */
 1144              	 .loc 1 458 0
 1145 0014 8022     	 mov r2,#128
 1146 0016 5205     	 lsl r2,r2,#21
 1147 0018 9446     	 mov ip,r2
 1148 001a 6044     	 add r0,r0,ip
 1149 001c 9864     	 str r0,[r3,#72]
 459:../Libraries/XMCLib/src/xmc_math.c **** 
 460:../Libraries/XMCLib/src/xmc_math.c ****   return ((MATH->CORRX >> 14) * 39568); /* Q16 * Q15 */
 1150              	 .loc 1 460 0
 1151 001e 586D     	 ldr r0,[r3,#84]
 1152 0020 024B     	 ldr r3,.L80+4
 1153 0022 800B     	 lsr r0,r0,#14
 1154 0024 5843     	 mul r0,r3
 461:../Libraries/XMCLib/src/xmc_math.c **** }
 1155              	 .loc 1 461 0
 1156              	 
 1157 0026 7047     	 bx lr
 1158              	.L81:
 1159              	 .align 2
 1160              	.L80:
 1161 0028 00000340 	 .word 1073938432
 1162 002c 909A0000 	 .word 39568
 1163              	 .cfi_endproc
 1164              	.LFE93:
 1166              	 .text
 1167              	.Letext0:
 1168              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1169              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1170              	 .file 4 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
 1171              	 .file 5 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/XMCLib/inc/xmc_math.h"
 1172              	 .file 6 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/CMSIS/Infineon/XMC1300_series/Include/system_XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 xmc_math.c
    {standard input}:18     .text.XMC_MATH_DIV_IsBusy:00000000 $t
    {standard input}:23     .text.XMC_MATH_DIV_IsBusy:00000000 XMC_MATH_DIV_IsBusy
    {standard input}:44     .text.XMC_MATH_DIV_IsBusy:0000000c $d
    {standard input}:49     .text.XMC_MATH_CORDIC_IsBusy:00000000 $t
    {standard input}:54     .text.XMC_MATH_CORDIC_IsBusy:00000000 XMC_MATH_CORDIC_IsBusy
    {standard input}:74     .text.XMC_MATH_CORDIC_IsBusy:0000000c $d
    {standard input}:79     .text.XMC_MATH_GetEventStatus:00000000 $t
    {standard input}:84     .text.XMC_MATH_GetEventStatus:00000000 XMC_MATH_GetEventStatus
    {standard input}:108    .text.XMC_MATH_GetEventStatus:00000010 $d
    {standard input}:113    .text.__aeabi_uidiv:00000000 $t
    {standard input}:118    .text.__aeabi_uidiv:00000000 __aeabi_uidiv
    {standard input}:142    .text.__aeabi_uidiv:00000010 $d
    {standard input}:147    .text.__aeabi_idiv:00000000 $t
    {standard input}:152    .text.__aeabi_idiv:00000000 __aeabi_idiv
    {standard input}:176    .text.__aeabi_idiv:00000010 $d
    {standard input}:181    .text.__aeabi_uidivmod:00000000 $t
    {standard input}:186    .text.__aeabi_uidivmod:00000000 __aeabi_uidivmod
    {standard input}:213    .text.__aeabi_uidivmod:00000010 $d
    {standard input}:218    .text.__aeabi_idivmod:00000000 $t
    {standard input}:223    .text.__aeabi_idivmod:00000000 __aeabi_idivmod
    {standard input}:250    .text.__aeabi_idivmod:00000010 $d
    {standard input}:255    .text.XMC_MATH_CORDIC_Cos:00000000 $t
    {standard input}:260    .text.XMC_MATH_CORDIC_Cos:00000000 XMC_MATH_CORDIC_Cos
    {standard input}:298    .text.XMC_MATH_CORDIC_Cos:0000001c $d
    {standard input}:304    .text.XMC_MATH_CORDIC_Sin:00000000 $t
    {standard input}:309    .text.XMC_MATH_CORDIC_Sin:00000000 XMC_MATH_CORDIC_Sin
    {standard input}:347    .text.XMC_MATH_CORDIC_Sin:0000001c $d
    {standard input}:353    .text.XMC_MATH_CORDIC_Tan:00000000 $t
    {standard input}:358    .text.XMC_MATH_CORDIC_Tan:00000000 XMC_MATH_CORDIC_Tan
    {standard input}:401    .text.XMC_MATH_CORDIC_Tan:00000024 $d
    {standard input}:407    .text.XMC_MATH_CORDIC_ArcTan:00000000 $t
    {standard input}:412    .text.XMC_MATH_CORDIC_ArcTan:00000000 XMC_MATH_CORDIC_ArcTan
    {standard input}:457    .text.XMC_MATH_CORDIC_ArcTan:0000001c $d
    {standard input}:462    .text.XMC_MATH_CORDIC_Cosh:00000000 $t
    {standard input}:467    .text.XMC_MATH_CORDIC_Cosh:00000000 XMC_MATH_CORDIC_Cosh
    {standard input}:505    .text.XMC_MATH_CORDIC_Cosh:0000001c $d
    {standard input}:511    .text.XMC_MATH_CORDIC_Sinh:00000000 $t
    {standard input}:516    .text.XMC_MATH_CORDIC_Sinh:00000000 XMC_MATH_CORDIC_Sinh
    {standard input}:554    .text.XMC_MATH_CORDIC_Sinh:0000001c $d
    {standard input}:560    .text.XMC_MATH_CORDIC_Tanh:00000000 $t
    {standard input}:565    .text.XMC_MATH_CORDIC_Tanh:00000000 XMC_MATH_CORDIC_Tanh
    {standard input}:608    .text.XMC_MATH_CORDIC_Tanh:00000024 $d
    {standard input}:614    .text.XMC_MATH_CORDIC_CosNB:00000000 $t
    {standard input}:619    .text.XMC_MATH_CORDIC_CosNB:00000000 XMC_MATH_CORDIC_CosNB
    {standard input}:652    .text.XMC_MATH_CORDIC_CosNB:00000018 $d
    {standard input}:658    .text.XMC_MATH_CORDIC_SinNB:00000000 $t
    {standard input}:663    .text.XMC_MATH_CORDIC_SinNB:00000000 XMC_MATH_CORDIC_SinNB
    {standard input}:696    .text.XMC_MATH_CORDIC_SinNB:00000018 $d
    {standard input}:702    .text.XMC_MATH_CORDIC_TanNB:00000000 $t
    {standard input}:707    .text.XMC_MATH_CORDIC_TanNB:00000000 XMC_MATH_CORDIC_TanNB
    {standard input}:747    .text.XMC_MATH_CORDIC_TanNB:00000020 $d
    {standard input}:753    .text.XMC_MATH_CORDIC_ArcTanNB:00000000 $t
    {standard input}:758    .text.XMC_MATH_CORDIC_ArcTanNB:00000000 XMC_MATH_CORDIC_ArcTanNB
    {standard input}:797    .text.XMC_MATH_CORDIC_ArcTanNB:00000018 $d
    {standard input}:802    .text.XMC_MATH_CORDIC_CoshNB:00000000 $t
    {standard input}:807    .text.XMC_MATH_CORDIC_CoshNB:00000000 XMC_MATH_CORDIC_CoshNB
    {standard input}:840    .text.XMC_MATH_CORDIC_CoshNB:00000018 $d
    {standard input}:846    .text.XMC_MATH_CORDIC_SinhNB:00000000 $t
    {standard input}:851    .text.XMC_MATH_CORDIC_SinhNB:00000000 XMC_MATH_CORDIC_SinhNB
    {standard input}:884    .text.XMC_MATH_CORDIC_SinhNB:00000018 $d
    {standard input}:890    .text.XMC_MATH_CORDIC_TanhNB:00000000 $t
    {standard input}:895    .text.XMC_MATH_CORDIC_TanhNB:00000000 XMC_MATH_CORDIC_TanhNB
    {standard input}:935    .text.XMC_MATH_CORDIC_TanhNB:00000020 $d
    {standard input}:941    .text.XMC_MATH_DIV_UnsignedDivNB:00000000 $t
    {standard input}:946    .text.XMC_MATH_DIV_UnsignedDivNB:00000000 XMC_MATH_DIV_UnsignedDivNB
    {standard input}:967    .text.XMC_MATH_DIV_UnsignedDivNB:0000000c $d
    {standard input}:972    .text.XMC_MATH_DIV_SignedDivNB:00000000 $t
    {standard input}:977    .text.XMC_MATH_DIV_SignedDivNB:00000000 XMC_MATH_DIV_SignedDivNB
    {standard input}:998    .text.XMC_MATH_DIV_SignedDivNB:0000000c $d
    {standard input}:1003   .text.XMC_MATH_DIV_UnsignedModNB:00000000 $t
    {standard input}:1008   .text.XMC_MATH_DIV_UnsignedModNB:00000000 XMC_MATH_DIV_UnsignedModNB
    {standard input}:1029   .text.XMC_MATH_DIV_UnsignedModNB:0000000c $d
    {standard input}:1034   .text.XMC_MATH_DIV_SignedModNB:00000000 $t
    {standard input}:1039   .text.XMC_MATH_DIV_SignedModNB:00000000 XMC_MATH_DIV_SignedModNB
    {standard input}:1060   .text.XMC_MATH_DIV_SignedModNB:0000000c $d
    {standard input}:1065   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000000 $t
    {standard input}:1070   .text.XMC_MATH_CORDIC_Q15_Sqrt:00000000 XMC_MATH_CORDIC_Q15_Sqrt
    {standard input}:1111   .text.XMC_MATH_CORDIC_Q15_Sqrt:0000002c $d
    {standard input}:1117   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000000 $t
    {standard input}:1122   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000000 XMC_MATH_CORDIC_Q31_Sqrt
    {standard input}:1161   .text.XMC_MATH_CORDIC_Q31_Sqrt:00000028 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
