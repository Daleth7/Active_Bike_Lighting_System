   1              	 .cpu cortex-m0
   2              	 .fpu softvfp
   3              	 .eabi_attribute 20,1
   4              	 .eabi_attribute 21,1
   5              	 .eabi_attribute 23,3
   6              	 .eabi_attribute 24,1
   7              	 .eabi_attribute 25,1
   8              	 .eabi_attribute 26,1
   9              	 .eabi_attribute 30,2
  10              	 .eabi_attribute 34,0
  11              	 .eabi_attribute 18,4
  12              	 .code 16
  13              	 .file "system_XMC1300.c"
  14              	 .text
  15              	.Ltext0:
  16              	 .cfi_sections .debug_frame
  17              	 .section .text.SystemCoreSetup,"ax",%progbits
  18              	 .align 2
  19              	 .weak SystemCoreSetup
  20              	 .code 16
  21              	 .thumb_func
  23              	SystemCoreSetup:
  24              	.LFB35:
  25              	 .file 1 "../Startup/system_XMC1300.c"
   1:../Startup/system_XMC1300.c **** /**************************************************************************************************
   2:../Startup/system_XMC1300.c ****  * @file     system_XMC1300.c
   3:../Startup/system_XMC1300.c ****  * @brief    Device specific initialization for the XMC1300-Series according to CMSIS
   4:../Startup/system_XMC1300.c ****  * @version  V1.9
   5:../Startup/system_XMC1300.c ****  * @date     31 Mar 2016
   6:../Startup/system_XMC1300.c ****  *
   7:../Startup/system_XMC1300.c ****  * @cond
   8:../Startup/system_XMC1300.c ****  **************************************************************************************************
   9:../Startup/system_XMC1300.c ****  * Copyright (c) 2015-2016, Infineon Technologies AG
  10:../Startup/system_XMC1300.c ****  * All rights reserved.                        
  11:../Startup/system_XMC1300.c ****  *                                             
  12:../Startup/system_XMC1300.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  13:../Startup/system_XMC1300.c ****  * following conditions are met:   
  14:../Startup/system_XMC1300.c ****  *                                                                              
  15:../Startup/system_XMC1300.c ****  * Redistributions of source code must retain the above copyright notice, this list of conditions a
  16:../Startup/system_XMC1300.c ****  * disclaimer.                        
  17:../Startup/system_XMC1300.c ****  * 
  18:../Startup/system_XMC1300.c ****  * Redistributions in binary form must reproduce the above copyright notice, this list of condition
  19:../Startup/system_XMC1300.c ****  * disclaimer in the documentation and/or other materials provided with the distribution.          
  20:../Startup/system_XMC1300.c ****  * 
  21:../Startup/system_XMC1300.c ****  * Neither the name of the copyright holders nor the names of its contributors may be used to endor
  22:../Startup/system_XMC1300.c ****  * products derived from this software without specific prior written permission.                  
  23:../Startup/system_XMC1300.c ****  *                                                                              
  24:../Startup/system_XMC1300.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  25:../Startup/system_XMC1300.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  26:../Startup/system_XMC1300.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  27:../Startup/system_XMC1300.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  28:../Startup/system_XMC1300.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  29:../Startup/system_XMC1300.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  30:../Startup/system_XMC1300.c ****  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                            
  31:../Startup/system_XMC1300.c ****  *                                                                              
  32:../Startup/system_XMC1300.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  33:../Startup/system_XMC1300.c ****  * Infineon Technologies AG dave@infineon.com).                                                    
  34:../Startup/system_XMC1300.c ****  **************************************************************************************************
  35:../Startup/system_XMC1300.c ****  *
  36:../Startup/system_XMC1300.c ****  * *************************** Change history ********************************
  37:../Startup/system_XMC1300.c ****  * V1.2, 13 Dec 2012, PKB : Created change history table
  38:../Startup/system_XMC1300.c ****  * V1.3, 20 Dec 2012, PKB : Fixed SystemCoreClock computation
  39:../Startup/system_XMC1300.c ****  * V1.4, 02 Feb 2013, PKB : SCU_CLOCK -> SCU_CLK
  40:../Startup/system_XMC1300.c ****  * V1.5, 27 Nov 2013, DNE : Comments added in SystemInit function for MCLK support
  41:../Startup/system_XMC1300.c ****  * V1.6, 19 Feb 2014, JFT : Fixed SystemCoreClock when FDIV != 0 
  42:../Startup/system_XMC1300.c ****  * V1.7, 11 Dec 2014, JFT : SystemCoreClockSetup, SystemCoreSetup as weak functions
  43:../Startup/system_XMC1300.c ****  * V1.8, 03 Sep 2015, JFT : Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table (s
  44:../Startup/system_XMC1300.c ****  *                          MCLK = 32MHz, PCLK = 64MHz
  45:../Startup/system_XMC1300.c ****  * V1.9, 31 Mar 2016, JFT : Fix flash wait states to 1 cycle
  46:../Startup/system_XMC1300.c ****  *
  47:../Startup/system_XMC1300.c ****  * @endcond 
  48:../Startup/system_XMC1300.c ****  */
  49:../Startup/system_XMC1300.c **** 
  50:../Startup/system_XMC1300.c **** /*******************************************************************************
  51:../Startup/system_XMC1300.c ****  * HEADER FILES
  52:../Startup/system_XMC1300.c ****  *******************************************************************************/
  53:../Startup/system_XMC1300.c **** 
  54:../Startup/system_XMC1300.c **** #include <XMC1300.h>
  55:../Startup/system_XMC1300.c **** #include "system_XMC1300.h"
  56:../Startup/system_XMC1300.c **** 
  57:../Startup/system_XMC1300.c **** /*******************************************************************************
  58:../Startup/system_XMC1300.c ****  * MACROS
  59:../Startup/system_XMC1300.c ****  *******************************************************************************/
  60:../Startup/system_XMC1300.c **** 
  61:../Startup/system_XMC1300.c **** /* Define WEAK attribute */
  62:../Startup/system_XMC1300.c **** #if !defined(__WEAK)
  63:../Startup/system_XMC1300.c **** #if defined ( __CC_ARM )
  64:../Startup/system_XMC1300.c **** #define __WEAK __attribute__ ((weak))
  65:../Startup/system_XMC1300.c **** #elif defined ( __ICCARM__ )
  66:../Startup/system_XMC1300.c **** #define __WEAK __weak
  67:../Startup/system_XMC1300.c **** #elif defined ( __GNUC__ )
  68:../Startup/system_XMC1300.c **** #define __WEAK __attribute__ ((weak))
  69:../Startup/system_XMC1300.c **** #elif defined ( __TASKING__ )
  70:../Startup/system_XMC1300.c **** #define __WEAK __attribute__ ((weak))
  71:../Startup/system_XMC1300.c **** #endif
  72:../Startup/system_XMC1300.c **** #endif
  73:../Startup/system_XMC1300.c **** 
  74:../Startup/system_XMC1300.c **** #define DCO1_FREQUENCY (64000000U)
  75:../Startup/system_XMC1300.c **** 
  76:../Startup/system_XMC1300.c **** /* Macros to apply fixed wait states to flash read access (see DS Addendum) */
  77:../Startup/system_XMC1300.c **** #define NVM_NVMCONF_WS_Msk    (0x1000UL)
  78:../Startup/system_XMC1300.c **** #define NVM_CONFIG1           ((uint32_t *)0x40050048)
  79:../Startup/system_XMC1300.c **** #define NVM_CONFIG1_FIXWS_Msk (0x800UL)
  80:../Startup/system_XMC1300.c **** 
  81:../Startup/system_XMC1300.c **** /*******************************************************************************
  82:../Startup/system_XMC1300.c ****  * GLOBAL VARIABLES
  83:../Startup/system_XMC1300.c ****  *******************************************************************************/
  84:../Startup/system_XMC1300.c **** 
  85:../Startup/system_XMC1300.c **** #if defined ( __CC_ARM )
  86:../Startup/system_XMC1300.c **** uint32_t SystemCoreClock __attribute__((at(0x20003FFC)));
  87:../Startup/system_XMC1300.c **** #elif defined ( __ICCARM__ )
  88:../Startup/system_XMC1300.c **** __no_init uint32_t SystemCoreClock;
  89:../Startup/system_XMC1300.c **** #elif defined ( __GNUC__ )
  90:../Startup/system_XMC1300.c **** uint32_t SystemCoreClock __attribute__((section(".no_init")));
  91:../Startup/system_XMC1300.c **** #elif defined ( __TASKING__ )
  92:../Startup/system_XMC1300.c **** uint32_t SystemCoreClock __at( 0x20003FFC );
  93:../Startup/system_XMC1300.c **** #endif
  94:../Startup/system_XMC1300.c **** 
  95:../Startup/system_XMC1300.c **** /*******************************************************************************
  96:../Startup/system_XMC1300.c ****  * API IMPLEMENTATION
  97:../Startup/system_XMC1300.c ****  *******************************************************************************/
  98:../Startup/system_XMC1300.c **** 
  99:../Startup/system_XMC1300.c **** __WEAK void SystemInit(void)
 100:../Startup/system_XMC1300.c **** {    
 101:../Startup/system_XMC1300.c ****   SystemCoreSetup();
 102:../Startup/system_XMC1300.c ****   SystemCoreClockSetup();
 103:../Startup/system_XMC1300.c **** }
 104:../Startup/system_XMC1300.c **** 
 105:../Startup/system_XMC1300.c **** __WEAK void SystemCoreSetup(void)
 106:../Startup/system_XMC1300.c **** {
  26              	 .loc 1 106 0
  27              	 .cfi_startproc
 107:../Startup/system_XMC1300.c ****   /* Fix flash wait states to 1 cycle */
 108:../Startup/system_XMC1300.c ****   NVM->NVMCONF |= NVM_NVMCONF_WS_Msk;
  28              	 .loc 1 108 0
  29 0000 8021     	 mov r1,#128
  30 0002 064A     	 ldr r2,.L2
  31 0004 4901     	 lsl r1,r1,#5
  32 0006 1389     	 ldrh r3,[r2,#8]
 109:../Startup/system_XMC1300.c ****   *NVM_CONFIG1 |= NVM_CONFIG1_FIXWS_Msk; 
 110:../Startup/system_XMC1300.c **** }
  33              	 .loc 1 110 0
  34              	 
 108:../Startup/system_XMC1300.c ****   *NVM_CONFIG1 |= NVM_CONFIG1_FIXWS_Msk; 
  35              	 .loc 1 108 0
  36 0008 0B43     	 orr r3,r1
  37 000a 1381     	 strh r3,[r2,#8]
 109:../Startup/system_XMC1300.c ****   *NVM_CONFIG1 |= NVM_CONFIG1_FIXWS_Msk; 
  38              	 .loc 1 109 0
  39 000c 8023     	 mov r3,#128
  40 000e 044A     	 ldr r2,.L2+4
  41 0010 1B01     	 lsl r3,r3,#4
  42 0012 1168     	 ldr r1,[r2]
  43 0014 0B43     	 orr r3,r1
  44 0016 1360     	 str r3,[r2]
  45              	 .loc 1 110 0
  46 0018 7047     	 bx lr
  47              	.L3:
  48 001a C046     	 .align 2
  49              	.L2:
  50 001c 00000540 	 .word 1074069504
  51 0020 48000540 	 .word 1074069576
  52              	 .cfi_endproc
  53              	.LFE35:
  55              	 .global __aeabi_uidiv
  56              	 .section .text.SystemCoreClockUpdate,"ax",%progbits
  57              	 .align 2
  58              	 .weak SystemCoreClockUpdate
  59              	 .code 16
  60              	 .thumb_func
  62              	SystemCoreClockUpdate:
  63              	.LFB37:
 111:../Startup/system_XMC1300.c **** 
 112:../Startup/system_XMC1300.c **** __WEAK void SystemCoreClockSetup(void)
 113:../Startup/system_XMC1300.c **** {
 114:../Startup/system_XMC1300.c ****   /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
 115:../Startup/system_XMC1300.c ****   /* MCLK = 32MHz, PCLK = 64MHz */
 116:../Startup/system_XMC1300.c ****   
 117:../Startup/system_XMC1300.c ****   SCU_GENERAL->PASSWD = 0x000000C0UL; /* disable bit protection */
 118:../Startup/system_XMC1300.c ****   SCU_CLK->CLKCR = 0x3FF10100UL;
 119:../Startup/system_XMC1300.c ****   while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
 120:../Startup/system_XMC1300.c ****   SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
 121:../Startup/system_XMC1300.c **** 
 122:../Startup/system_XMC1300.c ****   SystemCoreClockUpdate();
 123:../Startup/system_XMC1300.c **** }
 124:../Startup/system_XMC1300.c **** 
 125:../Startup/system_XMC1300.c **** __WEAK void SystemCoreClockUpdate(void)
 126:../Startup/system_XMC1300.c **** {
  64              	 .loc 1 126 0
  65              	 .cfi_startproc
 127:../Startup/system_XMC1300.c ****   static uint32_t IDIV, FDIV;
 128:../Startup/system_XMC1300.c **** 
 129:../Startup/system_XMC1300.c ****   IDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_IDIV_Msk) >> SCU_CLK_CLKCR_IDIV_Pos;
  66              	 .loc 1 129 0
  67 0000 0D4A     	 ldr r2,.L9
 126:../Startup/system_XMC1300.c ****   static uint32_t IDIV, FDIV;
  68              	 .loc 1 126 0
  69 0002 08B5     	 push {r3,lr}
  70              	.LCFI0:
  71              	 .cfi_def_cfa_offset 8
  72              	 .cfi_offset 3,-8
  73              	 .cfi_offset 14,-4
  74              	 .loc 1 129 0
  75 0004 1368     	 ldr r3,[r2]
  76 0006 0D49     	 ldr r1,.L9+4
  77 0008 1B04     	 lsl r3,r3,#16
  78 000a 1B0E     	 lsr r3,r3,#24
  79 000c 0B60     	 str r3,[r1]
 130:../Startup/system_XMC1300.c ****   FDIV = ((SCU_CLK->CLKCR) & SCU_CLK_CLKCR_FDIV_Msk) >> SCU_CLK_CLKCR_FDIV_Pos;
  80              	 .loc 1 130 0
  81 000e FF21     	 mov r1,#255
  82 0010 1268     	 ldr r2,[r2]
  83 0012 1140     	 and r1,r2
  84 0014 0A4A     	 ldr r2,.L9+8
  85 0016 1160     	 str r1,[r2]
 131:../Startup/system_XMC1300.c ****   
 132:../Startup/system_XMC1300.c ****   if (IDIV != 0)
  86              	 .loc 1 132 0
  87 0018 002B     	 cmp r3,#0
  88 001a 03D1     	 bne .L8
 133:../Startup/system_XMC1300.c ****   {
 134:../Startup/system_XMC1300.c ****     /* Fractional divider is enabled and used */
 135:../Startup/system_XMC1300.c ****     SystemCoreClock = ((DCO1_FREQUENCY << 6U) / ((IDIV << 8) + FDIV)) << 1U;
 136:../Startup/system_XMC1300.c ****   }
 137:../Startup/system_XMC1300.c ****   else
 138:../Startup/system_XMC1300.c ****   {
 139:../Startup/system_XMC1300.c ****     /* Fractional divider bypassed. Simply divide DCO_DCLK by 2 */
 140:../Startup/system_XMC1300.c ****     SystemCoreClock = DCO1_FREQUENCY >> 1U;
  89              	 .loc 1 140 0
  90 001c 094A     	 ldr r2,.L9+12
  91 001e 0A4B     	 ldr r3,.L9+16
  92 0020 1A60     	 str r2,[r3]
  93              	.L4:
 141:../Startup/system_XMC1300.c ****   }
 142:../Startup/system_XMC1300.c **** }
  94              	 .loc 1 142 0
  95              	 
  96 0022 08BD     	 pop {r3,pc}
  97              	.L8:
 135:../Startup/system_XMC1300.c ****   }
  98              	 .loc 1 135 0
  99 0024 1B02     	 lsl r3,r3,#8
 100 0026 5918     	 add r1,r3,r1
 101 0028 0848     	 ldr r0,.L9+20
 102 002a FFF7FEFF 	 bl __aeabi_uidiv
 103              	.LVL0:
 104 002e 064B     	 ldr r3,.L9+16
 105 0030 4000     	 lsl r0,r0,#1
 106 0032 1860     	 str r0,[r3]
 107 0034 F5E7     	 b .L4
 108              	.L10:
 109 0036 C046     	 .align 2
 110              	.L9:
 111 0038 00030140 	 .word 1073808128
 112 003c 00000000 	 .word .LANCHOR0
 113 0040 00000000 	 .word .LANCHOR1
 114 0044 0048E801 	 .word 32000000
 115 0048 00000000 	 .word .LANCHOR2
 116 004c 000024F4 	 .word -198967296
 117              	 .cfi_endproc
 118              	.LFE37:
 120              	 .section .text.SystemCoreClockSetup,"ax",%progbits
 121              	 .align 2
 122              	 .weak SystemCoreClockSetup
 123              	 .code 16
 124              	 .thumb_func
 126              	SystemCoreClockSetup:
 127              	.LFB36:
 113:../Startup/system_XMC1300.c ****   /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
 128              	 .loc 1 113 0
 129              	 .cfi_startproc
 117:../Startup/system_XMC1300.c ****   SCU_CLK->CLKCR = 0x3FF10100UL;
 130              	 .loc 1 117 0
 131 0000 C022     	 mov r2,#192
 119:../Startup/system_XMC1300.c ****   SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
 132              	 .loc 1 119 0
 133 0002 8021     	 mov r1,#128
 113:../Startup/system_XMC1300.c ****   /* Override values of CLOCK_VAL1 and CLOCK_VAL2 defined in vector table */
 134              	 .loc 1 113 0
 135 0004 08B5     	 push {r3,lr}
 136              	.LCFI1:
 137              	 .cfi_def_cfa_offset 8
 138              	 .cfi_offset 3,-8
 139              	 .cfi_offset 14,-4
 117:../Startup/system_XMC1300.c ****   SCU_CLK->CLKCR = 0x3FF10100UL;
 140              	 .loc 1 117 0
 141 0006 074B     	 ldr r3,.L14
 119:../Startup/system_XMC1300.c ****   SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
 142              	 .loc 1 119 0
 143 0008 C905     	 lsl r1,r1,#23
 117:../Startup/system_XMC1300.c ****   SCU_CLK->CLKCR = 0x3FF10100UL;
 144              	 .loc 1 117 0
 145 000a 5A62     	 str r2,[r3,#36]
 118:../Startup/system_XMC1300.c ****   while((SCU_CLK->CLKCR & SCU_CLK_CLKCR_VDDC2LOW_Msk));
 146              	 .loc 1 118 0
 147 000c 064A     	 ldr r2,.L14+4
 148 000e 074B     	 ldr r3,.L14+8
 149 0010 1360     	 str r3,[r2]
 150              	.L12:
 119:../Startup/system_XMC1300.c ****   SCU_GENERAL->PASSWD = 0x000000C3UL; /* enable bit protection */
 151              	 .loc 1 119 0 discriminator 1
 152 0012 1368     	 ldr r3,[r2]
 153 0014 0B42     	 tst r3,r1
 154 0016 FCD1     	 bne .L12
 120:../Startup/system_XMC1300.c **** 
 155              	 .loc 1 120 0
 156 0018 C322     	 mov r2,#195
 157 001a 024B     	 ldr r3,.L14
 123:../Startup/system_XMC1300.c **** 
 158              	 .loc 1 123 0
 159              	 
 120:../Startup/system_XMC1300.c **** 
 160              	 .loc 1 120 0
 161 001c 5A62     	 str r2,[r3,#36]
 122:../Startup/system_XMC1300.c **** }
 162              	 .loc 1 122 0
 163 001e FFF7FEFF 	 bl SystemCoreClockUpdate
 164              	.LVL1:
 123:../Startup/system_XMC1300.c **** 
 165              	 .loc 1 123 0
 166 0022 08BD     	 pop {r3,pc}
 167              	.L15:
 168              	 .align 2
 169              	.L14:
 170 0024 00000140 	 .word 1073807360
 171 0028 00030140 	 .word 1073808128
 172 002c 0001F13F 	 .word 1072759040
 173              	 .cfi_endproc
 174              	.LFE36:
 176              	 .section .text.SystemInit,"ax",%progbits
 177              	 .align 2
 178              	 .weak SystemInit
 179              	 .code 16
 180              	 .thumb_func
 182              	SystemInit:
 183              	.LFB34:
 100:../Startup/system_XMC1300.c ****   SystemCoreSetup();
 184              	 .loc 1 100 0
 185              	 .cfi_startproc
 186 0000 08B5     	 push {r3,lr}
 187              	.LCFI2:
 188              	 .cfi_def_cfa_offset 8
 189              	 .cfi_offset 3,-8
 190              	 .cfi_offset 14,-4
 101:../Startup/system_XMC1300.c ****   SystemCoreClockSetup();
 191              	 .loc 1 101 0
 192 0002 FFF7FEFF 	 bl SystemCoreSetup
 193              	.LVL2:
 103:../Startup/system_XMC1300.c **** 
 194              	 .loc 1 103 0
 195              	 
 102:../Startup/system_XMC1300.c **** }
 196              	 .loc 1 102 0
 197 0006 FFF7FEFF 	 bl SystemCoreClockSetup
 198              	.LVL3:
 103:../Startup/system_XMC1300.c **** 
 199              	 .loc 1 103 0
 200 000a 08BD     	 pop {r3,pc}
 201              	 .cfi_endproc
 202              	.LFE34:
 204              	 .global SystemCoreClock
 205              	 .section .bss.IDIV.4926,"aw",%nobits
 206              	 .align 2
 207              	 .set .LANCHOR0,.+0
 210              	IDIV.4926:
 211 0000 00000000 	 .space 4
 212              	 .section .no_init,"aw",%progbits
 213              	 .align 2
 214              	 .set .LANCHOR2,.+0
 217              	SystemCoreClock:
 218 0000 00000000 	 .space 4
 219              	 .section .bss.FDIV.4927,"aw",%nobits
 220              	 .align 2
 221              	 .set .LANCHOR1,.+0
 224              	FDIV.4927:
 225 0000 00000000 	 .space 4
 226              	 .text
 227              	.Letext0:
 228              	 .file 2 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 229              	 .file 3 "c:\\davev4-64bit\\dave-4.3.2\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 230              	 .file 4 "C:/Workspaces/DAVE-4.3-64Bit/WS_2016_09_02/Radar_sense2Go_exe/Libraries/CMSIS/Infineon/XMC1300_series/Include/XMC1300.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_XMC1300.c
    {standard input}:18     .text.SystemCoreSetup:00000000 $t
    {standard input}:23     .text.SystemCoreSetup:00000000 SystemCoreSetup
    {standard input}:50     .text.SystemCoreSetup:0000001c $d
    {standard input}:57     .text.SystemCoreClockUpdate:00000000 $t
    {standard input}:62     .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
    {standard input}:111    .text.SystemCoreClockUpdate:00000038 $d
    {standard input}:121    .text.SystemCoreClockSetup:00000000 $t
    {standard input}:126    .text.SystemCoreClockSetup:00000000 SystemCoreClockSetup
    {standard input}:170    .text.SystemCoreClockSetup:00000024 $d
    {standard input}:177    .text.SystemInit:00000000 $t
    {standard input}:182    .text.SystemInit:00000000 SystemInit
    {standard input}:217    .no_init:00000000 SystemCoreClock
    {standard input}:206    .bss.IDIV.4926:00000000 $d
    {standard input}:210    .bss.IDIV.4926:00000000 IDIV.4926
    {standard input}:213    .no_init:00000000 $d
    {standard input}:220    .bss.FDIV.4927:00000000 $d
    {standard input}:224    .bss.FDIV.4927:00000000 FDIV.4927
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidiv
