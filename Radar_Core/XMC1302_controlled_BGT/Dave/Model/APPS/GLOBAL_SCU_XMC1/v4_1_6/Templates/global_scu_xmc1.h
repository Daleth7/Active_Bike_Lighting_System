/**
 * @file global_scu_xmc1.h
 * @date 2015-10-09
 *
 * NOTE:
 * This file is generated by DAVE. Any manual modification done to this file will be lost when the code is
 * regenerated.
 */
/**
 * @cond
 ***********************************************************************************************************************
 * GLOBAL_SCU_XMC1 v4.1.6 - Registers the callback for SCU Interrupt
 *
 * Copyright (c) 2015, Infineon Technologies AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,are permitted provided that the
 * following conditions are met:
 *
 *   Redistributions of source code must retain the above copyright notice, this list of conditions and the  following
 *   disclaimer.
 *
 *   Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *   following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *   Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
 *   products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  OF THE
 * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes
 * with Infineon Technologies AG (dave@infineon.com).
 ***********************************************************************************************************************
 *
 * Change History
 * --------------
 *
 * 2015-02-16:
 *     - Initial version<br>
 *
 * 2015-06-26:
 *     - Added new static inline APIs
 *        GLOBAL_SCU_XMC4_EnableIRQ,GLOBAL_SCU_XMC4_DisableIRQ
 *        GLOBAL_SCU_XMC4_EnableEvent,GLOBAL_SCU_XMC4_DisableEvent
 *     - Removed GLOBAL_SCU_XMC4_INTERRUPT_EVENT enum
 *     - Equivalent macros are defined
 *
 * 2015-07-30:
 *     - Updated XMC14 related events
 * 2015-10-09:
 *     - Removed CPU_CTRL_XMC1 header file inclusion
 * @endcond
 *
 */

#ifndef GLOBAL_SCU_XMC1_H
#define GLOBAL_SCU_XMC1_H

/***********************************************************************************************************************
 * HEADER FILES
 **********************************************************************************************************************/

#include <xmc_scu.h>
#include <DAVE_Common.h>

#include "global_scu_xmc1_conf.h"

/**
 * @addtogroup GLOBAL_SCU_XMC1
 * @{
 */
/***********************************************************************************************************************
 * MACROS
 ***********************************************************************************************************************/
#define GLOBAL_SCU_XMC1_IRQNUM (3U)

#define GLOBAL_SCU_XMC1_EVENT_WDT_WARNING      XMC_SCU_INTERRUPT_EVENT_WDT_WARN       /**< WDT pre-warning event. */
#define GLOBAL_SCU_XMC1_EVENT_RTC_PERIODIC     XMC_SCU_INTERRUPT_EVENT_RTC_PERIODIC   /**< RTC periodic event. */
#define GLOBAL_SCU_XMC1_EVENT_RTC_ALARM        XMC_SCU_INTERRUPT_EVENT_RTC_ALARM      /**< RTC alarm event. */
#define GLOBAL_SCU_XMC1_EVENT_VDDPI            XMC_SCU_INTERRUPT_EVENT_VDDPI          /**< VDDP pre-warning event. */
#if defined(COMPARATOR)
#define GLOBAL_SCU_XMC1_EVENT_ACMP0            XMC_SCU_INTERRUPT_EVENT_ACMP0 /**< Analog comparator-0 output event. */
#define GLOBAL_SCU_XMC1_EVENT_ACMP1            XMC_SCU_INTERRUPT_EVENT_ACMP1 /**< Analog comparator-1 output event. */
#define GLOBAL_SCU_XMC1_EVENT_ACMP2            XMC_SCU_INTERRUPT_EVENT_ACMP2 /**< Analog comparator-2 output event. */

#endif
#define GLOBAL_SCU_XMC1_EVENT_VDROP            XMC_SCU_INTERRUPT_EVENT_VDROP  /**< VDROP event. */
#if defined(COMPARATOR)
#define GLOBAL_SCU_XMC1_EVENT_ORC0             XMC_SCU_INTERRUPT_EVENT_ORC0   /**< Out of range comparator-0 event. */
#define GLOBAL_SCU_XMC1_EVENT_ORC1             XMC_SCU_INTERRUPT_EVENT_ORC1   /**< Out of range comparator-1 event. */
#define GLOBAL_SCU_XMC1_EVENT_ORC2             XMC_SCU_INTERRUPT_EVENT_ORC2   /**< Out of range comparator-2 event. */
#define GLOBAL_SCU_XMC1_EVENT_ORC3             XMC_SCU_INTERRUPT_EVENT_ORC3   /**< Out of range comparator-3 event. */
#define GLOBAL_SCU_XMC1_EVENT_ORC4             XMC_SCU_INTERRUPT_EVENT_ORC4   /**< Out of range comparator-4 event. */
#define GLOBAL_SCU_XMC1_EVENT_ORC5             XMC_SCU_INTERRUPT_EVENT_ORC5   /**< Out of range comparator-5 event. */
#define GLOBAL_SCU_XMC1_EVENT_ORC6             XMC_SCU_INTERRUPT_EVENT_ORC6   /**< Out of range comparator-6 event. */
#define GLOBAL_SCU_XMC1_EVENT_ORC7             XMC_SCU_INTERRUPT_EVENT_ORC7   /**< Out of range comparator-7 event. */
#endif
#define GLOBAL_SCU_XMC1_EVENT_LOCI             XMC_SCU_INTERRUPT_EVENT_LOCI    /**< Loss of clock event. */
#define GLOBAL_SCU_XMC1_EVENT_PESRAM           XMC_SCU_INTERRUPT_EVENT_PESRAM /**< PSRAM Parity error event. */
#define GLOBAL_SCU_XMC1_EVENT_PEUSIC0          XMC_SCU_INTERRUPT_EVENT_PEUSIC0   /**< USIC0 Parity error event. */
#if defined(USIC1)
#define GLOBAL_SCU_XMC1_EVENT_PEUSIC1          XMC_SCU_INTERRUPT_EVENT_PEUSIC1   /**< USIC1 Parity error event. */
#endif
#define GLOBAL_SCU_XMC1_EVENT_FLASH_ERROR      XMC_SCU_INTERRUPT_EVENT_FLASH_ERROR /**< Flash ECC double bit error event. */
#define GLOBAL_SCU_XMC1_EVENT_FLASH_COMPLETED  XMC_SCU_INTERRUPT_EVENT_FLASH_COMPLETED /**< Flash operation completion event. */
#define GLOBAL_SCU_XMC1_EVENT_VCLIP            XMC_SCU_INTERRUPT_EVENT_VCLIP  /**< VCLIP event. */
#define GLOBAL_SCU_XMC1_EVENT_STDBYCLKFAIL     XMC_SCU_INTERRUPT_EVENT_STDBYCLKFAIL  /**< Standby clock failure event. */
#define GLOBAL_SCU_XMC1_EVENT_RTCCTR_UPDATED   XMC_SCU_INTERRUPT_EVENT_RTCCTR_UPDATED  /**< RTCCTR register update event. */
#define GLOBAL_SCU_XMC1_EVENT_RTCATIM0_UPDATED XMC_SCU_INTERRUPT_EVENT_RTCATIM0_UPDATED  /**< RTCATIM0 register update event. */
#define GLOBAL_SCU_XMC1_EVENT_RTCATIM1_UPDATED XMC_SCU_INTERRUPT_EVENT_RTCATIM1_UPDATED  /**< RTCATIM1 register update event. */
#define GLOBAL_SCU_XMC1_EVENT_RTCTIM0_UPDATED  XMC_SCU_INTERRUPT_EVENT_RTCTIM0_UPDATED  /**< RTCTIM0 register update event. */
#define GLOBAL_SCU_XMC1_EVENT_RTCTIM1_UPDATED  XMC_SCU_INTERRUPT_EVENT_RTCTIM1_UPDATED  /**< RTCTIM1 register update event. */
#define GLOBAL_SCU_XMC1_EVENT_TSE_DONE         XMC_SCU_INTERRUPT_EVENT_TSE_DONE  /**< Temperature measurement Completion event. */
#define GLOBAL_SCU_XMC1_EVENT_TSE_HIGH         XMC_SCU_INTERRUPT_EVENT_TSE_HIGH  /**< Temperature too high event. */
#define GLOBAL_SCU_XMC1_EVENT_TSE_LOW          XMC_SCU_INTERRUPT_EVENT_TSE_LOW  /**< Temperature too low event. */
#if defined(CAN)
#define GLOBAL_SCU_INTERRUPT_EVENT_PEMCAN      XMC_SCU_INTERRUPT_EVENT_PEMCAN   /**< MultiCAN SRAM Parity Error Event. */
#endif
#if (UC_SERIES == XMC14)
#define GLOBAL_SCU_XMC1_EVENT_LOSS_EXT_CLOCK   XMC_SCU_INTERRUPT_EVENT_LOSS_EXT_CLOCK  /**< Loss of external OSC_HP clock event. */
#define GLOBAL_SCU_XMC1_EVENT_DCO1_OUT_SYNC    XMC_SCU_INTERRUPT_EVENT_DCO1_OUT_SYNC   /**< DCO1 Out of SYNC Event. */
#define GLOBAL_SCU_XMC1_EVENT_ACMP3            XMC_SCU_INTERRUPT_EVENT_ACMP3 /**< Analog comparator-3 output event. */
#endif
/***********************************************************************************************************************
 * ENUMS
 ***********************************************************************************************************************/

/**
 * @ingroup GLOBAL_SCU_XMC1_enumerations
 * @{
 */
/**
 * APP status
 */
typedef enum GLOBAL_SCU_XMC1_STATUS
{
  GLOBAL_SCU_XMC1_STATUS_SUCCESS = 0U,  /**< Initialization status success */
  GLOBAL_SCU_XMC1_STATUS_FAILURE = 1U	/**< Initialization status failure */
} GLOBAL_SCU_XMC1_STATUS_t;

/**
  *@}
  */
/**
 * @ingroup GLOBAL_SCU_XMC1_datastructures
 * @{
 */
/**********************************************************************************************************************
* DATA STRUCTURES
**********************************************************************************************************************/

/**
 * Event handler type
 */
typedef XMC_SCU_INTERRUPT_EVENT_HANDLER_t GLOBAL_SCU_XMC1_EVENT_HANDLER_t;

/** Event type
 *
 */
typedef XMC_SCU_INTERRUPT_EVENT_t GLOBAL_SCU_XMC1_EVENT_t;

/**
 * Configuration parameters
 */

typedef struct GLOBAL_SCU_XMC1_CONFIG
{
  uint8_t priority[GLOBAL_SCU_XMC1_IRQNUM];    /**<  Node Interrupt Priority    */
  bool enable_at_init[GLOBAL_SCU_XMC1_IRQNUM]; /**<  Interrupt enable for Node  */
} GLOBAL_SCU_XMC1_CONFIG_t;


/**
 * Runtime handler
 */
typedef struct GLOBAL_SCU_XMC1
{
  const GLOBAL_SCU_XMC1_CONFIG_t * config; /**< Instance configuration options */
  bool initialized;                        /**< Initialization status */
} GLOBAL_SCU_XMC1_t;
/**
  *@}
  */
/**
 * @ingroup GLOBAL_SCU_XMC1_apidoc
 * @{
 */
/**********************************************************************************************************************
 * API PROTOTYPES
***********************************************************************************************************************/

/**
 * @brief Get GLOBAL_SCU_XMC1 APP version
 * @return DAVE_APP_VERSION_t APP version details (major, minor and patch number)
 *
 * \par<b>Description: </b><br>
 * The function can be used to check application software compatibility with a
 * specific version of the APP.
 *
 * Example Usage:
 *
 * @code
 * #include <DAVE.h>
 *
 * int main(void)
 * {
 *   DAVE_APP_VERSION_t version;
 *
 *   // Initialize GLOBAL_SCU_XMC1 APP.
 *   DAVE_Init();
 *
 *   version = GLOBAL_SCU_XMC1_GetAppVersion();
 *   if (version.major != 4U)
 *   {
 *     // Probably, not the right version.
 *   }
 *
 *   // More code here
 *   while(1)
 *   {
 *   }
 *   return (0);
 * }
 * @endcode<BR> </p>
 */
DAVE_APP_VERSION_t GLOBAL_SCU_XMC1_GetAppVersion(void);

/**
 * @brief  Initialize the GLOBAL_SCU_XMC1 APP
 *
 * This function initializes the required CPU_XMC1 APP if not yet done,
 * sets the priority of the SCU_0/SCU_1/SCU_2 IRQ, and enables
 * the IRQ if the user has selected so.
 * This function is called from DAVE_Init() or top level APP requiring the
 * GLOBAL_SCU_XMC1 APP.
 *
 * @param  handle Runtime handler
 *
 * @return GLOBAL_SCU_XMC1_STATUS_t Indicates initialization status
 *
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_XMC1_t *const handle);

/**
 * @brief Register an event callback routine
 * This function registers an event callback routine for a specific event.
 * Note: User needs to enable the event generation separately.
 *       See GLOBAL_SCU_XMC1_EnableEvent and GLOBAL_SCU_XMC1_DisableEvent.
 *
 * @param  event    Event for which the callback is register
 * @param  callback Routine to handle occurrence of event
 *
 * @return GLOBAL_SCU_XMC1_STATUS_t Indicates registration status
 *
 * @code
 * #include <DAVE.h>
 *
 * void CbListener(void)
 * {
 *   // Callback function implementation
 * };
 *
 * int main(void)
 * {
 *   DAVE_Init();
 *
 *   GLOBAL_SCU_XMC1_RegisterCallback(GLOBAL_SCU_XMC1_EVENT_RTC_ALARM, CbListener);
 *   GLOBAL_SCU_XMC1_EnableEvent(GLOBAL_SCU_XMC1_EVENT_RTC_ALARM);
 *   while(1);
 * }
 *
 * @endcode<BR> </p>
 */
GLOBAL_SCU_XMC1_STATUS_t GLOBAL_SCU_XMC1_RegisterCallback(const GLOBAL_SCU_XMC1_EVENT_t event,
                                                          const GLOBAL_SCU_XMC1_EVENT_HANDLER_t callback);

/**
 * @brief Enable the handling of events
 *
 * @param void
 */
__STATIC_INLINE void GLOBAL_SCU_XMC1_EnableIRQ(uint8_t irq_num)
{
  NVIC_EnableIRQ((IRQn_Type)irq_num);
}

/**
 * @brief Disable the handling of events
 *
 * @param void
 */
__STATIC_INLINE void GLOBAL_SCU_XMC1_DisableIRQ(uint8_t irq_num)
{
  NVIC_DisableIRQ((IRQn_Type)irq_num);
}

/**
 * @brief Enable a specific event
 *
 * @param  event Events to be enabled. See GLOBAL_SCU_XMC1_EVENT_t.
 */
__STATIC_INLINE void GLOBAL_SCU_XMC1_EnableEvent(const GLOBAL_SCU_XMC1_EVENT_t event)
{
  XMC_SCU_INTERRUPT_EnableEvent(event);
}

/**
 * @brief Disable a specific event
 *
 * @param  event Events to be disabled. See GLOBAL_SCU_XMC1_EVENT_t.
 */
__STATIC_INLINE void GLOBAL_SCU_XMC1_DisableEvent(const GLOBAL_SCU_XMC1_EVENT_t event)
{
  XMC_SCU_INTERRUPT_DisableEvent(event);
}

/**
  *@}
  */
/**
  * @}
  */
#ifdef __cplusplus
}
#endif

#include "global_scu_xmc1_extern.h"

#endif 
