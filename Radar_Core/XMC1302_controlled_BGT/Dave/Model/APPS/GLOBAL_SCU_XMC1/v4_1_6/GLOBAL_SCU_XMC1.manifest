package Model.APPS.GLOBAL_SCU_XMC1.v4_1_6;

/*
Copyright (c) 2015, Infineon Technologies AG
All rights reserved.                       
                                           
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
following conditions are met:  
                                                                            
Redistributions of source code must retain the above copyright notice, this list of conditions and the following
disclaimer.                       
 
Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
disclaimer in the documentation and/or other materials provided with the distribution.                      
 
Neither the name of the copyright holders nor the names of its contributors may be used to endorse or promote
products derived from this software without specific prior written permission.                                          
                                                                            
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR 
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                                                 
                                                                            
To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with 
Infineon Technologies AG: dave@infineon.com. */

/*************** Revision History ****************************************************
 Version      Date          Description 
 
 4.0.0       16-Feb-2015   Initial version for DAVE v4 <br>
 4.0.1       08-May-2015   Help documentation updated
 4.1.2       16-Jun-2015   GLOBAL_SCU_XMC1_RegisterCallback API return type is modified
                           to GLOBAL_SCU_XMC1_STATUS_t <br>
 4.1.4       26-Jun-2015   GLOBAL_SCU_XMC1_EnableEvent, GLOBAL_SCU_XMC1_DisableEvent APIs
                           parameter is modified with type GLOBAL_SCU_XMC1_EVENT_t 		
 4.1.6       09-Oct-2015   Added support for XMC1400 devices                           				   
 ************************************************************************************/
// Import statements
import ifx.davex.app.manifest.*

class GLOBAL_SCU_XMC1 extends GLOBAL_SCU_XMC1_GUI {

    // Note  : SCU properties are mandatory and important
    // Begin : SCU property section
    def version    = '4.1.6'

    def categoriesDescription = ["System/~Global Reg control"]// Minimum DAVE version required for the App
    def minDaveVersion        = '4.0.0'

    // Keywords to search in Apps selection view
    def keywords      =
    [
		"all"
    ]

    // Software IDs and its required minimum version
    def softwareIDs  = [
                         "XMC1.*.*.*.*":"1.0.0"
		               ]

    def singleton     = true
    def initProvider  = true
    def deprecated    = false
    def sharable      = true
    def ioApp         = false

    // App short description
    def description = "GLOBAL_SCU_XMC1 APP allows to register callback functions and to handle the SR0/SR1/SR2 service request Events."

    // End   : SCU property section

    // Begin : User variable section
    MVirtualResourceGroup hwres_sr0_scunode
    MVirtualResourceGroup hwres_sr1_scunode
    MVirtualResourceGroup hwres_sr2_scunode

    MVirtualSignal vs_sr0_signal_in
    MVirtualSignal vs_sr1_signal_in
    MVirtualSignal vs_sr2_signal_in

    MRequiredApp appres_cpu
    
    SolverVariable node_0
    SolverVariable node_1
    SolverVariable node_2
    
    GString seriesMF = GString(widgetName:"series", value:"")
    
    // End   : User variable section

    // SCU Constructor
    public GLOBAL_SCU_XMC1(DaveEnv daveEnv) {

        String family = daveEnv.project.selectedDevice.deviceId.family
        
        seriesMF.value = daveEnv.project.selectedDevice.deviceId.series
        
        appres_cpu =  MRequiredApp("CPU_CTRL_XMC1", "CPU", RSHARABLE,"4.0.2")
         
        MF MF_CPU_MAXINTRPRIO  = MF({
                                      Integer temp = appres_cpu.getVal(["gint_maxInterruptPreemptPriority", "value"]) as Integer
                                      return temp
                                    }, Integer)
        
        node_0 = SolverVariable();
        node_1 = SolverVariable();
        node_2 = SolverVariable();
        
        addLinearConstraint(node_1, node_0, 1);
		
		/* Reserve the resource group for node 0 */
        hwres_sr0_scunode =  MVirtualResourceGroup("NVIC Node 0", ["peripheral","cpu","0","nvic","interrupt",node_0],true)                                                        
        vs_sr0_signal_in =  MVirtualSignal(hwres_sr0_scunode, "sr_irq0", "signal_in", true, false) /* required{}, exposeToUser{} */
        addUriElementRangeConstraint(node_0, MF({[0]}, List))
            
		/* Reserve the resource group for node 1 */
        hwres_sr1_scunode =  MVirtualResourceGroup("NVIC Node 1", ["peripheral","cpu","0","nvic","interrupt",node_1],true)
        vs_sr1_signal_in =  MVirtualSignal(hwres_sr1_scunode, "sr_irq1", "signal_in", true, false) /* required{}, exposeToUser{} */
        addUriElementRangeConstraint(node_1, MF({[1]}, List))
            
		/* Reserve the resource group for node 2 */
        hwres_sr2_scunode =  MVirtualResourceGroup("NVIC Node 2", ["peripheral","cpu","0","nvic","interrupt",node_2],
                             MF({
								 if((seriesMF.value == '2') || (seriesMF.value == '3') || (seriesMF.value == '4'))
								 { 
							       true 
								 }
								 else
								 {
								   false
								 }
								}, Boolean))
		
        vs_sr2_signal_in =  MVirtualSignal(hwres_sr2_scunode, "sr_irq2", "signal_in", true, false) /* required{}, exposeToUser{} */
        addUriElementRangeConstraint(node_2, MF({[2]}, List))
            
        ginterruptprio_sr0.maxPriority = MF_CPU_MAXINTRPRIO
        ginterruptprio_sr1.maxPriority = MF_CPU_MAXINTRPRIO
        ginterruptprio_sr2.maxPriority = MF_CPU_MAXINTRPRIO
    }

    // File Generation
    def generateFiles(){
        copy("global_scu_xmc1.c", "global_scu_xmc1.c")
        copy("global_scu_xmc1.h", "global_scu_xmc1.h")
        generate("global_scu_xmc1_confc.tmpl", "global_scu_xmc1_conf.c")
        generate("global_scu_xmc1_confh.tmpl", "global_scu_xmc1_conf.h")
        generate("global_scu_xmc1_externh.tmpl", "global_scu_xmc1_extern.h")
    }

}
